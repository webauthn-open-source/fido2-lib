var __defProp = Object.defineProperty;
var __export = (target2, all) => {
  for (var name in all)
    __defProp(target2, name, { get: all[name], enumerable: true });
};

// lib/utils.js
var utils_exports = {};
__export(utils_exports, {
  ab2str: () => ab2str,
  abToBuf: () => abToBuf,
  abToHex: () => abToHex,
  abToInt: () => abToInt,
  abToPem: () => abToPem,
  appendBuffer: () => appendBuffer,
  arrayBufferEquals: () => arrayBufferEquals,
  b64ToJsObject: () => b64ToJsObject,
  coerceToArrayBuffer: () => coerceToArrayBuffer,
  coerceToBase64: () => coerceToBase64,
  coerceToBase64Url: () => coerceToBase64Url,
  isBase64Url: () => isBase64Url,
  isPem: () => isPem,
  isPositiveInteger: () => isPositiveInteger,
  jsObjectToB64: () => jsObjectToB64,
  pemToBase64: () => pemToBase64,
  str2ab: () => str2ab,
  tools: () => toolbox_exports
});

// lib/toolbox.js
var toolbox_exports = {};
__export(toolbox_exports, {
  base64: () => base64,
  cbor: () => cbor_v1_5_exports,
  checkDomainOrUrl: () => checkDomainOrUrl,
  checkOrigin: () => checkOrigin,
  checkRpId: () => checkRpId,
  checkUrl: () => checkUrl,
  decodeProtectedHeader: () => decodeProtectedHeader,
  fromBER: () => fromBER2,
  getEmbeddedJwk: () => getEmbeddedJwk,
  getHostname: () => getHostname,
  hashDigest: () => hashDigest,
  importJWK: () => importJWK,
  jwtVerify: () => jwtVerify,
  pkijs: () => pkijs,
  randomValues: () => randomValues,
  verifySignature: () => verifySignature,
  webcrypto: () => webcrypto2
});

// deno:https://unpkg.com/tldts@6.1.11/dist/index.esm.min.js
function a(a2, o2) {
  let e2 = 0, i2 = a2.length, n2 = false;
  if (!o2) {
    if (a2.startsWith("data:")) return null;
    for (; e2 < a2.length && a2.charCodeAt(e2) <= 32; ) e2 += 1;
    for (; i2 > e2 + 1 && a2.charCodeAt(i2 - 1) <= 32; ) i2 -= 1;
    if (47 === a2.charCodeAt(e2) && 47 === a2.charCodeAt(e2 + 1)) e2 += 2;
    else {
      const o4 = a2.indexOf(":/", e2);
      if (-1 !== o4) {
        const i3 = o4 - e2, n3 = a2.charCodeAt(e2), s4 = a2.charCodeAt(e2 + 1), t3 = a2.charCodeAt(e2 + 2), r2 = a2.charCodeAt(e2 + 3), u2 = a2.charCodeAt(e2 + 4);
        if (5 === i3 && 104 === n3 && 116 === s4 && 116 === t3 && 112 === r2 && 115 === u2) ;
        else if (4 === i3 && 104 === n3 && 116 === s4 && 116 === t3 && 112 === r2) ;
        else if (3 === i3 && 119 === n3 && 115 === s4 && 115 === t3) ;
        else if (2 === i3 && 119 === n3 && 115 === s4) ;
        else for (let i4 = e2; i4 < o4; i4 += 1) {
          const o5 = 32 | a2.charCodeAt(i4);
          if (!(o5 >= 97 && o5 <= 122 || o5 >= 48 && o5 <= 57 || 46 === o5 || 45 === o5 || 43 === o5)) return null;
        }
        for (e2 = o4 + 2; 47 === a2.charCodeAt(e2); ) e2 += 1;
      }
    }
    let o3 = -1, s3 = -1, t2 = -1;
    for (let r2 = e2; r2 < i2; r2 += 1) {
      const e3 = a2.charCodeAt(r2);
      if (35 === e3 || 47 === e3 || 63 === e3) {
        i2 = r2;
        break;
      }
      64 === e3 ? o3 = r2 : 93 === e3 ? s3 = r2 : 58 === e3 ? t2 = r2 : e3 >= 65 && e3 <= 90 && (n2 = true);
    }
    if (-1 !== o3 && o3 > e2 && o3 < i2 && (e2 = o3 + 1), 91 === a2.charCodeAt(e2)) return -1 !== s3 ? a2.slice(e2 + 1, s3).toLowerCase() : null;
    -1 !== t2 && t2 > e2 && t2 < i2 && (i2 = t2);
  }
  for (; i2 > e2 + 1 && 46 === a2.charCodeAt(i2 - 1); ) i2 -= 1;
  const s2 = 0 !== e2 || i2 !== a2.length ? a2.slice(e2, i2) : a2;
  return n2 ? s2.toLowerCase() : s2;
}
function o(a2) {
  return a2 >= 97 && a2 <= 122 || a2 >= 48 && a2 <= 57 || a2 > 127;
}
function e(a2) {
  if (a2.length > 255) return false;
  if (0 === a2.length) return false;
  if (!o(a2.charCodeAt(0)) && 46 !== a2.charCodeAt(0) && 95 !== a2.charCodeAt(0)) return false;
  let e2 = -1, i2 = -1;
  const n2 = a2.length;
  for (let s2 = 0; s2 < n2; s2 += 1) {
    const n3 = a2.charCodeAt(s2);
    if (46 === n3) {
      if (s2 - e2 > 64 || 46 === i2 || 45 === i2 || 95 === i2) return false;
      e2 = s2;
    } else if (!o(n3) && 45 !== n3 && 95 !== n3) return false;
    i2 = n3;
  }
  return n2 - e2 - 1 <= 63 && 45 !== i2;
}
var i = function({ allowIcannDomains: a2 = true, allowPrivateDomains: o2 = false, detectIp: e2 = true, extractHostname: i2 = true, mixedInputs: n2 = true, validHosts: s2 = null, validateHostname: t2 = true }) {
  return {
    allowIcannDomains: a2,
    allowPrivateDomains: o2,
    detectIp: e2,
    extractHostname: i2,
    mixedInputs: n2,
    validHosts: s2,
    validateHostname: t2
  };
}({});
function n(o2, n2, s2, t2, r2) {
  const u2 = function(a2) {
    return void 0 === a2 ? i : function({ allowIcannDomains: a3 = true, allowPrivateDomains: o3 = false, detectIp: e2 = true, extractHostname: i2 = true, mixedInputs: n3 = true, validHosts: s3 = null, validateHostname: t3 = true }) {
      return {
        allowIcannDomains: a3,
        allowPrivateDomains: o3,
        detectIp: e2,
        extractHostname: i2,
        mixedInputs: n3,
        validHosts: s3,
        validateHostname: t3
      };
    }(a2);
  }(t2);
  return "string" != typeof o2 ? r2 : (u2.extractHostname ? u2.mixedInputs ? r2.hostname = a(o2, e(o2)) : r2.hostname = a(o2, false) : r2.hostname = o2, 0 === n2 || null === r2.hostname || u2.detectIp && (r2.isIp = function(a2) {
    if (a2.length < 3) return false;
    let o3 = a2.startsWith("[") ? 1 : 0, e2 = a2.length;
    if ("]" === a2[e2 - 1] && (e2 -= 1), e2 - o3 > 39) return false;
    let i2 = false;
    for (; o3 < e2; o3 += 1) {
      const e3 = a2.charCodeAt(o3);
      if (58 === e3) i2 = true;
      else if (!(e3 >= 48 && e3 <= 57 || e3 >= 97 && e3 <= 102 || e3 >= 65 && e3 <= 90)) return false;
    }
    return i2;
  }(l = r2.hostname) || function(a2) {
    if (a2.length < 7) return false;
    if (a2.length > 15) return false;
    let o3 = 0;
    for (let e2 = 0; e2 < a2.length; e2 += 1) {
      const i2 = a2.charCodeAt(e2);
      if (46 === i2) o3 += 1;
      else if (i2 < 48 || i2 > 57) return false;
    }
    return 3 === o3 && 46 !== a2.charCodeAt(0) && 46 !== a2.charCodeAt(a2.length - 1);
  }(l), r2.isIp) ? r2 : u2.validateHostname && u2.extractHostname && !e(r2.hostname) ? (r2.hostname = null, r2) : (s2(r2.hostname, u2, r2), 2 === n2 || null === r2.publicSuffix ? r2 : (r2.domain = function(a2, o3, e2) {
    if (null !== e2.validHosts) {
      const a3 = e2.validHosts;
      for (const e3 of a3) if (function(a4, o4) {
        return !!a4.endsWith(o4) && (a4.length === o4.length || "." === a4[a4.length - o4.length - 1]);
      }(o3, e3)) return e3;
    }
    let i2 = 0;
    if (o3.startsWith(".")) for (; i2 < o3.length && "." === o3[i2]; ) i2 += 1;
    return a2.length === o3.length - i2 ? null : function(a3, o4) {
      const e3 = a3.length - o4.length - 2, i3 = a3.lastIndexOf(".", e3);
      return -1 === i3 ? a3 : a3.slice(i3 + 1);
    }(o3, a2);
  }(r2.publicSuffix, r2.hostname, u2), 3 === n2 || null === r2.domain ? r2 : (r2.subdomain = function(a2, o3) {
    return o3.length === a2.length ? "" : a2.slice(0, -o3.length - 1);
  }(r2.hostname, r2.domain), 4 === n2 || (r2.domainWithoutSuffix = (m2 = r2.domain, c = r2.publicSuffix, m2.slice(0, -c.length - 1))), r2))));
  var l, m2, c;
}
var s = /* @__PURE__ */ function() {
  const a2 = [
    1,
    {}
  ], o2 = [
    0,
    {
      city: a2
    }
  ];
  return [
    0,
    {
      ck: [
        0,
        {
          www: a2
        }
      ],
      jp: [
        0,
        {
          kawasaki: o2,
          kitakyushu: o2,
          kobe: o2,
          nagoya: o2,
          sapporo: o2,
          sendai: o2,
          yokohama: o2
        }
      ]
    }
  ];
}();
var t = /* @__PURE__ */ function() {
  const a2 = [
    1,
    {}
  ], o2 = [
    2,
    {}
  ], e2 = [
    1,
    {
      gov: a2,
      com: a2,
      org: a2,
      net: a2,
      edu: a2
    }
  ], i2 = [
    0,
    {
      "*": o2
    }
  ], n2 = [
    1,
    {
      blogspot: o2
    }
  ], s2 = [
    1,
    {
      gov: a2
    }
  ], t2 = [
    0,
    {
      notebook: o2,
      studio: o2
    }
  ], r2 = [
    0,
    {
      notebook: o2
    }
  ], u2 = [
    0,
    {
      notebook: o2,
      "notebook-fips": o2,
      studio: o2
    }
  ], l = [
    0,
    {
      notebook: o2,
      "notebook-fips": o2,
      studio: o2,
      "studio-fips": o2
    }
  ], m2 = [
    0,
    {
      "*": a2
    }
  ], c = [
    0,
    {
      cloud: o2
    }
  ], d = [
    1,
    {
      co: o2
    }
  ], g = [
    2,
    {
      nodes: o2
    }
  ], k = [
    0,
    {
      s3: o2,
      "s3-accesspoint": o2,
      "s3-website": o2
    }
  ], h = [
    0,
    {
      s3: o2,
      "s3-accesspoint": o2
    }
  ], p = [
    0,
    {
      "execute-api": o2,
      "emrappui-prod": o2,
      "emrnotebooks-prod": o2,
      "emrstudio-prod": o2,
      dualstack: h,
      s3: o2,
      "s3-accesspoint": o2,
      "s3-object-lambda": o2,
      "s3-website": o2
    }
  ], b = [
    0,
    {
      direct: o2
    }
  ], y = [
    2,
    {
      id: o2
    }
  ], f = [
    0,
    {
      "webview-assets": o2
    }
  ], v = [
    0,
    {
      vfs: o2,
      "webview-assets": o2
    }
  ], w = [
    0,
    {
      "execute-api": o2,
      "emrappui-prod": o2,
      "emrnotebooks-prod": o2,
      "emrstudio-prod": o2,
      dualstack: k,
      s3: o2,
      "s3-accesspoint": o2,
      "s3-object-lambda": o2,
      "s3-website": o2,
      "aws-cloud9": f,
      cloud9: v
    }
  ], x = [
    0,
    {
      "execute-api": o2,
      "emrappui-prod": o2,
      "emrnotebooks-prod": o2,
      "emrstudio-prod": o2,
      dualstack: h,
      s3: o2,
      "s3-accesspoint": o2,
      "s3-object-lambda": o2,
      "s3-website": o2,
      "aws-cloud9": f,
      cloud9: v
    }
  ], z = [
    0,
    {
      "execute-api": o2,
      "emrappui-prod": o2,
      "emrnotebooks-prod": o2,
      "emrstudio-prod": o2,
      dualstack: k,
      s3: o2,
      "s3-accesspoint": o2,
      "s3-object-lambda": o2,
      "s3-website": o2,
      "analytics-gateway": o2,
      "aws-cloud9": f,
      cloud9: v
    }
  ], j = [
    0,
    {
      "execute-api": o2,
      dualstack: h,
      s3: o2,
      "s3-accesspoint": o2,
      "s3-object-lambda": o2,
      "s3-website": o2
    }
  ], q = [
    0,
    {
      s3: o2,
      "s3-accesspoint": o2,
      "s3-accesspoint-fips": o2,
      "s3-fips": o2,
      "s3-website": o2
    }
  ], I = [
    0,
    {
      "execute-api": o2,
      "emrappui-prod": o2,
      "emrnotebooks-prod": o2,
      "emrstudio-prod": o2,
      dualstack: q,
      s3: o2,
      "s3-accesspoint": o2,
      "s3-accesspoint-fips": o2,
      "s3-fips": o2,
      "s3-object-lambda": o2,
      "s3-website": o2,
      "aws-cloud9": f,
      cloud9: v
    }
  ], S = [
    0,
    {
      s3: o2,
      "s3-accesspoint": o2,
      "s3-accesspoint-fips": o2,
      "s3-fips": o2
    }
  ], C = [
    0,
    {
      "execute-api": o2,
      "emrappui-prod": o2,
      "emrnotebooks-prod": o2,
      "emrstudio-prod": o2,
      dualstack: S,
      s3: o2,
      "s3-accesspoint": o2,
      "s3-accesspoint-fips": o2,
      "s3-fips": o2,
      "s3-object-lambda": o2,
      "s3-website": o2
    }
  ], A = [
    0,
    {
      auth: o2
    }
  ], P = [
    0,
    {
      auth: o2,
      "auth-fips": o2
    }
  ], H = [
    0,
    {
      apps: o2
    }
  ], W = [
    0,
    {
      paas: o2
    }
  ], D = [
    0,
    {
      app: o2
    }
  ], O = [
    2,
    {
      eu: o2
    }
  ], L = [
    0,
    {
      site: o2
    }
  ], B = [
    0,
    {
      pages: o2
    }
  ], E = [
    1,
    {
      com: a2,
      edu: a2,
      net: a2,
      org: a2
    }
  ], F = [
    0,
    {
      j: o2
    }
  ], G = [
    0,
    {
      jelastic: o2
    }
  ], J = [
    0,
    {
      user: o2
    }
  ], K = [
    1,
    {
      ybo: o2
    }
  ], M = [
    0,
    {
      cust: o2,
      reservd: o2
    }
  ], N = [
    0,
    {
      cust: o2
    }
  ], Q = [
    1,
    {
      gov: a2,
      edu: a2,
      mil: a2,
      com: a2,
      org: a2,
      net: a2
    }
  ], R = [
    0,
    {
      s3: o2
    }
  ], T = [
    1,
    {
      edu: a2,
      biz: a2,
      net: a2,
      org: a2,
      gov: a2,
      info: a2,
      com: a2
    }
  ], U = [
    1,
    {
      gov: a2,
      blogspot: o2
    }
  ], V = [
    1,
    {
      framer: o2
    }
  ], X2 = [
    1,
    {
      barsy: o2
    }
  ], Y2 = [
    0,
    {
      forgot: o2
    }
  ], Z = [
    1,
    {
      gs: a2
    }
  ], $ = [
    0,
    {
      nes: a2
    }
  ], _ = [
    1,
    {
      k12: a2,
      cc: a2,
      lib: a2
    }
  ], aa = [
    1,
    {
      cc: a2,
      lib: a2
    }
  ];
  return [
    0,
    {
      ac: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          net: a2,
          mil: a2,
          org: a2,
          drr: o2
        }
      ],
      ad: [
        1,
        {
          nom: a2
        }
      ],
      ae: [
        1,
        {
          co: a2,
          net: a2,
          org: a2,
          sch: a2,
          ac: a2,
          gov: a2,
          mil: a2,
          blogspot: o2
        }
      ],
      aero: [
        1,
        {
          "accident-investigation": a2,
          "accident-prevention": a2,
          aerobatic: a2,
          aeroclub: a2,
          aerodrome: a2,
          agents: a2,
          aircraft: a2,
          airline: a2,
          airport: a2,
          "air-surveillance": a2,
          airtraffic: a2,
          "air-traffic-control": a2,
          ambulance: a2,
          amusement: a2,
          association: a2,
          author: a2,
          ballooning: a2,
          broker: a2,
          caa: a2,
          cargo: a2,
          catering: a2,
          certification: a2,
          championship: a2,
          charter: a2,
          civilaviation: a2,
          club: a2,
          conference: a2,
          consultant: a2,
          consulting: a2,
          control: a2,
          council: a2,
          crew: a2,
          design: a2,
          dgca: a2,
          educator: a2,
          emergency: a2,
          engine: a2,
          engineer: a2,
          entertainment: a2,
          equipment: a2,
          exchange: a2,
          express: a2,
          federation: a2,
          flight: a2,
          fuel: a2,
          gliding: a2,
          government: a2,
          groundhandling: a2,
          group: a2,
          hanggliding: a2,
          homebuilt: a2,
          insurance: a2,
          journal: a2,
          journalist: a2,
          leasing: a2,
          logistics: a2,
          magazine: a2,
          maintenance: a2,
          media: a2,
          microlight: a2,
          modelling: a2,
          navigation: a2,
          parachuting: a2,
          paragliding: a2,
          "passenger-association": a2,
          pilot: a2,
          press: a2,
          production: a2,
          recreation: a2,
          repbody: a2,
          res: a2,
          research: a2,
          rotorcraft: a2,
          safety: a2,
          scientist: a2,
          services: a2,
          show: a2,
          skydiving: a2,
          software: a2,
          student: a2,
          trader: a2,
          trading: a2,
          trainer: a2,
          union: a2,
          workinggroup: a2,
          works: a2
        }
      ],
      af: e2,
      ag: [
        1,
        {
          com: a2,
          org: a2,
          net: a2,
          co: a2,
          nom: a2
        }
      ],
      ai: [
        1,
        {
          off: a2,
          com: a2,
          net: a2,
          org: a2,
          uwu: o2
        }
      ],
      al: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          mil: a2,
          net: a2,
          org: a2,
          blogspot: o2
        }
      ],
      am: [
        1,
        {
          co: a2,
          com: a2,
          commune: a2,
          net: a2,
          org: a2,
          radio: o2,
          blogspot: o2,
          neko: o2,
          nyaa: o2
        }
      ],
      ao: [
        1,
        {
          ed: a2,
          gv: a2,
          og: a2,
          co: a2,
          pb: a2,
          it: a2
        }
      ],
      aq: a2,
      ar: [
        1,
        {
          bet: a2,
          com: n2,
          coop: a2,
          edu: a2,
          gob: a2,
          gov: a2,
          int: a2,
          mil: a2,
          musica: a2,
          mutual: a2,
          net: a2,
          org: a2,
          senasa: a2,
          tur: a2
        }
      ],
      arpa: [
        1,
        {
          e164: a2,
          "in-addr": a2,
          ip6: a2,
          iris: a2,
          uri: a2,
          urn: a2
        }
      ],
      as: s2,
      asia: [
        1,
        {
          cloudns: o2
        }
      ],
      at: [
        1,
        {
          ac: [
            1,
            {
              sth: a2
            }
          ],
          co: n2,
          gv: a2,
          or: a2,
          funkfeuer: [
            0,
            {
              wien: o2
            }
          ],
          futurecms: [
            0,
            {
              "*": o2,
              ex: i2,
              in: i2
            }
          ],
          futurehosting: o2,
          futuremailing: o2,
          ortsinfo: [
            0,
            {
              ex: i2,
              kunden: i2
            }
          ],
          biz: o2,
          info: o2,
          "123webseite": o2,
          priv: o2,
          myspreadshop: o2,
          "12hp": o2,
          "2ix": o2,
          "4lima": o2,
          "lima-city": o2
        }
      ],
      au: [
        1,
        {
          com: [
            1,
            {
              blogspot: o2,
              cloudlets: [
                0,
                {
                  mel: o2
                }
              ],
              myspreadshop: o2
            }
          ],
          net: a2,
          org: a2,
          edu: [
            1,
            {
              act: a2,
              catholic: a2,
              nsw: [
                1,
                {
                  schools: a2
                }
              ],
              nt: a2,
              qld: a2,
              sa: a2,
              tas: a2,
              vic: a2,
              wa: a2
            }
          ],
          gov: [
            1,
            {
              qld: a2,
              sa: a2,
              tas: a2,
              vic: a2,
              wa: a2
            }
          ],
          asn: a2,
          id: a2,
          info: a2,
          conf: a2,
          oz: a2,
          act: a2,
          nsw: a2,
          nt: a2,
          qld: a2,
          sa: a2,
          tas: a2,
          vic: a2,
          wa: a2
        }
      ],
      aw: [
        1,
        {
          com: a2
        }
      ],
      ax: [
        1,
        {
          be: o2,
          cat: o2,
          es: o2,
          eu: o2,
          gg: o2,
          mc: o2,
          us: o2,
          xy: o2
        }
      ],
      az: [
        1,
        {
          com: a2,
          net: a2,
          int: a2,
          gov: a2,
          org: a2,
          edu: a2,
          info: a2,
          pp: a2,
          mil: a2,
          name: a2,
          pro: a2,
          biz: a2
        }
      ],
      ba: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          mil: a2,
          net: a2,
          org: a2,
          rs: o2,
          blogspot: o2
        }
      ],
      bb: [
        1,
        {
          biz: a2,
          co: a2,
          com: a2,
          edu: a2,
          gov: a2,
          info: a2,
          net: a2,
          org: a2,
          store: a2,
          tv: a2
        }
      ],
      bd: m2,
      be: [
        1,
        {
          ac: a2,
          webhosting: o2,
          blogspot: o2,
          interhostsolutions: c,
          kuleuven: [
            0,
            {
              ezproxy: o2
            }
          ],
          "123website": o2,
          myspreadshop: o2,
          transurl: i2
        }
      ],
      bf: s2,
      bg: [
        1,
        {
          0: a2,
          1: a2,
          2: a2,
          3: a2,
          4: a2,
          5: a2,
          6: a2,
          7: a2,
          8: a2,
          9: a2,
          a: a2,
          b: a2,
          c: a2,
          d: a2,
          e: a2,
          f: a2,
          g: a2,
          h: a2,
          i: a2,
          j: a2,
          k: a2,
          l: a2,
          m: a2,
          n: a2,
          o: a2,
          p: a2,
          q: a2,
          r: a2,
          s: a2,
          t: a2,
          u: a2,
          v: a2,
          w: a2,
          x: a2,
          y: a2,
          z: a2,
          blogspot: o2,
          barsy: o2
        }
      ],
      bh: e2,
      bi: [
        1,
        {
          co: a2,
          com: a2,
          edu: a2,
          or: a2,
          org: a2
        }
      ],
      biz: [
        1,
        {
          activetrail: o2,
          cloudns: o2,
          jozi: o2,
          dyndns: o2,
          "for-better": o2,
          "for-more": o2,
          "for-some": o2,
          "for-the": o2,
          selfip: o2,
          webhop: o2,
          orx: o2,
          mmafan: o2,
          myftp: o2,
          "no-ip": o2,
          dscloud: o2
        }
      ],
      bj: [
        1,
        {
          africa: a2,
          agro: a2,
          architectes: a2,
          assur: a2,
          avocats: a2,
          co: a2,
          com: a2,
          eco: a2,
          econo: a2,
          edu: a2,
          info: a2,
          loisirs: a2,
          money: a2,
          net: a2,
          org: a2,
          ote: a2,
          resto: a2,
          restaurant: a2,
          tourism: a2,
          univ: a2,
          blogspot: o2
        }
      ],
      bm: e2,
      bn: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          net: a2,
          org: a2,
          co: o2
        }
      ],
      bo: [
        1,
        {
          com: a2,
          edu: a2,
          gob: a2,
          int: a2,
          org: a2,
          net: a2,
          mil: a2,
          tv: a2,
          web: a2,
          academia: a2,
          agro: a2,
          arte: a2,
          blog: a2,
          bolivia: a2,
          ciencia: a2,
          cooperativa: a2,
          democracia: a2,
          deporte: a2,
          ecologia: a2,
          economia: a2,
          empresa: a2,
          indigena: a2,
          industria: a2,
          info: a2,
          medicina: a2,
          movimiento: a2,
          musica: a2,
          natural: a2,
          nombre: a2,
          noticias: a2,
          patria: a2,
          politica: a2,
          profesional: a2,
          plurinacional: a2,
          pueblo: a2,
          revista: a2,
          salud: a2,
          tecnologia: a2,
          tksat: a2,
          transporte: a2,
          wiki: a2
        }
      ],
      br: [
        1,
        {
          "9guacu": a2,
          abc: a2,
          adm: a2,
          adv: a2,
          agr: a2,
          aju: a2,
          am: a2,
          anani: a2,
          aparecida: a2,
          app: a2,
          arq: a2,
          art: a2,
          ato: a2,
          b: a2,
          barueri: a2,
          belem: a2,
          bhz: a2,
          bib: a2,
          bio: a2,
          blog: a2,
          bmd: a2,
          boavista: a2,
          bsb: a2,
          campinagrande: a2,
          campinas: a2,
          caxias: a2,
          cim: a2,
          cng: a2,
          cnt: a2,
          com: [
            1,
            {
              blogspot: o2,
              simplesite: o2
            }
          ],
          contagem: a2,
          coop: a2,
          coz: a2,
          cri: a2,
          cuiaba: a2,
          curitiba: a2,
          def: a2,
          des: a2,
          det: a2,
          dev: a2,
          ecn: a2,
          eco: a2,
          edu: a2,
          emp: a2,
          enf: a2,
          eng: a2,
          esp: a2,
          etc: a2,
          eti: a2,
          far: a2,
          feira: a2,
          flog: a2,
          floripa: a2,
          fm: a2,
          fnd: a2,
          fortal: a2,
          fot: a2,
          foz: a2,
          fst: a2,
          g12: a2,
          geo: a2,
          ggf: a2,
          goiania: a2,
          gov: [
            1,
            {
              ac: a2,
              al: a2,
              am: a2,
              ap: a2,
              ba: a2,
              ce: a2,
              df: a2,
              es: a2,
              go: a2,
              ma: a2,
              mg: a2,
              ms: a2,
              mt: a2,
              pa: a2,
              pb: a2,
              pe: a2,
              pi: a2,
              pr: a2,
              rj: a2,
              rn: a2,
              ro: a2,
              rr: a2,
              rs: a2,
              sc: a2,
              se: a2,
              sp: a2,
              to: a2
            }
          ],
          gru: a2,
          imb: a2,
          ind: a2,
          inf: a2,
          jab: a2,
          jampa: a2,
          jdf: a2,
          joinville: a2,
          jor: a2,
          jus: a2,
          leg: [
            1,
            {
              ac: o2,
              al: o2,
              am: o2,
              ap: o2,
              ba: o2,
              ce: o2,
              df: o2,
              es: o2,
              go: o2,
              ma: o2,
              mg: o2,
              ms: o2,
              mt: o2,
              pa: o2,
              pb: o2,
              pe: o2,
              pi: o2,
              pr: o2,
              rj: o2,
              rn: o2,
              ro: o2,
              rr: o2,
              rs: o2,
              sc: o2,
              se: o2,
              sp: o2,
              to: o2
            }
          ],
          lel: a2,
          log: a2,
          londrina: a2,
          macapa: a2,
          maceio: a2,
          manaus: a2,
          maringa: a2,
          mat: a2,
          med: a2,
          mil: a2,
          morena: a2,
          mp: a2,
          mus: a2,
          natal: a2,
          net: a2,
          niteroi: a2,
          nom: m2,
          not: a2,
          ntr: a2,
          odo: a2,
          ong: a2,
          org: a2,
          osasco: a2,
          palmas: a2,
          poa: a2,
          ppg: a2,
          pro: a2,
          psc: a2,
          psi: a2,
          pvh: a2,
          qsl: a2,
          radio: a2,
          rec: a2,
          recife: a2,
          rep: a2,
          ribeirao: a2,
          rio: a2,
          riobranco: a2,
          riopreto: a2,
          salvador: a2,
          sampa: a2,
          santamaria: a2,
          santoandre: a2,
          saobernardo: a2,
          saogonca: a2,
          seg: a2,
          sjc: a2,
          slg: a2,
          slz: a2,
          sorocaba: a2,
          srv: a2,
          taxi: a2,
          tc: a2,
          tec: a2,
          teo: a2,
          the: a2,
          tmp: a2,
          trd: a2,
          tur: a2,
          tv: a2,
          udi: a2,
          vet: a2,
          vix: a2,
          vlog: a2,
          wiki: a2,
          zlg: a2
        }
      ],
      bs: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          edu: a2,
          gov: a2,
          we: o2
        }
      ],
      bt: e2,
      bv: a2,
      bw: [
        1,
        {
          co: a2,
          org: a2
        }
      ],
      by: [
        1,
        {
          gov: a2,
          mil: a2,
          com: n2,
          of: a2,
          mycloud: o2,
          mediatech: o2
        }
      ],
      bz: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          edu: a2,
          gov: a2,
          za: o2,
          gsj: o2
        }
      ],
      ca: [
        1,
        {
          ab: a2,
          bc: a2,
          mb: a2,
          nb: a2,
          nf: a2,
          nl: a2,
          ns: a2,
          nt: a2,
          nu: a2,
          on: a2,
          pe: a2,
          qc: a2,
          sk: a2,
          yk: a2,
          gc: a2,
          barsy: o2,
          awdev: i2,
          co: o2,
          blogspot: o2,
          "no-ip": o2,
          myspreadshop: o2
        }
      ],
      cat: a2,
      cc: [
        1,
        {
          cloudns: o2,
          ftpaccess: o2,
          "game-server": o2,
          myphotos: o2,
          scrapping: o2,
          twmail: o2,
          csx: o2,
          fantasyleague: o2,
          spawn: [
            0,
            {
              instances: o2
            }
          ]
        }
      ],
      cd: s2,
      cf: n2,
      cg: a2,
      ch: [
        1,
        {
          square7: o2,
          blogspot: o2,
          flow: [
            0,
            {
              ae: [
                0,
                {
                  alp1: o2
                }
              ],
              appengine: o2
            }
          ],
          "linkyard-cloud": o2,
          dnsking: o2,
          gotdns: o2,
          "123website": o2,
          myspreadshop: o2,
          firenet: [
            0,
            {
              "*": o2,
              svc: i2
            }
          ],
          "12hp": o2,
          "2ix": o2,
          "4lima": o2,
          "lima-city": o2
        }
      ],
      ci: [
        1,
        {
          org: a2,
          or: a2,
          com: a2,
          co: a2,
          edu: a2,
          ed: a2,
          ac: a2,
          net: a2,
          go: a2,
          asso: a2,
          "xn--aroport-bya": a2,
          "a\xE9roport": a2,
          int: a2,
          presse: a2,
          md: a2,
          gouv: a2,
          fin: o2,
          nl: o2
        }
      ],
      ck: m2,
      cl: [
        1,
        {
          co: a2,
          gob: a2,
          gov: a2,
          mil: a2,
          blogspot: o2
        }
      ],
      cm: [
        1,
        {
          co: a2,
          com: a2,
          gov: a2,
          net: a2
        }
      ],
      cn: [
        1,
        {
          ac: a2,
          com: [
            1,
            {
              amazonaws: [
                0,
                {
                  "cn-north-1": [
                    0,
                    {
                      "execute-api": o2,
                      "emrappui-prod": o2,
                      "emrnotebooks-prod": o2,
                      "emrstudio-prod": o2,
                      dualstack: k,
                      s3: o2,
                      "s3-accesspoint": o2,
                      "s3-deprecated": o2,
                      "s3-object-lambda": o2,
                      "s3-website": o2
                    }
                  ],
                  "cn-northwest-1": p,
                  compute: i2,
                  airflow: [
                    0,
                    {
                      "cn-north-1": i2,
                      "cn-northwest-1": i2
                    }
                  ],
                  eb: [
                    0,
                    {
                      "cn-north-1": o2,
                      "cn-northwest-1": o2
                    }
                  ],
                  elb: i2
                }
              ],
              sagemaker: [
                0,
                {
                  "cn-north-1": t2,
                  "cn-northwest-1": t2
                }
              ]
            }
          ],
          edu: a2,
          gov: a2,
          net: a2,
          org: a2,
          mil: a2,
          "xn--55qx5d": a2,
          "\u516C\u53F8": a2,
          "xn--io0a7i": a2,
          "\u7F51\u7EDC": a2,
          "xn--od0alg": a2,
          "\u7DB2\u7D61": a2,
          ah: a2,
          bj: a2,
          cq: a2,
          fj: a2,
          gd: a2,
          gs: a2,
          gz: a2,
          gx: a2,
          ha: a2,
          hb: a2,
          he: a2,
          hi: a2,
          hl: a2,
          hn: a2,
          jl: a2,
          js: a2,
          jx: a2,
          ln: a2,
          nm: a2,
          nx: a2,
          qh: a2,
          sc: a2,
          sd: a2,
          sh: a2,
          sn: a2,
          sx: a2,
          tj: a2,
          xj: a2,
          xz: a2,
          yn: a2,
          zj: a2,
          hk: a2,
          mo: a2,
          tw: a2,
          "canva-apps": o2,
          instantcloud: o2,
          quickconnect: b
        }
      ],
      co: [
        1,
        {
          arts: a2,
          com: n2,
          edu: a2,
          firm: a2,
          gov: a2,
          info: a2,
          int: a2,
          mil: a2,
          net: a2,
          nom: a2,
          org: a2,
          rec: a2,
          web: a2,
          carrd: o2,
          crd: o2,
          otap: i2,
          leadpages: o2,
          lpages: o2,
          mypi: o2,
          n4t: o2,
          firewalledreplit: y,
          repl: y,
          supabase: o2
        }
      ],
      com: [
        1,
        {
          a2hosted: o2,
          cpserver: o2,
          devcdnaccesso: i2,
          adobeaemcloud: [
            2,
            {
              dev: i2
            }
          ],
          airkitapps: o2,
          "airkitapps-au": o2,
          aivencloud: o2,
          kasserver: o2,
          amazonaws: [
            0,
            {
              "af-south-1": w,
              "ap-east-1": x,
              "ap-northeast-1": z,
              "ap-northeast-2": z,
              "ap-northeast-3": w,
              "ap-south-1": z,
              "ap-south-2": j,
              "ap-southeast-1": z,
              "ap-southeast-2": z,
              "ap-southeast-3": p,
              "ap-southeast-4": j,
              "ca-central-1": I,
              "ca-west-1": [
                0,
                {
                  "execute-api": o2,
                  dualstack: q,
                  s3: o2,
                  "s3-accesspoint": o2,
                  "s3-accesspoint-fips": o2,
                  "s3-fips": o2,
                  "s3-website": o2
                }
              ],
              "eu-central-1": z,
              "eu-central-2": j,
              "eu-north-1": x,
              "eu-south-1": w,
              "eu-south-2": j,
              "eu-west-1": [
                0,
                {
                  "execute-api": o2,
                  "emrappui-prod": o2,
                  "emrnotebooks-prod": o2,
                  "emrstudio-prod": o2,
                  dualstack: k,
                  s3: o2,
                  "s3-accesspoint": o2,
                  "s3-deprecated": o2,
                  "s3-object-lambda": o2,
                  "s3-website": o2,
                  "analytics-gateway": o2,
                  "aws-cloud9": f,
                  cloud9: v
                }
              ],
              "eu-west-2": x,
              "eu-west-3": w,
              "il-central-1": [
                0,
                {
                  "execute-api": o2,
                  dualstack: h,
                  s3: o2,
                  "s3-accesspoint": o2,
                  "s3-object-lambda": o2,
                  "s3-website": o2,
                  "aws-cloud9": f,
                  cloud9: [
                    0,
                    {
                      vfs: o2
                    }
                  ]
                }
              ],
              "me-central-1": p,
              "me-south-1": x,
              "sa-east-1": w,
              "us-east-1": [
                2,
                {
                  "execute-api": o2,
                  "emrappui-prod": o2,
                  "emrnotebooks-prod": o2,
                  "emrstudio-prod": o2,
                  dualstack: q,
                  s3: o2,
                  "s3-accesspoint": o2,
                  "s3-accesspoint-fips": o2,
                  "s3-deprecated": o2,
                  "s3-fips": o2,
                  "s3-object-lambda": o2,
                  "s3-website": o2,
                  "analytics-gateway": o2,
                  "aws-cloud9": f,
                  cloud9: v
                }
              ],
              "us-east-2": [
                0,
                {
                  "execute-api": o2,
                  "emrappui-prod": o2,
                  "emrnotebooks-prod": o2,
                  "emrstudio-prod": o2,
                  dualstack: S,
                  s3: o2,
                  "s3-accesspoint": o2,
                  "s3-accesspoint-fips": o2,
                  "s3-deprecated": o2,
                  "s3-fips": o2,
                  "s3-object-lambda": o2,
                  "s3-website": o2,
                  "analytics-gateway": o2,
                  "aws-cloud9": f,
                  cloud9: v
                }
              ],
              "us-gov-east-1": C,
              "us-gov-west-1": C,
              "us-west-1": I,
              "us-west-2": [
                0,
                {
                  "execute-api": o2,
                  "emrappui-prod": o2,
                  "emrnotebooks-prod": o2,
                  "emrstudio-prod": o2,
                  dualstack: q,
                  s3: o2,
                  "s3-accesspoint": o2,
                  "s3-accesspoint-fips": o2,
                  "s3-deprecated": o2,
                  "s3-fips": o2,
                  "s3-object-lambda": o2,
                  "s3-website": o2,
                  "analytics-gateway": o2,
                  "aws-cloud9": f,
                  cloud9: v
                }
              ],
              compute: i2,
              "compute-1": i2,
              airflow: [
                0,
                {
                  "ap-northeast-1": i2,
                  "ap-northeast-2": i2,
                  "ap-south-1": i2,
                  "ap-southeast-1": i2,
                  "ap-southeast-2": i2,
                  "ca-central-1": i2,
                  "eu-central-1": i2,
                  "eu-north-1": i2,
                  "eu-west-1": i2,
                  "eu-west-2": i2,
                  "eu-west-3": i2,
                  "sa-east-1": i2,
                  "us-east-1": i2,
                  "us-east-2": i2,
                  "us-west-2": i2
                }
              ],
              s3: o2,
              "s3-1": o2,
              "s3-ap-east-1": o2,
              "s3-ap-northeast-1": o2,
              "s3-ap-northeast-2": o2,
              "s3-ap-northeast-3": o2,
              "s3-ap-south-1": o2,
              "s3-ap-southeast-1": o2,
              "s3-ap-southeast-2": o2,
              "s3-ca-central-1": o2,
              "s3-eu-central-1": o2,
              "s3-eu-north-1": o2,
              "s3-eu-west-1": o2,
              "s3-eu-west-2": o2,
              "s3-eu-west-3": o2,
              "s3-external-1": o2,
              "s3-fips-us-gov-east-1": o2,
              "s3-fips-us-gov-west-1": o2,
              "s3-global": [
                0,
                {
                  accesspoint: [
                    0,
                    {
                      mrap: o2
                    }
                  ]
                }
              ],
              "s3-me-south-1": o2,
              "s3-sa-east-1": o2,
              "s3-us-east-2": o2,
              "s3-us-gov-east-1": o2,
              "s3-us-gov-west-1": o2,
              "s3-us-west-1": o2,
              "s3-us-west-2": o2,
              "s3-website-ap-northeast-1": o2,
              "s3-website-ap-southeast-1": o2,
              "s3-website-ap-southeast-2": o2,
              "s3-website-eu-west-1": o2,
              "s3-website-sa-east-1": o2,
              "s3-website-us-east-1": o2,
              "s3-website-us-gov-west-1": o2,
              "s3-website-us-west-1": o2,
              "s3-website-us-west-2": o2,
              elb: i2
            }
          ],
          amazoncognito: [
            0,
            {
              "af-south-1": A,
              "ap-northeast-1": A,
              "ap-northeast-2": A,
              "ap-northeast-3": A,
              "ap-south-1": A,
              "ap-southeast-1": A,
              "ap-southeast-2": A,
              "ap-southeast-3": A,
              "ca-central-1": A,
              "eu-central-1": A,
              "eu-north-1": A,
              "eu-south-1": A,
              "eu-west-1": A,
              "eu-west-2": A,
              "eu-west-3": A,
              "il-central-1": A,
              "me-south-1": A,
              "sa-east-1": A,
              "us-east-1": P,
              "us-east-2": P,
              "us-gov-west-1": [
                0,
                {
                  "auth-fips": o2
                }
              ],
              "us-west-1": P,
              "us-west-2": P
            }
          ],
          amplifyapp: i2,
          awsapprunner: i2,
          elasticbeanstalk: [
            2,
            {
              "af-south-1": o2,
              "ap-east-1": o2,
              "ap-northeast-1": o2,
              "ap-northeast-2": o2,
              "ap-northeast-3": o2,
              "ap-south-1": o2,
              "ap-southeast-1": o2,
              "ap-southeast-2": o2,
              "ap-southeast-3": o2,
              "ca-central-1": o2,
              "eu-central-1": o2,
              "eu-north-1": o2,
              "eu-south-1": o2,
              "eu-west-1": o2,
              "eu-west-2": o2,
              "eu-west-3": o2,
              "il-central-1": o2,
              "me-south-1": o2,
              "sa-east-1": o2,
              "us-east-1": o2,
              "us-east-2": o2,
              "us-gov-east-1": o2,
              "us-gov-west-1": o2,
              "us-west-1": o2,
              "us-west-2": o2
            }
          ],
          awsglobalaccelerator: o2,
          siiites: o2,
          appspacehosted: o2,
          appspaceusercontent: o2,
          "on-aptible": o2,
          myasustor: o2,
          "balena-devices": o2,
          betainabox: o2,
          boutir: o2,
          bplaced: o2,
          cafjs: o2,
          "canva-apps": o2,
          br: o2,
          cn: o2,
          de: o2,
          eu: o2,
          jpn: o2,
          mex: o2,
          ru: o2,
          sa: o2,
          uk: o2,
          us: o2,
          za: o2,
          ar: o2,
          hu: o2,
          kr: o2,
          no: o2,
          qc: o2,
          uy: o2,
          africa: o2,
          gr: o2,
          co: o2,
          jdevcloud: o2,
          wpdevcloud: o2,
          cloudcontrolled: o2,
          cloudcontrolapp: o2,
          "cf-ipfs": o2,
          "cloudflare-ipfs": o2,
          trycloudflare: o2,
          cprapid: i2,
          "customer-oci": [
            0,
            {
              "*": o2,
              oci: i2,
              ocp: i2,
              ocs: i2
            }
          ],
          "cyclic-app": o2,
          dattolocal: o2,
          dattorelay: o2,
          dattoweb: o2,
          mydatto: o2,
          builtwithdark: o2,
          datadetect: [
            0,
            {
              demo: o2,
              instance: o2
            }
          ],
          ddns5: o2,
          discordsays: o2,
          discordsez: o2,
          drayddns: o2,
          dreamhosters: o2,
          mydrobo: o2,
          "dyndns-at-home": o2,
          "dyndns-at-work": o2,
          "dyndns-blog": o2,
          "dyndns-free": o2,
          "dyndns-home": o2,
          "dyndns-ip": o2,
          "dyndns-mail": o2,
          "dyndns-office": o2,
          "dyndns-pics": o2,
          "dyndns-remote": o2,
          "dyndns-server": o2,
          "dyndns-web": o2,
          "dyndns-wiki": o2,
          "dyndns-work": o2,
          blogdns: o2,
          cechire: o2,
          dnsalias: o2,
          dnsdojo: o2,
          doesntexist: o2,
          dontexist: o2,
          doomdns: o2,
          "dyn-o-saur": o2,
          dynalias: o2,
          "est-a-la-maison": o2,
          "est-a-la-masion": o2,
          "est-le-patron": o2,
          "est-mon-blogueur": o2,
          "from-ak": o2,
          "from-al": o2,
          "from-ar": o2,
          "from-ca": o2,
          "from-ct": o2,
          "from-dc": o2,
          "from-de": o2,
          "from-fl": o2,
          "from-ga": o2,
          "from-hi": o2,
          "from-ia": o2,
          "from-id": o2,
          "from-il": o2,
          "from-in": o2,
          "from-ks": o2,
          "from-ky": o2,
          "from-ma": o2,
          "from-md": o2,
          "from-mi": o2,
          "from-mn": o2,
          "from-mo": o2,
          "from-ms": o2,
          "from-mt": o2,
          "from-nc": o2,
          "from-nd": o2,
          "from-ne": o2,
          "from-nh": o2,
          "from-nj": o2,
          "from-nm": o2,
          "from-nv": o2,
          "from-oh": o2,
          "from-ok": o2,
          "from-or": o2,
          "from-pa": o2,
          "from-pr": o2,
          "from-ri": o2,
          "from-sc": o2,
          "from-sd": o2,
          "from-tn": o2,
          "from-tx": o2,
          "from-ut": o2,
          "from-va": o2,
          "from-vt": o2,
          "from-wa": o2,
          "from-wi": o2,
          "from-wv": o2,
          "from-wy": o2,
          getmyip: o2,
          gotdns: o2,
          "hobby-site": o2,
          homelinux: o2,
          homeunix: o2,
          iamallama: o2,
          "is-a-anarchist": o2,
          "is-a-blogger": o2,
          "is-a-bookkeeper": o2,
          "is-a-bulls-fan": o2,
          "is-a-caterer": o2,
          "is-a-chef": o2,
          "is-a-conservative": o2,
          "is-a-cpa": o2,
          "is-a-cubicle-slave": o2,
          "is-a-democrat": o2,
          "is-a-designer": o2,
          "is-a-doctor": o2,
          "is-a-financialadvisor": o2,
          "is-a-geek": o2,
          "is-a-green": o2,
          "is-a-guru": o2,
          "is-a-hard-worker": o2,
          "is-a-hunter": o2,
          "is-a-landscaper": o2,
          "is-a-lawyer": o2,
          "is-a-liberal": o2,
          "is-a-libertarian": o2,
          "is-a-llama": o2,
          "is-a-musician": o2,
          "is-a-nascarfan": o2,
          "is-a-nurse": o2,
          "is-a-painter": o2,
          "is-a-personaltrainer": o2,
          "is-a-photographer": o2,
          "is-a-player": o2,
          "is-a-republican": o2,
          "is-a-rockstar": o2,
          "is-a-socialist": o2,
          "is-a-student": o2,
          "is-a-teacher": o2,
          "is-a-techie": o2,
          "is-a-therapist": o2,
          "is-an-accountant": o2,
          "is-an-actor": o2,
          "is-an-actress": o2,
          "is-an-anarchist": o2,
          "is-an-artist": o2,
          "is-an-engineer": o2,
          "is-an-entertainer": o2,
          "is-certified": o2,
          "is-gone": o2,
          "is-into-anime": o2,
          "is-into-cars": o2,
          "is-into-cartoons": o2,
          "is-into-games": o2,
          "is-leet": o2,
          "is-not-certified": o2,
          "is-slick": o2,
          "is-uberleet": o2,
          "is-with-theband": o2,
          "isa-geek": o2,
          "isa-hockeynut": o2,
          issmarterthanyou: o2,
          "likes-pie": o2,
          likescandy: o2,
          "neat-url": o2,
          "saves-the-whales": o2,
          selfip: o2,
          "sells-for-less": o2,
          "sells-for-u": o2,
          servebbs: o2,
          "simple-url": o2,
          "space-to-rent": o2,
          "teaches-yoga": o2,
          writesthisblog: o2,
          digitaloceanspaces: i2,
          ddnsfree: o2,
          ddnsgeek: o2,
          giize: o2,
          gleeze: o2,
          kozow: o2,
          loseyourip: o2,
          ooguy: o2,
          theworkpc: o2,
          mytuleap: o2,
          "tuleap-partners": o2,
          encoreapi: o2,
          evennode: [
            0,
            {
              "eu-1": o2,
              "eu-2": o2,
              "eu-3": o2,
              "eu-4": o2,
              "us-1": o2,
              "us-2": o2,
              "us-3": o2,
              "us-4": o2
            }
          ],
          onfabrica: o2,
          "fastly-edge": o2,
          "fastly-terrarium": o2,
          "fastvps-server": o2,
          mydobiss: o2,
          firebaseapp: o2,
          fldrv: o2,
          forgeblocks: o2,
          framercanvas: o2,
          "freebox-os": o2,
          freeboxos: o2,
          freemyip: o2,
          aliases121: o2,
          gentapps: o2,
          gentlentapis: o2,
          githubusercontent: o2,
          "0emm": i2,
          appspot: [
            2,
            {
              r: i2
            }
          ],
          codespot: o2,
          googleapis: o2,
          googlecode: o2,
          pagespeedmobilizer: o2,
          publishproxy: o2,
          withgoogle: o2,
          withyoutube: o2,
          blogspot: o2,
          awsmppl: o2,
          herokuapp: o2,
          herokussl: o2,
          impertrixcdn: o2,
          impertrix: o2,
          smushcdn: o2,
          wphostedmail: o2,
          wpmucdn: o2,
          pixolino: o2,
          amscompute: o2,
          dopaas: o2,
          "hosted-by-previder": W,
          hosteur: [
            0,
            {
              "rag-cloud": o2,
              "rag-cloud-ch": o2
            }
          ],
          "ik-server": [
            0,
            {
              jcloud: o2,
              "jcloud-ver-jpc": o2
            }
          ],
          jelastic: [
            0,
            {
              demo: o2
            }
          ],
          kilatiron: o2,
          massivegrid: W,
          wafaicloud: [
            0,
            {
              jed: o2,
              lon: o2,
              ryd: o2
            }
          ],
          joyent: [
            0,
            {
              cns: i2
            }
          ],
          ktistory: o2,
          lpusercontent: o2,
          lmpm: D,
          linode: [
            0,
            {
              members: o2,
              nodebalancer: i2
            }
          ],
          linodeobjects: i2,
          linodeusercontent: [
            0,
            {
              ip: o2
            }
          ],
          barsycenter: o2,
          barsyonline: o2,
          mazeplay: o2,
          miniserver: o2,
          atmeta: o2,
          fbsbx: H,
          meteorapp: O,
          azure: [
            0,
            {
              cloudapp: i2
            }
          ],
          hostedpi: o2,
          "mythic-beasts": [
            0,
            {
              customer: o2,
              caracal: o2,
              fentiger: o2,
              lynx: o2,
              ocelot: o2,
              oncilla: o2,
              onza: o2,
              sphinx: o2,
              vs: o2,
              x: o2,
              yali: o2
            }
          ],
          nospamproxy: c,
          "4u": o2,
          nfshost: o2,
          "001www": o2,
          ddnslive: o2,
          myiphost: o2,
          blogsyte: o2,
          ciscofreak: o2,
          damnserver: o2,
          ditchyourip: o2,
          dnsiskinky: o2,
          dynns: o2,
          geekgalaxy: o2,
          "health-carereform": o2,
          homesecuritymac: o2,
          homesecuritypc: o2,
          myactivedirectory: o2,
          mysecuritycamera: o2,
          "net-freaks": o2,
          onthewifi: o2,
          point2this: o2,
          quicksytes: o2,
          securitytactics: o2,
          serveexchange: o2,
          servehumour: o2,
          servep2p: o2,
          servesarcasm: o2,
          stufftoread: o2,
          unusualperson: o2,
          workisboring: o2,
          "3utilities": o2,
          ddnsking: o2,
          myvnc: o2,
          servebeer: o2,
          servecounterstrike: o2,
          serveftp: o2,
          servegame: o2,
          servehalflife: o2,
          servehttp: o2,
          serveirc: o2,
          servemp3: o2,
          servepics: o2,
          servequake: o2,
          observableusercontent: [
            0,
            {
              static: o2
            }
          ],
          simplesite: o2,
          orsites: o2,
          operaunite: o2,
          "authgear-staging": o2,
          authgearapps: o2,
          skygearapp: o2,
          outsystemscloud: o2,
          ownprovider: o2,
          pgfog: o2,
          pagefrontapp: o2,
          pagexl: o2,
          paywhirl: i2,
          gotpantheon: o2,
          upsunapp: o2,
          "platter-app": o2,
          pleskns: o2,
          "postman-echo": o2,
          prgmr: [
            0,
            {
              xen: o2
            }
          ],
          pythonanywhere: O,
          qualifioapp: o2,
          ladesk: o2,
          qbuser: o2,
          qa2: o2,
          "dev-myqnapcloud": o2,
          "alpha-myqnapcloud": o2,
          myqnapcloud: o2,
          quipelements: i2,
          rackmaze: o2,
          rhcloud: o2,
          render: D,
          onrender: o2,
          "180r": o2,
          dojin: o2,
          sakuratan: o2,
          sakuraweb: o2,
          x0: o2,
          code: [
            0,
            {
              builder: i2,
              "dev-builder": i2,
              "stg-builder": i2
            }
          ],
          salesforce: [
            0,
            {
              platform: [
                0,
                {
                  "code-builder-stg": [
                    0,
                    {
                      test: [
                        0,
                        {
                          "001": i2
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          logoip: o2,
          scrysec: o2,
          "firewall-gateway": o2,
          myshopblocks: o2,
          myshopify: o2,
          shopitsite: o2,
          "1kapp": o2,
          appchizi: o2,
          applinzi: o2,
          sinaapp: o2,
          vipsinaapp: o2,
          "bounty-full": [
            2,
            {
              alpha: o2,
              beta: o2
            }
          ],
          streamlitapp: o2,
          "try-snowplow": o2,
          "stackhero-network": o2,
          "playstation-cloud": o2,
          myspreadshop: o2,
          stdlib: [
            0,
            {
              api: o2
            }
          ],
          "temp-dns": o2,
          dsmynas: o2,
          familyds: o2,
          mytabit: o2,
          "tb-hosting": L,
          reservd: o2,
          thingdustdata: o2,
          bloxcms: o2,
          "townnews-staging": o2,
          typeform: [
            0,
            {
              pro: o2
            }
          ],
          hk: o2,
          it: o2,
          vultrobjects: i2,
          wafflecell: o2,
          "reserve-online": o2,
          hotelwithflight: o2,
          remotewd: o2,
          wiardweb: B,
          messwithdns: o2,
          "woltlab-demo": o2,
          wpenginepowered: [
            2,
            {
              js: o2
            }
          ],
          wixsite: o2,
          xnbay: [
            2,
            {
              u2: o2,
              "u2-local": o2
            }
          ],
          yolasite: o2
        }
      ],
      coop: a2,
      cr: [
        1,
        {
          ac: a2,
          co: a2,
          ed: a2,
          fi: a2,
          go: a2,
          or: a2,
          sa: a2
        }
      ],
      cu: [
        1,
        {
          com: a2,
          edu: a2,
          org: a2,
          net: a2,
          gov: a2,
          inf: a2
        }
      ],
      cv: [
        1,
        {
          com: a2,
          edu: a2,
          int: a2,
          nome: a2,
          org: a2,
          blogspot: o2
        }
      ],
      cw: E,
      cx: [
        1,
        {
          gov: a2,
          ath: o2,
          info: o2
        }
      ],
      cy: [
        1,
        {
          ac: a2,
          biz: a2,
          com: [
            1,
            {
              blogspot: o2,
              scaleforce: F
            }
          ],
          ekloges: a2,
          gov: a2,
          ltd: a2,
          mil: a2,
          net: a2,
          org: a2,
          press: a2,
          pro: a2,
          tm: a2
        }
      ],
      cz: [
        1,
        {
          co: o2,
          realm: o2,
          e4: o2,
          blogspot: o2,
          metacentrum: [
            0,
            {
              cloud: i2,
              custom: o2
            }
          ],
          muni: [
            0,
            {
              cloud: [
                0,
                {
                  flt: o2,
                  usr: o2
                }
              ]
            }
          ]
        }
      ],
      de: [
        1,
        {
          bplaced: o2,
          square7: o2,
          com: o2,
          cosidns: [
            0,
            {
              dyn: o2
            }
          ],
          "dynamisches-dns": o2,
          dnsupdater: o2,
          "internet-dns": o2,
          "l-o-g-i-n": o2,
          dnshome: o2,
          fuettertdasnetz: o2,
          isteingeek: o2,
          istmein: o2,
          lebtimnetz: o2,
          leitungsen: o2,
          traeumtgerade: o2,
          ddnss: [
            2,
            {
              dyn: o2,
              dyndns: o2
            }
          ],
          dyndns1: o2,
          "dyn-ip24": o2,
          "home-webserver": [
            2,
            {
              dyn: o2
            }
          ],
          "myhome-server": o2,
          frusky: i2,
          goip: o2,
          blogspot: o2,
          "xn--gnstigbestellen-zvb": o2,
          "g\xFCnstigbestellen": o2,
          "xn--gnstigliefern-wob": o2,
          "g\xFCnstigliefern": o2,
          "hs-heilbronn": [
            0,
            {
              it: B
            }
          ],
          "dyn-berlin": o2,
          "in-berlin": o2,
          "in-brb": o2,
          "in-butter": o2,
          "in-dsl": o2,
          "in-vpn": o2,
          iservschule: o2,
          "mein-iserv": o2,
          schulplattform: o2,
          schulserver: o2,
          "test-iserv": o2,
          keymachine: o2,
          "git-repos": o2,
          "lcube-server": o2,
          "svn-repos": o2,
          barsy: o2,
          "123webseite": o2,
          logoip: o2,
          "firewall-gateway": o2,
          "my-gateway": o2,
          "my-router": o2,
          spdns: o2,
          speedpartner: [
            0,
            {
              customer: o2
            }
          ],
          myspreadshop: o2,
          "taifun-dns": o2,
          "12hp": o2,
          "2ix": o2,
          "4lima": o2,
          "lima-city": o2,
          "dd-dns": o2,
          "dray-dns": o2,
          draydns: o2,
          "dyn-vpn": o2,
          dynvpn: o2,
          "mein-vigor": o2,
          "my-vigor": o2,
          "my-wan": o2,
          "syno-ds": o2,
          "synology-diskstation": o2,
          "synology-ds": o2,
          uberspace: i2,
          virtualuser: o2,
          "virtual-user": o2,
          "community-pro": o2,
          diskussionsbereich: o2
        }
      ],
      dj: a2,
      dk: [
        1,
        {
          biz: o2,
          co: o2,
          firm: o2,
          reg: o2,
          store: o2,
          blogspot: o2,
          "123hjemmeside": o2,
          myspreadshop: o2
        }
      ],
      dm: e2,
      do: [
        1,
        {
          art: a2,
          com: a2,
          edu: a2,
          gob: a2,
          gov: a2,
          mil: a2,
          net: a2,
          org: a2,
          sld: a2,
          web: a2
        }
      ],
      dz: [
        1,
        {
          art: a2,
          asso: a2,
          com: a2,
          edu: a2,
          gov: a2,
          org: a2,
          net: a2,
          pol: a2,
          soc: a2,
          tm: a2
        }
      ],
      ec: [
        1,
        {
          com: a2,
          info: a2,
          net: a2,
          fin: a2,
          k12: a2,
          med: a2,
          pro: a2,
          org: a2,
          edu: a2,
          gov: a2,
          gob: a2,
          mil: a2,
          base: o2,
          official: o2
        }
      ],
      edu: [
        1,
        {
          rit: [
            0,
            {
              "git-pages": o2
            }
          ]
        }
      ],
      ee: [
        1,
        {
          edu: a2,
          gov: a2,
          riik: a2,
          lib: a2,
          med: a2,
          com: n2,
          pri: a2,
          aip: a2,
          org: a2,
          fie: a2
        }
      ],
      eg: [
        1,
        {
          com: n2,
          edu: a2,
          eun: a2,
          gov: a2,
          mil: a2,
          name: a2,
          net: a2,
          org: a2,
          sci: a2
        }
      ],
      er: m2,
      es: [
        1,
        {
          com: n2,
          nom: a2,
          org: a2,
          gob: a2,
          edu: a2,
          "123miweb": o2,
          myspreadshop: o2
        }
      ],
      et: [
        1,
        {
          com: a2,
          gov: a2,
          org: a2,
          edu: a2,
          biz: a2,
          name: a2,
          info: a2,
          net: a2
        }
      ],
      eu: [
        1,
        {
          airkitapps: o2,
          mycd: o2,
          cloudns: o2,
          dogado: G,
          barsy: o2,
          wellbeingzone: o2,
          spdns: o2,
          transurl: i2,
          diskstation: o2
        }
      ],
      fi: [
        1,
        {
          aland: a2,
          dy: o2,
          blogspot: o2,
          "xn--hkkinen-5wa": o2,
          "h\xE4kkinen": o2,
          iki: o2,
          cloudplatform: [
            0,
            {
              fi: o2
            }
          ],
          datacenter: [
            0,
            {
              demo: o2,
              paas: o2
            }
          ],
          kapsi: o2,
          "123kotisivu": o2,
          myspreadshop: o2
        }
      ],
      fj: [
        1,
        {
          ac: a2,
          biz: a2,
          com: a2,
          gov: a2,
          info: a2,
          mil: a2,
          name: a2,
          net: a2,
          org: a2,
          pro: a2
        }
      ],
      fk: m2,
      fm: [
        1,
        {
          com: a2,
          edu: a2,
          net: a2,
          org: a2,
          radio: o2,
          user: i2
        }
      ],
      fo: a2,
      fr: [
        1,
        {
          asso: a2,
          com: a2,
          gouv: a2,
          nom: a2,
          prd: a2,
          tm: a2,
          avoues: a2,
          cci: a2,
          greta: a2,
          "huissier-justice": a2,
          "en-root": o2,
          "fbx-os": o2,
          fbxos: o2,
          "freebox-os": o2,
          freeboxos: o2,
          blogspot: o2,
          goupile: o2,
          "123siteweb": o2,
          "on-web": o2,
          "chirurgiens-dentistes-en-france": o2,
          dedibox: o2,
          aeroport: o2,
          avocat: o2,
          chambagri: o2,
          "chirurgiens-dentistes": o2,
          "experts-comptables": o2,
          medecin: o2,
          notaires: o2,
          pharmacien: o2,
          port: o2,
          veterinaire: o2,
          myspreadshop: o2,
          ynh: o2
        }
      ],
      ga: a2,
      gb: a2,
      gd: [
        1,
        {
          edu: a2,
          gov: a2
        }
      ],
      ge: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          org: a2,
          mil: a2,
          net: a2,
          pvt: a2
        }
      ],
      gf: a2,
      gg: [
        1,
        {
          co: a2,
          net: a2,
          org: a2,
          kaas: o2,
          cya: o2,
          panel: [
            2,
            {
              daemon: o2
            }
          ]
        }
      ],
      gh: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          org: a2,
          mil: a2
        }
      ],
      gi: [
        1,
        {
          com: a2,
          ltd: a2,
          gov: a2,
          mod: a2,
          edu: a2,
          org: a2
        }
      ],
      gl: [
        1,
        {
          co: a2,
          com: a2,
          edu: a2,
          net: a2,
          org: a2,
          biz: o2,
          xx: o2
        }
      ],
      gm: a2,
      gn: [
        1,
        {
          ac: a2,
          com: a2,
          edu: a2,
          gov: a2,
          org: a2,
          net: a2
        }
      ],
      gov: a2,
      gp: [
        1,
        {
          com: a2,
          net: a2,
          mobi: a2,
          edu: a2,
          org: a2,
          asso: a2,
          app: o2
        }
      ],
      gq: a2,
      gr: [
        1,
        {
          com: a2,
          edu: a2,
          net: a2,
          org: a2,
          gov: a2,
          blogspot: o2,
          simplesite: o2
        }
      ],
      gs: a2,
      gt: [
        1,
        {
          com: a2,
          edu: a2,
          gob: a2,
          ind: a2,
          mil: a2,
          net: a2,
          org: a2,
          blog: o2,
          de: o2,
          to: o2
        }
      ],
      gu: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          guam: a2,
          info: a2,
          net: a2,
          org: a2,
          web: a2
        }
      ],
      gw: a2,
      gy: [
        1,
        {
          co: a2,
          com: a2,
          edu: a2,
          gov: a2,
          net: a2,
          org: a2,
          be: o2
        }
      ],
      hk: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          idv: a2,
          net: a2,
          org: a2,
          "xn--55qx5d": a2,
          "\u516C\u53F8": a2,
          "xn--wcvs22d": a2,
          "\u6559\u80B2": a2,
          "xn--lcvr32d": a2,
          "\u654E\u80B2": a2,
          "xn--mxtq1m": a2,
          "\u653F\u5E9C": a2,
          "xn--gmqw5a": a2,
          "\u500B\u4EBA": a2,
          "xn--ciqpn": a2,
          "\u4E2A\u4EBA": a2,
          "xn--gmq050i": a2,
          "\u7B87\u4EBA": a2,
          "xn--zf0avx": a2,
          "\u7DB2\u7EDC": a2,
          "xn--io0a7i": a2,
          "\u7F51\u7EDC": a2,
          "xn--mk0axi": a2,
          "\u7EC4\u7E54": a2,
          "xn--od0alg": a2,
          "\u7DB2\u7D61": a2,
          "xn--od0aq3b": a2,
          "\u7F51\u7D61": a2,
          "xn--tn0ag": a2,
          "\u7EC4\u7EC7": a2,
          "xn--uc0atv": a2,
          "\u7D44\u7E54": a2,
          "xn--uc0ay4a": a2,
          "\u7D44\u7EC7": a2,
          blogspot: o2,
          secaas: o2,
          ltd: o2,
          inc: o2
        }
      ],
      hm: a2,
      hn: [
        1,
        {
          com: a2,
          edu: a2,
          org: a2,
          net: a2,
          mil: a2,
          gob: a2,
          cc: o2
        }
      ],
      hr: [
        1,
        {
          iz: a2,
          from: a2,
          name: a2,
          com: a2,
          blogspot: o2,
          free: o2
        }
      ],
      ht: [
        1,
        {
          com: a2,
          shop: a2,
          firm: a2,
          info: a2,
          adult: a2,
          net: a2,
          pro: a2,
          org: a2,
          med: a2,
          art: a2,
          coop: a2,
          pol: a2,
          asso: a2,
          edu: a2,
          rel: a2,
          gouv: a2,
          perso: a2
        }
      ],
      hu: [
        1,
        {
          2e3: a2,
          co: a2,
          info: a2,
          org: a2,
          priv: a2,
          sport: a2,
          tm: a2,
          agrar: a2,
          bolt: a2,
          casino: a2,
          city: a2,
          erotica: a2,
          erotika: a2,
          film: a2,
          forum: a2,
          games: a2,
          hotel: a2,
          ingatlan: a2,
          jogasz: a2,
          konyvelo: a2,
          lakas: a2,
          media: a2,
          news: a2,
          reklam: a2,
          sex: a2,
          shop: a2,
          suli: a2,
          szex: a2,
          tozsde: a2,
          utazas: a2,
          video: a2,
          blogspot: o2
        }
      ],
      id: [
        1,
        {
          ac: a2,
          biz: a2,
          co: n2,
          desa: a2,
          go: a2,
          mil: a2,
          my: [
            1,
            {
              rss: i2
            }
          ],
          net: a2,
          or: a2,
          ponpes: a2,
          sch: a2,
          web: a2,
          flap: o2,
          forte: o2
        }
      ],
      ie: [
        1,
        {
          gov: a2,
          blogspot: o2,
          myspreadshop: o2
        }
      ],
      il: [
        1,
        {
          ac: a2,
          co: [
            1,
            {
              ravpage: o2,
              blogspot: o2,
              tabitorder: o2,
              mytabit: o2
            }
          ],
          gov: a2,
          idf: a2,
          k12: a2,
          muni: a2,
          net: a2,
          org: a2
        }
      ],
      "xn--4dbrk0ce": [
        1,
        {
          "xn--4dbgdty6c": a2,
          "xn--5dbhl8d": a2,
          "xn--8dbq2a": a2,
          "xn--hebda8b": a2
        }
      ],
      "\u05D9\u05E9\u05E8\u05D0\u05DC": [
        1,
        {
          "\u05D0\u05E7\u05D3\u05DE\u05D9\u05D4": a2,
          "\u05D9\u05E9\u05D5\u05D1": a2,
          "\u05E6\u05D4\u05DC": a2,
          "\u05DE\u05DE\u05E9\u05DC": a2
        }
      ],
      im: [
        1,
        {
          ac: a2,
          co: [
            1,
            {
              ltd: a2,
              plc: a2
            }
          ],
          com: a2,
          net: a2,
          org: a2,
          tt: a2,
          tv: a2,
          ro: o2
        }
      ],
      in: [
        1,
        {
          "5g": a2,
          "6g": a2,
          ac: a2,
          ai: a2,
          am: a2,
          bihar: a2,
          biz: a2,
          business: a2,
          ca: a2,
          cn: a2,
          co: [
            1,
            {
              cyclic: o2
            }
          ],
          com: a2,
          coop: a2,
          cs: a2,
          delhi: a2,
          dr: a2,
          edu: a2,
          er: a2,
          firm: a2,
          gen: a2,
          gov: a2,
          gujarat: a2,
          ind: a2,
          info: a2,
          int: a2,
          internet: a2,
          io: a2,
          me: a2,
          mil: a2,
          net: a2,
          nic: a2,
          org: a2,
          pg: a2,
          post: a2,
          pro: a2,
          res: a2,
          travel: a2,
          tv: a2,
          uk: a2,
          up: a2,
          us: a2,
          web: o2,
          cloudns: o2,
          blogspot: o2,
          barsy: o2,
          supabase: o2
        }
      ],
      info: [
        1,
        {
          cloudns: o2,
          "dynamic-dns": o2,
          dyndns: o2,
          "barrel-of-knowledge": o2,
          "barrell-of-knowledge": o2,
          "for-our": o2,
          "groks-the": o2,
          "groks-this": o2,
          "here-for-more": o2,
          knowsitall: o2,
          selfip: o2,
          webhop: o2,
          barsy: o2,
          mayfirst: o2,
          forumz: o2,
          nsupdate: o2,
          dvrcam: o2,
          ilovecollege: o2,
          "no-ip": o2,
          dnsupdate: o2,
          "v-info": o2
        }
      ],
      int: [
        1,
        {
          eu: a2
        }
      ],
      io: [
        1,
        {
          2038: o2,
          com: a2,
          "on-acorn": i2,
          apigee: o2,
          "b-data": o2,
          backplaneapp: o2,
          banzaicloud: [
            0,
            {
              app: o2,
              backyards: i2
            }
          ],
          beagleboard: o2,
          bitbucket: o2,
          bluebite: o2,
          boxfuse: o2,
          brave: [
            0,
            {
              s: i2
            }
          ],
          browsersafetymark: o2,
          bigv: [
            0,
            {
              uk0: o2
            }
          ],
          cleverapps: o2,
          dappnode: [
            0,
            {
              dyndns: o2
            }
          ],
          dedyn: o2,
          drud: o2,
          definima: o2,
          "fh-muenster": o2,
          shw: o2,
          forgerock: [
            0,
            {
              id: o2
            }
          ],
          ghost: o2,
          github: o2,
          gitlab: o2,
          lolipop: o2,
          "hasura-app": o2,
          hostyhosting: o2,
          moonscale: i2,
          beebyte: W,
          beebyteapp: [
            0,
            {
              sekd1: o2
            }
          ],
          jele: o2,
          unispace: [
            0,
            {
              "cloud-fr1": o2
            }
          ],
          webthings: o2,
          loginline: o2,
          barsy: o2,
          azurecontainer: i2,
          ngrok: [
            2,
            {
              ap: o2,
              au: o2,
              eu: o2,
              in: o2,
              jp: o2,
              sa: o2,
              us: o2
            }
          ],
          nodeart: [
            0,
            {
              stage: o2
            }
          ],
          nid: o2,
          pantheonsite: o2,
          dyn53: o2,
          pstmn: [
            2,
            {
              mock: o2
            }
          ],
          protonet: o2,
          qoto: o2,
          qcx: [
            2,
            {
              sys: i2
            }
          ],
          vaporcloud: o2,
          vbrplsbx: [
            0,
            {
              g: o2
            }
          ],
          "on-k3s": i2,
          "on-rio": i2,
          readthedocs: o2,
          resindevice: o2,
          resinstaging: [
            0,
            {
              devices: o2
            }
          ],
          hzc: o2,
          sandcats: o2,
          shiftcrypto: o2,
          shiftedit: o2,
          "mo-siemens": o2,
          musician: o2,
          lair: H,
          stolos: i2,
          spacekit: o2,
          utwente: o2,
          s5y: i2,
          edugit: o2,
          telebit: o2,
          thingdust: [
            0,
            {
              dev: M,
              disrec: M,
              prod: N,
              testing: M
            }
          ],
          tickets: o2,
          upli: o2,
          wedeploy: o2,
          editorx: o2,
          wixstudio: o2,
          basicserver: o2,
          virtualserver: o2
        }
      ],
      iq: Q,
      ir: [
        1,
        {
          ac: a2,
          co: a2,
          gov: a2,
          id: a2,
          net: a2,
          org: a2,
          sch: a2,
          "xn--mgba3a4f16a": a2,
          "\u0627\u06CC\u0631\u0627\u0646": a2,
          "xn--mgba3a4fra": a2,
          "\u0627\u064A\u0631\u0627\u0646": a2
        }
      ],
      is: [
        1,
        {
          net: a2,
          com: a2,
          edu: a2,
          gov: a2,
          org: a2,
          int: a2,
          cupcake: o2,
          blogspot: o2
        }
      ],
      it: [
        1,
        {
          gov: a2,
          edu: a2,
          abr: a2,
          abruzzo: a2,
          "aosta-valley": a2,
          aostavalley: a2,
          bas: a2,
          basilicata: a2,
          cal: a2,
          calabria: a2,
          cam: a2,
          campania: a2,
          "emilia-romagna": a2,
          emiliaromagna: a2,
          emr: a2,
          "friuli-v-giulia": a2,
          "friuli-ve-giulia": a2,
          "friuli-vegiulia": a2,
          "friuli-venezia-giulia": a2,
          "friuli-veneziagiulia": a2,
          "friuli-vgiulia": a2,
          "friuliv-giulia": a2,
          "friulive-giulia": a2,
          friulivegiulia: a2,
          "friulivenezia-giulia": a2,
          friuliveneziagiulia: a2,
          friulivgiulia: a2,
          fvg: a2,
          laz: a2,
          lazio: a2,
          lig: a2,
          liguria: a2,
          lom: a2,
          lombardia: a2,
          lombardy: a2,
          lucania: a2,
          mar: a2,
          marche: a2,
          mol: a2,
          molise: a2,
          piedmont: a2,
          piemonte: a2,
          pmn: a2,
          pug: a2,
          puglia: a2,
          sar: a2,
          sardegna: a2,
          sardinia: a2,
          sic: a2,
          sicilia: a2,
          sicily: a2,
          taa: a2,
          tos: a2,
          toscana: a2,
          "trentin-sud-tirol": a2,
          "xn--trentin-sd-tirol-rzb": a2,
          "trentin-s\xFCd-tirol": a2,
          "trentin-sudtirol": a2,
          "xn--trentin-sdtirol-7vb": a2,
          "trentin-s\xFCdtirol": a2,
          "trentin-sued-tirol": a2,
          "trentin-suedtirol": a2,
          "trentino-a-adige": a2,
          "trentino-aadige": a2,
          "trentino-alto-adige": a2,
          "trentino-altoadige": a2,
          "trentino-s-tirol": a2,
          "trentino-stirol": a2,
          "trentino-sud-tirol": a2,
          "xn--trentino-sd-tirol-c3b": a2,
          "trentino-s\xFCd-tirol": a2,
          "trentino-sudtirol": a2,
          "xn--trentino-sdtirol-szb": a2,
          "trentino-s\xFCdtirol": a2,
          "trentino-sued-tirol": a2,
          "trentino-suedtirol": a2,
          trentino: a2,
          "trentinoa-adige": a2,
          trentinoaadige: a2,
          "trentinoalto-adige": a2,
          trentinoaltoadige: a2,
          "trentinos-tirol": a2,
          trentinostirol: a2,
          "trentinosud-tirol": a2,
          "xn--trentinosd-tirol-rzb": a2,
          "trentinos\xFCd-tirol": a2,
          trentinosudtirol: a2,
          "xn--trentinosdtirol-7vb": a2,
          "trentinos\xFCdtirol": a2,
          "trentinosued-tirol": a2,
          trentinosuedtirol: a2,
          "trentinsud-tirol": a2,
          "xn--trentinsd-tirol-6vb": a2,
          "trentins\xFCd-tirol": a2,
          trentinsudtirol: a2,
          "xn--trentinsdtirol-nsb": a2,
          "trentins\xFCdtirol": a2,
          "trentinsued-tirol": a2,
          trentinsuedtirol: a2,
          tuscany: a2,
          umb: a2,
          umbria: a2,
          "val-d-aosta": a2,
          "val-daosta": a2,
          "vald-aosta": a2,
          valdaosta: a2,
          "valle-aosta": a2,
          "valle-d-aosta": a2,
          "valle-daosta": a2,
          valleaosta: a2,
          "valled-aosta": a2,
          valledaosta: a2,
          "vallee-aoste": a2,
          "xn--valle-aoste-ebb": a2,
          "vall\xE9e-aoste": a2,
          "vallee-d-aoste": a2,
          "xn--valle-d-aoste-ehb": a2,
          "vall\xE9e-d-aoste": a2,
          valleeaoste: a2,
          "xn--valleaoste-e7a": a2,
          "vall\xE9eaoste": a2,
          valleedaoste: a2,
          "xn--valledaoste-ebb": a2,
          "vall\xE9edaoste": a2,
          vao: a2,
          vda: a2,
          ven: a2,
          veneto: a2,
          ag: a2,
          agrigento: a2,
          al: a2,
          alessandria: a2,
          "alto-adige": a2,
          altoadige: a2,
          an: a2,
          ancona: a2,
          "andria-barletta-trani": a2,
          "andria-trani-barletta": a2,
          andriabarlettatrani: a2,
          andriatranibarletta: a2,
          ao: a2,
          aosta: a2,
          aoste: a2,
          ap: a2,
          aq: a2,
          aquila: a2,
          ar: a2,
          arezzo: a2,
          "ascoli-piceno": a2,
          ascolipiceno: a2,
          asti: a2,
          at: a2,
          av: a2,
          avellino: a2,
          ba: a2,
          "balsan-sudtirol": a2,
          "xn--balsan-sdtirol-nsb": a2,
          "balsan-s\xFCdtirol": a2,
          "balsan-suedtirol": a2,
          balsan: a2,
          bari: a2,
          "barletta-trani-andria": a2,
          barlettatraniandria: a2,
          belluno: a2,
          benevento: a2,
          bergamo: a2,
          bg: a2,
          bi: a2,
          biella: a2,
          bl: a2,
          bn: a2,
          bo: a2,
          bologna: a2,
          "bolzano-altoadige": a2,
          bolzano: a2,
          "bozen-sudtirol": a2,
          "xn--bozen-sdtirol-2ob": a2,
          "bozen-s\xFCdtirol": a2,
          "bozen-suedtirol": a2,
          bozen: a2,
          br: a2,
          brescia: a2,
          brindisi: a2,
          bs: a2,
          bt: a2,
          "bulsan-sudtirol": a2,
          "xn--bulsan-sdtirol-nsb": a2,
          "bulsan-s\xFCdtirol": a2,
          "bulsan-suedtirol": a2,
          bulsan: a2,
          bz: a2,
          ca: a2,
          cagliari: a2,
          caltanissetta: a2,
          "campidano-medio": a2,
          campidanomedio: a2,
          campobasso: a2,
          "carbonia-iglesias": a2,
          carboniaiglesias: a2,
          "carrara-massa": a2,
          carraramassa: a2,
          caserta: a2,
          catania: a2,
          catanzaro: a2,
          cb: a2,
          ce: a2,
          "cesena-forli": a2,
          "xn--cesena-forl-mcb": a2,
          "cesena-forl\xEC": a2,
          cesenaforli: a2,
          "xn--cesenaforl-i8a": a2,
          "cesenaforl\xEC": a2,
          ch: a2,
          chieti: a2,
          ci: a2,
          cl: a2,
          cn: a2,
          co: a2,
          como: a2,
          cosenza: a2,
          cr: a2,
          cremona: a2,
          crotone: a2,
          cs: a2,
          ct: a2,
          cuneo: a2,
          cz: a2,
          "dell-ogliastra": a2,
          dellogliastra: a2,
          en: a2,
          enna: a2,
          fc: a2,
          fe: a2,
          fermo: a2,
          ferrara: a2,
          fg: a2,
          fi: a2,
          firenze: a2,
          florence: a2,
          fm: a2,
          foggia: a2,
          "forli-cesena": a2,
          "xn--forl-cesena-fcb": a2,
          "forl\xEC-cesena": a2,
          forlicesena: a2,
          "xn--forlcesena-c8a": a2,
          "forl\xECcesena": a2,
          fr: a2,
          frosinone: a2,
          ge: a2,
          genoa: a2,
          genova: a2,
          go: a2,
          gorizia: a2,
          gr: a2,
          grosseto: a2,
          "iglesias-carbonia": a2,
          iglesiascarbonia: a2,
          im: a2,
          imperia: a2,
          is: a2,
          isernia: a2,
          kr: a2,
          "la-spezia": a2,
          laquila: a2,
          laspezia: a2,
          latina: a2,
          lc: a2,
          le: a2,
          lecce: a2,
          lecco: a2,
          li: a2,
          livorno: a2,
          lo: a2,
          lodi: a2,
          lt: a2,
          lu: a2,
          lucca: a2,
          macerata: a2,
          mantova: a2,
          "massa-carrara": a2,
          massacarrara: a2,
          matera: a2,
          mb: a2,
          mc: a2,
          me: a2,
          "medio-campidano": a2,
          mediocampidano: a2,
          messina: a2,
          mi: a2,
          milan: a2,
          milano: a2,
          mn: a2,
          mo: a2,
          modena: a2,
          "monza-brianza": a2,
          "monza-e-della-brianza": a2,
          monza: a2,
          monzabrianza: a2,
          monzaebrianza: a2,
          monzaedellabrianza: a2,
          ms: a2,
          mt: a2,
          na: a2,
          naples: a2,
          napoli: a2,
          no: a2,
          novara: a2,
          nu: a2,
          nuoro: a2,
          og: a2,
          ogliastra: a2,
          "olbia-tempio": a2,
          olbiatempio: a2,
          or: a2,
          oristano: a2,
          ot: a2,
          pa: a2,
          padova: a2,
          padua: a2,
          palermo: a2,
          parma: a2,
          pavia: a2,
          pc: a2,
          pd: a2,
          pe: a2,
          perugia: a2,
          "pesaro-urbino": a2,
          pesarourbino: a2,
          pescara: a2,
          pg: a2,
          pi: a2,
          piacenza: a2,
          pisa: a2,
          pistoia: a2,
          pn: a2,
          po: a2,
          pordenone: a2,
          potenza: a2,
          pr: a2,
          prato: a2,
          pt: a2,
          pu: a2,
          pv: a2,
          pz: a2,
          ra: a2,
          ragusa: a2,
          ravenna: a2,
          rc: a2,
          re: a2,
          "reggio-calabria": a2,
          "reggio-emilia": a2,
          reggiocalabria: a2,
          reggioemilia: a2,
          rg: a2,
          ri: a2,
          rieti: a2,
          rimini: a2,
          rm: a2,
          rn: a2,
          ro: a2,
          roma: a2,
          rome: a2,
          rovigo: a2,
          sa: a2,
          salerno: a2,
          sassari: a2,
          savona: a2,
          si: a2,
          siena: a2,
          siracusa: a2,
          so: a2,
          sondrio: a2,
          sp: a2,
          sr: a2,
          ss: a2,
          suedtirol: a2,
          "xn--sdtirol-n2a": a2,
          "s\xFCdtirol": a2,
          sv: a2,
          ta: a2,
          taranto: a2,
          te: a2,
          "tempio-olbia": a2,
          tempioolbia: a2,
          teramo: a2,
          terni: a2,
          tn: a2,
          to: a2,
          torino: a2,
          tp: a2,
          tr: a2,
          "trani-andria-barletta": a2,
          "trani-barletta-andria": a2,
          traniandriabarletta: a2,
          tranibarlettaandria: a2,
          trapani: a2,
          trento: a2,
          treviso: a2,
          trieste: a2,
          ts: a2,
          turin: a2,
          tv: a2,
          ud: a2,
          udine: a2,
          "urbino-pesaro": a2,
          urbinopesaro: a2,
          va: a2,
          varese: a2,
          vb: a2,
          vc: a2,
          ve: a2,
          venezia: a2,
          venice: a2,
          verbania: a2,
          vercelli: a2,
          verona: a2,
          vi: a2,
          "vibo-valentia": a2,
          vibovalentia: a2,
          vicenza: a2,
          viterbo: a2,
          vr: a2,
          vs: a2,
          vt: a2,
          vv: a2,
          "12chars": o2,
          blogspot: o2,
          ibxos: o2,
          iliadboxos: o2,
          neen: [
            0,
            {
              jc: o2
            }
          ],
          tim: [
            0,
            {
              open: [
                0,
                {
                  jelastic: c
                }
              ]
            }
          ],
          "16-b": o2,
          "32-b": o2,
          "64-b": o2,
          "123homepage": o2,
          myspreadshop: o2,
          syncloud: o2
        }
      ],
      je: [
        1,
        {
          co: a2,
          net: a2,
          org: a2,
          of: o2
        }
      ],
      jm: m2,
      jo: [
        1,
        {
          com: a2,
          org: a2,
          net: a2,
          edu: a2,
          sch: a2,
          gov: a2,
          mil: a2,
          name: a2
        }
      ],
      jobs: a2,
      jp: [
        1,
        {
          ac: a2,
          ad: a2,
          co: a2,
          ed: a2,
          go: a2,
          gr: a2,
          lg: a2,
          ne: [
            1,
            {
              aseinet: J,
              gehirn: o2,
              ivory: o2,
              "mail-box": o2,
              mints: o2,
              mokuren: o2,
              opal: o2,
              sakura: o2,
              sumomo: o2,
              topaz: o2
            }
          ],
          or: a2,
          aichi: [
            1,
            {
              aisai: a2,
              ama: a2,
              anjo: a2,
              asuke: a2,
              chiryu: a2,
              chita: a2,
              fuso: a2,
              gamagori: a2,
              handa: a2,
              hazu: a2,
              hekinan: a2,
              higashiura: a2,
              ichinomiya: a2,
              inazawa: a2,
              inuyama: a2,
              isshiki: a2,
              iwakura: a2,
              kanie: a2,
              kariya: a2,
              kasugai: a2,
              kira: a2,
              kiyosu: a2,
              komaki: a2,
              konan: a2,
              kota: a2,
              mihama: a2,
              miyoshi: a2,
              nishio: a2,
              nisshin: a2,
              obu: a2,
              oguchi: a2,
              oharu: a2,
              okazaki: a2,
              owariasahi: a2,
              seto: a2,
              shikatsu: a2,
              shinshiro: a2,
              shitara: a2,
              tahara: a2,
              takahama: a2,
              tobishima: a2,
              toei: a2,
              togo: a2,
              tokai: a2,
              tokoname: a2,
              toyoake: a2,
              toyohashi: a2,
              toyokawa: a2,
              toyone: a2,
              toyota: a2,
              tsushima: a2,
              yatomi: a2
            }
          ],
          akita: [
            1,
            {
              akita: a2,
              daisen: a2,
              fujisato: a2,
              gojome: a2,
              hachirogata: a2,
              happou: a2,
              higashinaruse: a2,
              honjo: a2,
              honjyo: a2,
              ikawa: a2,
              kamikoani: a2,
              kamioka: a2,
              katagami: a2,
              kazuno: a2,
              kitaakita: a2,
              kosaka: a2,
              kyowa: a2,
              misato: a2,
              mitane: a2,
              moriyoshi: a2,
              nikaho: a2,
              noshiro: a2,
              odate: a2,
              oga: a2,
              ogata: a2,
              semboku: a2,
              yokote: a2,
              yurihonjo: a2
            }
          ],
          aomori: [
            1,
            {
              aomori: a2,
              gonohe: a2,
              hachinohe: a2,
              hashikami: a2,
              hiranai: a2,
              hirosaki: a2,
              itayanagi: a2,
              kuroishi: a2,
              misawa: a2,
              mutsu: a2,
              nakadomari: a2,
              noheji: a2,
              oirase: a2,
              owani: a2,
              rokunohe: a2,
              sannohe: a2,
              shichinohe: a2,
              shingo: a2,
              takko: a2,
              towada: a2,
              tsugaru: a2,
              tsuruta: a2
            }
          ],
          chiba: [
            1,
            {
              abiko: a2,
              asahi: a2,
              chonan: a2,
              chosei: a2,
              choshi: a2,
              chuo: a2,
              funabashi: a2,
              futtsu: a2,
              hanamigawa: a2,
              ichihara: a2,
              ichikawa: a2,
              ichinomiya: a2,
              inzai: a2,
              isumi: a2,
              kamagaya: a2,
              kamogawa: a2,
              kashiwa: a2,
              katori: a2,
              katsuura: a2,
              kimitsu: a2,
              kisarazu: a2,
              kozaki: a2,
              kujukuri: a2,
              kyonan: a2,
              matsudo: a2,
              midori: a2,
              mihama: a2,
              minamiboso: a2,
              mobara: a2,
              mutsuzawa: a2,
              nagara: a2,
              nagareyama: a2,
              narashino: a2,
              narita: a2,
              noda: a2,
              oamishirasato: a2,
              omigawa: a2,
              onjuku: a2,
              otaki: a2,
              sakae: a2,
              sakura: a2,
              shimofusa: a2,
              shirako: a2,
              shiroi: a2,
              shisui: a2,
              sodegaura: a2,
              sosa: a2,
              tako: a2,
              tateyama: a2,
              togane: a2,
              tohnosho: a2,
              tomisato: a2,
              urayasu: a2,
              yachimata: a2,
              yachiyo: a2,
              yokaichiba: a2,
              yokoshibahikari: a2,
              yotsukaido: a2
            }
          ],
          ehime: [
            1,
            {
              ainan: a2,
              honai: a2,
              ikata: a2,
              imabari: a2,
              iyo: a2,
              kamijima: a2,
              kihoku: a2,
              kumakogen: a2,
              masaki: a2,
              matsuno: a2,
              matsuyama: a2,
              namikata: a2,
              niihama: a2,
              ozu: a2,
              saijo: a2,
              seiyo: a2,
              shikokuchuo: a2,
              tobe: a2,
              toon: a2,
              uchiko: a2,
              uwajima: a2,
              yawatahama: a2
            }
          ],
          fukui: [
            1,
            {
              echizen: a2,
              eiheiji: a2,
              fukui: a2,
              ikeda: a2,
              katsuyama: a2,
              mihama: a2,
              minamiechizen: a2,
              obama: a2,
              ohi: a2,
              ono: a2,
              sabae: a2,
              sakai: a2,
              takahama: a2,
              tsuruga: a2,
              wakasa: a2
            }
          ],
          fukuoka: [
            1,
            {
              ashiya: a2,
              buzen: a2,
              chikugo: a2,
              chikuho: a2,
              chikujo: a2,
              chikushino: a2,
              chikuzen: a2,
              chuo: a2,
              dazaifu: a2,
              fukuchi: a2,
              hakata: a2,
              higashi: a2,
              hirokawa: a2,
              hisayama: a2,
              iizuka: a2,
              inatsuki: a2,
              kaho: a2,
              kasuga: a2,
              kasuya: a2,
              kawara: a2,
              keisen: a2,
              koga: a2,
              kurate: a2,
              kurogi: a2,
              kurume: a2,
              minami: a2,
              miyako: a2,
              miyama: a2,
              miyawaka: a2,
              mizumaki: a2,
              munakata: a2,
              nakagawa: a2,
              nakama: a2,
              nishi: a2,
              nogata: a2,
              ogori: a2,
              okagaki: a2,
              okawa: a2,
              oki: a2,
              omuta: a2,
              onga: a2,
              onojo: a2,
              oto: a2,
              saigawa: a2,
              sasaguri: a2,
              shingu: a2,
              shinyoshitomi: a2,
              shonai: a2,
              soeda: a2,
              sue: a2,
              tachiarai: a2,
              tagawa: a2,
              takata: a2,
              toho: a2,
              toyotsu: a2,
              tsuiki: a2,
              ukiha: a2,
              umi: a2,
              usui: a2,
              yamada: a2,
              yame: a2,
              yanagawa: a2,
              yukuhashi: a2
            }
          ],
          fukushima: [
            1,
            {
              aizubange: a2,
              aizumisato: a2,
              aizuwakamatsu: a2,
              asakawa: a2,
              bandai: a2,
              date: a2,
              fukushima: a2,
              furudono: a2,
              futaba: a2,
              hanawa: a2,
              higashi: a2,
              hirata: a2,
              hirono: a2,
              iitate: a2,
              inawashiro: a2,
              ishikawa: a2,
              iwaki: a2,
              izumizaki: a2,
              kagamiishi: a2,
              kaneyama: a2,
              kawamata: a2,
              kitakata: a2,
              kitashiobara: a2,
              koori: a2,
              koriyama: a2,
              kunimi: a2,
              miharu: a2,
              mishima: a2,
              namie: a2,
              nango: a2,
              nishiaizu: a2,
              nishigo: a2,
              okuma: a2,
              omotego: a2,
              ono: a2,
              otama: a2,
              samegawa: a2,
              shimogo: a2,
              shirakawa: a2,
              showa: a2,
              soma: a2,
              sukagawa: a2,
              taishin: a2,
              tamakawa: a2,
              tanagura: a2,
              tenei: a2,
              yabuki: a2,
              yamato: a2,
              yamatsuri: a2,
              yanaizu: a2,
              yugawa: a2
            }
          ],
          gifu: [
            1,
            {
              anpachi: a2,
              ena: a2,
              gifu: a2,
              ginan: a2,
              godo: a2,
              gujo: a2,
              hashima: a2,
              hichiso: a2,
              hida: a2,
              higashishirakawa: a2,
              ibigawa: a2,
              ikeda: a2,
              kakamigahara: a2,
              kani: a2,
              kasahara: a2,
              kasamatsu: a2,
              kawaue: a2,
              kitagata: a2,
              mino: a2,
              minokamo: a2,
              mitake: a2,
              mizunami: a2,
              motosu: a2,
              nakatsugawa: a2,
              ogaki: a2,
              sakahogi: a2,
              seki: a2,
              sekigahara: a2,
              shirakawa: a2,
              tajimi: a2,
              takayama: a2,
              tarui: a2,
              toki: a2,
              tomika: a2,
              wanouchi: a2,
              yamagata: a2,
              yaotsu: a2,
              yoro: a2
            }
          ],
          gunma: [
            1,
            {
              annaka: a2,
              chiyoda: a2,
              fujioka: a2,
              higashiagatsuma: a2,
              isesaki: a2,
              itakura: a2,
              kanna: a2,
              kanra: a2,
              katashina: a2,
              kawaba: a2,
              kiryu: a2,
              kusatsu: a2,
              maebashi: a2,
              meiwa: a2,
              midori: a2,
              minakami: a2,
              naganohara: a2,
              nakanojo: a2,
              nanmoku: a2,
              numata: a2,
              oizumi: a2,
              ora: a2,
              ota: a2,
              shibukawa: a2,
              shimonita: a2,
              shinto: a2,
              showa: a2,
              takasaki: a2,
              takayama: a2,
              tamamura: a2,
              tatebayashi: a2,
              tomioka: a2,
              tsukiyono: a2,
              tsumagoi: a2,
              ueno: a2,
              yoshioka: a2
            }
          ],
          hiroshima: [
            1,
            {
              asaminami: a2,
              daiwa: a2,
              etajima: a2,
              fuchu: a2,
              fukuyama: a2,
              hatsukaichi: a2,
              higashihiroshima: a2,
              hongo: a2,
              jinsekikogen: a2,
              kaita: a2,
              kui: a2,
              kumano: a2,
              kure: a2,
              mihara: a2,
              miyoshi: a2,
              naka: a2,
              onomichi: a2,
              osakikamijima: a2,
              otake: a2,
              saka: a2,
              sera: a2,
              seranishi: a2,
              shinichi: a2,
              shobara: a2,
              takehara: a2
            }
          ],
          hokkaido: [
            1,
            {
              abashiri: a2,
              abira: a2,
              aibetsu: a2,
              akabira: a2,
              akkeshi: a2,
              asahikawa: a2,
              ashibetsu: a2,
              ashoro: a2,
              assabu: a2,
              atsuma: a2,
              bibai: a2,
              biei: a2,
              bifuka: a2,
              bihoro: a2,
              biratori: a2,
              chippubetsu: a2,
              chitose: a2,
              date: a2,
              ebetsu: a2,
              embetsu: a2,
              eniwa: a2,
              erimo: a2,
              esan: a2,
              esashi: a2,
              fukagawa: a2,
              fukushima: a2,
              furano: a2,
              furubira: a2,
              haboro: a2,
              hakodate: a2,
              hamatonbetsu: a2,
              hidaka: a2,
              higashikagura: a2,
              higashikawa: a2,
              hiroo: a2,
              hokuryu: a2,
              hokuto: a2,
              honbetsu: a2,
              horokanai: a2,
              horonobe: a2,
              ikeda: a2,
              imakane: a2,
              ishikari: a2,
              iwamizawa: a2,
              iwanai: a2,
              kamifurano: a2,
              kamikawa: a2,
              kamishihoro: a2,
              kamisunagawa: a2,
              kamoenai: a2,
              kayabe: a2,
              kembuchi: a2,
              kikonai: a2,
              kimobetsu: a2,
              kitahiroshima: a2,
              kitami: a2,
              kiyosato: a2,
              koshimizu: a2,
              kunneppu: a2,
              kuriyama: a2,
              kuromatsunai: a2,
              kushiro: a2,
              kutchan: a2,
              kyowa: a2,
              mashike: a2,
              matsumae: a2,
              mikasa: a2,
              minamifurano: a2,
              mombetsu: a2,
              moseushi: a2,
              mukawa: a2,
              muroran: a2,
              naie: a2,
              nakagawa: a2,
              nakasatsunai: a2,
              nakatombetsu: a2,
              nanae: a2,
              nanporo: a2,
              nayoro: a2,
              nemuro: a2,
              niikappu: a2,
              niki: a2,
              nishiokoppe: a2,
              noboribetsu: a2,
              numata: a2,
              obihiro: a2,
              obira: a2,
              oketo: a2,
              okoppe: a2,
              otaru: a2,
              otobe: a2,
              otofuke: a2,
              otoineppu: a2,
              oumu: a2,
              ozora: a2,
              pippu: a2,
              rankoshi: a2,
              rebun: a2,
              rikubetsu: a2,
              rishiri: a2,
              rishirifuji: a2,
              saroma: a2,
              sarufutsu: a2,
              shakotan: a2,
              shari: a2,
              shibecha: a2,
              shibetsu: a2,
              shikabe: a2,
              shikaoi: a2,
              shimamaki: a2,
              shimizu: a2,
              shimokawa: a2,
              shinshinotsu: a2,
              shintoku: a2,
              shiranuka: a2,
              shiraoi: a2,
              shiriuchi: a2,
              sobetsu: a2,
              sunagawa: a2,
              taiki: a2,
              takasu: a2,
              takikawa: a2,
              takinoue: a2,
              teshikaga: a2,
              tobetsu: a2,
              tohma: a2,
              tomakomai: a2,
              tomari: a2,
              toya: a2,
              toyako: a2,
              toyotomi: a2,
              toyoura: a2,
              tsubetsu: a2,
              tsukigata: a2,
              urakawa: a2,
              urausu: a2,
              uryu: a2,
              utashinai: a2,
              wakkanai: a2,
              wassamu: a2,
              yakumo: a2,
              yoichi: a2
            }
          ],
          hyogo: [
            1,
            {
              aioi: a2,
              akashi: a2,
              ako: a2,
              amagasaki: a2,
              aogaki: a2,
              asago: a2,
              ashiya: a2,
              awaji: a2,
              fukusaki: a2,
              goshiki: a2,
              harima: a2,
              himeji: a2,
              ichikawa: a2,
              inagawa: a2,
              itami: a2,
              kakogawa: a2,
              kamigori: a2,
              kamikawa: a2,
              kasai: a2,
              kasuga: a2,
              kawanishi: a2,
              miki: a2,
              minamiawaji: a2,
              nishinomiya: a2,
              nishiwaki: a2,
              ono: a2,
              sanda: a2,
              sannan: a2,
              sasayama: a2,
              sayo: a2,
              shingu: a2,
              shinonsen: a2,
              shiso: a2,
              sumoto: a2,
              taishi: a2,
              taka: a2,
              takarazuka: a2,
              takasago: a2,
              takino: a2,
              tamba: a2,
              tatsuno: a2,
              toyooka: a2,
              yabu: a2,
              yashiro: a2,
              yoka: a2,
              yokawa: a2
            }
          ],
          ibaraki: [
            1,
            {
              ami: a2,
              asahi: a2,
              bando: a2,
              chikusei: a2,
              daigo: a2,
              fujishiro: a2,
              hitachi: a2,
              hitachinaka: a2,
              hitachiomiya: a2,
              hitachiota: a2,
              ibaraki: a2,
              ina: a2,
              inashiki: a2,
              itako: a2,
              iwama: a2,
              joso: a2,
              kamisu: a2,
              kasama: a2,
              kashima: a2,
              kasumigaura: a2,
              koga: a2,
              miho: a2,
              mito: a2,
              moriya: a2,
              naka: a2,
              namegata: a2,
              oarai: a2,
              ogawa: a2,
              omitama: a2,
              ryugasaki: a2,
              sakai: a2,
              sakuragawa: a2,
              shimodate: a2,
              shimotsuma: a2,
              shirosato: a2,
              sowa: a2,
              suifu: a2,
              takahagi: a2,
              tamatsukuri: a2,
              tokai: a2,
              tomobe: a2,
              tone: a2,
              toride: a2,
              tsuchiura: a2,
              tsukuba: a2,
              uchihara: a2,
              ushiku: a2,
              yachiyo: a2,
              yamagata: a2,
              yawara: a2,
              yuki: a2
            }
          ],
          ishikawa: [
            1,
            {
              anamizu: a2,
              hakui: a2,
              hakusan: a2,
              kaga: a2,
              kahoku: a2,
              kanazawa: a2,
              kawakita: a2,
              komatsu: a2,
              nakanoto: a2,
              nanao: a2,
              nomi: a2,
              nonoichi: a2,
              noto: a2,
              shika: a2,
              suzu: a2,
              tsubata: a2,
              tsurugi: a2,
              uchinada: a2,
              wajima: a2
            }
          ],
          iwate: [
            1,
            {
              fudai: a2,
              fujisawa: a2,
              hanamaki: a2,
              hiraizumi: a2,
              hirono: a2,
              ichinohe: a2,
              ichinoseki: a2,
              iwaizumi: a2,
              iwate: a2,
              joboji: a2,
              kamaishi: a2,
              kanegasaki: a2,
              karumai: a2,
              kawai: a2,
              kitakami: a2,
              kuji: a2,
              kunohe: a2,
              kuzumaki: a2,
              miyako: a2,
              mizusawa: a2,
              morioka: a2,
              ninohe: a2,
              noda: a2,
              ofunato: a2,
              oshu: a2,
              otsuchi: a2,
              rikuzentakata: a2,
              shiwa: a2,
              shizukuishi: a2,
              sumita: a2,
              tanohata: a2,
              tono: a2,
              yahaba: a2,
              yamada: a2
            }
          ],
          kagawa: [
            1,
            {
              ayagawa: a2,
              higashikagawa: a2,
              kanonji: a2,
              kotohira: a2,
              manno: a2,
              marugame: a2,
              mitoyo: a2,
              naoshima: a2,
              sanuki: a2,
              tadotsu: a2,
              takamatsu: a2,
              tonosho: a2,
              uchinomi: a2,
              utazu: a2,
              zentsuji: a2
            }
          ],
          kagoshima: [
            1,
            {
              akune: a2,
              amami: a2,
              hioki: a2,
              isa: a2,
              isen: a2,
              izumi: a2,
              kagoshima: a2,
              kanoya: a2,
              kawanabe: a2,
              kinko: a2,
              kouyama: a2,
              makurazaki: a2,
              matsumoto: a2,
              minamitane: a2,
              nakatane: a2,
              nishinoomote: a2,
              satsumasendai: a2,
              soo: a2,
              tarumizu: a2,
              yusui: a2
            }
          ],
          kanagawa: [
            1,
            {
              aikawa: a2,
              atsugi: a2,
              ayase: a2,
              chigasaki: a2,
              ebina: a2,
              fujisawa: a2,
              hadano: a2,
              hakone: a2,
              hiratsuka: a2,
              isehara: a2,
              kaisei: a2,
              kamakura: a2,
              kiyokawa: a2,
              matsuda: a2,
              minamiashigara: a2,
              miura: a2,
              nakai: a2,
              ninomiya: a2,
              odawara: a2,
              oi: a2,
              oiso: a2,
              sagamihara: a2,
              samukawa: a2,
              tsukui: a2,
              yamakita: a2,
              yamato: a2,
              yokosuka: a2,
              yugawara: a2,
              zama: a2,
              zushi: a2
            }
          ],
          kochi: [
            1,
            {
              aki: a2,
              geisei: a2,
              hidaka: a2,
              higashitsuno: a2,
              ino: a2,
              kagami: a2,
              kami: a2,
              kitagawa: a2,
              kochi: a2,
              mihara: a2,
              motoyama: a2,
              muroto: a2,
              nahari: a2,
              nakamura: a2,
              nankoku: a2,
              nishitosa: a2,
              niyodogawa: a2,
              ochi: a2,
              okawa: a2,
              otoyo: a2,
              otsuki: a2,
              sakawa: a2,
              sukumo: a2,
              susaki: a2,
              tosa: a2,
              tosashimizu: a2,
              toyo: a2,
              tsuno: a2,
              umaji: a2,
              yasuda: a2,
              yusuhara: a2
            }
          ],
          kumamoto: [
            1,
            {
              amakusa: a2,
              arao: a2,
              aso: a2,
              choyo: a2,
              gyokuto: a2,
              kamiamakusa: a2,
              kikuchi: a2,
              kumamoto: a2,
              mashiki: a2,
              mifune: a2,
              minamata: a2,
              minamioguni: a2,
              nagasu: a2,
              nishihara: a2,
              oguni: a2,
              ozu: a2,
              sumoto: a2,
              takamori: a2,
              uki: a2,
              uto: a2,
              yamaga: a2,
              yamato: a2,
              yatsushiro: a2
            }
          ],
          kyoto: [
            1,
            {
              ayabe: a2,
              fukuchiyama: a2,
              higashiyama: a2,
              ide: a2,
              ine: a2,
              joyo: a2,
              kameoka: a2,
              kamo: a2,
              kita: a2,
              kizu: a2,
              kumiyama: a2,
              kyotamba: a2,
              kyotanabe: a2,
              kyotango: a2,
              maizuru: a2,
              minami: a2,
              minamiyamashiro: a2,
              miyazu: a2,
              muko: a2,
              nagaokakyo: a2,
              nakagyo: a2,
              nantan: a2,
              oyamazaki: a2,
              sakyo: a2,
              seika: a2,
              tanabe: a2,
              uji: a2,
              ujitawara: a2,
              wazuka: a2,
              yamashina: a2,
              yawata: a2
            }
          ],
          mie: [
            1,
            {
              asahi: a2,
              inabe: a2,
              ise: a2,
              kameyama: a2,
              kawagoe: a2,
              kiho: a2,
              kisosaki: a2,
              kiwa: a2,
              komono: a2,
              kumano: a2,
              kuwana: a2,
              matsusaka: a2,
              meiwa: a2,
              mihama: a2,
              minamiise: a2,
              misugi: a2,
              miyama: a2,
              nabari: a2,
              shima: a2,
              suzuka: a2,
              tado: a2,
              taiki: a2,
              taki: a2,
              tamaki: a2,
              toba: a2,
              tsu: a2,
              udono: a2,
              ureshino: a2,
              watarai: a2,
              yokkaichi: a2
            }
          ],
          miyagi: [
            1,
            {
              furukawa: a2,
              higashimatsushima: a2,
              ishinomaki: a2,
              iwanuma: a2,
              kakuda: a2,
              kami: a2,
              kawasaki: a2,
              marumori: a2,
              matsushima: a2,
              minamisanriku: a2,
              misato: a2,
              murata: a2,
              natori: a2,
              ogawara: a2,
              ohira: a2,
              onagawa: a2,
              osaki: a2,
              rifu: a2,
              semine: a2,
              shibata: a2,
              shichikashuku: a2,
              shikama: a2,
              shiogama: a2,
              shiroishi: a2,
              tagajo: a2,
              taiwa: a2,
              tome: a2,
              tomiya: a2,
              wakuya: a2,
              watari: a2,
              yamamoto: a2,
              zao: a2
            }
          ],
          miyazaki: [
            1,
            {
              aya: a2,
              ebino: a2,
              gokase: a2,
              hyuga: a2,
              kadogawa: a2,
              kawaminami: a2,
              kijo: a2,
              kitagawa: a2,
              kitakata: a2,
              kitaura: a2,
              kobayashi: a2,
              kunitomi: a2,
              kushima: a2,
              mimata: a2,
              miyakonojo: a2,
              miyazaki: a2,
              morotsuka: a2,
              nichinan: a2,
              nishimera: a2,
              nobeoka: a2,
              saito: a2,
              shiiba: a2,
              shintomi: a2,
              takaharu: a2,
              takanabe: a2,
              takazaki: a2,
              tsuno: a2
            }
          ],
          nagano: [
            1,
            {
              achi: a2,
              agematsu: a2,
              anan: a2,
              aoki: a2,
              asahi: a2,
              azumino: a2,
              chikuhoku: a2,
              chikuma: a2,
              chino: a2,
              fujimi: a2,
              hakuba: a2,
              hara: a2,
              hiraya: a2,
              iida: a2,
              iijima: a2,
              iiyama: a2,
              iizuna: a2,
              ikeda: a2,
              ikusaka: a2,
              ina: a2,
              karuizawa: a2,
              kawakami: a2,
              kiso: a2,
              kisofukushima: a2,
              kitaaiki: a2,
              komagane: a2,
              komoro: a2,
              matsukawa: a2,
              matsumoto: a2,
              miasa: a2,
              minamiaiki: a2,
              minamimaki: a2,
              minamiminowa: a2,
              minowa: a2,
              miyada: a2,
              miyota: a2,
              mochizuki: a2,
              nagano: a2,
              nagawa: a2,
              nagiso: a2,
              nakagawa: a2,
              nakano: a2,
              nozawaonsen: a2,
              obuse: a2,
              ogawa: a2,
              okaya: a2,
              omachi: a2,
              omi: a2,
              ookuwa: a2,
              ooshika: a2,
              otaki: a2,
              otari: a2,
              sakae: a2,
              sakaki: a2,
              saku: a2,
              sakuho: a2,
              shimosuwa: a2,
              shinanomachi: a2,
              shiojiri: a2,
              suwa: a2,
              suzaka: a2,
              takagi: a2,
              takamori: a2,
              takayama: a2,
              tateshina: a2,
              tatsuno: a2,
              togakushi: a2,
              togura: a2,
              tomi: a2,
              ueda: a2,
              wada: a2,
              yamagata: a2,
              yamanouchi: a2,
              yasaka: a2,
              yasuoka: a2
            }
          ],
          nagasaki: [
            1,
            {
              chijiwa: a2,
              futsu: a2,
              goto: a2,
              hasami: a2,
              hirado: a2,
              iki: a2,
              isahaya: a2,
              kawatana: a2,
              kuchinotsu: a2,
              matsuura: a2,
              nagasaki: a2,
              obama: a2,
              omura: a2,
              oseto: a2,
              saikai: a2,
              sasebo: a2,
              seihi: a2,
              shimabara: a2,
              shinkamigoto: a2,
              togitsu: a2,
              tsushima: a2,
              unzen: a2
            }
          ],
          nara: [
            1,
            {
              ando: a2,
              gose: a2,
              heguri: a2,
              higashiyoshino: a2,
              ikaruga: a2,
              ikoma: a2,
              kamikitayama: a2,
              kanmaki: a2,
              kashiba: a2,
              kashihara: a2,
              katsuragi: a2,
              kawai: a2,
              kawakami: a2,
              kawanishi: a2,
              koryo: a2,
              kurotaki: a2,
              mitsue: a2,
              miyake: a2,
              nara: a2,
              nosegawa: a2,
              oji: a2,
              ouda: a2,
              oyodo: a2,
              sakurai: a2,
              sango: a2,
              shimoichi: a2,
              shimokitayama: a2,
              shinjo: a2,
              soni: a2,
              takatori: a2,
              tawaramoto: a2,
              tenkawa: a2,
              tenri: a2,
              uda: a2,
              yamatokoriyama: a2,
              yamatotakada: a2,
              yamazoe: a2,
              yoshino: a2
            }
          ],
          niigata: [
            1,
            {
              aga: a2,
              agano: a2,
              gosen: a2,
              itoigawa: a2,
              izumozaki: a2,
              joetsu: a2,
              kamo: a2,
              kariwa: a2,
              kashiwazaki: a2,
              minamiuonuma: a2,
              mitsuke: a2,
              muika: a2,
              murakami: a2,
              myoko: a2,
              nagaoka: a2,
              niigata: a2,
              ojiya: a2,
              omi: a2,
              sado: a2,
              sanjo: a2,
              seiro: a2,
              seirou: a2,
              sekikawa: a2,
              shibata: a2,
              tagami: a2,
              tainai: a2,
              tochio: a2,
              tokamachi: a2,
              tsubame: a2,
              tsunan: a2,
              uonuma: a2,
              yahiko: a2,
              yoita: a2,
              yuzawa: a2
            }
          ],
          oita: [
            1,
            {
              beppu: a2,
              bungoono: a2,
              bungotakada: a2,
              hasama: a2,
              hiji: a2,
              himeshima: a2,
              hita: a2,
              kamitsue: a2,
              kokonoe: a2,
              kuju: a2,
              kunisaki: a2,
              kusu: a2,
              oita: a2,
              saiki: a2,
              taketa: a2,
              tsukumi: a2,
              usa: a2,
              usuki: a2,
              yufu: a2
            }
          ],
          okayama: [
            1,
            {
              akaiwa: a2,
              asakuchi: a2,
              bizen: a2,
              hayashima: a2,
              ibara: a2,
              kagamino: a2,
              kasaoka: a2,
              kibichuo: a2,
              kumenan: a2,
              kurashiki: a2,
              maniwa: a2,
              misaki: a2,
              nagi: a2,
              niimi: a2,
              nishiawakura: a2,
              okayama: a2,
              satosho: a2,
              setouchi: a2,
              shinjo: a2,
              shoo: a2,
              soja: a2,
              takahashi: a2,
              tamano: a2,
              tsuyama: a2,
              wake: a2,
              yakage: a2
            }
          ],
          okinawa: [
            1,
            {
              aguni: a2,
              ginowan: a2,
              ginoza: a2,
              gushikami: a2,
              haebaru: a2,
              higashi: a2,
              hirara: a2,
              iheya: a2,
              ishigaki: a2,
              ishikawa: a2,
              itoman: a2,
              izena: a2,
              kadena: a2,
              kin: a2,
              kitadaito: a2,
              kitanakagusuku: a2,
              kumejima: a2,
              kunigami: a2,
              minamidaito: a2,
              motobu: a2,
              nago: a2,
              naha: a2,
              nakagusuku: a2,
              nakijin: a2,
              nanjo: a2,
              nishihara: a2,
              ogimi: a2,
              okinawa: a2,
              onna: a2,
              shimoji: a2,
              taketomi: a2,
              tarama: a2,
              tokashiki: a2,
              tomigusuku: a2,
              tonaki: a2,
              urasoe: a2,
              uruma: a2,
              yaese: a2,
              yomitan: a2,
              yonabaru: a2,
              yonaguni: a2,
              zamami: a2
            }
          ],
          osaka: [
            1,
            {
              abeno: a2,
              chihayaakasaka: a2,
              chuo: a2,
              daito: a2,
              fujiidera: a2,
              habikino: a2,
              hannan: a2,
              higashiosaka: a2,
              higashisumiyoshi: a2,
              higashiyodogawa: a2,
              hirakata: a2,
              ibaraki: a2,
              ikeda: a2,
              izumi: a2,
              izumiotsu: a2,
              izumisano: a2,
              kadoma: a2,
              kaizuka: a2,
              kanan: a2,
              kashiwara: a2,
              katano: a2,
              kawachinagano: a2,
              kishiwada: a2,
              kita: a2,
              kumatori: a2,
              matsubara: a2,
              minato: a2,
              minoh: a2,
              misaki: a2,
              moriguchi: a2,
              neyagawa: a2,
              nishi: a2,
              nose: a2,
              osakasayama: a2,
              sakai: a2,
              sayama: a2,
              sennan: a2,
              settsu: a2,
              shijonawate: a2,
              shimamoto: a2,
              suita: a2,
              tadaoka: a2,
              taishi: a2,
              tajiri: a2,
              takaishi: a2,
              takatsuki: a2,
              tondabayashi: a2,
              toyonaka: a2,
              toyono: a2,
              yao: a2
            }
          ],
          saga: [
            1,
            {
              ariake: a2,
              arita: a2,
              fukudomi: a2,
              genkai: a2,
              hamatama: a2,
              hizen: a2,
              imari: a2,
              kamimine: a2,
              kanzaki: a2,
              karatsu: a2,
              kashima: a2,
              kitagata: a2,
              kitahata: a2,
              kiyama: a2,
              kouhoku: a2,
              kyuragi: a2,
              nishiarita: a2,
              ogi: a2,
              omachi: a2,
              ouchi: a2,
              saga: a2,
              shiroishi: a2,
              taku: a2,
              tara: a2,
              tosu: a2,
              yoshinogari: a2
            }
          ],
          saitama: [
            1,
            {
              arakawa: a2,
              asaka: a2,
              chichibu: a2,
              fujimi: a2,
              fujimino: a2,
              fukaya: a2,
              hanno: a2,
              hanyu: a2,
              hasuda: a2,
              hatogaya: a2,
              hatoyama: a2,
              hidaka: a2,
              higashichichibu: a2,
              higashimatsuyama: a2,
              honjo: a2,
              ina: a2,
              iruma: a2,
              iwatsuki: a2,
              kamiizumi: a2,
              kamikawa: a2,
              kamisato: a2,
              kasukabe: a2,
              kawagoe: a2,
              kawaguchi: a2,
              kawajima: a2,
              kazo: a2,
              kitamoto: a2,
              koshigaya: a2,
              kounosu: a2,
              kuki: a2,
              kumagaya: a2,
              matsubushi: a2,
              minano: a2,
              misato: a2,
              miyashiro: a2,
              miyoshi: a2,
              moroyama: a2,
              nagatoro: a2,
              namegawa: a2,
              niiza: a2,
              ogano: a2,
              ogawa: a2,
              ogose: a2,
              okegawa: a2,
              omiya: a2,
              otaki: a2,
              ranzan: a2,
              ryokami: a2,
              saitama: a2,
              sakado: a2,
              satte: a2,
              sayama: a2,
              shiki: a2,
              shiraoka: a2,
              soka: a2,
              sugito: a2,
              toda: a2,
              tokigawa: a2,
              tokorozawa: a2,
              tsurugashima: a2,
              urawa: a2,
              warabi: a2,
              yashio: a2,
              yokoze: a2,
              yono: a2,
              yorii: a2,
              yoshida: a2,
              yoshikawa: a2,
              yoshimi: a2
            }
          ],
          shiga: [
            1,
            {
              aisho: a2,
              gamo: a2,
              higashiomi: a2,
              hikone: a2,
              koka: a2,
              konan: a2,
              kosei: a2,
              koto: a2,
              kusatsu: a2,
              maibara: a2,
              moriyama: a2,
              nagahama: a2,
              nishiazai: a2,
              notogawa: a2,
              omihachiman: a2,
              otsu: a2,
              ritto: a2,
              ryuoh: a2,
              takashima: a2,
              takatsuki: a2,
              torahime: a2,
              toyosato: a2,
              yasu: a2
            }
          ],
          shimane: [
            1,
            {
              akagi: a2,
              ama: a2,
              gotsu: a2,
              hamada: a2,
              higashiizumo: a2,
              hikawa: a2,
              hikimi: a2,
              izumo: a2,
              kakinoki: a2,
              masuda: a2,
              matsue: a2,
              misato: a2,
              nishinoshima: a2,
              ohda: a2,
              okinoshima: a2,
              okuizumo: a2,
              shimane: a2,
              tamayu: a2,
              tsuwano: a2,
              unnan: a2,
              yakumo: a2,
              yasugi: a2,
              yatsuka: a2
            }
          ],
          shizuoka: [
            1,
            {
              arai: a2,
              atami: a2,
              fuji: a2,
              fujieda: a2,
              fujikawa: a2,
              fujinomiya: a2,
              fukuroi: a2,
              gotemba: a2,
              haibara: a2,
              hamamatsu: a2,
              higashiizu: a2,
              ito: a2,
              iwata: a2,
              izu: a2,
              izunokuni: a2,
              kakegawa: a2,
              kannami: a2,
              kawanehon: a2,
              kawazu: a2,
              kikugawa: a2,
              kosai: a2,
              makinohara: a2,
              matsuzaki: a2,
              minamiizu: a2,
              mishima: a2,
              morimachi: a2,
              nishiizu: a2,
              numazu: a2,
              omaezaki: a2,
              shimada: a2,
              shimizu: a2,
              shimoda: a2,
              shizuoka: a2,
              susono: a2,
              yaizu: a2,
              yoshida: a2
            }
          ],
          tochigi: [
            1,
            {
              ashikaga: a2,
              bato: a2,
              haga: a2,
              ichikai: a2,
              iwafune: a2,
              kaminokawa: a2,
              kanuma: a2,
              karasuyama: a2,
              kuroiso: a2,
              mashiko: a2,
              mibu: a2,
              moka: a2,
              motegi: a2,
              nasu: a2,
              nasushiobara: a2,
              nikko: a2,
              nishikata: a2,
              nogi: a2,
              ohira: a2,
              ohtawara: a2,
              oyama: a2,
              sakura: a2,
              sano: a2,
              shimotsuke: a2,
              shioya: a2,
              takanezawa: a2,
              tochigi: a2,
              tsuga: a2,
              ujiie: a2,
              utsunomiya: a2,
              yaita: a2
            }
          ],
          tokushima: [
            1,
            {
              aizumi: a2,
              anan: a2,
              ichiba: a2,
              itano: a2,
              kainan: a2,
              komatsushima: a2,
              matsushige: a2,
              mima: a2,
              minami: a2,
              miyoshi: a2,
              mugi: a2,
              nakagawa: a2,
              naruto: a2,
              sanagochi: a2,
              shishikui: a2,
              tokushima: a2,
              wajiki: a2
            }
          ],
          tokyo: [
            1,
            {
              adachi: a2,
              akiruno: a2,
              akishima: a2,
              aogashima: a2,
              arakawa: a2,
              bunkyo: a2,
              chiyoda: a2,
              chofu: a2,
              chuo: a2,
              edogawa: a2,
              fuchu: a2,
              fussa: a2,
              hachijo: a2,
              hachioji: a2,
              hamura: a2,
              higashikurume: a2,
              higashimurayama: a2,
              higashiyamato: a2,
              hino: a2,
              hinode: a2,
              hinohara: a2,
              inagi: a2,
              itabashi: a2,
              katsushika: a2,
              kita: a2,
              kiyose: a2,
              kodaira: a2,
              koganei: a2,
              kokubunji: a2,
              komae: a2,
              koto: a2,
              kouzushima: a2,
              kunitachi: a2,
              machida: a2,
              meguro: a2,
              minato: a2,
              mitaka: a2,
              mizuho: a2,
              musashimurayama: a2,
              musashino: a2,
              nakano: a2,
              nerima: a2,
              ogasawara: a2,
              okutama: a2,
              ome: a2,
              oshima: a2,
              ota: a2,
              setagaya: a2,
              shibuya: a2,
              shinagawa: a2,
              shinjuku: a2,
              suginami: a2,
              sumida: a2,
              tachikawa: a2,
              taito: a2,
              tama: a2,
              toshima: a2
            }
          ],
          tottori: [
            1,
            {
              chizu: a2,
              hino: a2,
              kawahara: a2,
              koge: a2,
              kotoura: a2,
              misasa: a2,
              nanbu: a2,
              nichinan: a2,
              sakaiminato: a2,
              tottori: a2,
              wakasa: a2,
              yazu: a2,
              yonago: a2
            }
          ],
          toyama: [
            1,
            {
              asahi: a2,
              fuchu: a2,
              fukumitsu: a2,
              funahashi: a2,
              himi: a2,
              imizu: a2,
              inami: a2,
              johana: a2,
              kamiichi: a2,
              kurobe: a2,
              nakaniikawa: a2,
              namerikawa: a2,
              nanto: a2,
              nyuzen: a2,
              oyabe: a2,
              taira: a2,
              takaoka: a2,
              tateyama: a2,
              toga: a2,
              tonami: a2,
              toyama: a2,
              unazuki: a2,
              uozu: a2,
              yamada: a2
            }
          ],
          wakayama: [
            1,
            {
              arida: a2,
              aridagawa: a2,
              gobo: a2,
              hashimoto: a2,
              hidaka: a2,
              hirogawa: a2,
              inami: a2,
              iwade: a2,
              kainan: a2,
              kamitonda: a2,
              katsuragi: a2,
              kimino: a2,
              kinokawa: a2,
              kitayama: a2,
              koya: a2,
              koza: a2,
              kozagawa: a2,
              kudoyama: a2,
              kushimoto: a2,
              mihama: a2,
              misato: a2,
              nachikatsuura: a2,
              shingu: a2,
              shirahama: a2,
              taiji: a2,
              tanabe: a2,
              wakayama: a2,
              yuasa: a2,
              yura: a2
            }
          ],
          yamagata: [
            1,
            {
              asahi: a2,
              funagata: a2,
              higashine: a2,
              iide: a2,
              kahoku: a2,
              kaminoyama: a2,
              kaneyama: a2,
              kawanishi: a2,
              mamurogawa: a2,
              mikawa: a2,
              murayama: a2,
              nagai: a2,
              nakayama: a2,
              nanyo: a2,
              nishikawa: a2,
              obanazawa: a2,
              oe: a2,
              oguni: a2,
              ohkura: a2,
              oishida: a2,
              sagae: a2,
              sakata: a2,
              sakegawa: a2,
              shinjo: a2,
              shirataka: a2,
              shonai: a2,
              takahata: a2,
              tendo: a2,
              tozawa: a2,
              tsuruoka: a2,
              yamagata: a2,
              yamanobe: a2,
              yonezawa: a2,
              yuza: a2
            }
          ],
          yamaguchi: [
            1,
            {
              abu: a2,
              hagi: a2,
              hikari: a2,
              hofu: a2,
              iwakuni: a2,
              kudamatsu: a2,
              mitou: a2,
              nagato: a2,
              oshima: a2,
              shimonoseki: a2,
              shunan: a2,
              tabuse: a2,
              tokuyama: a2,
              toyota: a2,
              ube: a2,
              yuu: a2
            }
          ],
          yamanashi: [
            1,
            {
              chuo: a2,
              doshi: a2,
              fuefuki: a2,
              fujikawa: a2,
              fujikawaguchiko: a2,
              fujiyoshida: a2,
              hayakawa: a2,
              hokuto: a2,
              ichikawamisato: a2,
              kai: a2,
              kofu: a2,
              koshu: a2,
              kosuge: a2,
              "minami-alps": a2,
              minobu: a2,
              nakamichi: a2,
              nanbu: a2,
              narusawa: a2,
              nirasaki: a2,
              nishikatsura: a2,
              oshino: a2,
              otsuki: a2,
              showa: a2,
              tabayama: a2,
              tsuru: a2,
              uenohara: a2,
              yamanakako: a2,
              yamanashi: a2
            }
          ],
          "xn--4pvxs": a2,
          "\u6803\u6728": a2,
          "xn--vgu402c": a2,
          "\u611B\u77E5": a2,
          "xn--c3s14m": a2,
          "\u611B\u5A9B": a2,
          "xn--f6qx53a": a2,
          "\u5175\u5EAB": a2,
          "xn--8pvr4u": a2,
          "\u718A\u672C": a2,
          "xn--uist22h": a2,
          "\u8328\u57CE": a2,
          "xn--djrs72d6uy": a2,
          "\u5317\u6D77\u9053": a2,
          "xn--mkru45i": a2,
          "\u5343\u8449": a2,
          "xn--0trq7p7nn": a2,
          "\u548C\u6B4C\u5C71": a2,
          "xn--8ltr62k": a2,
          "\u9577\u5D0E": a2,
          "xn--2m4a15e": a2,
          "\u9577\u91CE": a2,
          "xn--efvn9s": a2,
          "\u65B0\u6F5F": a2,
          "xn--32vp30h": a2,
          "\u9752\u68EE": a2,
          "xn--4it797k": a2,
          "\u9759\u5CA1": a2,
          "xn--1lqs71d": a2,
          "\u6771\u4EAC": a2,
          "xn--5rtp49c": a2,
          "\u77F3\u5DDD": a2,
          "xn--5js045d": a2,
          "\u57FC\u7389": a2,
          "xn--ehqz56n": a2,
          "\u4E09\u91CD": a2,
          "xn--1lqs03n": a2,
          "\u4EAC\u90FD": a2,
          "xn--qqqt11m": a2,
          "\u4F50\u8CC0": a2,
          "xn--kbrq7o": a2,
          "\u5927\u5206": a2,
          "xn--pssu33l": a2,
          "\u5927\u962A": a2,
          "xn--ntsq17g": a2,
          "\u5948\u826F": a2,
          "xn--uisz3g": a2,
          "\u5BAE\u57CE": a2,
          "xn--6btw5a": a2,
          "\u5BAE\u5D0E": a2,
          "xn--1ctwo": a2,
          "\u5BCC\u5C71": a2,
          "xn--6orx2r": a2,
          "\u5C71\u53E3": a2,
          "xn--rht61e": a2,
          "\u5C71\u5F62": a2,
          "xn--rht27z": a2,
          "\u5C71\u68A8": a2,
          "xn--djty4k": a2,
          "\u5CA9\u624B": a2,
          "xn--nit225k": a2,
          "\u5C90\u961C": a2,
          "xn--rht3d": a2,
          "\u5CA1\u5C71": a2,
          "xn--klty5x": a2,
          "\u5CF6\u6839": a2,
          "xn--kltx9a": a2,
          "\u5E83\u5CF6": a2,
          "xn--kltp7d": a2,
          "\u5FB3\u5CF6": a2,
          "xn--uuwu58a": a2,
          "\u6C96\u7E04": a2,
          "xn--zbx025d": a2,
          "\u6ECB\u8CC0": a2,
          "xn--ntso0iqx3a": a2,
          "\u795E\u5948\u5DDD": a2,
          "xn--elqq16h": a2,
          "\u798F\u4E95": a2,
          "xn--4it168d": a2,
          "\u798F\u5CA1": a2,
          "xn--klt787d": a2,
          "\u798F\u5CF6": a2,
          "xn--rny31h": a2,
          "\u79CB\u7530": a2,
          "xn--7t0a264c": a2,
          "\u7FA4\u99AC": a2,
          "xn--5rtq34k": a2,
          "\u9999\u5DDD": a2,
          "xn--k7yn95e": a2,
          "\u9AD8\u77E5": a2,
          "xn--tor131o": a2,
          "\u9CE5\u53D6": a2,
          "xn--d5qv7z876c": a2,
          "\u9E7F\u5150\u5CF6": a2,
          kawasaki: m2,
          kitakyushu: m2,
          kobe: m2,
          nagoya: m2,
          sapporo: m2,
          sendai: m2,
          yokohama: m2,
          buyshop: o2,
          fashionstore: o2,
          handcrafted: o2,
          kawaiishop: o2,
          supersale: o2,
          theshop: o2,
          usercontent: o2,
          angry: o2,
          babyblue: o2,
          babymilk: o2,
          backdrop: o2,
          bambina: o2,
          bitter: o2,
          blush: o2,
          boo: o2,
          boy: o2,
          boyfriend: o2,
          but: o2,
          candypop: o2,
          capoo: o2,
          catfood: o2,
          cheap: o2,
          chicappa: o2,
          chillout: o2,
          chips: o2,
          chowder: o2,
          chu: o2,
          ciao: o2,
          cocotte: o2,
          coolblog: o2,
          cranky: o2,
          cutegirl: o2,
          daa: o2,
          deca: o2,
          deci: o2,
          digick: o2,
          egoism: o2,
          fakefur: o2,
          fem: o2,
          flier: o2,
          floppy: o2,
          fool: o2,
          frenchkiss: o2,
          girlfriend: o2,
          girly: o2,
          gloomy: o2,
          gonna: o2,
          greater: o2,
          hacca: o2,
          heavy: o2,
          her: o2,
          hiho: o2,
          hippy: o2,
          holy: o2,
          hungry: o2,
          icurus: o2,
          itigo: o2,
          jellybean: o2,
          kikirara: o2,
          kill: o2,
          kilo: o2,
          kuron: o2,
          littlestar: o2,
          lolipopmc: o2,
          lolitapunk: o2,
          lomo: o2,
          lovepop: o2,
          lovesick: o2,
          main: o2,
          mods: o2,
          mond: o2,
          mongolian: o2,
          moo: o2,
          namaste: o2,
          nikita: o2,
          nobushi: o2,
          noor: o2,
          oops: o2,
          parallel: o2,
          parasite: o2,
          pecori: o2,
          peewee: o2,
          penne: o2,
          pepper: o2,
          perma: o2,
          pigboat: o2,
          pinoko: o2,
          punyu: o2,
          pupu: o2,
          pussycat: o2,
          pya: o2,
          raindrop: o2,
          readymade: o2,
          sadist: o2,
          schoolbus: o2,
          secret: o2,
          staba: o2,
          stripper: o2,
          sub: o2,
          sunnyday: o2,
          thick: o2,
          tonkotsu: o2,
          under: o2,
          upper: o2,
          velvet: o2,
          verse: o2,
          versus: o2,
          vivian: o2,
          watson: o2,
          weblike: o2,
          whitesnow: o2,
          zombie: o2,
          blogspot: o2,
          "2-d": o2,
          bona: o2,
          crap: o2,
          daynight: o2,
          eek: o2,
          flop: o2,
          halfmoon: o2,
          jeez: o2,
          matrix: o2,
          mimoza: o2,
          netgamers: o2,
          nyanta: o2,
          o0o0: o2,
          rdy: o2,
          rgr: o2,
          rulez: o2,
          sakurastorage: [
            0,
            {
              isk01: R,
              isk02: R
            }
          ],
          saloon: o2,
          sblo: o2,
          skr: o2,
          tank: o2,
          "uh-oh": o2,
          undo: o2,
          webaccel: [
            0,
            {
              rs: o2,
              user: o2
            }
          ],
          websozai: o2,
          xii: o2
        }
      ],
      ke: [
        1,
        {
          ac: a2,
          co: n2,
          go: a2,
          info: a2,
          me: a2,
          mobi: a2,
          ne: a2,
          or: a2,
          sc: a2
        }
      ],
      kg: [
        1,
        {
          org: a2,
          net: a2,
          com: a2,
          edu: a2,
          gov: a2,
          mil: a2,
          io: o2,
          jp: o2,
          tv: o2,
          uk: o2,
          us: o2
        }
      ],
      kh: m2,
      ki: T,
      km: [
        1,
        {
          org: a2,
          nom: a2,
          gov: a2,
          prd: a2,
          tm: a2,
          edu: a2,
          mil: a2,
          ass: a2,
          com: a2,
          coop: a2,
          asso: a2,
          presse: a2,
          medecin: a2,
          notaires: a2,
          pharmaciens: a2,
          veterinaire: a2,
          gouv: a2
        }
      ],
      kn: [
        1,
        {
          net: a2,
          org: a2,
          edu: a2,
          gov: a2
        }
      ],
      kp: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          org: a2,
          rep: a2,
          tra: a2
        }
      ],
      kr: [
        1,
        {
          ac: a2,
          co: a2,
          es: a2,
          go: a2,
          hs: a2,
          kg: a2,
          mil: a2,
          ms: a2,
          ne: a2,
          or: a2,
          pe: a2,
          re: a2,
          sc: a2,
          busan: a2,
          chungbuk: a2,
          chungnam: a2,
          daegu: a2,
          daejeon: a2,
          gangwon: a2,
          gwangju: a2,
          gyeongbuk: a2,
          gyeonggi: a2,
          gyeongnam: a2,
          incheon: a2,
          jeju: a2,
          jeonbuk: a2,
          jeonnam: a2,
          seoul: a2,
          ulsan: a2,
          blogspot: o2
        }
      ],
      kw: [
        1,
        {
          com: a2,
          edu: a2,
          emb: a2,
          gov: a2,
          ind: a2,
          net: a2,
          org: a2
        }
      ],
      ky: E,
      kz: [
        1,
        {
          org: a2,
          edu: a2,
          net: a2,
          gov: a2,
          mil: a2,
          com: a2,
          jcloud: o2,
          kazteleport: [
            0,
            {
              upaas: o2
            }
          ]
        }
      ],
      la: [
        1,
        {
          int: a2,
          net: a2,
          info: a2,
          edu: a2,
          gov: a2,
          per: a2,
          com: a2,
          org: a2,
          bnr: o2,
          c: o2
        }
      ],
      lb: e2,
      lc: [
        1,
        {
          com: a2,
          net: a2,
          co: a2,
          org: a2,
          edu: a2,
          gov: a2,
          oy: o2
        }
      ],
      li: [
        1,
        {
          blogspot: o2,
          caa: o2
        }
      ],
      lk: [
        1,
        {
          gov: a2,
          sch: a2,
          net: a2,
          int: a2,
          com: a2,
          org: a2,
          edu: a2,
          ngo: a2,
          soc: a2,
          web: a2,
          ltd: a2,
          assn: a2,
          grp: a2,
          hotel: a2,
          ac: a2
        }
      ],
      lr: e2,
      ls: [
        1,
        {
          ac: a2,
          biz: a2,
          co: a2,
          edu: a2,
          gov: a2,
          info: a2,
          net: a2,
          org: a2,
          sc: a2,
          de: o2
        }
      ],
      lt: U,
      lu: [
        1,
        {
          blogspot: o2,
          "123website": o2
        }
      ],
      lv: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          org: a2,
          mil: a2,
          id: a2,
          net: a2,
          asn: a2,
          conf: a2
        }
      ],
      ly: [
        1,
        {
          com: a2,
          net: a2,
          gov: a2,
          plc: a2,
          edu: a2,
          sch: a2,
          med: a2,
          org: a2,
          id: a2
        }
      ],
      ma: [
        1,
        {
          co: a2,
          net: a2,
          gov: a2,
          org: a2,
          ac: a2,
          press: a2
        }
      ],
      mc: [
        1,
        {
          tm: a2,
          asso: a2
        }
      ],
      md: [
        1,
        {
          blogspot: o2,
          at: o2,
          de: o2,
          jp: o2,
          to: o2
        }
      ],
      me: [
        1,
        {
          co: a2,
          net: a2,
          org: a2,
          edu: a2,
          ac: a2,
          gov: a2,
          its: a2,
          priv: a2,
          c66: o2,
          daplie: [
            2,
            {
              localhost: o2
            }
          ],
          edgestack: o2,
          filegear: o2,
          "filegear-au": o2,
          "filegear-de": o2,
          "filegear-gb": o2,
          "filegear-ie": o2,
          "filegear-jp": o2,
          "filegear-sg": o2,
          glitch: o2,
          ravendb: o2,
          lohmus: o2,
          barsy: o2,
          mcpe: o2,
          mcdir: o2,
          soundcast: o2,
          tcp4: o2,
          brasilia: o2,
          ddns: o2,
          dnsfor: o2,
          hopto: o2,
          loginto: o2,
          noip: o2,
          webhop: o2,
          vp4: o2,
          diskstation: o2,
          dscloud: o2,
          i234: o2,
          myds: o2,
          synology: o2,
          transip: L,
          wedeploy: o2,
          yombo: o2,
          nohost: o2
        }
      ],
      mg: [
        1,
        {
          org: a2,
          nom: a2,
          gov: a2,
          prd: a2,
          tm: a2,
          edu: a2,
          mil: a2,
          com: a2,
          co: a2
        }
      ],
      mh: a2,
      mil: a2,
      mk: [
        1,
        {
          com: a2,
          org: a2,
          net: a2,
          edu: a2,
          gov: a2,
          inf: a2,
          name: a2,
          blogspot: o2
        }
      ],
      ml: [
        1,
        {
          com: a2,
          edu: a2,
          gouv: a2,
          gov: a2,
          net: a2,
          org: a2,
          presse: a2
        }
      ],
      mm: m2,
      mn: [
        1,
        {
          gov: a2,
          edu: a2,
          org: a2,
          nyc: o2
        }
      ],
      mo: e2,
      mobi: [
        1,
        {
          barsy: o2,
          dscloud: o2
        }
      ],
      mp: [
        1,
        {
          ju: o2
        }
      ],
      mq: a2,
      mr: U,
      ms: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          net: a2,
          org: a2,
          lab: o2,
          minisite: o2
        }
      ],
      mt: [
        1,
        {
          com: n2,
          edu: a2,
          net: a2,
          org: a2
        }
      ],
      mu: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          gov: a2,
          ac: a2,
          co: a2,
          or: a2
        }
      ],
      museum: a2,
      mv: [
        1,
        {
          aero: a2,
          biz: a2,
          com: a2,
          coop: a2,
          edu: a2,
          gov: a2,
          info: a2,
          int: a2,
          mil: a2,
          museum: a2,
          name: a2,
          net: a2,
          org: a2,
          pro: a2
        }
      ],
      mw: [
        1,
        {
          ac: a2,
          biz: a2,
          co: a2,
          com: a2,
          coop: a2,
          edu: a2,
          gov: a2,
          int: a2,
          museum: a2,
          net: a2,
          org: a2
        }
      ],
      mx: [
        1,
        {
          com: a2,
          org: a2,
          gob: a2,
          edu: a2,
          net: a2,
          blogspot: o2
        }
      ],
      my: [
        1,
        {
          biz: a2,
          com: a2,
          edu: a2,
          gov: a2,
          mil: a2,
          name: a2,
          net: a2,
          org: a2,
          blogspot: o2
        }
      ],
      mz: [
        1,
        {
          ac: a2,
          adv: a2,
          co: a2,
          edu: a2,
          gov: a2,
          mil: a2,
          net: a2,
          org: a2
        }
      ],
      na: [
        1,
        {
          info: a2,
          pro: a2,
          name: a2,
          school: a2,
          or: a2,
          dr: a2,
          us: a2,
          mx: a2,
          ca: a2,
          in: a2,
          cc: a2,
          tv: a2,
          ws: a2,
          mobi: a2,
          co: a2,
          com: a2,
          org: a2
        }
      ],
      name: [
        1,
        {
          her: Y2,
          his: Y2
        }
      ],
      nc: [
        1,
        {
          asso: a2,
          nom: a2
        }
      ],
      ne: a2,
      net: [
        1,
        {
          adobeaemcloud: o2,
          "adobeio-static": o2,
          adobeioruntime: o2,
          akadns: o2,
          akamai: o2,
          "akamai-staging": o2,
          akamaiedge: o2,
          "akamaiedge-staging": o2,
          akamaihd: o2,
          "akamaihd-staging": o2,
          akamaiorigin: o2,
          "akamaiorigin-staging": o2,
          akamaized: o2,
          "akamaized-staging": o2,
          edgekey: o2,
          "edgekey-staging": o2,
          edgesuite: o2,
          "edgesuite-staging": o2,
          alwaysdata: o2,
          myamaze: o2,
          cloudfront: o2,
          t3l3p0rt: o2,
          appudo: o2,
          "atlassian-dev": [
            0,
            {
              prod: [
                0,
                {
                  cdn: o2
                }
              ]
            }
          ],
          myfritz: o2,
          onavstack: o2,
          shopselect: o2,
          blackbaudcdn: o2,
          boomla: o2,
          bplaced: o2,
          square7: o2,
          gb: o2,
          hu: o2,
          jp: o2,
          se: o2,
          uk: o2,
          in: o2,
          clickrising: o2,
          cloudaccess: o2,
          "cdn77-ssl": o2,
          cdn77: [
            0,
            {
              r: o2
            }
          ],
          "feste-ip": o2,
          "knx-server": o2,
          "static-access": o2,
          cryptonomic: i2,
          dattolocal: o2,
          mydatto: o2,
          debian: o2,
          bitbridge: o2,
          "at-band-camp": o2,
          blogdns: o2,
          "broke-it": o2,
          buyshouses: o2,
          dnsalias: o2,
          dnsdojo: o2,
          "does-it": o2,
          dontexist: o2,
          dynalias: o2,
          dynathome: o2,
          endofinternet: o2,
          "from-az": o2,
          "from-co": o2,
          "from-la": o2,
          "from-ny": o2,
          "gets-it": o2,
          "ham-radio-op": o2,
          homeftp: o2,
          homeip: o2,
          homelinux: o2,
          homeunix: o2,
          "in-the-band": o2,
          "is-a-chef": o2,
          "is-a-geek": o2,
          "isa-geek": o2,
          "kicks-ass": o2,
          "office-on-the": o2,
          podzone: o2,
          "scrapper-site": o2,
          selfip: o2,
          "sells-it": o2,
          servebbs: o2,
          serveftp: o2,
          thruhere: o2,
          webhop: o2,
          definima: o2,
          casacam: o2,
          dynu: o2,
          dynv6: o2,
          twmail: o2,
          ru: o2,
          channelsdvr: [
            2,
            {
              u: o2
            }
          ],
          fastlylb: [
            2,
            {
              map: o2
            }
          ],
          fastly: [
            0,
            {
              freetls: o2,
              map: o2,
              prod: [
                0,
                {
                  a: o2,
                  global: o2
                }
              ],
              ssl: [
                0,
                {
                  a: o2,
                  b: o2,
                  global: o2
                }
              ]
            }
          ],
          edgeapp: o2,
          flynnhosting: o2,
          "cdn-edges": o2,
          heteml: o2,
          cloudfunctions: o2,
          moonscale: o2,
          "in-dsl": o2,
          "in-vpn": o2,
          ipifony: o2,
          iobb: o2,
          cloudjiffy: [
            2,
            {
              "fra1-de": o2,
              "west1-us": o2
            }
          ],
          elastx: [
            0,
            {
              "jls-sto1": o2,
              "jls-sto2": o2,
              "jls-sto3": o2
            }
          ],
          faststacks: o2,
          massivegrid: [
            0,
            {
              paas: [
                0,
                {
                  "fr-1": o2,
                  "lon-1": o2,
                  "lon-2": o2,
                  "ny-1": o2,
                  "ny-2": o2,
                  "sg-1": o2
                }
              ]
            }
          ],
          saveincloud: [
            0,
            {
              jelastic: o2,
              "nordeste-idc": o2
            }
          ],
          scaleforce: F,
          tsukaeru: G,
          kinghost: o2,
          uni5: o2,
          krellian: o2,
          barsy: o2,
          memset: o2,
          "azure-api": o2,
          azureedge: o2,
          azurefd: o2,
          azurewebsites: o2,
          "azure-mobile": o2,
          azurestaticapps: [
            2,
            {
              1: o2,
              2: o2,
              3: o2,
              4: o2,
              5: o2,
              6: o2,
              7: o2,
              centralus: o2,
              eastasia: o2,
              eastus2: o2,
              westeurope: o2,
              westus2: o2
            }
          ],
          cloudapp: o2,
          trafficmanager: o2,
          windows: [
            0,
            {
              core: [
                0,
                {
                  blob: o2
                }
              ],
              servicebus: o2
            }
          ],
          dnsup: o2,
          hicam: o2,
          "now-dns": o2,
          ownip: o2,
          vpndns: o2,
          "eating-organic": o2,
          mydissent: o2,
          myeffect: o2,
          mymediapc: o2,
          mypsx: o2,
          mysecuritycamera: o2,
          nhlfan: o2,
          "no-ip": o2,
          pgafan: o2,
          privatizehealthinsurance: o2,
          bounceme: o2,
          ddns: o2,
          redirectme: o2,
          serveblog: o2,
          serveminecraft: o2,
          sytes: o2,
          cloudycluster: o2,
          ovh: [
            0,
            {
              webpaas: i2,
              hosting: i2
            }
          ],
          bar0: o2,
          bar1: o2,
          bar2: o2,
          rackmaze: o2,
          squares: o2,
          schokokeks: o2,
          "firewall-gateway": o2,
          seidat: o2,
          senseering: o2,
          siteleaf: o2,
          "vps-host": [
            2,
            {
              jelastic: [
                0,
                {
                  atl: o2,
                  njs: o2,
                  ric: o2
                }
              ]
            }
          ],
          myspreadshop: o2,
          srcf: [
            0,
            {
              soc: o2,
              user: o2
            }
          ],
          supabase: o2,
          dsmynas: o2,
          familyds: o2,
          tailscale: [
            0,
            {
              beta: o2
            }
          ],
          ts: o2,
          torproject: [
            2,
            {
              pages: o2
            }
          ],
          "reserve-online": o2,
          "community-pro": o2,
          meinforum: o2,
          yandexcloud: [
            2,
            {
              storage: o2,
              website: o2
            }
          ],
          za: o2
        }
      ],
      nf: [
        1,
        {
          com: a2,
          net: a2,
          per: a2,
          rec: a2,
          web: a2,
          arts: a2,
          firm: a2,
          info: a2,
          other: a2,
          store: a2
        }
      ],
      ng: [
        1,
        {
          com: n2,
          edu: a2,
          gov: a2,
          i: a2,
          mil: a2,
          mobi: a2,
          name: a2,
          net: a2,
          org: a2,
          sch: a2,
          col: o2,
          firm: o2,
          gen: o2,
          ltd: o2,
          ngo: o2
        }
      ],
      ni: [
        1,
        {
          ac: a2,
          biz: a2,
          co: a2,
          com: a2,
          edu: a2,
          gob: a2,
          in: a2,
          info: a2,
          int: a2,
          mil: a2,
          net: a2,
          nom: a2,
          org: a2,
          web: a2
        }
      ],
      nl: [
        1,
        {
          co: o2,
          "hosting-cluster": o2,
          blogspot: o2,
          gov: o2,
          khplay: o2,
          "123website": o2,
          myspreadshop: o2,
          transurl: i2,
          cistron: o2,
          demon: o2
        }
      ],
      no: [
        1,
        {
          fhs: a2,
          vgs: a2,
          fylkesbibl: a2,
          folkebibl: a2,
          museum: a2,
          idrett: a2,
          priv: a2,
          mil: a2,
          stat: a2,
          dep: a2,
          kommune: a2,
          herad: a2,
          aa: Z,
          ah: Z,
          bu: Z,
          fm: Z,
          hl: Z,
          hm: Z,
          "jan-mayen": Z,
          mr: Z,
          nl: Z,
          nt: Z,
          of: Z,
          ol: Z,
          oslo: Z,
          rl: Z,
          sf: Z,
          st: Z,
          svalbard: Z,
          tm: Z,
          tr: Z,
          va: Z,
          vf: Z,
          akrehamn: a2,
          "xn--krehamn-dxa": a2,
          "\xE5krehamn": a2,
          algard: a2,
          "xn--lgrd-poac": a2,
          "\xE5lg\xE5rd": a2,
          arna: a2,
          brumunddal: a2,
          bryne: a2,
          bronnoysund: a2,
          "xn--brnnysund-m8ac": a2,
          "br\xF8nn\xF8ysund": a2,
          drobak: a2,
          "xn--drbak-wua": a2,
          "dr\xF8bak": a2,
          egersund: a2,
          fetsund: a2,
          floro: a2,
          "xn--flor-jra": a2,
          "flor\xF8": a2,
          fredrikstad: a2,
          hokksund: a2,
          honefoss: a2,
          "xn--hnefoss-q1a": a2,
          "h\xF8nefoss": a2,
          jessheim: a2,
          jorpeland: a2,
          "xn--jrpeland-54a": a2,
          "j\xF8rpeland": a2,
          kirkenes: a2,
          kopervik: a2,
          krokstadelva: a2,
          langevag: a2,
          "xn--langevg-jxa": a2,
          "langev\xE5g": a2,
          leirvik: a2,
          mjondalen: a2,
          "xn--mjndalen-64a": a2,
          "mj\xF8ndalen": a2,
          "mo-i-rana": a2,
          mosjoen: a2,
          "xn--mosjen-eya": a2,
          "mosj\xF8en": a2,
          nesoddtangen: a2,
          orkanger: a2,
          osoyro: a2,
          "xn--osyro-wua": a2,
          "os\xF8yro": a2,
          raholt: a2,
          "xn--rholt-mra": a2,
          "r\xE5holt": a2,
          sandnessjoen: a2,
          "xn--sandnessjen-ogb": a2,
          "sandnessj\xF8en": a2,
          skedsmokorset: a2,
          slattum: a2,
          spjelkavik: a2,
          stathelle: a2,
          stavern: a2,
          stjordalshalsen: a2,
          "xn--stjrdalshalsen-sqb": a2,
          "stj\xF8rdalshalsen": a2,
          tananger: a2,
          tranby: a2,
          vossevangen: a2,
          afjord: a2,
          "xn--fjord-lra": a2,
          "\xE5fjord": a2,
          agdenes: a2,
          al: a2,
          "xn--l-1fa": a2,
          "\xE5l": a2,
          alesund: a2,
          "xn--lesund-hua": a2,
          "\xE5lesund": a2,
          alstahaug: a2,
          alta: a2,
          "xn--lt-liac": a2,
          "\xE1lt\xE1": a2,
          alaheadju: a2,
          "xn--laheadju-7ya": a2,
          "\xE1laheadju": a2,
          alvdal: a2,
          amli: a2,
          "xn--mli-tla": a2,
          "\xE5mli": a2,
          amot: a2,
          "xn--mot-tla": a2,
          "\xE5mot": a2,
          andebu: a2,
          andoy: a2,
          "xn--andy-ira": a2,
          "and\xF8y": a2,
          andasuolo: a2,
          ardal: a2,
          "xn--rdal-poa": a2,
          "\xE5rdal": a2,
          aremark: a2,
          arendal: a2,
          "xn--s-1fa": a2,
          "\xE5s": a2,
          aseral: a2,
          "xn--seral-lra": a2,
          "\xE5seral": a2,
          asker: a2,
          askim: a2,
          askvoll: a2,
          askoy: a2,
          "xn--asky-ira": a2,
          "ask\xF8y": a2,
          asnes: a2,
          "xn--snes-poa": a2,
          "\xE5snes": a2,
          audnedaln: a2,
          aukra: a2,
          aure: a2,
          aurland: a2,
          "aurskog-holand": a2,
          "xn--aurskog-hland-jnb": a2,
          "aurskog-h\xF8land": a2,
          austevoll: a2,
          austrheim: a2,
          averoy: a2,
          "xn--avery-yua": a2,
          "aver\xF8y": a2,
          balestrand: a2,
          ballangen: a2,
          balat: a2,
          "xn--blt-elab": a2,
          "b\xE1l\xE1t": a2,
          balsfjord: a2,
          bahccavuotna: a2,
          "xn--bhccavuotna-k7a": a2,
          "b\xE1hccavuotna": a2,
          bamble: a2,
          bardu: a2,
          beardu: a2,
          beiarn: a2,
          bajddar: a2,
          "xn--bjddar-pta": a2,
          "b\xE1jddar": a2,
          baidar: a2,
          "xn--bidr-5nac": a2,
          "b\xE1id\xE1r": a2,
          berg: a2,
          bergen: a2,
          berlevag: a2,
          "xn--berlevg-jxa": a2,
          "berlev\xE5g": a2,
          bearalvahki: a2,
          "xn--bearalvhki-y4a": a2,
          "bearalv\xE1hki": a2,
          bindal: a2,
          birkenes: a2,
          bjarkoy: a2,
          "xn--bjarky-fya": a2,
          "bjark\xF8y": a2,
          bjerkreim: a2,
          bjugn: a2,
          bodo: a2,
          "xn--bod-2na": a2,
          "bod\xF8": a2,
          badaddja: a2,
          "xn--bdddj-mrabd": a2,
          "b\xE5d\xE5ddj\xE5": a2,
          budejju: a2,
          bokn: a2,
          bremanger: a2,
          bronnoy: a2,
          "xn--brnny-wuac": a2,
          "br\xF8nn\xF8y": a2,
          bygland: a2,
          bykle: a2,
          barum: a2,
          "xn--brum-voa": a2,
          "b\xE6rum": a2,
          telemark: [
            0,
            {
              bo: a2,
              "xn--b-5ga": a2,
              "b\xF8": a2
            }
          ],
          nordland: [
            0,
            {
              bo: a2,
              "xn--b-5ga": a2,
              "b\xF8": a2,
              heroy: a2,
              "xn--hery-ira": a2,
              "her\xF8y": a2
            }
          ],
          bievat: a2,
          "xn--bievt-0qa": a2,
          "biev\xE1t": a2,
          bomlo: a2,
          "xn--bmlo-gra": a2,
          "b\xF8mlo": a2,
          batsfjord: a2,
          "xn--btsfjord-9za": a2,
          "b\xE5tsfjord": a2,
          bahcavuotna: a2,
          "xn--bhcavuotna-s4a": a2,
          "b\xE1hcavuotna": a2,
          dovre: a2,
          drammen: a2,
          drangedal: a2,
          dyroy: a2,
          "xn--dyry-ira": a2,
          "dyr\xF8y": a2,
          donna: a2,
          "xn--dnna-gra": a2,
          "d\xF8nna": a2,
          eid: a2,
          eidfjord: a2,
          eidsberg: a2,
          eidskog: a2,
          eidsvoll: a2,
          eigersund: a2,
          elverum: a2,
          enebakk: a2,
          engerdal: a2,
          etne: a2,
          etnedal: a2,
          evenes: a2,
          evenassi: a2,
          "xn--eveni-0qa01ga": a2,
          "even\xE1\u0161\u0161i": a2,
          "evje-og-hornnes": a2,
          farsund: a2,
          fauske: a2,
          fuossko: a2,
          fuoisku: a2,
          fedje: a2,
          fet: a2,
          finnoy: a2,
          "xn--finny-yua": a2,
          "finn\xF8y": a2,
          fitjar: a2,
          fjaler: a2,
          fjell: a2,
          flakstad: a2,
          flatanger: a2,
          flekkefjord: a2,
          flesberg: a2,
          flora: a2,
          fla: a2,
          "xn--fl-zia": a2,
          "fl\xE5": a2,
          folldal: a2,
          forsand: a2,
          fosnes: a2,
          frei: a2,
          frogn: a2,
          froland: a2,
          frosta: a2,
          frana: a2,
          "xn--frna-woa": a2,
          "fr\xE6na": a2,
          froya: a2,
          "xn--frya-hra": a2,
          "fr\xF8ya": a2,
          fusa: a2,
          fyresdal: a2,
          forde: a2,
          "xn--frde-gra": a2,
          "f\xF8rde": a2,
          gamvik: a2,
          gangaviika: a2,
          "xn--ggaviika-8ya47h": a2,
          "g\xE1\u014Bgaviika": a2,
          gaular: a2,
          gausdal: a2,
          gildeskal: a2,
          "xn--gildeskl-g0a": a2,
          "gildesk\xE5l": a2,
          giske: a2,
          gjemnes: a2,
          gjerdrum: a2,
          gjerstad: a2,
          gjesdal: a2,
          gjovik: a2,
          "xn--gjvik-wua": a2,
          "gj\xF8vik": a2,
          gloppen: a2,
          gol: a2,
          gran: a2,
          grane: a2,
          granvin: a2,
          gratangen: a2,
          grimstad: a2,
          grong: a2,
          kraanghke: a2,
          "xn--kranghke-b0a": a2,
          "kr\xE5anghke": a2,
          grue: a2,
          gulen: a2,
          hadsel: a2,
          halden: a2,
          halsa: a2,
          hamar: a2,
          hamaroy: a2,
          habmer: a2,
          "xn--hbmer-xqa": a2,
          "h\xE1bmer": a2,
          hapmir: a2,
          "xn--hpmir-xqa": a2,
          "h\xE1pmir": a2,
          hammerfest: a2,
          hammarfeasta: a2,
          "xn--hmmrfeasta-s4ac": a2,
          "h\xE1mm\xE1rfeasta": a2,
          haram: a2,
          hareid: a2,
          harstad: a2,
          hasvik: a2,
          aknoluokta: a2,
          "xn--koluokta-7ya57h": a2,
          "\xE1k\u014Boluokta": a2,
          hattfjelldal: a2,
          aarborte: a2,
          haugesund: a2,
          hemne: a2,
          hemnes: a2,
          hemsedal: a2,
          "more-og-romsdal": [
            0,
            {
              heroy: a2,
              sande: a2
            }
          ],
          "xn--mre-og-romsdal-qqb": [
            0,
            {
              "xn--hery-ira": a2,
              sande: a2
            }
          ],
          "m\xF8re-og-romsdal": [
            0,
            {
              "her\xF8y": a2,
              sande: a2
            }
          ],
          hitra: a2,
          hjartdal: a2,
          hjelmeland: a2,
          hobol: a2,
          "xn--hobl-ira": a2,
          "hob\xF8l": a2,
          hof: a2,
          hol: a2,
          hole: a2,
          holmestrand: a2,
          holtalen: a2,
          "xn--holtlen-hxa": a2,
          "holt\xE5len": a2,
          hornindal: a2,
          horten: a2,
          hurdal: a2,
          hurum: a2,
          hvaler: a2,
          hyllestad: a2,
          hagebostad: a2,
          "xn--hgebostad-g3a": a2,
          "h\xE6gebostad": a2,
          hoyanger: a2,
          "xn--hyanger-q1a": a2,
          "h\xF8yanger": a2,
          hoylandet: a2,
          "xn--hylandet-54a": a2,
          "h\xF8ylandet": a2,
          ha: a2,
          "xn--h-2fa": a2,
          "h\xE5": a2,
          ibestad: a2,
          inderoy: a2,
          "xn--indery-fya": a2,
          "inder\xF8y": a2,
          iveland: a2,
          jevnaker: a2,
          jondal: a2,
          jolster: a2,
          "xn--jlster-bya": a2,
          "j\xF8lster": a2,
          karasjok: a2,
          karasjohka: a2,
          "xn--krjohka-hwab49j": a2,
          "k\xE1r\xE1\u0161johka": a2,
          karlsoy: a2,
          galsa: a2,
          "xn--gls-elac": a2,
          "g\xE1ls\xE1": a2,
          karmoy: a2,
          "xn--karmy-yua": a2,
          "karm\xF8y": a2,
          kautokeino: a2,
          guovdageaidnu: a2,
          klepp: a2,
          klabu: a2,
          "xn--klbu-woa": a2,
          "kl\xE6bu": a2,
          kongsberg: a2,
          kongsvinger: a2,
          kragero: a2,
          "xn--krager-gya": a2,
          "krager\xF8": a2,
          kristiansand: a2,
          kristiansund: a2,
          krodsherad: a2,
          "xn--krdsherad-m8a": a2,
          "kr\xF8dsherad": a2,
          kvalsund: a2,
          rahkkeravju: a2,
          "xn--rhkkervju-01af": a2,
          "r\xE1hkker\xE1vju": a2,
          kvam: a2,
          kvinesdal: a2,
          kvinnherad: a2,
          kviteseid: a2,
          kvitsoy: a2,
          "xn--kvitsy-fya": a2,
          "kvits\xF8y": a2,
          kvafjord: a2,
          "xn--kvfjord-nxa": a2,
          "kv\xE6fjord": a2,
          giehtavuoatna: a2,
          kvanangen: a2,
          "xn--kvnangen-k0a": a2,
          "kv\xE6nangen": a2,
          navuotna: a2,
          "xn--nvuotna-hwa": a2,
          "n\xE1vuotna": a2,
          kafjord: a2,
          "xn--kfjord-iua": a2,
          "k\xE5fjord": a2,
          gaivuotna: a2,
          "xn--givuotna-8ya": a2,
          "g\xE1ivuotna": a2,
          larvik: a2,
          lavangen: a2,
          lavagis: a2,
          loabat: a2,
          "xn--loabt-0qa": a2,
          "loab\xE1t": a2,
          lebesby: a2,
          davvesiida: a2,
          leikanger: a2,
          leirfjord: a2,
          leka: a2,
          leksvik: a2,
          lenvik: a2,
          leangaviika: a2,
          "xn--leagaviika-52b": a2,
          "lea\u014Bgaviika": a2,
          lesja: a2,
          levanger: a2,
          lier: a2,
          lierne: a2,
          lillehammer: a2,
          lillesand: a2,
          lindesnes: a2,
          lindas: a2,
          "xn--linds-pra": a2,
          "lind\xE5s": a2,
          lom: a2,
          loppa: a2,
          lahppi: a2,
          "xn--lhppi-xqa": a2,
          "l\xE1hppi": a2,
          lund: a2,
          lunner: a2,
          luroy: a2,
          "xn--lury-ira": a2,
          "lur\xF8y": a2,
          luster: a2,
          lyngdal: a2,
          lyngen: a2,
          ivgu: a2,
          lardal: a2,
          lerdal: a2,
          "xn--lrdal-sra": a2,
          "l\xE6rdal": a2,
          lodingen: a2,
          "xn--ldingen-q1a": a2,
          "l\xF8dingen": a2,
          lorenskog: a2,
          "xn--lrenskog-54a": a2,
          "l\xF8renskog": a2,
          loten: a2,
          "xn--lten-gra": a2,
          "l\xF8ten": a2,
          malvik: a2,
          masoy: a2,
          "xn--msy-ula0h": a2,
          "m\xE5s\xF8y": a2,
          muosat: a2,
          "xn--muost-0qa": a2,
          "muos\xE1t": a2,
          mandal: a2,
          marker: a2,
          marnardal: a2,
          masfjorden: a2,
          meland: a2,
          meldal: a2,
          melhus: a2,
          meloy: a2,
          "xn--mely-ira": a2,
          "mel\xF8y": a2,
          meraker: a2,
          "xn--merker-kua": a2,
          "mer\xE5ker": a2,
          moareke: a2,
          "xn--moreke-jua": a2,
          "mo\xE5reke": a2,
          midsund: a2,
          "midtre-gauldal": a2,
          modalen: a2,
          modum: a2,
          molde: a2,
          moskenes: a2,
          moss: a2,
          mosvik: a2,
          malselv: a2,
          "xn--mlselv-iua": a2,
          "m\xE5lselv": a2,
          malatvuopmi: a2,
          "xn--mlatvuopmi-s4a": a2,
          "m\xE1latvuopmi": a2,
          namdalseid: a2,
          aejrie: a2,
          namsos: a2,
          namsskogan: a2,
          naamesjevuemie: a2,
          "xn--nmesjevuemie-tcba": a2,
          "n\xE5\xE5mesjevuemie": a2,
          laakesvuemie: a2,
          nannestad: a2,
          narvik: a2,
          narviika: a2,
          naustdal: a2,
          "nedre-eiker": a2,
          akershus: $,
          buskerud: $,
          nesna: a2,
          nesodden: a2,
          nesseby: a2,
          unjarga: a2,
          "xn--unjrga-rta": a2,
          "unj\xE1rga": a2,
          nesset: a2,
          nissedal: a2,
          nittedal: a2,
          "nord-aurdal": a2,
          "nord-fron": a2,
          "nord-odal": a2,
          norddal: a2,
          nordkapp: a2,
          davvenjarga: a2,
          "xn--davvenjrga-y4a": a2,
          "davvenj\xE1rga": a2,
          "nordre-land": a2,
          nordreisa: a2,
          raisa: a2,
          "xn--risa-5na": a2,
          "r\xE1isa": a2,
          "nore-og-uvdal": a2,
          notodden: a2,
          naroy: a2,
          "xn--nry-yla5g": a2,
          "n\xE6r\xF8y": a2,
          notteroy: a2,
          "xn--nttery-byae": a2,
          "n\xF8tter\xF8y": a2,
          odda: a2,
          oksnes: a2,
          "xn--ksnes-uua": a2,
          "\xF8ksnes": a2,
          oppdal: a2,
          oppegard: a2,
          "xn--oppegrd-ixa": a2,
          "oppeg\xE5rd": a2,
          orkdal: a2,
          orland: a2,
          "xn--rland-uua": a2,
          "\xF8rland": a2,
          orskog: a2,
          "xn--rskog-uua": a2,
          "\xF8rskog": a2,
          orsta: a2,
          "xn--rsta-fra": a2,
          "\xF8rsta": a2,
          hedmark: [
            0,
            {
              os: a2,
              valer: a2,
              "xn--vler-qoa": a2,
              "v\xE5ler": a2
            }
          ],
          hordaland: [
            0,
            {
              os: a2
            }
          ],
          osen: a2,
          osteroy: a2,
          "xn--ostery-fya": a2,
          "oster\xF8y": a2,
          "ostre-toten": a2,
          "xn--stre-toten-zcb": a2,
          "\xF8stre-toten": a2,
          overhalla: a2,
          "ovre-eiker": a2,
          "xn--vre-eiker-k8a": a2,
          "\xF8vre-eiker": a2,
          oyer: a2,
          "xn--yer-zna": a2,
          "\xF8yer": a2,
          oygarden: a2,
          "xn--ygarden-p1a": a2,
          "\xF8ygarden": a2,
          "oystre-slidre": a2,
          "xn--ystre-slidre-ujb": a2,
          "\xF8ystre-slidre": a2,
          porsanger: a2,
          porsangu: a2,
          "xn--porsgu-sta26f": a2,
          "pors\xE1\u014Bgu": a2,
          porsgrunn: a2,
          radoy: a2,
          "xn--rady-ira": a2,
          "rad\xF8y": a2,
          rakkestad: a2,
          rana: a2,
          ruovat: a2,
          randaberg: a2,
          rauma: a2,
          rendalen: a2,
          rennebu: a2,
          rennesoy: a2,
          "xn--rennesy-v1a": a2,
          "rennes\xF8y": a2,
          rindal: a2,
          ringebu: a2,
          ringerike: a2,
          ringsaker: a2,
          rissa: a2,
          risor: a2,
          "xn--risr-ira": a2,
          "ris\xF8r": a2,
          roan: a2,
          rollag: a2,
          rygge: a2,
          ralingen: a2,
          "xn--rlingen-mxa": a2,
          "r\xE6lingen": a2,
          rodoy: a2,
          "xn--rdy-0nab": a2,
          "r\xF8d\xF8y": a2,
          romskog: a2,
          "xn--rmskog-bya": a2,
          "r\xF8mskog": a2,
          roros: a2,
          "xn--rros-gra": a2,
          "r\xF8ros": a2,
          rost: a2,
          "xn--rst-0na": a2,
          "r\xF8st": a2,
          royken: a2,
          "xn--ryken-vua": a2,
          "r\xF8yken": a2,
          royrvik: a2,
          "xn--ryrvik-bya": a2,
          "r\xF8yrvik": a2,
          rade: a2,
          "xn--rde-ula": a2,
          "r\xE5de": a2,
          salangen: a2,
          siellak: a2,
          saltdal: a2,
          salat: a2,
          "xn--slt-elab": a2,
          "s\xE1l\xE1t": a2,
          "xn--slat-5na": a2,
          "s\xE1lat": a2,
          samnanger: a2,
          vestfold: [
            0,
            {
              sande: a2
            }
          ],
          sandefjord: a2,
          sandnes: a2,
          sandoy: a2,
          "xn--sandy-yua": a2,
          "sand\xF8y": a2,
          sarpsborg: a2,
          sauda: a2,
          sauherad: a2,
          sel: a2,
          selbu: a2,
          selje: a2,
          seljord: a2,
          sigdal: a2,
          siljan: a2,
          sirdal: a2,
          skaun: a2,
          skedsmo: a2,
          ski: a2,
          skien: a2,
          skiptvet: a2,
          skjervoy: a2,
          "xn--skjervy-v1a": a2,
          "skjerv\xF8y": a2,
          skierva: a2,
          "xn--skierv-uta": a2,
          "skierv\xE1": a2,
          skjak: a2,
          "xn--skjk-soa": a2,
          "skj\xE5k": a2,
          skodje: a2,
          skanland: a2,
          "xn--sknland-fxa": a2,
          "sk\xE5nland": a2,
          skanit: a2,
          "xn--sknit-yqa": a2,
          "sk\xE1nit": a2,
          smola: a2,
          "xn--smla-hra": a2,
          "sm\xF8la": a2,
          snillfjord: a2,
          snasa: a2,
          "xn--snsa-roa": a2,
          "sn\xE5sa": a2,
          snoasa: a2,
          snaase: a2,
          "xn--snase-nra": a2,
          "sn\xE5ase": a2,
          sogndal: a2,
          sokndal: a2,
          sola: a2,
          solund: a2,
          songdalen: a2,
          sortland: a2,
          spydeberg: a2,
          stange: a2,
          stavanger: a2,
          steigen: a2,
          steinkjer: a2,
          stjordal: a2,
          "xn--stjrdal-s1a": a2,
          "stj\xF8rdal": a2,
          stokke: a2,
          "stor-elvdal": a2,
          stord: a2,
          stordal: a2,
          storfjord: a2,
          omasvuotna: a2,
          strand: a2,
          stranda: a2,
          stryn: a2,
          sula: a2,
          suldal: a2,
          sund: a2,
          sunndal: a2,
          surnadal: a2,
          sveio: a2,
          svelvik: a2,
          sykkylven: a2,
          sogne: a2,
          "xn--sgne-gra": a2,
          "s\xF8gne": a2,
          somna: a2,
          "xn--smna-gra": a2,
          "s\xF8mna": a2,
          "sondre-land": a2,
          "xn--sndre-land-0cb": a2,
          "s\xF8ndre-land": a2,
          "sor-aurdal": a2,
          "xn--sr-aurdal-l8a": a2,
          "s\xF8r-aurdal": a2,
          "sor-fron": a2,
          "xn--sr-fron-q1a": a2,
          "s\xF8r-fron": a2,
          "sor-odal": a2,
          "xn--sr-odal-q1a": a2,
          "s\xF8r-odal": a2,
          "sor-varanger": a2,
          "xn--sr-varanger-ggb": a2,
          "s\xF8r-varanger": a2,
          "matta-varjjat": a2,
          "xn--mtta-vrjjat-k7af": a2,
          "m\xE1tta-v\xE1rjjat": a2,
          sorfold: a2,
          "xn--srfold-bya": a2,
          "s\xF8rfold": a2,
          sorreisa: a2,
          "xn--srreisa-q1a": a2,
          "s\xF8rreisa": a2,
          sorum: a2,
          "xn--srum-gra": a2,
          "s\xF8rum": a2,
          tana: a2,
          deatnu: a2,
          time: a2,
          tingvoll: a2,
          tinn: a2,
          tjeldsund: a2,
          dielddanuorri: a2,
          tjome: a2,
          "xn--tjme-hra": a2,
          "tj\xF8me": a2,
          tokke: a2,
          tolga: a2,
          torsken: a2,
          tranoy: a2,
          "xn--trany-yua": a2,
          "tran\xF8y": a2,
          tromso: a2,
          "xn--troms-zua": a2,
          "troms\xF8": a2,
          tromsa: a2,
          romsa: a2,
          trondheim: a2,
          troandin: a2,
          trysil: a2,
          trana: a2,
          "xn--trna-woa": a2,
          "tr\xE6na": a2,
          trogstad: a2,
          "xn--trgstad-r1a": a2,
          "tr\xF8gstad": a2,
          tvedestrand: a2,
          tydal: a2,
          tynset: a2,
          tysfjord: a2,
          divtasvuodna: a2,
          divttasvuotna: a2,
          tysnes: a2,
          tysvar: a2,
          "xn--tysvr-vra": a2,
          "tysv\xE6r": a2,
          tonsberg: a2,
          "xn--tnsberg-q1a": a2,
          "t\xF8nsberg": a2,
          ullensaker: a2,
          ullensvang: a2,
          ulvik: a2,
          utsira: a2,
          vadso: a2,
          "xn--vads-jra": a2,
          "vads\xF8": a2,
          cahcesuolo: a2,
          "xn--hcesuolo-7ya35b": a2,
          "\u010D\xE1hcesuolo": a2,
          vaksdal: a2,
          valle: a2,
          vang: a2,
          vanylven: a2,
          vardo: a2,
          "xn--vard-jra": a2,
          "vard\xF8": a2,
          varggat: a2,
          "xn--vrggt-xqad": a2,
          "v\xE1rgg\xE1t": a2,
          vefsn: a2,
          vaapste: a2,
          vega: a2,
          vegarshei: a2,
          "xn--vegrshei-c0a": a2,
          "veg\xE5rshei": a2,
          vennesla: a2,
          verdal: a2,
          verran: a2,
          vestby: a2,
          vestnes: a2,
          "vestre-slidre": a2,
          "vestre-toten": a2,
          vestvagoy: a2,
          "xn--vestvgy-ixa6o": a2,
          "vestv\xE5g\xF8y": a2,
          vevelstad: a2,
          vik: a2,
          vikna: a2,
          vindafjord: a2,
          volda: a2,
          voss: a2,
          varoy: a2,
          "xn--vry-yla5g": a2,
          "v\xE6r\xF8y": a2,
          vagan: a2,
          "xn--vgan-qoa": a2,
          "v\xE5gan": a2,
          voagat: a2,
          vagsoy: a2,
          "xn--vgsy-qoa0j": a2,
          "v\xE5gs\xF8y": a2,
          vaga: a2,
          "xn--vg-yiab": a2,
          "v\xE5g\xE5": a2,
          ostfold: [
            0,
            {
              valer: a2
            }
          ],
          "xn--stfold-9xa": [
            0,
            {
              "xn--vler-qoa": a2
            }
          ],
          "\xF8stfold": [
            0,
            {
              "v\xE5ler": a2
            }
          ],
          co: o2,
          blogspot: o2,
          "123hjemmeside": o2,
          myspreadshop: o2
        }
      ],
      np: m2,
      nr: T,
      nu: [
        1,
        {
          merseine: o2,
          mine: o2,
          shacknet: o2,
          enterprisecloud: o2
        }
      ],
      nz: [
        1,
        {
          ac: a2,
          co: n2,
          cri: a2,
          geek: a2,
          gen: a2,
          govt: a2,
          health: a2,
          iwi: a2,
          kiwi: a2,
          maori: a2,
          mil: a2,
          "xn--mori-qsa": a2,
          "m\u0101ori": a2,
          net: a2,
          org: a2,
          parliament: a2,
          school: a2
        }
      ],
      om: [
        1,
        {
          co: a2,
          com: a2,
          edu: a2,
          gov: a2,
          med: a2,
          museum: a2,
          net: a2,
          org: a2,
          pro: a2
        }
      ],
      onion: a2,
      org: [
        1,
        {
          altervista: o2,
          amune: [
            0,
            {
              tele: o2
            }
          ],
          pimienta: o2,
          poivron: o2,
          potager: o2,
          sweetpepper: o2,
          ae: o2,
          us: o2,
          certmgr: o2,
          cdn77: [
            0,
            {
              c: o2,
              rsc: o2
            }
          ],
          "cdn77-secure": [
            0,
            {
              origin: [
                0,
                {
                  ssl: o2
                }
              ]
            }
          ],
          cloudns: o2,
          duckdns: o2,
          tunk: o2,
          dyndns: [
            2,
            {
              go: o2,
              home: o2
            }
          ],
          blogdns: o2,
          blogsite: o2,
          boldlygoingnowhere: o2,
          dnsalias: o2,
          dnsdojo: o2,
          doesntexist: o2,
          dontexist: o2,
          doomdns: o2,
          dvrdns: o2,
          dynalias: o2,
          endofinternet: o2,
          endoftheinternet: o2,
          "from-me": o2,
          "game-host": o2,
          gotdns: o2,
          "hobby-site": o2,
          homedns: o2,
          homeftp: o2,
          homelinux: o2,
          homeunix: o2,
          "is-a-bruinsfan": o2,
          "is-a-candidate": o2,
          "is-a-celticsfan": o2,
          "is-a-chef": o2,
          "is-a-geek": o2,
          "is-a-knight": o2,
          "is-a-linux-user": o2,
          "is-a-patsfan": o2,
          "is-a-soxfan": o2,
          "is-found": o2,
          "is-lost": o2,
          "is-saved": o2,
          "is-very-bad": o2,
          "is-very-evil": o2,
          "is-very-good": o2,
          "is-very-nice": o2,
          "is-very-sweet": o2,
          "isa-geek": o2,
          "kicks-ass": o2,
          misconfused: o2,
          podzone: o2,
          readmyblog: o2,
          selfip: o2,
          sellsyourhome: o2,
          servebbs: o2,
          serveftp: o2,
          servegame: o2,
          "stuff-4-sale": o2,
          webhop: o2,
          ddnss: o2,
          accesscam: o2,
          camdvr: o2,
          freeddns: o2,
          mywire: o2,
          webredirect: o2,
          eu: [
            2,
            {
              al: o2,
              asso: o2,
              at: o2,
              au: o2,
              be: o2,
              bg: o2,
              ca: o2,
              cd: o2,
              ch: o2,
              cn: o2,
              cy: o2,
              cz: o2,
              de: o2,
              dk: o2,
              edu: o2,
              ee: o2,
              es: o2,
              fi: o2,
              fr: o2,
              gr: o2,
              hr: o2,
              hu: o2,
              ie: o2,
              il: o2,
              in: o2,
              int: o2,
              is: o2,
              it: o2,
              jp: o2,
              kr: o2,
              lt: o2,
              lu: o2,
              lv: o2,
              mc: o2,
              me: o2,
              mk: o2,
              mt: o2,
              my: o2,
              net: o2,
              ng: o2,
              nl: o2,
              no: o2,
              nz: o2,
              paris: o2,
              pl: o2,
              pt: o2,
              "q-a": o2,
              ro: o2,
              ru: o2,
              se: o2,
              si: o2,
              sk: o2,
              tr: o2,
              uk: o2,
              us: o2
            }
          ],
          twmail: o2,
          fedorainfracloud: o2,
          fedorapeople: o2,
          fedoraproject: [
            0,
            {
              cloud: o2,
              os: D,
              stg: [
                0,
                {
                  os: D
                }
              ]
            }
          ],
          freedesktop: o2,
          hepforge: o2,
          "in-dsl": o2,
          "in-vpn": o2,
          js: o2,
          barsy: o2,
          mayfirst: o2,
          "mozilla-iot": o2,
          bmoattachments: o2,
          dynserv: o2,
          "now-dns": o2,
          "cable-modem": o2,
          collegefan: o2,
          couchpotatofries: o2,
          mlbfan: o2,
          mysecuritycamera: o2,
          nflfan: o2,
          "read-books": o2,
          ufcfan: o2,
          hopto: o2,
          myftp: o2,
          "no-ip": o2,
          zapto: o2,
          httpbin: o2,
          pubtls: o2,
          jpn: o2,
          "my-firewall": o2,
          myfirewall: o2,
          spdns: o2,
          "small-web": o2,
          dsmynas: o2,
          familyds: o2,
          teckids: R,
          tuxfamily: o2,
          diskstation: o2,
          hk: o2,
          wmflabs: o2,
          toolforge: o2,
          wmcloud: o2,
          za: o2
        }
      ],
      pa: [
        1,
        {
          ac: a2,
          gob: a2,
          com: a2,
          org: a2,
          sld: a2,
          edu: a2,
          net: a2,
          ing: a2,
          abo: a2,
          med: a2,
          nom: a2
        }
      ],
      pe: [
        1,
        {
          edu: a2,
          gob: a2,
          nom: a2,
          mil: a2,
          org: a2,
          com: a2,
          net: a2,
          blogspot: o2
        }
      ],
      pf: [
        1,
        {
          com: a2,
          org: a2,
          edu: a2
        }
      ],
      pg: m2,
      ph: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          gov: a2,
          edu: a2,
          ngo: a2,
          mil: a2,
          i: a2
        }
      ],
      pk: [
        1,
        {
          com: a2,
          net: a2,
          edu: a2,
          org: a2,
          fam: a2,
          biz: a2,
          web: a2,
          gov: a2,
          gob: a2,
          gok: a2,
          gon: a2,
          gop: a2,
          gos: a2,
          info: a2
        }
      ],
      pl: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          aid: a2,
          agro: a2,
          atm: a2,
          auto: a2,
          biz: a2,
          edu: a2,
          gmina: a2,
          gsm: a2,
          info: a2,
          mail: a2,
          miasta: a2,
          media: a2,
          mil: a2,
          nieruchomosci: a2,
          nom: a2,
          pc: a2,
          powiat: a2,
          priv: a2,
          realestate: a2,
          rel: a2,
          sex: a2,
          shop: a2,
          sklep: a2,
          sos: a2,
          szkola: a2,
          targi: a2,
          tm: a2,
          tourism: a2,
          travel: a2,
          turystyka: a2,
          gov: [
            1,
            {
              ap: a2,
              griw: a2,
              ic: a2,
              is: a2,
              kmpsp: a2,
              konsulat: a2,
              kppsp: a2,
              kwp: a2,
              kwpsp: a2,
              mup: a2,
              mw: a2,
              oia: a2,
              oirm: a2,
              oke: a2,
              oow: a2,
              oschr: a2,
              oum: a2,
              pa: a2,
              pinb: a2,
              piw: a2,
              po: a2,
              pr: a2,
              psp: a2,
              psse: a2,
              pup: a2,
              rzgw: a2,
              sa: a2,
              sdn: a2,
              sko: a2,
              so: a2,
              sr: a2,
              starostwo: a2,
              ug: a2,
              ugim: a2,
              um: a2,
              umig: a2,
              upow: a2,
              uppo: a2,
              us: a2,
              uw: a2,
              uzs: a2,
              wif: a2,
              wiih: a2,
              winb: a2,
              wios: a2,
              witd: a2,
              wiw: a2,
              wkz: a2,
              wsa: a2,
              wskr: a2,
              wsse: a2,
              wuoz: a2,
              wzmiuw: a2,
              zp: a2,
              zpisdn: a2
            }
          ],
          augustow: a2,
          "babia-gora": a2,
          bedzin: a2,
          beskidy: a2,
          bialowieza: a2,
          bialystok: a2,
          bielawa: a2,
          bieszczady: a2,
          boleslawiec: a2,
          bydgoszcz: a2,
          bytom: a2,
          cieszyn: a2,
          czeladz: a2,
          czest: a2,
          dlugoleka: a2,
          elblag: a2,
          elk: a2,
          glogow: a2,
          gniezno: a2,
          gorlice: a2,
          grajewo: a2,
          ilawa: a2,
          jaworzno: a2,
          "jelenia-gora": a2,
          jgora: a2,
          kalisz: a2,
          "kazimierz-dolny": a2,
          karpacz: a2,
          kartuzy: a2,
          kaszuby: a2,
          katowice: a2,
          kepno: a2,
          ketrzyn: a2,
          klodzko: a2,
          kobierzyce: a2,
          kolobrzeg: a2,
          konin: a2,
          konskowola: a2,
          kutno: a2,
          lapy: a2,
          lebork: a2,
          legnica: a2,
          lezajsk: a2,
          limanowa: a2,
          lomza: a2,
          lowicz: a2,
          lubin: a2,
          lukow: a2,
          malbork: a2,
          malopolska: a2,
          mazowsze: a2,
          mazury: a2,
          mielec: a2,
          mielno: a2,
          mragowo: a2,
          naklo: a2,
          nowaruda: a2,
          nysa: a2,
          olawa: a2,
          olecko: a2,
          olkusz: a2,
          olsztyn: a2,
          opoczno: a2,
          opole: a2,
          ostroda: a2,
          ostroleka: a2,
          ostrowiec: a2,
          ostrowwlkp: a2,
          pila: a2,
          pisz: a2,
          podhale: a2,
          podlasie: a2,
          polkowice: a2,
          pomorze: a2,
          pomorskie: a2,
          prochowice: a2,
          pruszkow: a2,
          przeworsk: a2,
          pulawy: a2,
          radom: a2,
          "rawa-maz": a2,
          rybnik: a2,
          rzeszow: a2,
          sanok: a2,
          sejny: a2,
          slask: a2,
          slupsk: a2,
          sosnowiec: a2,
          "stalowa-wola": a2,
          skoczow: a2,
          starachowice: a2,
          stargard: a2,
          suwalki: a2,
          swidnica: a2,
          swiebodzin: a2,
          swinoujscie: a2,
          szczecin: a2,
          szczytno: a2,
          tarnobrzeg: a2,
          tgory: a2,
          turek: a2,
          tychy: a2,
          ustka: a2,
          walbrzych: a2,
          warmia: a2,
          warszawa: a2,
          waw: a2,
          wegrow: a2,
          wielun: a2,
          wlocl: a2,
          wloclawek: a2,
          wodzislaw: a2,
          wolomin: a2,
          wroclaw: a2,
          zachpomor: a2,
          zagan: a2,
          zarow: a2,
          zgora: a2,
          zgorzelec: a2,
          beep: o2,
          "ecommerce-shop": o2,
          shoparena: o2,
          homesklep: o2,
          sdscloud: o2,
          unicloud: o2,
          krasnik: o2,
          leczna: o2,
          lubartow: o2,
          lublin: o2,
          poniatowa: o2,
          swidnik: o2,
          co: o2,
          torun: o2,
          simplesite: o2,
          art: o2,
          gliwice: o2,
          krakow: o2,
          poznan: o2,
          wroc: o2,
          zakopane: o2,
          myspreadshop: o2,
          gda: o2,
          gdansk: o2,
          gdynia: o2,
          med: o2,
          sopot: o2
        }
      ],
      pm: [
        1,
        {
          own: o2,
          name: o2
        }
      ],
      pn: [
        1,
        {
          gov: a2,
          co: a2,
          org: a2,
          edu: a2,
          net: a2
        }
      ],
      post: a2,
      pr: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          gov: a2,
          edu: a2,
          isla: a2,
          pro: a2,
          biz: a2,
          info: a2,
          name: a2,
          est: a2,
          prof: a2,
          ac: a2
        }
      ],
      pro: [
        1,
        {
          aaa: a2,
          aca: a2,
          acct: a2,
          avocat: a2,
          bar: a2,
          cpa: a2,
          eng: a2,
          jur: a2,
          law: a2,
          med: a2,
          recht: a2,
          "12chars": o2,
          cloudns: o2,
          dnstrace: [
            0,
            {
              bci: o2
            }
          ],
          barsy: o2
        }
      ],
      ps: [
        1,
        {
          edu: a2,
          gov: a2,
          sec: a2,
          plo: a2,
          com: a2,
          org: a2,
          net: a2
        }
      ],
      pt: [
        1,
        {
          net: a2,
          gov: a2,
          org: a2,
          edu: a2,
          int: a2,
          publ: a2,
          com: a2,
          nome: a2,
          blogspot: o2,
          "123paginaweb": o2
        }
      ],
      pw: [
        1,
        {
          co: a2,
          ne: a2,
          or: a2,
          ed: a2,
          go: a2,
          belau: a2,
          cloudns: o2,
          x443: o2
        }
      ],
      py: [
        1,
        {
          com: a2,
          coop: a2,
          edu: a2,
          gov: a2,
          mil: a2,
          net: a2,
          org: a2
        }
      ],
      qa: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          mil: a2,
          name: a2,
          net: a2,
          org: a2,
          sch: a2,
          blogspot: o2
        }
      ],
      re: [
        1,
        {
          asso: a2,
          com: a2,
          nom: a2,
          blogspot: o2
        }
      ],
      ro: [
        1,
        {
          arts: a2,
          com: a2,
          firm: a2,
          info: a2,
          nom: a2,
          nt: a2,
          org: a2,
          rec: a2,
          store: a2,
          tm: a2,
          www: a2,
          co: o2,
          shop: o2,
          blogspot: o2,
          barsy: o2
        }
      ],
      rs: [
        1,
        {
          ac: a2,
          co: a2,
          edu: a2,
          gov: a2,
          in: a2,
          org: a2,
          brendly: [
            0,
            {
              shop: o2
            }
          ],
          blogspot: o2,
          ua: o2,
          ox: o2
        }
      ],
      ru: [
        1,
        {
          ac: o2,
          edu: o2,
          gov: o2,
          int: o2,
          mil: o2,
          test: o2,
          eurodir: o2,
          adygeya: o2,
          bashkiria: o2,
          bir: o2,
          cbg: o2,
          com: o2,
          dagestan: o2,
          grozny: o2,
          kalmykia: o2,
          kustanai: o2,
          marine: o2,
          mordovia: o2,
          msk: o2,
          mytis: o2,
          nalchik: o2,
          nov: o2,
          pyatigorsk: o2,
          spb: o2,
          vladikavkaz: o2,
          vladimir: o2,
          blogspot: o2,
          na4u: o2,
          mircloud: o2,
          regruhosting: G,
          myjino: [
            2,
            {
              hosting: i2,
              landing: i2,
              spectrum: i2,
              vps: i2
            }
          ],
          cldmail: [
            0,
            {
              hb: o2
            }
          ],
          mcdir: [
            2,
            {
              vps: o2
            }
          ],
          mcpre: o2,
          net: o2,
          org: o2,
          pp: o2,
          "123sait": o2,
          lk3: o2,
          ras: o2
        }
      ],
      rw: [
        1,
        {
          ac: a2,
          co: a2,
          coop: a2,
          gov: a2,
          mil: a2,
          net: a2,
          org: a2
        }
      ],
      sa: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          gov: a2,
          med: a2,
          pub: a2,
          edu: a2,
          sch: a2
        }
      ],
      sb: e2,
      sc: e2,
      sd: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          edu: a2,
          med: a2,
          tv: a2,
          gov: a2,
          info: a2
        }
      ],
      se: [
        1,
        {
          a: a2,
          ac: a2,
          b: a2,
          bd: a2,
          brand: a2,
          c: a2,
          d: a2,
          e: a2,
          f: a2,
          fh: a2,
          fhsk: a2,
          fhv: a2,
          g: a2,
          h: a2,
          i: a2,
          k: a2,
          komforb: a2,
          kommunalforbund: a2,
          komvux: a2,
          l: a2,
          lanbib: a2,
          m: a2,
          n: a2,
          naturbruksgymn: a2,
          o: a2,
          org: a2,
          p: a2,
          parti: a2,
          pp: a2,
          press: a2,
          r: a2,
          s: a2,
          t: a2,
          tm: a2,
          u: a2,
          w: a2,
          x: a2,
          y: a2,
          z: a2,
          com: o2,
          blogspot: o2,
          conf: o2,
          iopsys: o2,
          "123minsida": o2,
          itcouldbewor: o2,
          myspreadshop: o2,
          paba: [
            0,
            {
              su: o2
            }
          ]
        }
      ],
      sg: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          gov: a2,
          edu: a2,
          per: a2,
          blogspot: o2,
          enscaled: o2
        }
      ],
      sh: [
        1,
        {
          com: a2,
          net: a2,
          gov: a2,
          org: a2,
          mil: a2,
          bip: o2,
          hashbang: o2,
          platform: [
            0,
            {
              ent: o2,
              eu: o2,
              us: o2
            }
          ],
          now: o2,
          vxl: o2,
          wedeploy: o2
        }
      ],
      si: [
        1,
        {
          gitapp: o2,
          gitpage: o2,
          blogspot: o2
        }
      ],
      sj: a2,
      sk: n2,
      sl: e2,
      sm: a2,
      sn: [
        1,
        {
          art: a2,
          com: a2,
          edu: a2,
          gouv: a2,
          org: a2,
          perso: a2,
          univ: a2,
          blogspot: o2
        }
      ],
      so: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          me: a2,
          net: a2,
          org: a2,
          sch: o2
        }
      ],
      sr: a2,
      ss: [
        1,
        {
          biz: a2,
          com: a2,
          edu: a2,
          gov: a2,
          me: a2,
          net: a2,
          org: a2,
          sch: a2
        }
      ],
      st: [
        1,
        {
          co: a2,
          com: a2,
          consulado: a2,
          edu: a2,
          embaixada: a2,
          mil: a2,
          net: a2,
          org: a2,
          principe: a2,
          saotome: a2,
          store: a2,
          kirara: o2,
          noho: o2
        }
      ],
      su: [
        1,
        {
          abkhazia: o2,
          adygeya: o2,
          aktyubinsk: o2,
          arkhangelsk: o2,
          armenia: o2,
          ashgabad: o2,
          azerbaijan: o2,
          balashov: o2,
          bashkiria: o2,
          bryansk: o2,
          bukhara: o2,
          chimkent: o2,
          dagestan: o2,
          "east-kazakhstan": o2,
          exnet: o2,
          georgia: o2,
          grozny: o2,
          ivanovo: o2,
          jambyl: o2,
          kalmykia: o2,
          kaluga: o2,
          karacol: o2,
          karaganda: o2,
          karelia: o2,
          khakassia: o2,
          krasnodar: o2,
          kurgan: o2,
          kustanai: o2,
          lenug: o2,
          mangyshlak: o2,
          mordovia: o2,
          msk: o2,
          murmansk: o2,
          nalchik: o2,
          navoi: o2,
          "north-kazakhstan": o2,
          nov: o2,
          obninsk: o2,
          penza: o2,
          pokrovsk: o2,
          sochi: o2,
          spb: o2,
          tashkent: o2,
          termez: o2,
          togliatti: o2,
          troitsk: o2,
          tselinograd: o2,
          tula: o2,
          tuva: o2,
          vladikavkaz: o2,
          vladimir: o2,
          vologda: o2
        }
      ],
      sv: [
        1,
        {
          com: a2,
          edu: a2,
          gob: a2,
          org: a2,
          red: a2
        }
      ],
      sx: s2,
      sy: Q,
      sz: [
        1,
        {
          co: a2,
          ac: a2,
          org: a2
        }
      ],
      tc: [
        1,
        {
          ch: o2,
          me: o2,
          we: o2
        }
      ],
      td: n2,
      tel: a2,
      tf: [
        1,
        {
          sch: o2
        }
      ],
      tg: a2,
      th: [
        1,
        {
          ac: a2,
          co: a2,
          go: a2,
          in: a2,
          mi: a2,
          net: a2,
          or: a2,
          online: o2,
          shop: o2
        }
      ],
      tj: [
        1,
        {
          ac: a2,
          biz: a2,
          co: a2,
          com: a2,
          edu: a2,
          go: a2,
          gov: a2,
          int: a2,
          mil: a2,
          name: a2,
          net: a2,
          nic: a2,
          org: a2,
          test: a2,
          web: a2
        }
      ],
      tk: a2,
      tl: s2,
      tm: [
        1,
        {
          com: a2,
          co: a2,
          org: a2,
          net: a2,
          nom: a2,
          gov: a2,
          mil: a2,
          edu: a2
        }
      ],
      tn: [
        1,
        {
          com: a2,
          ens: a2,
          fin: a2,
          gov: a2,
          ind: a2,
          info: a2,
          intl: a2,
          mincom: a2,
          nat: a2,
          net: a2,
          org: a2,
          perso: a2,
          tourism: a2,
          orangecloud: o2
        }
      ],
      to: [
        1,
        {
          611: o2,
          com: a2,
          gov: a2,
          net: a2,
          org: a2,
          edu: a2,
          mil: a2,
          oya: o2,
          rdv: o2,
          x0: o2,
          vpnplus: o2,
          quickconnect: b,
          nyan: o2
        }
      ],
      tr: [
        1,
        {
          av: a2,
          bbs: a2,
          bel: a2,
          biz: a2,
          com: n2,
          dr: a2,
          edu: a2,
          gen: a2,
          gov: a2,
          info: a2,
          mil: a2,
          k12: a2,
          kep: a2,
          name: a2,
          net: a2,
          org: a2,
          pol: a2,
          tel: a2,
          tsk: a2,
          tv: a2,
          web: a2,
          nc: s2
        }
      ],
      tt: [
        1,
        {
          co: a2,
          com: a2,
          org: a2,
          net: a2,
          biz: a2,
          info: a2,
          pro: a2,
          int: a2,
          coop: a2,
          jobs: a2,
          mobi: a2,
          travel: a2,
          museum: a2,
          aero: a2,
          name: a2,
          gov: a2,
          edu: a2
        }
      ],
      tv: [
        1,
        {
          dyndns: o2,
          "better-than": o2,
          "on-the-web": o2,
          "worse-than": o2,
          from: o2,
          sakura: o2
        }
      ],
      tw: [
        1,
        {
          edu: a2,
          gov: a2,
          mil: a2,
          com: [
            1,
            {
              mymailer: o2
            }
          ],
          net: a2,
          org: a2,
          idv: a2,
          game: a2,
          ebiz: a2,
          club: a2,
          "xn--zf0ao64a": a2,
          "\u7DB2\u8DEF": a2,
          "xn--uc0atv": a2,
          "\u7D44\u7E54": a2,
          "xn--czrw28b": a2,
          "\u5546\u696D": a2,
          url: o2,
          blogspot: o2
        }
      ],
      tz: [
        1,
        {
          ac: a2,
          co: a2,
          go: a2,
          hotel: a2,
          info: a2,
          me: a2,
          mil: a2,
          mobi: a2,
          ne: a2,
          or: a2,
          sc: a2,
          tv: a2
        }
      ],
      ua: [
        1,
        {
          com: a2,
          edu: a2,
          gov: a2,
          in: a2,
          net: a2,
          org: a2,
          cherkassy: a2,
          cherkasy: a2,
          chernigov: a2,
          chernihiv: a2,
          chernivtsi: a2,
          chernovtsy: a2,
          ck: a2,
          cn: a2,
          cr: a2,
          crimea: a2,
          cv: a2,
          dn: a2,
          dnepropetrovsk: a2,
          dnipropetrovsk: a2,
          donetsk: a2,
          dp: a2,
          if: a2,
          "ivano-frankivsk": a2,
          kh: a2,
          kharkiv: a2,
          kharkov: a2,
          kherson: a2,
          khmelnitskiy: a2,
          khmelnytskyi: a2,
          kiev: a2,
          kirovograd: a2,
          km: a2,
          kr: a2,
          kropyvnytskyi: a2,
          krym: a2,
          ks: a2,
          kv: a2,
          kyiv: a2,
          lg: a2,
          lt: a2,
          lugansk: a2,
          luhansk: a2,
          lutsk: a2,
          lv: a2,
          lviv: a2,
          mk: a2,
          mykolaiv: a2,
          nikolaev: a2,
          od: a2,
          odesa: a2,
          odessa: a2,
          pl: a2,
          poltava: a2,
          rivne: a2,
          rovno: a2,
          rv: a2,
          sb: a2,
          sebastopol: a2,
          sevastopol: a2,
          sm: a2,
          sumy: a2,
          te: a2,
          ternopil: a2,
          uz: a2,
          uzhgorod: a2,
          uzhhorod: a2,
          vinnica: a2,
          vinnytsia: a2,
          vn: a2,
          volyn: a2,
          yalta: a2,
          zakarpattia: a2,
          zaporizhzhe: a2,
          zaporizhzhia: a2,
          zhitomir: a2,
          zhytomyr: a2,
          zp: a2,
          zt: a2,
          cc: o2,
          inf: o2,
          ltd: o2,
          cx: o2,
          ie: o2,
          biz: o2,
          co: o2,
          pp: o2,
          v: o2
        }
      ],
      ug: [
        1,
        {
          co: a2,
          or: a2,
          ac: a2,
          sc: a2,
          go: a2,
          ne: a2,
          com: a2,
          org: a2,
          blogspot: o2
        }
      ],
      uk: [
        1,
        {
          ac: a2,
          co: [
            1,
            {
              bytemark: [
                0,
                {
                  dh: o2,
                  vm: o2
                }
              ],
              blogspot: o2,
              layershift: F,
              barsy: o2,
              barsyonline: o2,
              retrosnub: N,
              "nh-serv": o2,
              "no-ip": o2,
              wellbeingzone: o2,
              adimo: o2,
              myspreadshop: o2
            }
          ],
          gov: [
            1,
            {
              campaign: o2,
              service: o2,
              api: o2
            }
          ],
          ltd: a2,
          me: a2,
          net: a2,
          nhs: a2,
          org: [
            1,
            {
              glug: o2,
              lug: o2,
              lugs: o2,
              affinitylottery: o2,
              raffleentry: o2,
              weeklylottery: o2
            }
          ],
          plc: a2,
          police: a2,
          sch: m2,
          conn: o2,
          copro: o2,
          hosp: o2,
          "independent-commission": o2,
          "independent-inquest": o2,
          "independent-inquiry": o2,
          "independent-panel": o2,
          "independent-review": o2,
          "public-inquiry": o2,
          "royal-commission": o2,
          pymnt: o2,
          barsy: o2
        }
      ],
      us: [
        1,
        {
          dni: a2,
          fed: a2,
          isa: a2,
          kids: a2,
          nsn: a2,
          ak: _,
          al: _,
          ar: _,
          as: _,
          az: _,
          ca: _,
          co: _,
          ct: _,
          dc: _,
          de: [
            1,
            {
              cc: a2,
              lib: o2
            }
          ],
          fl: _,
          ga: _,
          gu: _,
          hi: aa,
          ia: _,
          id: _,
          il: _,
          in: _,
          ks: _,
          ky: _,
          la: _,
          ma: [
            1,
            {
              k12: [
                1,
                {
                  pvt: a2,
                  chtr: a2,
                  paroch: a2
                }
              ],
              cc: a2,
              lib: a2
            }
          ],
          md: _,
          me: _,
          mi: [
            1,
            {
              k12: a2,
              cc: a2,
              lib: a2,
              "ann-arbor": a2,
              cog: a2,
              dst: a2,
              eaton: a2,
              gen: a2,
              mus: a2,
              tec: a2,
              washtenaw: a2
            }
          ],
          mn: _,
          mo: _,
          ms: _,
          mt: _,
          nc: _,
          nd: aa,
          ne: _,
          nh: _,
          nj: _,
          nm: _,
          nv: _,
          ny: _,
          oh: _,
          ok: _,
          or: _,
          pa: _,
          pr: _,
          ri: aa,
          sc: _,
          sd: aa,
          tn: _,
          tx: _,
          ut: _,
          vi: _,
          vt: _,
          va: _,
          wa: _,
          wi: _,
          wv: [
            1,
            {
              cc: a2
            }
          ],
          wy: _,
          graphox: o2,
          cloudns: o2,
          drud: o2,
          "is-by": o2,
          "land-4-sale": o2,
          "stuff-4-sale": o2,
          enscaled: [
            0,
            {
              phx: o2
            }
          ],
          mircloud: o2,
          freeddns: o2,
          golffan: o2,
          noip: o2,
          pointto: o2,
          platterp: o2
        }
      ],
      uy: [
        1,
        {
          com: n2,
          edu: a2,
          gub: a2,
          mil: a2,
          net: a2,
          org: a2
        }
      ],
      uz: [
        1,
        {
          co: a2,
          com: a2,
          net: a2,
          org: a2
        }
      ],
      va: a2,
      vc: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          gov: a2,
          mil: a2,
          edu: a2,
          gv: [
            2,
            {
              d: o2
            }
          ],
          "0e": o2
        }
      ],
      ve: [
        1,
        {
          arts: a2,
          bib: a2,
          co: a2,
          com: a2,
          e12: a2,
          edu: a2,
          firm: a2,
          gob: a2,
          gov: a2,
          info: a2,
          int: a2,
          mil: a2,
          net: a2,
          nom: a2,
          org: a2,
          rar: a2,
          rec: a2,
          store: a2,
          tec: a2,
          web: a2
        }
      ],
      vg: [
        1,
        {
          at: o2
        }
      ],
      vi: [
        1,
        {
          co: a2,
          com: a2,
          k12: a2,
          net: a2,
          org: a2
        }
      ],
      vn: [
        1,
        {
          ac: a2,
          ai: a2,
          biz: a2,
          com: a2,
          edu: a2,
          gov: a2,
          health: a2,
          id: a2,
          info: a2,
          int: a2,
          io: a2,
          name: a2,
          net: a2,
          org: a2,
          pro: a2,
          angiang: a2,
          bacgiang: a2,
          backan: a2,
          baclieu: a2,
          bacninh: a2,
          "baria-vungtau": a2,
          bentre: a2,
          binhdinh: a2,
          binhduong: a2,
          binhphuoc: a2,
          binhthuan: a2,
          camau: a2,
          cantho: a2,
          caobang: a2,
          daklak: a2,
          daknong: a2,
          danang: a2,
          dienbien: a2,
          dongnai: a2,
          dongthap: a2,
          gialai: a2,
          hagiang: a2,
          haiduong: a2,
          haiphong: a2,
          hanam: a2,
          hanoi: a2,
          hatinh: a2,
          haugiang: a2,
          hoabinh: a2,
          hungyen: a2,
          khanhhoa: a2,
          kiengiang: a2,
          kontum: a2,
          laichau: a2,
          lamdong: a2,
          langson: a2,
          laocai: a2,
          longan: a2,
          namdinh: a2,
          nghean: a2,
          ninhbinh: a2,
          ninhthuan: a2,
          phutho: a2,
          phuyen: a2,
          quangbinh: a2,
          quangnam: a2,
          quangngai: a2,
          quangninh: a2,
          quangtri: a2,
          soctrang: a2,
          sonla: a2,
          tayninh: a2,
          thaibinh: a2,
          thainguyen: a2,
          thanhhoa: a2,
          thanhphohochiminh: a2,
          thuathienhue: a2,
          tiengiang: a2,
          travinh: a2,
          tuyenquang: a2,
          vinhlong: a2,
          vinhphuc: a2,
          yenbai: a2,
          blogspot: o2
        }
      ],
      vu: [
        1,
        {
          com: a2,
          edu: a2,
          net: a2,
          org: a2,
          cn: o2,
          blog: o2,
          dev: o2,
          me: o2
        }
      ],
      wf: [
        1,
        {
          biz: o2,
          sch: o2
        }
      ],
      ws: [
        1,
        {
          com: a2,
          net: a2,
          org: a2,
          gov: a2,
          edu: a2,
          advisor: i2,
          cloud66: o2,
          dyndns: o2,
          mypets: o2
        }
      ],
      yt: [
        1,
        {
          org: o2
        }
      ],
      "xn--mgbaam7a8h": a2,
      "\u0627\u0645\u0627\u0631\u0627\u062A": a2,
      "xn--y9a3aq": a2,
      "\u0570\u0561\u0575": a2,
      "xn--54b7fta0cc": a2,
      "\u09AC\u09BE\u0982\u09B2\u09BE": a2,
      "xn--90ae": a2,
      "\u0431\u0433": a2,
      "xn--mgbcpq6gpa1a": a2,
      "\u0627\u0644\u0628\u062D\u0631\u064A\u0646": a2,
      "xn--90ais": a2,
      "\u0431\u0435\u043B": a2,
      "xn--fiqs8s": a2,
      "\u4E2D\u56FD": a2,
      "xn--fiqz9s": a2,
      "\u4E2D\u570B": a2,
      "xn--lgbbat1ad8j": a2,
      "\u0627\u0644\u062C\u0632\u0627\u0626\u0631": a2,
      "xn--wgbh1c": a2,
      "\u0645\u0635\u0631": a2,
      "xn--e1a4c": a2,
      "\u0435\u044E": a2,
      "xn--qxa6a": a2,
      "\u03B5\u03C5": a2,
      "xn--mgbah1a3hjkrd": a2,
      "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627": a2,
      "xn--node": a2,
      "\u10D2\u10D4": a2,
      "xn--qxam": a2,
      "\u03B5\u03BB": a2,
      "xn--j6w193g": [
        1,
        {
          "xn--55qx5d": a2,
          "xn--wcvs22d": a2,
          "xn--mxtq1m": a2,
          "xn--gmqw5a": a2,
          "xn--od0alg": a2,
          "xn--uc0atv": a2
        }
      ],
      "\u9999\u6E2F": [
        1,
        {
          "\u516C\u53F8": a2,
          "\u6559\u80B2": a2,
          "\u653F\u5E9C": a2,
          "\u500B\u4EBA": a2,
          "\u7DB2\u7D61": a2,
          "\u7D44\u7E54": a2
        }
      ],
      "xn--2scrj9c": a2,
      "\u0CAD\u0CBE\u0CB0\u0CA4": a2,
      "xn--3hcrj9c": a2,
      "\u0B2D\u0B3E\u0B30\u0B24": a2,
      "xn--45br5cyl": a2,
      "\u09AD\u09BE\u09F0\u09A4": a2,
      "xn--h2breg3eve": a2,
      "\u092D\u093E\u0930\u0924\u092E\u094D": a2,
      "xn--h2brj9c8c": a2,
      "\u092D\u093E\u0930\u094B\u0924": a2,
      "xn--mgbgu82a": a2,
      "\u0680\u0627\u0631\u062A": a2,
      "xn--rvc1e0am3e": a2,
      "\u0D2D\u0D3E\u0D30\u0D24\u0D02": a2,
      "xn--h2brj9c": a2,
      "\u092D\u093E\u0930\u0924": a2,
      "xn--mgbbh1a": a2,
      "\u0628\u0627\u0631\u062A": a2,
      "xn--mgbbh1a71e": a2,
      "\u0628\u06BE\u0627\u0631\u062A": a2,
      "xn--fpcrj9c3d": a2,
      "\u0C2D\u0C3E\u0C30\u0C24\u0C4D": a2,
      "xn--gecrj9c": a2,
      "\u0AAD\u0ABE\u0AB0\u0AA4": a2,
      "xn--s9brj9c": a2,
      "\u0A2D\u0A3E\u0A30\u0A24": a2,
      "xn--45brj9c": a2,
      "\u09AD\u09BE\u09B0\u09A4": a2,
      "xn--xkc2dl3a5ee0h": a2,
      "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE": a2,
      "xn--mgba3a4f16a": a2,
      "\u0627\u06CC\u0631\u0627\u0646": a2,
      "xn--mgba3a4fra": a2,
      "\u0627\u064A\u0631\u0627\u0646": a2,
      "xn--mgbtx2b": a2,
      "\u0639\u0631\u0627\u0642": a2,
      "xn--mgbayh7gpa": a2,
      "\u0627\u0644\u0627\u0631\u062F\u0646": a2,
      "xn--3e0b707e": a2,
      "\uD55C\uAD6D": a2,
      "xn--80ao21a": a2,
      "\u049B\u0430\u0437": a2,
      "xn--q7ce6a": a2,
      "\u0EA5\u0EB2\u0EA7": a2,
      "xn--fzc2c9e2c": a2,
      "\u0DBD\u0D82\u0D9A\u0DCF": a2,
      "xn--xkc2al3hye2a": a2,
      "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8": a2,
      "xn--mgbc0a9azcg": a2,
      "\u0627\u0644\u0645\u063A\u0631\u0628": a2,
      "xn--d1alf": a2,
      "\u043C\u043A\u0434": a2,
      "xn--l1acc": a2,
      "\u043C\u043E\u043D": a2,
      "xn--mix891f": a2,
      "\u6FB3\u9580": a2,
      "xn--mix082f": a2,
      "\u6FB3\u95E8": a2,
      "xn--mgbx4cd0ab": a2,
      "\u0645\u0644\u064A\u0633\u064A\u0627": a2,
      "xn--mgb9awbf": a2,
      "\u0639\u0645\u0627\u0646": a2,
      "xn--mgbai9azgqp6j": a2,
      "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646": a2,
      "xn--mgbai9a5eva00b": a2,
      "\u067E\u0627\u0643\u0633\u062A\u0627\u0646": a2,
      "xn--ygbi2ammx": a2,
      "\u0641\u0644\u0633\u0637\u064A\u0646": a2,
      "xn--90a3ac": [
        1,
        {
          "xn--o1ac": a2,
          "xn--c1avg": a2,
          "xn--90azh": a2,
          "xn--d1at": a2,
          "xn--o1ach": a2,
          "xn--80au": a2
        }
      ],
      "\u0441\u0440\u0431": [
        1,
        {
          "\u043F\u0440": a2,
          "\u043E\u0440\u0433": a2,
          "\u043E\u0431\u0440": a2,
          "\u043E\u0434": a2,
          "\u0443\u043F\u0440": a2,
          "\u0430\u043A": a2
        }
      ],
      "xn--p1ai": a2,
      "\u0440\u0444": a2,
      "xn--wgbl6a": a2,
      "\u0642\u0637\u0631": a2,
      "xn--mgberp4a5d4ar": a2,
      "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629": a2,
      "xn--mgberp4a5d4a87g": a2,
      "\u0627\u0644\u0633\u0639\u0648\u062F\u06CC\u0629": a2,
      "xn--mgbqly7c0a67fbc": a2,
      "\u0627\u0644\u0633\u0639\u0648\u062F\u06CC\u06C3": a2,
      "xn--mgbqly7cvafr": a2,
      "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0647": a2,
      "xn--mgbpl2fh": a2,
      "\u0633\u0648\u062F\u0627\u0646": a2,
      "xn--yfro4i67o": a2,
      "\u65B0\u52A0\u5761": a2,
      "xn--clchc0ea0b2g2a9gcd": a2,
      "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD": a2,
      "xn--ogbpf8fl": a2,
      "\u0633\u0648\u0631\u064A\u0629": a2,
      "xn--mgbtf8fl": a2,
      "\u0633\u0648\u0631\u064A\u0627": a2,
      "xn--o3cw4h": [
        1,
        {
          "xn--12c1fe0br": a2,
          "xn--12co0c3b4eva": a2,
          "xn--h3cuzk1di": a2,
          "xn--o3cyx2a": a2,
          "xn--m3ch0j3a": a2,
          "xn--12cfi8ixb8l": a2
        }
      ],
      "\u0E44\u0E17\u0E22": [
        1,
        {
          "\u0E28\u0E36\u0E01\u0E29\u0E32": a2,
          "\u0E18\u0E38\u0E23\u0E01\u0E34\u0E08": a2,
          "\u0E23\u0E31\u0E10\u0E1A\u0E32\u0E25": a2,
          "\u0E17\u0E2B\u0E32\u0E23": a2,
          "\u0E40\u0E19\u0E47\u0E15": a2,
          "\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E23": a2
        }
      ],
      "xn--pgbs0dh": a2,
      "\u062A\u0648\u0646\u0633": a2,
      "xn--kpry57d": a2,
      "\u53F0\u7063": a2,
      "xn--kprw13d": a2,
      "\u53F0\u6E7E": a2,
      "xn--nnx388a": a2,
      "\u81FA\u7063": a2,
      "xn--j1amh": a2,
      "\u0443\u043A\u0440": a2,
      "xn--mgb2ddes": a2,
      "\u0627\u0644\u064A\u0645\u0646": a2,
      xxx: a2,
      ye: Q,
      za: [
        0,
        {
          ac: a2,
          agric: a2,
          alt: a2,
          co: n2,
          edu: a2,
          gov: a2,
          grondar: a2,
          law: a2,
          mil: a2,
          net: a2,
          ngo: a2,
          nic: a2,
          nis: a2,
          nom: a2,
          org: a2,
          school: a2,
          tm: a2,
          web: a2
        }
      ],
      zm: [
        1,
        {
          ac: a2,
          biz: a2,
          co: a2,
          com: a2,
          edu: a2,
          gov: a2,
          info: a2,
          mil: a2,
          net: a2,
          org: a2,
          sch: a2
        }
      ],
      zw: [
        1,
        {
          ac: a2,
          co: a2,
          gov: a2,
          mil: a2,
          org: a2
        }
      ],
      aaa: a2,
      aarp: a2,
      abb: a2,
      abbott: a2,
      abbvie: a2,
      abc: a2,
      able: a2,
      abogado: a2,
      abudhabi: a2,
      academy: [
        1,
        {
          official: o2
        }
      ],
      accenture: a2,
      accountant: a2,
      accountants: a2,
      aco: a2,
      actor: a2,
      ads: a2,
      adult: a2,
      aeg: a2,
      aetna: a2,
      afl: a2,
      africa: a2,
      agakhan: a2,
      agency: a2,
      aig: a2,
      airbus: a2,
      airforce: a2,
      airtel: a2,
      akdn: a2,
      alibaba: a2,
      alipay: a2,
      allfinanz: a2,
      allstate: a2,
      ally: a2,
      alsace: a2,
      alstom: a2,
      amazon: a2,
      americanexpress: a2,
      americanfamily: a2,
      amex: a2,
      amfam: a2,
      amica: a2,
      amsterdam: a2,
      analytics: a2,
      android: a2,
      anquan: a2,
      anz: a2,
      aol: a2,
      apartments: a2,
      app: [
        1,
        {
          beget: i2,
          clerk: o2,
          clerkstage: o2,
          wnext: o2,
          cyclic: o2,
          platform0: o2,
          deta: o2,
          ondigitalocean: o2,
          easypanel: o2,
          encr: o2,
          edgecompute: o2,
          fireweb: o2,
          onflashdrive: o2,
          flutterflow: o2,
          framer: o2,
          run: i2,
          web: o2,
          hasura: o2,
          loginline: o2,
          messerli: o2,
          netlify: o2,
          ngrok: o2,
          "ngrok-free": o2,
          developer: i2,
          noop: o2,
          northflank: i2,
          upsun: i2,
          snowflake: [
            2,
            {
              privatelink: o2
            }
          ],
          streamlit: o2,
          storipress: o2,
          telebit: o2,
          typedream: o2,
          vercel: o2,
          bookonline: o2
        }
      ],
      apple: a2,
      aquarelle: a2,
      arab: a2,
      aramco: a2,
      archi: a2,
      army: a2,
      art: a2,
      arte: a2,
      asda: a2,
      associates: a2,
      athleta: a2,
      attorney: a2,
      auction: a2,
      audi: a2,
      audible: a2,
      audio: a2,
      auspost: a2,
      author: a2,
      auto: a2,
      autos: a2,
      avianca: a2,
      aws: [
        1,
        {
          sagemaker: [
            0,
            {
              "af-south-1": t2,
              "ap-east-1": t2,
              "ap-northeast-1": t2,
              "ap-northeast-2": t2,
              "ap-northeast-3": t2,
              "ap-south-1": t2,
              "ap-south-2": r2,
              "ap-southeast-1": t2,
              "ap-southeast-2": t2,
              "ap-southeast-3": t2,
              "ap-southeast-4": r2,
              "ca-central-1": u2,
              "ca-west-1": [
                0,
                {
                  notebook: o2,
                  "notebook-fips": o2
                }
              ],
              "eu-central-1": t2,
              "eu-central-2": r2,
              "eu-north-1": t2,
              "eu-south-1": t2,
              "eu-south-2": r2,
              "eu-west-1": t2,
              "eu-west-2": t2,
              "eu-west-3": t2,
              "il-central-1": t2,
              "me-central-1": t2,
              "me-south-1": t2,
              "sa-east-1": t2,
              "us-east-1": u2,
              "us-east-2": u2,
              "us-gov-east-1": l,
              "us-gov-west-1": l,
              "us-west-1": t2,
              "us-west-2": u2
            }
          ],
          repost: [
            0,
            {
              private: i2
            }
          ]
        }
      ],
      axa: a2,
      azure: a2,
      baby: a2,
      baidu: a2,
      banamex: a2,
      band: a2,
      bank: a2,
      bar: a2,
      barcelona: a2,
      barclaycard: a2,
      barclays: a2,
      barefoot: a2,
      bargains: a2,
      baseball: a2,
      basketball: [
        1,
        {
          aus: o2,
          nz: o2
        }
      ],
      bauhaus: a2,
      bayern: a2,
      bbc: a2,
      bbt: a2,
      bbva: a2,
      bcg: a2,
      bcn: a2,
      beats: a2,
      beauty: a2,
      beer: a2,
      bentley: a2,
      berlin: a2,
      best: a2,
      bestbuy: a2,
      bet: a2,
      bharti: a2,
      bible: a2,
      bid: a2,
      bike: a2,
      bing: a2,
      bingo: a2,
      bio: a2,
      black: a2,
      blackfriday: a2,
      blockbuster: a2,
      blog: a2,
      bloomberg: a2,
      blue: a2,
      bms: a2,
      bmw: a2,
      bnpparibas: a2,
      boats: a2,
      boehringer: a2,
      bofa: a2,
      bom: a2,
      bond: a2,
      boo: a2,
      book: a2,
      booking: a2,
      bosch: a2,
      bostik: a2,
      boston: a2,
      bot: a2,
      boutique: a2,
      box: a2,
      bradesco: a2,
      bridgestone: a2,
      broadway: a2,
      broker: a2,
      brother: a2,
      brussels: a2,
      build: a2,
      builders: [
        1,
        {
          cloudsite: o2
        }
      ],
      business: d,
      buy: a2,
      buzz: a2,
      bzh: a2,
      cab: a2,
      cafe: a2,
      cal: a2,
      call: a2,
      calvinklein: a2,
      cam: a2,
      camera: a2,
      camp: a2,
      canon: a2,
      capetown: a2,
      capital: a2,
      capitalone: a2,
      car: a2,
      caravan: a2,
      cards: a2,
      care: a2,
      career: a2,
      careers: a2,
      cars: a2,
      casa: [
        1,
        {
          nabu: [
            0,
            {
              ui: o2
            }
          ]
        }
      ],
      case: a2,
      cash: a2,
      casino: a2,
      catering: a2,
      catholic: a2,
      cba: a2,
      cbn: a2,
      cbre: a2,
      center: a2,
      ceo: a2,
      cern: a2,
      cfa: a2,
      cfd: a2,
      chanel: a2,
      channel: a2,
      charity: a2,
      chase: a2,
      chat: a2,
      cheap: a2,
      chintai: a2,
      christmas: a2,
      chrome: a2,
      church: a2,
      cipriani: a2,
      circle: a2,
      cisco: a2,
      citadel: a2,
      citi: a2,
      citic: a2,
      city: a2,
      claims: a2,
      cleaning: a2,
      click: a2,
      clinic: a2,
      clinique: a2,
      clothing: a2,
      cloud: [
        1,
        {
          banzai: i2,
          cyclic: o2,
          elementor: o2,
          encoway: [
            0,
            {
              eu: o2
            }
          ],
          statics: i2,
          ravendb: o2,
          axarnet: [
            0,
            {
              "es-1": o2
            }
          ],
          diadem: o2,
          jelastic: [
            0,
            {
              vip: o2
            }
          ],
          jele: o2,
          "jenv-aruba": [
            0,
            {
              aruba: [
                0,
                {
                  eur: [
                    0,
                    {
                      it1: o2
                    }
                  ]
                }
              ],
              it1: o2
            }
          ],
          keliweb: [
            2,
            {
              cs: o2
            }
          ],
          oxa: [
            2,
            {
              tn: o2,
              uk: o2
            }
          ],
          primetel: [
            2,
            {
              uk: o2
            }
          ],
          reclaim: [
            0,
            {
              ca: o2,
              uk: o2,
              us: o2
            }
          ],
          trendhosting: [
            0,
            {
              ch: o2,
              de: o2
            }
          ],
          jotelulu: o2,
          kuleuven: o2,
          linkyard: o2,
          magentosite: i2,
          perspecta: o2,
          vapor: o2,
          "on-rancher": i2,
          scw: [
            0,
            {
              baremetal: [
                0,
                {
                  "fr-par-1": o2,
                  "fr-par-2": o2,
                  "nl-ams-1": o2
                }
              ],
              "fr-par": [
                0,
                {
                  cockpit: o2,
                  fnc: [
                    2,
                    {
                      functions: o2
                    }
                  ],
                  k8s: g,
                  s3: o2,
                  "s3-website": o2,
                  whm: o2
                }
              ],
              instances: [
                0,
                {
                  priv: o2,
                  pub: o2
                }
              ],
              k8s: o2,
              "nl-ams": [
                0,
                {
                  cockpit: o2,
                  k8s: g,
                  s3: o2,
                  "s3-website": o2,
                  whm: o2
                }
              ],
              "pl-waw": [
                0,
                {
                  cockpit: o2,
                  k8s: g,
                  s3: o2,
                  "s3-website": o2
                }
              ],
              scalebook: o2,
              smartlabeling: o2
            }
          ],
          sensiosite: i2,
          trafficplex: o2,
          urown: o2,
          voorloper: o2,
          zap: o2
        }
      ],
      club: [
        1,
        {
          cloudns: o2,
          jele: o2,
          barsy: o2
        }
      ],
      clubmed: a2,
      coach: a2,
      codes: [
        1,
        {
          owo: i2
        }
      ],
      coffee: a2,
      college: a2,
      cologne: a2,
      commbank: a2,
      community: [
        1,
        {
          nog: o2,
          ravendb: o2,
          myforum: o2
        }
      ],
      company: a2,
      compare: a2,
      computer: a2,
      comsec: a2,
      condos: a2,
      construction: a2,
      consulting: a2,
      contact: a2,
      contractors: a2,
      cooking: a2,
      cool: [
        1,
        {
          elementor: o2,
          de: o2
        }
      ],
      corsica: a2,
      country: a2,
      coupon: a2,
      coupons: a2,
      courses: a2,
      cpa: a2,
      credit: a2,
      creditcard: a2,
      creditunion: a2,
      cricket: a2,
      crown: a2,
      crs: a2,
      cruise: a2,
      cruises: a2,
      cuisinella: a2,
      cymru: a2,
      cyou: a2,
      dabur: a2,
      dad: a2,
      dance: a2,
      data: a2,
      date: a2,
      dating: a2,
      datsun: a2,
      day: a2,
      dclk: a2,
      dds: a2,
      deal: a2,
      dealer: a2,
      deals: a2,
      degree: a2,
      delivery: a2,
      dell: a2,
      deloitte: a2,
      delta: a2,
      democrat: a2,
      dental: a2,
      dentist: a2,
      desi: a2,
      design: [
        1,
        {
          bss: o2
        }
      ],
      dev: [
        1,
        {
          "12chars": o2,
          panel: o2,
          autocode: o2,
          lcl: i2,
          lclstage: i2,
          stg: i2,
          stgstage: i2,
          pages: o2,
          r2: o2,
          workers: o2,
          curv: o2,
          deno: o2,
          "deno-staging": o2,
          deta: o2,
          fly: o2,
          githubpreview: o2,
          gateway: i2,
          iserv: o2,
          localcert: [
            0,
            {
              user: i2
            }
          ],
          loginline: o2,
          mediatech: o2,
          ngrok: o2,
          "ngrok-free": o2,
          "platter-app": o2,
          shiftcrypto: o2,
          vercel: o2,
          webhare: i2
        }
      ],
      dhl: a2,
      diamonds: a2,
      diet: a2,
      digital: [
        1,
        {
          cloudapps: [
            2,
            {
              london: o2
            }
          ]
        }
      ],
      direct: a2,
      directory: a2,
      discount: a2,
      discover: a2,
      dish: a2,
      diy: a2,
      dnp: a2,
      docs: a2,
      doctor: a2,
      dog: a2,
      domains: a2,
      dot: a2,
      download: a2,
      drive: a2,
      dtv: a2,
      dubai: a2,
      dunlop: a2,
      dupont: a2,
      durban: a2,
      dvag: a2,
      dvr: a2,
      earth: [
        1,
        {
          dapps: [
            0,
            {
              "*": o2,
              bzz: i2
            }
          ]
        }
      ],
      eat: a2,
      eco: a2,
      edeka: a2,
      education: d,
      email: a2,
      emerck: a2,
      energy: a2,
      engineer: a2,
      engineering: a2,
      enterprises: a2,
      epson: a2,
      equipment: a2,
      ericsson: a2,
      erni: a2,
      esq: a2,
      estate: [
        1,
        {
          compute: i2
        }
      ],
      eurovision: a2,
      eus: [
        1,
        {
          party: J
        }
      ],
      events: [
        1,
        {
          koobin: o2,
          co: o2
        }
      ],
      exchange: a2,
      expert: a2,
      exposed: a2,
      express: a2,
      extraspace: a2,
      fage: a2,
      fail: a2,
      fairwinds: a2,
      faith: K,
      family: a2,
      fan: a2,
      fans: a2,
      farm: [
        1,
        {
          storj: o2
        }
      ],
      farmers: a2,
      fashion: a2,
      fast: a2,
      fedex: a2,
      feedback: a2,
      ferrari: a2,
      ferrero: a2,
      fidelity: a2,
      fido: a2,
      film: a2,
      final: a2,
      finance: a2,
      financial: d,
      fire: a2,
      firestone: a2,
      firmdale: a2,
      fish: a2,
      fishing: a2,
      fit: a2,
      fitness: a2,
      flickr: a2,
      flights: a2,
      flir: a2,
      florist: a2,
      flowers: a2,
      fly: a2,
      foo: a2,
      food: a2,
      football: a2,
      ford: a2,
      forex: a2,
      forsale: a2,
      forum: a2,
      foundation: a2,
      fox: a2,
      free: a2,
      fresenius: a2,
      frl: a2,
      frogans: a2,
      frontier: a2,
      ftr: a2,
      fujitsu: a2,
      fun: a2,
      fund: a2,
      furniture: a2,
      futbol: a2,
      fyi: a2,
      gal: a2,
      gallery: a2,
      gallo: a2,
      gallup: a2,
      game: a2,
      games: [
        1,
        {
          pley: o2
        }
      ],
      gap: a2,
      garden: a2,
      gay: [
        1,
        {
          pages: o2
        }
      ],
      gbiz: a2,
      gdn: [
        1,
        {
          cnpy: o2
        }
      ],
      gea: a2,
      gent: a2,
      genting: a2,
      george: a2,
      ggee: a2,
      gift: a2,
      gifts: a2,
      gives: a2,
      giving: a2,
      glass: a2,
      gle: a2,
      global: a2,
      globo: a2,
      gmail: a2,
      gmbh: a2,
      gmo: a2,
      gmx: a2,
      godaddy: a2,
      gold: a2,
      goldpoint: a2,
      golf: a2,
      goo: a2,
      goodyear: a2,
      goog: [
        1,
        {
          cloud: o2,
          translate: o2,
          usercontent: i2
        }
      ],
      google: a2,
      gop: a2,
      got: a2,
      grainger: a2,
      graphics: a2,
      gratis: a2,
      green: a2,
      gripe: a2,
      grocery: a2,
      group: [
        1,
        {
          discourse: o2
        }
      ],
      guardian: a2,
      gucci: a2,
      guge: a2,
      guide: a2,
      guitars: a2,
      guru: a2,
      hair: a2,
      hamburg: a2,
      hangout: a2,
      haus: a2,
      hbo: a2,
      hdfc: a2,
      hdfcbank: a2,
      health: [
        1,
        {
          hra: o2
        }
      ],
      healthcare: a2,
      help: a2,
      helsinki: a2,
      here: a2,
      hermes: a2,
      hiphop: a2,
      hisamitsu: a2,
      hitachi: a2,
      hiv: a2,
      hkt: a2,
      hockey: a2,
      holdings: a2,
      holiday: a2,
      homedepot: a2,
      homegoods: a2,
      homes: a2,
      homesense: a2,
      honda: a2,
      horse: a2,
      hospital: a2,
      host: [
        1,
        {
          cloudaccess: o2,
          freesite: o2,
          easypanel: o2,
          fastvps: o2,
          myfast: o2,
          tempurl: o2,
          wpmudev: o2,
          jele: o2,
          mircloud: o2,
          pcloud: o2,
          half: o2
        }
      ],
      hosting: [
        1,
        {
          opencraft: o2
        }
      ],
      hot: a2,
      hotels: a2,
      hotmail: a2,
      house: a2,
      how: a2,
      hsbc: a2,
      hughes: a2,
      hyatt: a2,
      hyundai: a2,
      ibm: a2,
      icbc: a2,
      ice: a2,
      icu: a2,
      ieee: a2,
      ifm: a2,
      ikano: a2,
      imamat: a2,
      imdb: a2,
      immo: a2,
      immobilien: a2,
      inc: a2,
      industries: a2,
      infiniti: a2,
      ing: a2,
      ink: a2,
      institute: a2,
      insurance: a2,
      insure: a2,
      international: a2,
      intuit: a2,
      investments: a2,
      ipiranga: a2,
      irish: a2,
      ismaili: a2,
      ist: a2,
      istanbul: a2,
      itau: a2,
      itv: a2,
      jaguar: a2,
      java: a2,
      jcb: a2,
      jeep: a2,
      jetzt: a2,
      jewelry: a2,
      jio: a2,
      jll: a2,
      jmp: a2,
      jnj: a2,
      joburg: a2,
      jot: a2,
      joy: a2,
      jpmorgan: a2,
      jprs: a2,
      juegos: a2,
      juniper: a2,
      kaufen: a2,
      kddi: a2,
      kerryhotels: a2,
      kerrylogistics: a2,
      kerryproperties: a2,
      kfh: a2,
      kia: a2,
      kids: a2,
      kim: a2,
      kindle: a2,
      kitchen: a2,
      kiwi: a2,
      koeln: a2,
      komatsu: a2,
      kosher: a2,
      kpmg: a2,
      kpn: a2,
      krd: [
        1,
        {
          co: o2,
          edu: o2
        }
      ],
      kred: a2,
      kuokgroup: a2,
      kyoto: a2,
      lacaixa: a2,
      lamborghini: a2,
      lamer: a2,
      lancaster: a2,
      land: [
        1,
        {
          static: [
            2,
            {
              dev: o2,
              sites: o2
            }
          ]
        }
      ],
      landrover: a2,
      lanxess: a2,
      lasalle: a2,
      lat: a2,
      latino: a2,
      latrobe: a2,
      law: a2,
      lawyer: a2,
      lds: a2,
      lease: a2,
      leclerc: a2,
      lefrak: a2,
      legal: a2,
      lego: a2,
      lexus: a2,
      lgbt: a2,
      lidl: a2,
      life: a2,
      lifeinsurance: a2,
      lifestyle: a2,
      lighting: a2,
      like: a2,
      lilly: a2,
      limited: a2,
      limo: a2,
      lincoln: a2,
      link: [
        1,
        {
          cyon: o2,
          mypep: o2,
          dweb: i2
        }
      ],
      lipsy: a2,
      live: [
        1,
        {
          aem: o2,
          hlx: o2
        }
      ],
      living: a2,
      llc: a2,
      llp: a2,
      loan: a2,
      loans: a2,
      locker: a2,
      locus: a2,
      lol: [
        1,
        {
          omg: o2
        }
      ],
      london: a2,
      lotte: a2,
      lotto: a2,
      love: a2,
      lpl: a2,
      lplfinancial: a2,
      ltd: a2,
      ltda: a2,
      lundbeck: a2,
      luxe: a2,
      luxury: a2,
      madrid: a2,
      maif: a2,
      maison: a2,
      makeup: a2,
      man: a2,
      management: [
        1,
        {
          router: o2
        }
      ],
      mango: a2,
      map: a2,
      market: a2,
      marketing: a2,
      markets: a2,
      marriott: a2,
      marshalls: a2,
      mattel: a2,
      mba: a2,
      mckinsey: a2,
      med: a2,
      media: V,
      meet: a2,
      melbourne: a2,
      meme: a2,
      memorial: a2,
      men: a2,
      menu: X2,
      merckmsd: a2,
      miami: a2,
      microsoft: a2,
      mini: a2,
      mint: a2,
      mit: a2,
      mitsubishi: a2,
      mlb: a2,
      mls: a2,
      mma: a2,
      mobile: a2,
      moda: a2,
      moe: a2,
      moi: a2,
      mom: a2,
      monash: a2,
      money: a2,
      monster: a2,
      mormon: a2,
      mortgage: a2,
      moscow: a2,
      moto: a2,
      motorcycles: a2,
      mov: a2,
      movie: a2,
      msd: a2,
      mtn: a2,
      mtr: a2,
      music: a2,
      nab: a2,
      nagoya: a2,
      natura: a2,
      navy: a2,
      nba: a2,
      nec: a2,
      netbank: a2,
      netflix: a2,
      network: [
        1,
        {
          alces: i2,
          co: o2,
          arvo: o2,
          azimuth: o2,
          tlon: o2
        }
      ],
      neustar: a2,
      new: a2,
      news: [
        1,
        {
          noticeable: o2
        }
      ],
      next: a2,
      nextdirect: a2,
      nexus: a2,
      nfl: a2,
      ngo: a2,
      nhk: a2,
      nico: a2,
      nike: a2,
      nikon: a2,
      ninja: a2,
      nissan: a2,
      nissay: a2,
      nokia: a2,
      norton: a2,
      now: a2,
      nowruz: a2,
      nowtv: a2,
      nra: a2,
      nrw: a2,
      ntt: a2,
      nyc: a2,
      obi: a2,
      observer: a2,
      office: a2,
      okinawa: a2,
      olayan: a2,
      olayangroup: a2,
      ollo: a2,
      omega: a2,
      one: [
        1,
        {
          onred: [
            2,
            {
              staging: o2
            }
          ],
          kin: i2,
          service: o2,
          homelink: o2
        }
      ],
      ong: a2,
      onl: a2,
      online: [
        1,
        {
          eero: o2,
          "eero-stage": o2,
          barsy: o2
        }
      ],
      ooo: a2,
      open: a2,
      oracle: a2,
      orange: [
        1,
        {
          tech: o2
        }
      ],
      organic: a2,
      origins: a2,
      osaka: a2,
      otsuka: a2,
      ott: a2,
      ovh: [
        1,
        {
          nerdpol: o2
        }
      ],
      page: [
        1,
        {
          aem: o2,
          hlx: o2,
          hlx3: o2,
          translated: o2,
          codeberg: o2,
          pdns: o2,
          plesk: o2,
          prvcy: o2,
          rocky: o2,
          magnet: o2
        }
      ],
      panasonic: a2,
      paris: a2,
      pars: a2,
      partners: a2,
      parts: a2,
      party: K,
      pay: a2,
      pccw: a2,
      pet: a2,
      pfizer: a2,
      pharmacy: a2,
      phd: a2,
      philips: a2,
      phone: a2,
      photo: a2,
      photography: a2,
      photos: V,
      physio: a2,
      pics: a2,
      pictet: a2,
      pictures: [
        1,
        {
          1337: o2
        }
      ],
      pid: a2,
      pin: a2,
      ping: a2,
      pink: a2,
      pioneer: a2,
      pizza: [
        1,
        {
          ngrok: o2
        }
      ],
      place: d,
      play: a2,
      playstation: a2,
      plumbing: a2,
      plus: a2,
      pnc: a2,
      pohl: a2,
      poker: a2,
      politie: a2,
      porn: [
        1,
        {
          indie: o2
        }
      ],
      pramerica: a2,
      praxi: a2,
      press: a2,
      prime: a2,
      prod: a2,
      productions: a2,
      prof: a2,
      progressive: a2,
      promo: a2,
      properties: a2,
      property: a2,
      protection: a2,
      pru: a2,
      prudential: a2,
      pub: [
        1,
        {
          id: i2,
          kin: i2,
          barsy: o2
        }
      ],
      pwc: a2,
      qpon: a2,
      quebec: a2,
      quest: a2,
      racing: a2,
      radio: a2,
      read: a2,
      realestate: a2,
      realtor: a2,
      realty: a2,
      recipes: a2,
      red: a2,
      redstone: a2,
      redumbrella: a2,
      rehab: a2,
      reise: a2,
      reisen: a2,
      reit: a2,
      reliance: a2,
      ren: a2,
      rent: a2,
      rentals: a2,
      repair: a2,
      report: a2,
      republican: a2,
      rest: a2,
      restaurant: a2,
      review: K,
      reviews: a2,
      rexroth: a2,
      rich: a2,
      richardli: a2,
      ricoh: a2,
      ril: a2,
      rio: a2,
      rip: [
        1,
        {
          clan: o2
        }
      ],
      rocks: [
        1,
        {
          myddns: o2,
          "lima-city": o2,
          webspace: o2
        }
      ],
      rodeo: a2,
      rogers: a2,
      room: a2,
      rsvp: a2,
      rugby: a2,
      ruhr: a2,
      run: [
        1,
        {
          hs: o2,
          development: o2,
          ravendb: o2,
          servers: o2,
          build: i2,
          code: i2,
          database: i2,
          migration: i2,
          onporter: o2,
          repl: o2,
          wix: o2
        }
      ],
      rwe: a2,
      ryukyu: a2,
      saarland: a2,
      safe: a2,
      safety: a2,
      sakura: a2,
      sale: a2,
      salon: a2,
      samsclub: a2,
      samsung: a2,
      sandvik: a2,
      sandvikcoromant: a2,
      sanofi: a2,
      sap: a2,
      sarl: a2,
      sas: a2,
      save: a2,
      saxo: a2,
      sbi: a2,
      sbs: a2,
      scb: a2,
      schaeffler: a2,
      schmidt: a2,
      scholarships: a2,
      school: a2,
      schule: a2,
      schwarz: a2,
      science: K,
      scot: [
        1,
        {
          edu: o2,
          gov: [
            2,
            {
              service: o2
            }
          ]
        }
      ],
      search: a2,
      seat: a2,
      secure: a2,
      security: a2,
      seek: a2,
      select: a2,
      sener: a2,
      services: [
        1,
        {
          loginline: o2
        }
      ],
      seven: a2,
      sew: a2,
      sex: a2,
      sexy: a2,
      sfr: a2,
      shangrila: a2,
      sharp: a2,
      shaw: a2,
      shell: a2,
      shia: a2,
      shiksha: a2,
      shoes: a2,
      shop: [
        1,
        {
          base: o2,
          hoplix: o2,
          barsy: o2
        }
      ],
      shopping: a2,
      shouji: a2,
      show: a2,
      silk: a2,
      sina: a2,
      singles: a2,
      site: [
        1,
        {
          cloudera: i2,
          cyon: o2,
          fnwk: o2,
          folionetwork: o2,
          fastvps: o2,
          jele: o2,
          lelux: o2,
          loginline: o2,
          barsy: o2,
          mintere: o2,
          omniwe: o2,
          opensocial: o2,
          platformsh: i2,
          tst: i2,
          byen: o2,
          srht: o2,
          novecore: o2
        }
      ],
      ski: a2,
      skin: a2,
      sky: a2,
      skype: a2,
      sling: a2,
      smart: a2,
      smile: a2,
      sncf: a2,
      soccer: a2,
      social: a2,
      softbank: a2,
      software: a2,
      sohu: a2,
      solar: a2,
      solutions: [
        1,
        {
          diher: i2
        }
      ],
      song: a2,
      sony: a2,
      soy: a2,
      spa: a2,
      space: [
        1,
        {
          myfast: o2,
          uber: o2,
          xs4all: o2
        }
      ],
      sport: a2,
      spot: a2,
      srl: a2,
      stada: a2,
      staples: a2,
      star: a2,
      statebank: a2,
      statefarm: a2,
      stc: a2,
      stcgroup: a2,
      stockholm: a2,
      storage: a2,
      store: [
        1,
        {
          sellfy: o2,
          shopware: o2,
          storebase: o2
        }
      ],
      stream: a2,
      studio: a2,
      study: a2,
      style: a2,
      sucks: a2,
      supplies: a2,
      supply: a2,
      support: X2,
      surf: a2,
      surgery: a2,
      suzuki: a2,
      swatch: a2,
      swiss: a2,
      sydney: a2,
      systems: [
        1,
        {
          knightpoint: o2
        }
      ],
      tab: a2,
      taipei: a2,
      talk: a2,
      taobao: a2,
      target: a2,
      tatamotors: a2,
      tatar: a2,
      tattoo: a2,
      tax: a2,
      taxi: a2,
      tci: a2,
      tdk: a2,
      team: [
        1,
        {
          discourse: o2,
          jelastic: o2
        }
      ],
      tech: a2,
      technology: d,
      temasek: a2,
      tennis: a2,
      teva: a2,
      thd: a2,
      theater: a2,
      theatre: a2,
      tiaa: a2,
      tickets: a2,
      tienda: a2,
      tips: a2,
      tires: a2,
      tirol: a2,
      tjmaxx: a2,
      tjx: a2,
      tkmaxx: a2,
      tmall: a2,
      today: [
        1,
        {
          prequalifyme: o2
        }
      ],
      tokyo: a2,
      tools: a2,
      top: [
        1,
        {
          "now-dns": o2,
          ntdll: o2
        }
      ],
      toray: a2,
      toshiba: a2,
      total: a2,
      tours: a2,
      town: a2,
      toyota: a2,
      toys: a2,
      trade: K,
      trading: a2,
      training: a2,
      travel: a2,
      travelers: a2,
      travelersinsurance: a2,
      trust: a2,
      trv: a2,
      tube: a2,
      tui: a2,
      tunes: a2,
      tushu: a2,
      tvs: a2,
      ubank: a2,
      ubs: a2,
      unicom: a2,
      university: a2,
      uno: a2,
      uol: a2,
      ups: a2,
      vacations: a2,
      vana: a2,
      vanguard: a2,
      vegas: a2,
      ventures: a2,
      verisign: a2,
      versicherung: a2,
      vet: a2,
      viajes: a2,
      video: a2,
      vig: a2,
      viking: a2,
      villas: a2,
      vin: a2,
      vip: a2,
      virgin: a2,
      visa: a2,
      vision: a2,
      viva: a2,
      vivo: a2,
      vlaanderen: a2,
      vodka: a2,
      volvo: a2,
      vote: a2,
      voting: a2,
      voto: a2,
      voyage: a2,
      wales: a2,
      walmart: a2,
      walter: a2,
      wang: a2,
      wanggou: a2,
      watch: a2,
      watches: a2,
      weather: a2,
      weatherchannel: a2,
      webcam: a2,
      weber: a2,
      website: V,
      wed: a2,
      wedding: a2,
      weibo: a2,
      weir: a2,
      whoswho: a2,
      wien: a2,
      wiki: V,
      williamhill: a2,
      win: a2,
      windows: a2,
      wine: a2,
      winners: a2,
      wme: a2,
      wolterskluwer: a2,
      woodside: a2,
      work: a2,
      works: a2,
      world: a2,
      wow: a2,
      wtc: a2,
      wtf: a2,
      xbox: a2,
      xerox: a2,
      xihuan: a2,
      xin: a2,
      "xn--11b4c3d": a2,
      "\u0915\u0949\u092E": a2,
      "xn--1ck2e1b": a2,
      "\u30BB\u30FC\u30EB": a2,
      "xn--1qqw23a": a2,
      "\u4F5B\u5C71": a2,
      "xn--30rr7y": a2,
      "\u6148\u5584": a2,
      "xn--3bst00m": a2,
      "\u96C6\u56E2": a2,
      "xn--3ds443g": a2,
      "\u5728\u7EBF": a2,
      "xn--3pxu8k": a2,
      "\u70B9\u770B": a2,
      "xn--42c2d9a": a2,
      "\u0E04\u0E2D\u0E21": a2,
      "xn--45q11c": a2,
      "\u516B\u5366": a2,
      "xn--4gbrim": a2,
      "\u0645\u0648\u0642\u0639": a2,
      "xn--55qw42g": a2,
      "\u516C\u76CA": a2,
      "xn--55qx5d": a2,
      "\u516C\u53F8": a2,
      "xn--5su34j936bgsg": a2,
      "\u9999\u683C\u91CC\u62C9": a2,
      "xn--5tzm5g": a2,
      "\u7F51\u7AD9": a2,
      "xn--6frz82g": a2,
      "\u79FB\u52A8": a2,
      "xn--6qq986b3xl": a2,
      "\u6211\u7231\u4F60": a2,
      "xn--80adxhks": a2,
      "\u043C\u043E\u0441\u043A\u0432\u0430": a2,
      "xn--80aqecdr1a": a2,
      "\u043A\u0430\u0442\u043E\u043B\u0438\u043A": a2,
      "xn--80asehdb": a2,
      "\u043E\u043D\u043B\u0430\u0439\u043D": a2,
      "xn--80aswg": a2,
      "\u0441\u0430\u0439\u0442": a2,
      "xn--8y0a063a": a2,
      "\u8054\u901A": a2,
      "xn--9dbq2a": a2,
      "\u05E7\u05D5\u05DD": a2,
      "xn--9et52u": a2,
      "\u65F6\u5C1A": a2,
      "xn--9krt00a": a2,
      "\u5FAE\u535A": a2,
      "xn--b4w605ferd": a2,
      "\u6DE1\u9A6C\u9521": a2,
      "xn--bck1b9a5dre4c": a2,
      "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3": a2,
      "xn--c1avg": a2,
      "\u043E\u0440\u0433": a2,
      "xn--c2br7g": a2,
      "\u0928\u0947\u091F": a2,
      "xn--cck2b3b": a2,
      "\u30B9\u30C8\u30A2": a2,
      "xn--cckwcxetd": a2,
      "\u30A2\u30DE\u30BE\u30F3": a2,
      "xn--cg4bki": a2,
      "\uC0BC\uC131": a2,
      "xn--czr694b": a2,
      "\u5546\u6807": a2,
      "xn--czrs0t": a2,
      "\u5546\u5E97": a2,
      "xn--czru2d": a2,
      "\u5546\u57CE": a2,
      "xn--d1acj3b": a2,
      "\u0434\u0435\u0442\u0438": a2,
      "xn--eckvdtc9d": a2,
      "\u30DD\u30A4\u30F3\u30C8": a2,
      "xn--efvy88h": a2,
      "\u65B0\u95FB": a2,
      "xn--fct429k": a2,
      "\u5BB6\u96FB": a2,
      "xn--fhbei": a2,
      "\u0643\u0648\u0645": a2,
      "xn--fiq228c5hs": a2,
      "\u4E2D\u6587\u7F51": a2,
      "xn--fiq64b": a2,
      "\u4E2D\u4FE1": a2,
      "xn--fjq720a": a2,
      "\u5A31\u4E50": a2,
      "xn--flw351e": a2,
      "\u8C37\u6B4C": a2,
      "xn--fzys8d69uvgm": a2,
      "\u96FB\u8A0A\u76C8\u79D1": a2,
      "xn--g2xx48c": a2,
      "\u8D2D\u7269": a2,
      "xn--gckr3f0f": a2,
      "\u30AF\u30E9\u30A6\u30C9": a2,
      "xn--gk3at1e": a2,
      "\u901A\u8CA9": a2,
      "xn--hxt814e": a2,
      "\u7F51\u5E97": a2,
      "xn--i1b6b1a6a2e": a2,
      "\u0938\u0902\u0917\u0920\u0928": a2,
      "xn--imr513n": a2,
      "\u9910\u5385": a2,
      "xn--io0a7i": a2,
      "\u7F51\u7EDC": a2,
      "xn--j1aef": a2,
      "\u043A\u043E\u043C": a2,
      "xn--jlq480n2rg": a2,
      "\u4E9A\u9A6C\u900A": a2,
      "xn--jvr189m": a2,
      "\u98DF\u54C1": a2,
      "xn--kcrx77d1x4a": a2,
      "\u98DE\u5229\u6D66": a2,
      "xn--kput3i": a2,
      "\u624B\u673A": a2,
      "xn--mgba3a3ejt": a2,
      "\u0627\u0631\u0627\u0645\u0643\u0648": a2,
      "xn--mgba7c0bbn0a": a2,
      "\u0627\u0644\u0639\u0644\u064A\u0627\u0646": a2,
      "xn--mgbab2bd": a2,
      "\u0628\u0627\u0632\u0627\u0631": a2,
      "xn--mgbca7dzdo": a2,
      "\u0627\u0628\u0648\u0638\u0628\u064A": a2,
      "xn--mgbi4ecexp": a2,
      "\u0643\u0627\u062B\u0648\u0644\u064A\u0643": a2,
      "xn--mgbt3dhd": a2,
      "\u0647\u0645\u0631\u0627\u0647": a2,
      "xn--mk1bu44c": a2,
      "\uB2F7\uCEF4": a2,
      "xn--mxtq1m": a2,
      "\u653F\u5E9C": a2,
      "xn--ngbc5azd": a2,
      "\u0634\u0628\u0643\u0629": a2,
      "xn--ngbe9e0a": a2,
      "\u0628\u064A\u062A\u0643": a2,
      "xn--ngbrx": a2,
      "\u0639\u0631\u0628": a2,
      "xn--nqv7f": a2,
      "\u673A\u6784": a2,
      "xn--nqv7fs00ema": a2,
      "\u7EC4\u7EC7\u673A\u6784": a2,
      "xn--nyqy26a": a2,
      "\u5065\u5EB7": a2,
      "xn--otu796d": a2,
      "\u62DB\u8058": a2,
      "xn--p1acf": [
        1,
        {
          "xn--90amc": o2,
          "xn--j1aef": o2,
          "xn--j1ael8b": o2,
          "xn--h1ahn": o2,
          "xn--j1adp": o2,
          "xn--c1avg": o2,
          "xn--80aaa0cvac": o2,
          "xn--h1aliz": o2,
          "xn--90a1af": o2,
          "xn--41a": o2
        }
      ],
      "\u0440\u0443\u0441": [
        1,
        {
          "\u0431\u0438\u0437": o2,
          "\u043A\u043E\u043C": o2,
          "\u043A\u0440\u044B\u043C": o2,
          "\u043C\u0438\u0440": o2,
          "\u043C\u0441\u043A": o2,
          "\u043E\u0440\u0433": o2,
          "\u0441\u0430\u043C\u0430\u0440\u0430": o2,
          "\u0441\u043E\u0447\u0438": o2,
          "\u0441\u043F\u0431": o2,
          "\u044F": o2
        }
      ],
      "xn--pssy2u": a2,
      "\u5927\u62FF": a2,
      "xn--q9jyb4c": a2,
      "\u307F\u3093\u306A": a2,
      "xn--qcka1pmc": a2,
      "\u30B0\u30FC\u30B0\u30EB": a2,
      "xn--rhqv96g": a2,
      "\u4E16\u754C": a2,
      "xn--rovu88b": a2,
      "\u66F8\u7C4D": a2,
      "xn--ses554g": a2,
      "\u7F51\u5740": a2,
      "xn--t60b56a": a2,
      "\uB2F7\uB137": a2,
      "xn--tckwe": a2,
      "\u30B3\u30E0": a2,
      "xn--tiq49xqyj": a2,
      "\u5929\u4E3B\u6559": a2,
      "xn--unup4y": a2,
      "\u6E38\u620F": a2,
      "xn--vermgensberater-ctb": a2,
      "verm\xF6gensberater": a2,
      "xn--vermgensberatung-pwb": a2,
      "verm\xF6gensberatung": a2,
      "xn--vhquv": a2,
      "\u4F01\u4E1A": a2,
      "xn--vuq861b": a2,
      "\u4FE1\u606F": a2,
      "xn--w4r85el8fhu5dnra": a2,
      "\u5609\u91CC\u5927\u9152\u5E97": a2,
      "xn--w4rs40l": a2,
      "\u5609\u91CC": a2,
      "xn--xhq521b": a2,
      "\u5E7F\u4E1C": a2,
      "xn--zfr164b": a2,
      "\u653F\u52A1": a2,
      xyz: [
        1,
        {
          blogsite: o2,
          localzone: o2,
          crafting: o2,
          zapto: o2,
          telebit: i2
        }
      ],
      yachts: a2,
      yahoo: a2,
      yamaxun: a2,
      yandex: a2,
      yodobashi: a2,
      yoga: a2,
      yokohama: a2,
      you: a2,
      youtube: a2,
      yun: a2,
      zappos: a2,
      zara: a2,
      zero: a2,
      zip: a2,
      zone: [
        1,
        {
          cloud66: o2,
          hs: o2,
          triton: i2,
          lima: o2
        }
      ],
      zuerich: a2
    }
  ];
}();
function r(a2, o2, e2, i2) {
  let n2 = null, s2 = o2;
  for (; void 0 !== s2 && (0 != (s2[0] & i2) && (n2 = {
    index: e2 + 1,
    isIcann: 1 === s2[0],
    isPrivate: 2 === s2[0]
  }), -1 !== e2); ) {
    const o3 = s2[1];
    s2 = Object.prototype.hasOwnProperty.call(o3, a2[e2]) ? o3[a2[e2]] : o3["*"], e2 -= 1;
  }
  return n2;
}
function u(a2, o2, e2) {
  var i2;
  if (function(a3, o3, e3) {
    if (!o3.allowPrivateDomains && a3.length > 3) {
      const o4 = a3.length - 1, i3 = a3.charCodeAt(o4), n3 = a3.charCodeAt(o4 - 1), s2 = a3.charCodeAt(o4 - 2), t2 = a3.charCodeAt(o4 - 3);
      if (109 === i3 && 111 === n3 && 99 === s2 && 46 === t2) return e3.isIcann = true, e3.isPrivate = false, e3.publicSuffix = "com", true;
      if (103 === i3 && 114 === n3 && 111 === s2 && 46 === t2) return e3.isIcann = true, e3.isPrivate = false, e3.publicSuffix = "org", true;
      if (117 === i3 && 100 === n3 && 101 === s2 && 46 === t2) return e3.isIcann = true, e3.isPrivate = false, e3.publicSuffix = "edu", true;
      if (118 === i3 && 111 === n3 && 103 === s2 && 46 === t2) return e3.isIcann = true, e3.isPrivate = false, e3.publicSuffix = "gov", true;
      if (116 === i3 && 101 === n3 && 110 === s2 && 46 === t2) return e3.isIcann = true, e3.isPrivate = false, e3.publicSuffix = "net", true;
      if (101 === i3 && 100 === n3 && 46 === s2) return e3.isIcann = true, e3.isPrivate = false, e3.publicSuffix = "de", true;
    }
    return false;
  }(a2, o2, e2)) return;
  const n2 = a2.split("."), u2 = (o2.allowPrivateDomains ? 2 : 0) | (o2.allowIcannDomains ? 1 : 0), l = r(n2, s, n2.length - 1, u2);
  if (null !== l) return e2.isIcann = l.isIcann, e2.isPrivate = l.isPrivate, void (e2.publicSuffix = n2.slice(l.index + 1).join("."));
  const m2 = r(n2, t, n2.length - 1, u2);
  if (null !== m2) return e2.isIcann = m2.isIcann, e2.isPrivate = m2.isPrivate, void (e2.publicSuffix = n2.slice(m2.index).join("."));
  e2.isIcann = false, e2.isPrivate = false, e2.publicSuffix = null !== (i2 = n2[n2.length - 1]) && void 0 !== i2 ? i2 : null;
}
function m(a2, o2 = {}) {
  return n(a2, 5, u, o2, {
    domain: null,
    domainWithoutSuffix: null,
    hostname: null,
    isIcann: null,
    isIp: null,
    isPrivate: null,
    publicSuffix: null,
    subdomain: null
  });
}

// deno:https://deno.land/x/punycode@v2.1.1/punycode.js
var maxInt = 2147483647;
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128;
var delimiter = "-";
var regexPunycode = /^xn--/;
var regexNonASCII = /[^\0-\x7E]/;
var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
var errors = {
  "overflow": "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
};
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;
function error(type) {
  throw new RangeError(errors[type]);
}
function map(array, fn) {
  const result = [];
  let length = array.length;
  while (length--) {
    result[length] = fn(array[length]);
  }
  return result;
}
function mapDomain(string, fn) {
  const parts = string.split("@");
  let result = "";
  if (parts.length > 1) {
    result = parts[0] + "@";
    string = parts[1];
  }
  string = string.replace(regexSeparators, ".");
  const labels = string.split(".");
  const encoded = map(labels, fn).join(".");
  return result + encoded;
}
function ucs2decode(string) {
  const output = [];
  let counter = 0;
  const length = string.length;
  while (counter < length) {
    const value = string.charCodeAt(counter++);
    if (value >= 55296 && value <= 56319 && counter < length) {
      const extra = string.charCodeAt(counter++);
      if ((extra & 64512) == 56320) {
        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
      } else {
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}
var ucs2encode = (array) => String.fromCodePoint(...array);
var basicToDigit = function(codePoint) {
  if (codePoint - 48 < 10) {
    return codePoint - 22;
  }
  if (codePoint - 65 < 26) {
    return codePoint - 65;
  }
  if (codePoint - 97 < 26) {
    return codePoint - 97;
  }
  return base;
};
var digitToBasic = function(digit, flag) {
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};
var adapt = function(delta, numPoints, firstTime) {
  let k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};
var decode = function(input) {
  const output = [];
  const inputLength = input.length;
  let i2 = 0;
  let n2 = initialN;
  let bias = initialBias;
  let basic = input.lastIndexOf(delimiter);
  if (basic < 0) {
    basic = 0;
  }
  for (let j = 0; j < basic; ++j) {
    if (input.charCodeAt(j) >= 128) {
      error("not-basic");
    }
    output.push(input.charCodeAt(j));
  }
  for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
    let oldi = i2;
    for (let w = 1, k = base; ; k += base) {
      if (index >= inputLength) {
        error("invalid-input");
      }
      const digit = basicToDigit(input.charCodeAt(index++));
      if (digit >= base || digit > floor((maxInt - i2) / w)) {
        error("overflow");
      }
      i2 += digit * w;
      const t2 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
      if (digit < t2) {
        break;
      }
      const baseMinusT = base - t2;
      if (w > floor(maxInt / baseMinusT)) {
        error("overflow");
      }
      w *= baseMinusT;
    }
    const out = output.length + 1;
    bias = adapt(i2 - oldi, out, oldi == 0);
    if (floor(i2 / out) > maxInt - n2) {
      error("overflow");
    }
    n2 += floor(i2 / out);
    i2 %= out;
    output.splice(i2++, 0, n2);
  }
  return String.fromCodePoint(...output);
};
var encode = function(input) {
  const output = [];
  input = ucs2decode(input);
  let inputLength = input.length;
  let n2 = initialN;
  let delta = 0;
  let bias = initialBias;
  for (const currentValue of input) {
    if (currentValue < 128) {
      output.push(stringFromCharCode(currentValue));
    }
  }
  let basicLength = output.length;
  let handledCPCount = basicLength;
  if (basicLength) {
    output.push(delimiter);
  }
  while (handledCPCount < inputLength) {
    let m2 = maxInt;
    for (const currentValue of input) {
      if (currentValue >= n2 && currentValue < m2) {
        m2 = currentValue;
      }
    }
    const handledCPCountPlusOne = handledCPCount + 1;
    if (m2 - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
      error("overflow");
    }
    delta += (m2 - n2) * handledCPCountPlusOne;
    n2 = m2;
    for (const currentValue of input) {
      if (currentValue < n2 && ++delta > maxInt) {
        error("overflow");
      }
      if (currentValue == n2) {
        let q = delta;
        for (let k = base; ; k += base) {
          const t2 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (q < t2) {
            break;
          }
          const qMinusT = q - t2;
          const baseMinusT = base - t2;
          output.push(stringFromCharCode(digitToBasic(t2 + qMinusT % baseMinusT, 0)));
          q = floor(qMinusT / baseMinusT);
        }
        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }
    ++delta;
    ++n2;
  }
  return output.join("");
};
var toUnicode = function(input) {
  return mapDomain(input, function(string) {
    return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
  });
};
var toASCII = function(input) {
  return mapDomain(input, function(string) {
    return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
  });
};
var punycode_default = {
  /**
  * A string representing the current Punycode.js version number.
  * @memberOf punycode
  * @type String
  */
  "version": "2.1.0",
  /**
  * An object of methods to convert from JavaScript's internal character
  * representation (UCS-2) to Unicode code points, and back.
  * @see <https://mathiasbynens.be/notes/javascript-encoding>
  * @memberOf punycode
  * @type Object
  */
  "ucs2": {
    "decode": ucs2decode,
    "encode": ucs2encode
  },
  "decode": decode,
  "encode": encode,
  "toASCII": toASCII,
  "toUnicode": toUnicode
};

// deno:https://deno.land/x/jose@v4.15.4/runtime/webcrypto.ts
var webcrypto_default = crypto;
var isCryptoKey = (key) => key instanceof CryptoKey;

// deno:https://deno.land/x/jose@v4.15.4/lib/buffer_utils.ts
var encoder = new TextEncoder();
var decoder = new TextDecoder();
var MAX_INT32 = 2 ** 32;
function concat(...buffers) {
  const size = buffers.reduce((acc, { length }) => acc + length, 0);
  const buf = new Uint8Array(size);
  let i2 = 0;
  buffers.forEach((buffer) => {
    buf.set(buffer, i2);
    i2 += buffer.length;
  });
  return buf;
}

// deno:https://deno.land/x/jose@v4.15.4/runtime/base64url.ts
var decodeBase64 = (encoded) => {
  const binary = atob(encoded);
  const bytes = new Uint8Array(binary.length);
  for (let i2 = 0; i2 < binary.length; i2++) {
    bytes[i2] = binary.charCodeAt(i2);
  }
  return bytes;
};
var decode2 = (input) => {
  let encoded = input;
  if (encoded instanceof Uint8Array) {
    encoded = decoder.decode(encoded);
  }
  encoded = encoded.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
  try {
    return decodeBase64(encoded);
  } catch {
    throw new TypeError("The input to be decoded is not correctly encoded.");
  }
};

// deno:https://deno.land/x/jose@v4.15.4/util/errors.ts
var _computedKey;
var JOSEError = class extends Error {
  /** A unique error code for the particular error subclass. */
  static get code() {
    return "ERR_JOSE_GENERIC";
  }
  /** A unique error code for the particular error subclass. */
  code = "ERR_JOSE_GENERIC";
  constructor(message2) {
    super(message2);
    this.name = this.constructor.name;
    Error.captureStackTrace?.(this, this.constructor);
  }
};
var JWTClaimValidationFailed = class extends JOSEError {
  static get code() {
    return "ERR_JWT_CLAIM_VALIDATION_FAILED";
  }
  code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
  /** The Claim for which the validation failed. */
  claim;
  /** Reason code for the validation failure. */
  reason;
  constructor(message2, claim = "unspecified", reason = "unspecified") {
    super(message2);
    this.claim = claim;
    this.reason = reason;
  }
};
var JWTExpired = class extends JOSEError {
  static get code() {
    return "ERR_JWT_EXPIRED";
  }
  code = "ERR_JWT_EXPIRED";
  /** The Claim for which the validation failed. */
  claim;
  /** Reason code for the validation failure. */
  reason;
  constructor(message2, claim = "unspecified", reason = "unspecified") {
    super(message2);
    this.claim = claim;
    this.reason = reason;
  }
};
var JOSEAlgNotAllowed = class extends JOSEError {
  static get code() {
    return "ERR_JOSE_ALG_NOT_ALLOWED";
  }
  code = "ERR_JOSE_ALG_NOT_ALLOWED";
};
var JOSENotSupported = class extends JOSEError {
  static get code() {
    return "ERR_JOSE_NOT_SUPPORTED";
  }
  code = "ERR_JOSE_NOT_SUPPORTED";
};
var JWSInvalid = class extends JOSEError {
  static get code() {
    return "ERR_JWS_INVALID";
  }
  code = "ERR_JWS_INVALID";
};
var JWTInvalid = class extends JOSEError {
  static get code() {
    return "ERR_JWT_INVALID";
  }
  code = "ERR_JWT_INVALID";
};
_computedKey = Symbol.asyncIterator;
var JWKSMultipleMatchingKeys = class extends JOSEError {
  /** @ignore */
  [_computedKey];
  static get code() {
    return "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
  }
  code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
  message = "multiple matching keys found in the JSON Web Key Set";
};
var JWSSignatureVerificationFailed = class extends JOSEError {
  static get code() {
    return "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
  }
  code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
  message = "signature verification failed";
};

// deno:https://deno.land/x/jose@v4.15.4/runtime/random.ts
var random_default = webcrypto_default.getRandomValues.bind(webcrypto_default);

// deno:https://deno.land/x/jose@v4.15.4/lib/crypto_key.ts
function unusable(name, prop = "algorithm.name") {
  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
function isAlgorithm(algorithm, name) {
  return algorithm.name === name;
}
function getHashLength(hash) {
  return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) {
  switch (alg) {
    case "ES256":
      return "P-256";
    case "ES384":
      return "P-384";
    case "ES512":
      return "P-521";
    default:
      throw new Error("unreachable");
  }
}
function checkUsage(key, usages) {
  if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
    let msg = "CryptoKey does not support this operation, its usages must include ";
    if (usages.length > 2) {
      const last = usages.pop();
      msg += `one of ${usages.join(", ")}, or ${last}.`;
    } else if (usages.length === 2) {
      msg += `one of ${usages[0]} or ${usages[1]}.`;
    } else {
      msg += `${usages[0]}.`;
    }
    throw new TypeError(msg);
  }
}
function checkSigCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512": {
      if (!isAlgorithm(key.algorithm, "HMAC")) throw unusable("HMAC");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "RS256":
    case "RS384":
    case "RS512": {
      if (!isAlgorithm(key.algorithm, "RSASSA-PKCS1-v1_5")) throw unusable("RSASSA-PKCS1-v1_5");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "PS256":
    case "PS384":
    case "PS512": {
      if (!isAlgorithm(key.algorithm, "RSA-PSS")) throw unusable("RSA-PSS");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "EdDSA": {
      if (key.algorithm.name !== "Ed25519" && key.algorithm.name !== "Ed448") {
        throw unusable("Ed25519 or Ed448");
      }
      break;
    }
    case "ES256":
    case "ES384":
    case "ES512": {
      if (!isAlgorithm(key.algorithm, "ECDSA")) throw unusable("ECDSA");
      const expected = getNamedCurve(alg);
      const actual = key.algorithm.namedCurve;
      if (actual !== expected) throw unusable(expected, "algorithm.namedCurve");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  checkUsage(key, usages);
}

// deno:https://deno.land/x/jose@v4.15.4/lib/invalid_key_input.ts
function message(msg, actual, ...types2) {
  if (types2.length > 2) {
    const last = types2.pop();
    msg += `one of type ${types2.join(", ")}, or ${last}.`;
  } else if (types2.length === 2) {
    msg += `one of type ${types2[0]} or ${types2[1]}.`;
  } else {
    msg += `of type ${types2[0]}.`;
  }
  if (actual == null) {
    msg += ` Received ${actual}`;
  } else if (typeof actual === "function" && actual.name) {
    msg += ` Received function ${actual.name}`;
  } else if (typeof actual === "object" && actual != null) {
    if (actual.constructor && actual.constructor.name) {
      msg += ` Received an instance of ${actual.constructor.name}`;
    }
  }
  return msg;
}
var invalid_key_input_default = (actual, ...types2) => {
  return message("Key must be ", actual, ...types2);
};
function withAlg(alg, actual, ...types2) {
  return message(`Key for the ${alg} algorithm must be `, actual, ...types2);
}

// deno:https://deno.land/x/jose@v4.15.4/runtime/is_key_like.ts
var is_key_like_default = (key) => {
  return isCryptoKey(key);
};
var types = [
  "CryptoKey"
];

// deno:https://deno.land/x/jose@v4.15.4/lib/is_disjoint.ts
var isDisjoint = (...headers) => {
  const sources = headers.filter(Boolean);
  if (sources.length === 0 || sources.length === 1) {
    return true;
  }
  let acc;
  for (const header of sources) {
    const parameters = Object.keys(header);
    if (!acc || acc.size === 0) {
      acc = new Set(parameters);
      continue;
    }
    for (const parameter of parameters) {
      if (acc.has(parameter)) {
        return false;
      }
      acc.add(parameter);
    }
  }
  return true;
};
var is_disjoint_default = isDisjoint;

// deno:https://deno.land/x/jose@v4.15.4/lib/is_object.ts
function isObjectLike(value) {
  return typeof value === "object" && value !== null;
}
function isObject(input) {
  if (!isObjectLike(input) || Object.prototype.toString.call(input) !== "[object Object]") {
    return false;
  }
  if (Object.getPrototypeOf(input) === null) {
    return true;
  }
  let proto = input;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(input) === proto;
}

// deno:https://deno.land/x/jose@v4.15.4/runtime/check_key_length.ts
var check_key_length_default = (alg, key) => {
  if (alg.startsWith("RS") || alg.startsWith("PS")) {
    const { modulusLength } = key.algorithm;
    if (typeof modulusLength !== "number" || modulusLength < 2048) {
      throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
    }
  }
};

// deno:https://deno.land/x/jose@v4.15.4/runtime/jwk_to_key.ts
function subtleMapping(jwk) {
  let algorithm;
  let keyUsages;
  switch (jwk.kty) {
    case "oct": {
      switch (jwk.alg) {
        case "HS256":
        case "HS384":
        case "HS512":
          algorithm = {
            name: "HMAC",
            hash: `SHA-${jwk.alg.slice(-3)}`
          };
          keyUsages = [
            "sign",
            "verify"
          ];
          break;
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
          throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
        case "A128GCMKW":
        case "A192GCMKW":
        case "A256GCMKW":
          algorithm = {
            name: "AES-GCM"
          };
          keyUsages = [
            "encrypt",
            "decrypt"
          ];
          break;
        case "A128KW":
        case "A192KW":
        case "A256KW":
          algorithm = {
            name: "AES-KW"
          };
          keyUsages = [
            "wrapKey",
            "unwrapKey"
          ];
          break;
        case "PBES2-HS256+A128KW":
        case "PBES2-HS384+A192KW":
        case "PBES2-HS512+A256KW":
          algorithm = {
            name: "PBKDF2"
          };
          keyUsages = [
            "deriveBits"
          ];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "RSA": {
      switch (jwk.alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          algorithm = {
            name: "RSA-PSS",
            hash: `SHA-${jwk.alg.slice(-3)}`
          };
          keyUsages = jwk.d ? [
            "sign"
          ] : [
            "verify"
          ];
          break;
        case "RS256":
        case "RS384":
        case "RS512":
          algorithm = {
            name: "RSASSA-PKCS1-v1_5",
            hash: `SHA-${jwk.alg.slice(-3)}`
          };
          keyUsages = jwk.d ? [
            "sign"
          ] : [
            "verify"
          ];
          break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
          algorithm = {
            name: "RSA-OAEP",
            hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
          };
          keyUsages = jwk.d ? [
            "decrypt",
            "unwrapKey"
          ] : [
            "encrypt",
            "wrapKey"
          ];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "EC": {
      switch (jwk.alg) {
        case "ES256":
          algorithm = {
            name: "ECDSA",
            namedCurve: "P-256"
          };
          keyUsages = jwk.d ? [
            "sign"
          ] : [
            "verify"
          ];
          break;
        case "ES384":
          algorithm = {
            name: "ECDSA",
            namedCurve: "P-384"
          };
          keyUsages = jwk.d ? [
            "sign"
          ] : [
            "verify"
          ];
          break;
        case "ES512":
          algorithm = {
            name: "ECDSA",
            namedCurve: "P-521"
          };
          keyUsages = jwk.d ? [
            "sign"
          ] : [
            "verify"
          ];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm = {
            name: "ECDH",
            namedCurve: jwk.crv
          };
          keyUsages = jwk.d ? [
            "deriveBits"
          ] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "OKP": {
      switch (jwk.alg) {
        case "EdDSA":
          algorithm = {
            name: jwk.crv
          };
          keyUsages = jwk.d ? [
            "sign"
          ] : [
            "verify"
          ];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm = {
            name: jwk.crv
          };
          keyUsages = jwk.d ? [
            "deriveBits"
          ] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
  }
  return {
    algorithm,
    keyUsages
  };
}
var parse = async (jwk) => {
  if (!jwk.alg) {
    throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
  }
  const { algorithm, keyUsages } = subtleMapping(jwk);
  const rest = [
    algorithm,
    jwk.ext ?? false,
    jwk.key_ops ?? keyUsages
  ];
  if (algorithm.name === "PBKDF2") {
    return webcrypto_default.subtle.importKey("raw", decode2(jwk.k), ...rest);
  }
  const keyData = {
    ...jwk
  };
  delete keyData.alg;
  delete keyData.use;
  return webcrypto_default.subtle.importKey("jwk", keyData, ...rest);
};
var jwk_to_key_default = parse;

// deno:https://deno.land/x/jose@v4.15.4/key/import.ts
async function importJWK(jwk, alg, octAsKeyObject) {
  if (!isObject(jwk)) {
    throw new TypeError("JWK must be an object");
  }
  alg ||= jwk.alg;
  switch (jwk.kty) {
    case "oct":
      if (typeof jwk.k !== "string" || !jwk.k) {
        throw new TypeError('missing "k" (Key Value) Parameter value');
      }
      octAsKeyObject ??= jwk.ext !== true;
      if (octAsKeyObject) {
        return jwk_to_key_default({
          ...jwk,
          alg,
          ext: jwk.ext ?? false
        });
      }
      return decode2(jwk.k);
    case "RSA":
      if (jwk.oth !== void 0) {
        throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
      }
    case "EC":
    case "OKP":
      return jwk_to_key_default({
        ...jwk,
        alg
      });
    default:
      throw new JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
  }
}

// deno:https://deno.land/x/jose@v4.15.4/lib/check_key_type.ts
var symmetricTypeCheck = (alg, key) => {
  if (key instanceof Uint8Array) return;
  if (!is_key_like_default(key)) {
    throw new TypeError(withAlg(alg, key, ...types, "Uint8Array"));
  }
  if (key.type !== "secret") {
    throw new TypeError(`${types.join(" or ")} instances for symmetric algorithms must be of type "secret"`);
  }
};
var asymmetricTypeCheck = (alg, key, usage) => {
  if (!is_key_like_default(key)) {
    throw new TypeError(withAlg(alg, key, ...types));
  }
  if (key.type === "secret") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithms must not be of type "secret"`);
  }
  if (usage === "sign" && key.type === "public") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm signing must be of type "private"`);
  }
  if (usage === "decrypt" && key.type === "public") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm decryption must be of type "private"`);
  }
  if (key.algorithm && usage === "verify" && key.type === "private") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm verifying must be of type "public"`);
  }
  if (key.algorithm && usage === "encrypt" && key.type === "private") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm encryption must be of type "public"`);
  }
};
var checkKeyType = (alg, key, usage) => {
  const symmetric = alg.startsWith("HS") || alg === "dir" || alg.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(alg);
  if (symmetric) {
    symmetricTypeCheck(alg, key);
  } else {
    asymmetricTypeCheck(alg, key, usage);
  }
};
var check_key_type_default = checkKeyType;

// deno:https://deno.land/x/jose@v4.15.4/lib/validate_crit.ts
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
  if (joseHeader.crit !== void 0 && protectedHeader.crit === void 0) {
    throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
  }
  if (!protectedHeader || protectedHeader.crit === void 0) {
    return /* @__PURE__ */ new Set();
  }
  if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input) => typeof input !== "string" || input.length === 0)) {
    throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
  }
  let recognized;
  if (recognizedOption !== void 0) {
    recognized = new Map([
      ...Object.entries(recognizedOption),
      ...recognizedDefault.entries()
    ]);
  } else {
    recognized = recognizedDefault;
  }
  for (const parameter of protectedHeader.crit) {
    if (!recognized.has(parameter)) {
      throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
    }
    if (joseHeader[parameter] === void 0) {
      throw new Err(`Extension Header Parameter "${parameter}" is missing`);
    } else if (recognized.get(parameter) && protectedHeader[parameter] === void 0) {
      throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
    }
  }
  return new Set(protectedHeader.crit);
}
var validate_crit_default = validateCrit;

// deno:https://deno.land/x/jose@v4.15.4/lib/validate_algorithms.ts
var validateAlgorithms = (option, algorithms) => {
  if (algorithms !== void 0 && (!Array.isArray(algorithms) || algorithms.some((s2) => typeof s2 !== "string"))) {
    throw new TypeError(`"${option}" option must be an array of strings`);
  }
  if (!algorithms) {
    return void 0;
  }
  return new Set(algorithms);
};
var validate_algorithms_default = validateAlgorithms;

// deno:https://deno.land/x/jose@v4.15.4/jwe/flattened/encrypt.ts
var unprotected = Symbol();

// deno:https://deno.land/x/jose@v4.15.4/runtime/subtle_dsa.ts
function subtleDsa(alg, algorithm) {
  const hash = `SHA-${alg.slice(-3)}`;
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512":
      return {
        hash,
        name: "HMAC"
      };
    case "PS256":
    case "PS384":
    case "PS512":
      return {
        hash,
        name: "RSA-PSS",
        saltLength: alg.slice(-3) >> 3
      };
    case "RS256":
    case "RS384":
    case "RS512":
      return {
        hash,
        name: "RSASSA-PKCS1-v1_5"
      };
    case "ES256":
    case "ES384":
    case "ES512":
      return {
        hash,
        name: "ECDSA",
        namedCurve: algorithm.namedCurve
      };
    case "EdDSA":
      return {
        name: algorithm.name
      };
    default:
      throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}

// deno:https://deno.land/x/jose@v4.15.4/runtime/get_sign_verify_key.ts
function getCryptoKey(alg, key, usage) {
  if (isCryptoKey(key)) {
    checkSigCryptoKey(key, alg, usage);
    return key;
  }
  if (key instanceof Uint8Array) {
    if (!alg.startsWith("HS")) {
      throw new TypeError(invalid_key_input_default(key, ...types));
    }
    return webcrypto_default.subtle.importKey("raw", key, {
      hash: `SHA-${alg.slice(-3)}`,
      name: "HMAC"
    }, false, [
      usage
    ]);
  }
  throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
}

// deno:https://deno.land/x/jose@v4.15.4/runtime/verify.ts
var verify = async (alg, key, signature, data) => {
  const cryptoKey = await getCryptoKey(alg, key, "verify");
  check_key_length_default(alg, cryptoKey);
  const algorithm = subtleDsa(alg, cryptoKey.algorithm);
  try {
    return await webcrypto_default.subtle.verify(algorithm, cryptoKey, signature, data);
  } catch {
    return false;
  }
};
var verify_default = verify;

// deno:https://deno.land/x/jose@v4.15.4/jws/flattened/verify.ts
async function flattenedVerify(jws, key, options) {
  if (!isObject(jws)) {
    throw new JWSInvalid("Flattened JWS must be an object");
  }
  if (jws.protected === void 0 && jws.header === void 0) {
    throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
  }
  if (jws.protected !== void 0 && typeof jws.protected !== "string") {
    throw new JWSInvalid("JWS Protected Header incorrect type");
  }
  if (jws.payload === void 0) {
    throw new JWSInvalid("JWS Payload missing");
  }
  if (typeof jws.signature !== "string") {
    throw new JWSInvalid("JWS Signature missing or incorrect type");
  }
  if (jws.header !== void 0 && !isObject(jws.header)) {
    throw new JWSInvalid("JWS Unprotected Header incorrect type");
  }
  let parsedProt = {};
  if (jws.protected) {
    try {
      const protectedHeader = decode2(jws.protected);
      parsedProt = JSON.parse(decoder.decode(protectedHeader));
    } catch {
      throw new JWSInvalid("JWS Protected Header is invalid");
    }
  }
  if (!is_disjoint_default(parsedProt, jws.header)) {
    throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
  }
  const joseHeader = {
    ...parsedProt,
    ...jws.header
  };
  const extensions2 = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([
    [
      "b64",
      true
    ]
  ]), options?.crit, parsedProt, joseHeader);
  let b64 = true;
  if (extensions2.has("b64")) {
    b64 = parsedProt.b64;
    if (typeof b64 !== "boolean") {
      throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
    }
  }
  const { alg } = joseHeader;
  if (typeof alg !== "string" || !alg) {
    throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
  }
  const algorithms = options && validate_algorithms_default("algorithms", options.algorithms);
  if (algorithms && !algorithms.has(alg)) {
    throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
  }
  if (b64) {
    if (typeof jws.payload !== "string") {
      throw new JWSInvalid("JWS Payload must be a string");
    }
  } else if (typeof jws.payload !== "string" && !(jws.payload instanceof Uint8Array)) {
    throw new JWSInvalid("JWS Payload must be a string or an Uint8Array instance");
  }
  let resolvedKey = false;
  if (typeof key === "function") {
    key = await key(parsedProt, jws);
    resolvedKey = true;
  }
  check_key_type_default(alg, key, "verify");
  const data = concat(encoder.encode(jws.protected ?? ""), encoder.encode("."), typeof jws.payload === "string" ? encoder.encode(jws.payload) : jws.payload);
  let signature;
  try {
    signature = decode2(jws.signature);
  } catch {
    throw new JWSInvalid("Failed to base64url decode the signature");
  }
  const verified = await verify_default(alg, key, signature, data);
  if (!verified) {
    throw new JWSSignatureVerificationFailed();
  }
  let payload;
  if (b64) {
    try {
      payload = decode2(jws.payload);
    } catch {
      throw new JWSInvalid("Failed to base64url decode the payload");
    }
  } else if (typeof jws.payload === "string") {
    payload = encoder.encode(jws.payload);
  } else {
    payload = jws.payload;
  }
  const result = {
    payload
  };
  if (jws.protected !== void 0) {
    result.protectedHeader = parsedProt;
  }
  if (jws.header !== void 0) {
    result.unprotectedHeader = jws.header;
  }
  if (resolvedKey) {
    return {
      ...result,
      key
    };
  }
  return result;
}

// deno:https://deno.land/x/jose@v4.15.4/jws/compact/verify.ts
async function compactVerify(jws, key, options) {
  if (jws instanceof Uint8Array) {
    jws = decoder.decode(jws);
  }
  if (typeof jws !== "string") {
    throw new JWSInvalid("Compact JWS must be a string or Uint8Array");
  }
  const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split(".");
  if (length !== 3) {
    throw new JWSInvalid("Invalid Compact JWS");
  }
  const verified = await flattenedVerify({
    payload,
    protected: protectedHeader,
    signature
  }, key, options);
  const result = {
    payload: verified.payload,
    protectedHeader: verified.protectedHeader
  };
  if (typeof key === "function") {
    return {
      ...result,
      key: verified.key
    };
  }
  return result;
}

// deno:https://deno.land/x/jose@v4.15.4/lib/epoch.ts
var epoch_default = (date) => Math.floor(date.getTime() / 1e3);

// deno:https://deno.land/x/jose@v4.15.4/lib/secs.ts
var minute = 60;
var hour = minute * 60;
var day = hour * 24;
var week = day * 7;
var year = day * 365.25;
var REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;
var secs_default = (str) => {
  const matched = REGEX.exec(str);
  if (!matched) {
    throw new TypeError("Invalid time period format");
  }
  const value = parseFloat(matched[1]);
  const unit = matched[2].toLowerCase();
  switch (unit) {
    case "sec":
    case "secs":
    case "second":
    case "seconds":
    case "s":
      return Math.round(value);
    case "minute":
    case "minutes":
    case "min":
    case "mins":
    case "m":
      return Math.round(value * minute);
    case "hour":
    case "hours":
    case "hr":
    case "hrs":
    case "h":
      return Math.round(value * hour);
    case "day":
    case "days":
    case "d":
      return Math.round(value * day);
    case "week":
    case "weeks":
    case "w":
      return Math.round(value * week);
    // years matched
    default:
      return Math.round(value * year);
  }
};

// deno:https://deno.land/x/jose@v4.15.4/lib/jwt_claims_set.ts
var normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, "");
var checkAudiencePresence = (audPayload, audOption) => {
  if (typeof audPayload === "string") {
    return audOption.includes(audPayload);
  }
  if (Array.isArray(audPayload)) {
    return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
  }
  return false;
};
var jwt_claims_set_default = (protectedHeader, encodedPayload, options = {}) => {
  const { typ } = options;
  if (typ && (typeof protectedHeader.typ !== "string" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
    throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', "typ", "check_failed");
  }
  let payload;
  try {
    payload = JSON.parse(decoder.decode(encodedPayload));
  } catch {
  }
  if (!isObject(payload)) {
    throw new JWTInvalid("JWT Claims Set must be a top-level JSON object");
  }
  const { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;
  if (maxTokenAge !== void 0) requiredClaims.push("iat");
  if (audience !== void 0) requiredClaims.push("aud");
  if (subject !== void 0) requiredClaims.push("sub");
  if (issuer !== void 0) requiredClaims.push("iss");
  for (const claim of new Set(requiredClaims.reverse())) {
    if (!(claim in payload)) {
      throw new JWTClaimValidationFailed(`missing required "${claim}" claim`, claim, "missing");
    }
  }
  if (issuer && !(Array.isArray(issuer) ? issuer : [
    issuer
  ]).includes(payload.iss)) {
    throw new JWTClaimValidationFailed('unexpected "iss" claim value', "iss", "check_failed");
  }
  if (subject && payload.sub !== subject) {
    throw new JWTClaimValidationFailed('unexpected "sub" claim value', "sub", "check_failed");
  }
  if (audience && !checkAudiencePresence(payload.aud, typeof audience === "string" ? [
    audience
  ] : audience)) {
    throw new JWTClaimValidationFailed('unexpected "aud" claim value', "aud", "check_failed");
  }
  let tolerance;
  switch (typeof options.clockTolerance) {
    case "string":
      tolerance = secs_default(options.clockTolerance);
      break;
    case "number":
      tolerance = options.clockTolerance;
      break;
    case "undefined":
      tolerance = 0;
      break;
    default:
      throw new TypeError("Invalid clockTolerance option type");
  }
  const { currentDate } = options;
  const now = epoch_default(currentDate || /* @__PURE__ */ new Date());
  if ((payload.iat !== void 0 || maxTokenAge) && typeof payload.iat !== "number") {
    throw new JWTClaimValidationFailed('"iat" claim must be a number', "iat", "invalid");
  }
  if (payload.nbf !== void 0) {
    if (typeof payload.nbf !== "number") {
      throw new JWTClaimValidationFailed('"nbf" claim must be a number', "nbf", "invalid");
    }
    if (payload.nbf > now + tolerance) {
      throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', "nbf", "check_failed");
    }
  }
  if (payload.exp !== void 0) {
    if (typeof payload.exp !== "number") {
      throw new JWTClaimValidationFailed('"exp" claim must be a number', "exp", "invalid");
    }
    if (payload.exp <= now - tolerance) {
      throw new JWTExpired('"exp" claim timestamp check failed', "exp", "check_failed");
    }
  }
  if (maxTokenAge) {
    const age = now - payload.iat;
    const max = typeof maxTokenAge === "number" ? maxTokenAge : secs_default(maxTokenAge);
    if (age - tolerance > max) {
      throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', "iat", "check_failed");
    }
    if (age < 0 - tolerance) {
      throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', "iat", "check_failed");
    }
  }
  return payload;
};

// deno:https://deno.land/x/jose@v4.15.4/jwt/verify.ts
async function jwtVerify(jwt, key, options) {
  const verified = await compactVerify(jwt, key, options);
  if (verified.protectedHeader.crit?.includes("b64") && verified.protectedHeader.b64 === false) {
    throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
  }
  const payload = jwt_claims_set_default(verified.protectedHeader, verified.payload, options);
  const result = {
    payload,
    protectedHeader: verified.protectedHeader
  };
  if (typeof key === "function") {
    return {
      ...result,
      key: verified.key
    };
  }
  return result;
}

// deno:https://deno.land/x/jose@v4.15.4/util/base64url.ts
var decode3 = decode2;

// deno:https://deno.land/x/jose@v4.15.4/util/decode_protected_header.ts
function decodeProtectedHeader(token) {
  let protectedB64u;
  if (typeof token === "string") {
    const parts = token.split(".");
    if (parts.length === 3 || parts.length === 5) {
      ;
      [protectedB64u] = parts;
    }
  } else if (typeof token === "object" && token) {
    if ("protected" in token) {
      protectedB64u = token.protected;
    } else {
      throw new TypeError("Token does not contain a Protected Header");
    }
  }
  try {
    if (typeof protectedB64u !== "string" || !protectedB64u) {
      throw new Error();
    }
    const result = JSON.parse(decoder.decode(decode3(protectedB64u)));
    if (!isObject(result)) {
      throw new Error();
    }
    return result;
  } catch {
    throw new TypeError("Invalid Token or Protected Header formatting");
  }
}

// deno:https://unpkg.com/pvtsutils@1.3.6/build/index.es.js?module
var ARRAY_BUFFER_NAME = "[object ArrayBuffer]";
var BufferSourceConverter = class _BufferSourceConverter {
  static isArrayBuffer(data) {
    return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;
  }
  static toArrayBuffer(data) {
    if (this.isArrayBuffer(data)) {
      return data;
    }
    if (data.byteLength === data.buffer.byteLength) {
      return data.buffer;
    }
    if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {
      return data.buffer;
    }
    return this.toUint8Array(data.buffer).slice(data.byteOffset, data.byteOffset + data.byteLength).buffer;
  }
  static toUint8Array(data) {
    return this.toView(data, Uint8Array);
  }
  static toView(data, type) {
    if (data.constructor === type) {
      return data;
    }
    if (this.isArrayBuffer(data)) {
      return new type(data);
    }
    if (this.isArrayBufferView(data)) {
      return new type(data.buffer, data.byteOffset, data.byteLength);
    }
    throw new TypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");
  }
  static isBufferSource(data) {
    return this.isArrayBufferView(data) || this.isArrayBuffer(data);
  }
  static isArrayBufferView(data) {
    return ArrayBuffer.isView(data) || data && this.isArrayBuffer(data.buffer);
  }
  static isEqual(a2, b) {
    const aView = _BufferSourceConverter.toUint8Array(a2);
    const bView = _BufferSourceConverter.toUint8Array(b);
    if (aView.length !== bView.byteLength) {
      return false;
    }
    for (let i2 = 0; i2 < aView.length; i2++) {
      if (aView[i2] !== bView[i2]) {
        return false;
      }
    }
    return true;
  }
  static concat(...args) {
    let buffers;
    if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {
      buffers = args[0];
    } else if (Array.isArray(args[0]) && args[1] instanceof Function) {
      buffers = args[0];
    } else {
      if (args[args.length - 1] instanceof Function) {
        buffers = args.slice(0, args.length - 1);
      } else {
        buffers = args;
      }
    }
    let size = 0;
    for (const buffer of buffers) {
      size += buffer.byteLength;
    }
    const res = new Uint8Array(size);
    let offset = 0;
    for (const buffer of buffers) {
      const view = this.toUint8Array(buffer);
      res.set(view, offset);
      offset += view.length;
    }
    if (args[args.length - 1] instanceof Function) {
      return this.toView(res, args[args.length - 1]);
    }
    return res.buffer;
  }
};
var STRING_TYPE = "string";
var HEX_REGEX = /^[0-9a-f\s]+$/i;
var BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
var BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;
var Utf8Converter = class {
  static fromString(text) {
    const s2 = unescape(encodeURIComponent(text));
    const uintArray = new Uint8Array(s2.length);
    for (let i2 = 0; i2 < s2.length; i2++) {
      uintArray[i2] = s2.charCodeAt(i2);
    }
    return uintArray.buffer;
  }
  static toString(buffer) {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    let encodedString = "";
    for (let i2 = 0; i2 < buf.length; i2++) {
      encodedString += String.fromCharCode(buf[i2]);
    }
    const decodedString = decodeURIComponent(escape(encodedString));
    return decodedString;
  }
};
var Utf16Converter = class {
  static toString(buffer, littleEndian = false) {
    const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);
    const dataView2 = new DataView(arrayBuffer);
    let res = "";
    for (let i2 = 0; i2 < arrayBuffer.byteLength; i2 += 2) {
      const code = dataView2.getUint16(i2, littleEndian);
      res += String.fromCharCode(code);
    }
    return res;
  }
  static fromString(text, littleEndian = false) {
    const res = new ArrayBuffer(text.length * 2);
    const dataView2 = new DataView(res);
    for (let i2 = 0; i2 < text.length; i2++) {
      dataView2.setUint16(i2 * 2, text.charCodeAt(i2), littleEndian);
    }
    return res;
  }
};
var Convert = class _Convert {
  static isHex(data) {
    return typeof data === STRING_TYPE && HEX_REGEX.test(data);
  }
  static isBase64(data) {
    return typeof data === STRING_TYPE && BASE64_REGEX.test(data);
  }
  static isBase64Url(data) {
    return typeof data === STRING_TYPE && BASE64URL_REGEX.test(data);
  }
  static ToString(buffer, enc = "utf8") {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    switch (enc.toLowerCase()) {
      case "utf8":
        return this.ToUtf8String(buf);
      case "binary":
        return this.ToBinary(buf);
      case "hex":
        return this.ToHex(buf);
      case "base64":
        return this.ToBase64(buf);
      case "base64url":
        return this.ToBase64Url(buf);
      case "utf16le":
        return Utf16Converter.toString(buf, true);
      case "utf16":
      case "utf16be":
        return Utf16Converter.toString(buf);
      default:
        throw new Error(`Unknown type of encoding '${enc}'`);
    }
  }
  static FromString(str, enc = "utf8") {
    if (!str) {
      return new ArrayBuffer(0);
    }
    switch (enc.toLowerCase()) {
      case "utf8":
        return this.FromUtf8String(str);
      case "binary":
        return this.FromBinary(str);
      case "hex":
        return this.FromHex(str);
      case "base64":
        return this.FromBase64(str);
      case "base64url":
        return this.FromBase64Url(str);
      case "utf16le":
        return Utf16Converter.fromString(str, true);
      case "utf16":
      case "utf16be":
        return Utf16Converter.fromString(str);
      default:
        throw new Error(`Unknown type of encoding '${enc}'`);
    }
  }
  static ToBase64(buffer) {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    if (typeof btoa !== "undefined") {
      const binary = this.ToString(buf, "binary");
      return btoa(binary);
    } else {
      return Buffer.from(buf).toString("base64");
    }
  }
  static FromBase64(base642) {
    const formatted = this.formatString(base642);
    if (!formatted) {
      return new ArrayBuffer(0);
    }
    if (!_Convert.isBase64(formatted)) {
      throw new TypeError("Argument 'base64Text' is not Base64 encoded");
    }
    if (typeof atob !== "undefined") {
      return this.FromBinary(atob(formatted));
    } else {
      return new Uint8Array(Buffer.from(formatted, "base64")).buffer;
    }
  }
  static FromBase64Url(base64url) {
    const formatted = this.formatString(base64url);
    if (!formatted) {
      return new ArrayBuffer(0);
    }
    if (!_Convert.isBase64Url(formatted)) {
      throw new TypeError("Argument 'base64url' is not Base64Url encoded");
    }
    return this.FromBase64(this.Base64Padding(formatted.replace(/\-/g, "+").replace(/\_/g, "/")));
  }
  static ToBase64Url(data) {
    return this.ToBase64(data).replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
  }
  static FromUtf8String(text, encoding = _Convert.DEFAULT_UTF8_ENCODING) {
    switch (encoding) {
      case "ascii":
        return this.FromBinary(text);
      case "utf8":
        return Utf8Converter.fromString(text);
      case "utf16":
      case "utf16be":
        return Utf16Converter.fromString(text);
      case "utf16le":
      case "usc2":
        return Utf16Converter.fromString(text, true);
      default:
        throw new Error(`Unknown type of encoding '${encoding}'`);
    }
  }
  static ToUtf8String(buffer, encoding = _Convert.DEFAULT_UTF8_ENCODING) {
    switch (encoding) {
      case "ascii":
        return this.ToBinary(buffer);
      case "utf8":
        return Utf8Converter.toString(buffer);
      case "utf16":
      case "utf16be":
        return Utf16Converter.toString(buffer);
      case "utf16le":
      case "usc2":
        return Utf16Converter.toString(buffer, true);
      default:
        throw new Error(`Unknown type of encoding '${encoding}'`);
    }
  }
  static FromBinary(text) {
    const stringLength = text.length;
    const resultView = new Uint8Array(stringLength);
    for (let i2 = 0; i2 < stringLength; i2++) {
      resultView[i2] = text.charCodeAt(i2);
    }
    return resultView.buffer;
  }
  static ToBinary(buffer) {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    let res = "";
    for (let i2 = 0; i2 < buf.length; i2++) {
      res += String.fromCharCode(buf[i2]);
    }
    return res;
  }
  static ToHex(buffer) {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    let result = "";
    const len = buf.length;
    for (let i2 = 0; i2 < len; i2++) {
      const byte = buf[i2];
      if (byte < 16) {
        result += "0";
      }
      result += byte.toString(16);
    }
    return result;
  }
  static FromHex(hexString) {
    let formatted = this.formatString(hexString);
    if (!formatted) {
      return new ArrayBuffer(0);
    }
    if (!_Convert.isHex(formatted)) {
      throw new TypeError("Argument 'hexString' is not HEX encoded");
    }
    if (formatted.length % 2) {
      formatted = `0${formatted}`;
    }
    const res = new Uint8Array(formatted.length / 2);
    for (let i2 = 0; i2 < formatted.length; i2 = i2 + 2) {
      const c = formatted.slice(i2, i2 + 2);
      res[i2 / 2] = parseInt(c, 16);
    }
    return res.buffer;
  }
  static ToUtf16String(buffer, littleEndian = false) {
    return Utf16Converter.toString(buffer, littleEndian);
  }
  static FromUtf16String(text, littleEndian = false) {
    return Utf16Converter.fromString(text, littleEndian);
  }
  static Base64Padding(base642) {
    const padCount = 4 - base642.length % 4;
    if (padCount < 4) {
      for (let i2 = 0; i2 < padCount; i2++) {
        base642 += "=";
      }
    }
    return base642;
  }
  static formatString(data) {
    return (data === null || data === void 0 ? void 0 : data.replace(/[\n\r\t ]/g, "")) || "";
  }
};
Convert.DEFAULT_UTF8_ENCODING = "utf8";

// deno:https://unpkg.com/pvutils@1.1.3/build/utils.es.js?module
function getParametersValue(parameters, name, defaultValue) {
  var _a4;
  if (parameters instanceof Object === false) {
    return defaultValue;
  }
  return (_a4 = parameters[name]) !== null && _a4 !== void 0 ? _a4 : defaultValue;
}
function bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = inputBuffer.byteLength - inputOffset, insertSpace = false) {
  let result = "";
  for (const item of new Uint8Array(inputBuffer, inputOffset, inputLength)) {
    const str = item.toString(16).toUpperCase();
    if (str.length === 1) {
      result += "0";
    }
    result += str;
    if (insertSpace) {
      result += " ";
    }
  }
  return result.trim();
}
function utilFromBase(inputBuffer, inputBase) {
  let result = 0;
  if (inputBuffer.length === 1) {
    return inputBuffer[0];
  }
  for (let i2 = inputBuffer.length - 1; i2 >= 0; i2--) {
    result += inputBuffer[inputBuffer.length - 1 - i2] * Math.pow(2, inputBase * i2);
  }
  return result;
}
function utilToBase(value, base2, reserved = -1) {
  const internalReserved = reserved;
  let internalValue = value;
  let result = 0;
  let biggest = Math.pow(2, base2);
  for (let i2 = 1; i2 < 8; i2++) {
    if (value < biggest) {
      let retBuf;
      if (internalReserved < 0) {
        retBuf = new ArrayBuffer(i2);
        result = i2;
      } else {
        if (internalReserved < i2) {
          return new ArrayBuffer(0);
        }
        retBuf = new ArrayBuffer(internalReserved);
        result = internalReserved;
      }
      const retView = new Uint8Array(retBuf);
      for (let j = i2 - 1; j >= 0; j--) {
        const basis = Math.pow(2, j * base2);
        retView[result - j - 1] = Math.floor(internalValue / basis);
        internalValue -= retView[result - j - 1] * basis;
      }
      return retBuf;
    }
    biggest *= Math.pow(2, base2);
  }
  return new ArrayBuffer(0);
}
function utilConcatBuf(...buffers) {
  let outputLength = 0;
  let prevLength = 0;
  for (const buffer of buffers) {
    outputLength += buffer.byteLength;
  }
  const retBuf = new ArrayBuffer(outputLength);
  const retView = new Uint8Array(retBuf);
  for (const buffer of buffers) {
    retView.set(new Uint8Array(buffer), prevLength);
    prevLength += buffer.byteLength;
  }
  return retBuf;
}
function utilConcatView(...views) {
  let outputLength = 0;
  let prevLength = 0;
  for (const view of views) {
    outputLength += view.length;
  }
  const retBuf = new ArrayBuffer(outputLength);
  const retView = new Uint8Array(retBuf);
  for (const view of views) {
    retView.set(view, prevLength);
    prevLength += view.length;
  }
  return retView;
}
function utilDecodeTC() {
  const buf = new Uint8Array(this.valueHex);
  if (this.valueHex.byteLength >= 2) {
    const condition1 = buf[0] === 255 && buf[1] & 128;
    const condition2 = buf[0] === 0 && (buf[1] & 128) === 0;
    if (condition1 || condition2) {
      this.warnings.push("Needlessly long format");
    }
  }
  const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
  const bigIntView = new Uint8Array(bigIntBuffer);
  for (let i2 = 0; i2 < this.valueHex.byteLength; i2++) {
    bigIntView[i2] = 0;
  }
  bigIntView[0] = buf[0] & 128;
  const bigInt = utilFromBase(bigIntView, 8);
  const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
  const smallIntView = new Uint8Array(smallIntBuffer);
  for (let j = 0; j < this.valueHex.byteLength; j++) {
    smallIntView[j] = buf[j];
  }
  smallIntView[0] &= 127;
  const smallInt = utilFromBase(smallIntView, 8);
  return smallInt - bigInt;
}
function utilEncodeTC(value) {
  const modValue = value < 0 ? value * -1 : value;
  let bigInt = 128;
  for (let i2 = 1; i2 < 8; i2++) {
    if (modValue <= bigInt) {
      if (value < 0) {
        const smallInt = bigInt - modValue;
        const retBuf2 = utilToBase(smallInt, 8, i2);
        const retView2 = new Uint8Array(retBuf2);
        retView2[0] |= 128;
        return retBuf2;
      }
      let retBuf = utilToBase(modValue, 8, i2);
      let retView = new Uint8Array(retBuf);
      if (retView[0] & 128) {
        const tempBuf = retBuf.slice(0);
        const tempView = new Uint8Array(tempBuf);
        retBuf = new ArrayBuffer(retBuf.byteLength + 1);
        retView = new Uint8Array(retBuf);
        for (let k = 0; k < tempBuf.byteLength; k++) {
          retView[k + 1] = tempView[k];
        }
        retView[0] = 0;
      }
      return retBuf;
    }
    bigInt *= Math.pow(2, 8);
  }
  return new ArrayBuffer(0);
}
function isEqualBuffer(inputBuffer1, inputBuffer2) {
  if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {
    return false;
  }
  const view1 = new Uint8Array(inputBuffer1);
  const view2 = new Uint8Array(inputBuffer2);
  for (let i2 = 0; i2 < view1.length; i2++) {
    if (view1[i2] !== view2[i2]) {
      return false;
    }
  }
  return true;
}
function padNumber(inputNumber, fullLength) {
  const str = inputNumber.toString(10);
  if (fullLength < str.length) {
    return "";
  }
  const dif = fullLength - str.length;
  const padding = new Array(dif);
  for (let i2 = 0; i2 < dif; i2++) {
    padding[i2] = "0";
  }
  const paddingString = padding.join("");
  return paddingString.concat(str);
}
var base64Template = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var base64UrlTemplate = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=";
function toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {
  let i2 = 0;
  let flag1 = 0;
  let flag2 = 0;
  let output = "";
  const template = useUrlTemplate ? base64UrlTemplate : base64Template;
  if (skipLeadingZeros) {
    let nonZeroPosition = 0;
    for (let i3 = 0; i3 < input.length; i3++) {
      if (input.charCodeAt(i3) !== 0) {
        nonZeroPosition = i3;
        break;
      }
    }
    input = input.slice(nonZeroPosition);
  }
  while (i2 < input.length) {
    const chr1 = input.charCodeAt(i2++);
    if (i2 >= input.length) {
      flag1 = 1;
    }
    const chr2 = input.charCodeAt(i2++);
    if (i2 >= input.length) {
      flag2 = 1;
    }
    const chr3 = input.charCodeAt(i2++);
    const enc1 = chr1 >> 2;
    const enc2 = (chr1 & 3) << 4 | chr2 >> 4;
    let enc3 = (chr2 & 15) << 2 | chr3 >> 6;
    let enc4 = chr3 & 63;
    if (flag1 === 1) {
      enc3 = enc4 = 64;
    } else {
      if (flag2 === 1) {
        enc4 = 64;
      }
    }
    if (skipPadding) {
      if (enc3 === 64) {
        output += `${template.charAt(enc1)}${template.charAt(enc2)}`;
      } else {
        if (enc4 === 64) {
          output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;
        } else {
          output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;
        }
      }
    } else {
      output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;
    }
  }
  return output;
}
function fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {
  const template = useUrlTemplate ? base64UrlTemplate : base64Template;
  function indexOf(toSearch) {
    for (let i3 = 0; i3 < 64; i3++) {
      if (template.charAt(i3) === toSearch) return i3;
    }
    return 64;
  }
  function test(incoming) {
    return incoming === 64 ? 0 : incoming;
  }
  let i2 = 0;
  let output = "";
  while (i2 < input.length) {
    const enc1 = indexOf(input.charAt(i2++));
    const enc2 = i2 >= input.length ? 0 : indexOf(input.charAt(i2++));
    const enc3 = i2 >= input.length ? 0 : indexOf(input.charAt(i2++));
    const enc4 = i2 >= input.length ? 0 : indexOf(input.charAt(i2++));
    const chr1 = test(enc1) << 2 | test(enc2) >> 4;
    const chr2 = (test(enc2) & 15) << 4 | test(enc3) >> 2;
    const chr3 = (test(enc3) & 3) << 6 | test(enc4);
    output += String.fromCharCode(chr1);
    if (enc3 !== 64) {
      output += String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output += String.fromCharCode(chr3);
    }
  }
  if (cutTailZeros) {
    const outputLength = output.length;
    let nonZeroStart = -1;
    for (let i3 = outputLength - 1; i3 >= 0; i3--) {
      if (output.charCodeAt(i3) !== 0) {
        nonZeroStart = i3;
        break;
      }
    }
    if (nonZeroStart !== -1) {
      output = output.slice(0, nonZeroStart + 1);
    } else {
      output = "";
    }
  }
  return output;
}
function arrayBufferToString(buffer) {
  let resultString = "";
  const view = new Uint8Array(buffer);
  for (const element of view) {
    resultString += String.fromCharCode(element);
  }
  return resultString;
}
function stringToArrayBuffer(str) {
  const stringLength = str.length;
  const resultBuffer = new ArrayBuffer(stringLength);
  const resultView = new Uint8Array(resultBuffer);
  for (let i2 = 0; i2 < stringLength; i2++) {
    resultView[i2] = str.charCodeAt(i2);
  }
  return resultBuffer;
}
var log2 = Math.log(2);
function nearestPowerOf2(length) {
  const base2 = Math.log(length) / log2;
  const floor2 = Math.floor(base2);
  const round = Math.round(base2);
  return floor2 === round ? floor2 : round;
}
function clearProps(object, propsArray) {
  for (const prop of propsArray) {
    delete object[prop];
  }
}

// deno:https://unpkg.com/asn1js@3.0.6/build/index.es.js?module
function assertBigInt() {
  if (typeof BigInt === "undefined") {
    throw new Error("BigInt is not defined. Your environment doesn't implement BigInt.");
  }
}
function concat2(buffers) {
  let outputLength = 0;
  let prevLength = 0;
  for (let i2 = 0; i2 < buffers.length; i2++) {
    const buffer = buffers[i2];
    outputLength += buffer.byteLength;
  }
  const retView = new Uint8Array(outputLength);
  for (let i2 = 0; i2 < buffers.length; i2++) {
    const buffer = buffers[i2];
    retView.set(new Uint8Array(buffer), prevLength);
    prevLength += buffer.byteLength;
  }
  return retView.buffer;
}
function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {
  if (!(inputBuffer instanceof Uint8Array)) {
    baseBlock.error = "Wrong parameter: inputBuffer must be 'Uint8Array'";
    return false;
  }
  if (!inputBuffer.byteLength) {
    baseBlock.error = "Wrong parameter: inputBuffer has zero length";
    return false;
  }
  if (inputOffset < 0) {
    baseBlock.error = "Wrong parameter: inputOffset less than zero";
    return false;
  }
  if (inputLength < 0) {
    baseBlock.error = "Wrong parameter: inputLength less than zero";
    return false;
  }
  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {
    baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
    return false;
  }
  return true;
}
var ViewWriter = class {
  constructor() {
    this.items = [];
  }
  write(buf) {
    this.items.push(buf);
  }
  final() {
    return concat2(this.items);
  }
};
var powers2 = [
  new Uint8Array([
    1
  ])
];
var digitsString = "0123456789";
var NAME = "name";
var VALUE_HEX_VIEW = "valueHexView";
var IS_HEX_ONLY = "isHexOnly";
var ID_BLOCK = "idBlock";
var TAG_CLASS = "tagClass";
var TAG_NUMBER = "tagNumber";
var IS_CONSTRUCTED = "isConstructed";
var FROM_BER = "fromBER";
var TO_BER = "toBER";
var LOCAL = "local";
var EMPTY_STRING = "";
var EMPTY_BUFFER = new ArrayBuffer(0);
var EMPTY_VIEW = new Uint8Array(0);
var END_OF_CONTENT_NAME = "EndOfContent";
var OCTET_STRING_NAME = "OCTET STRING";
var BIT_STRING_NAME = "BIT STRING";
function HexBlock(BaseClass) {
  var _a4;
  return _a4 = class Some extends BaseClass {
    get valueHex() {
      return this.valueHexView.slice().buffer;
    }
    set valueHex(value) {
      this.valueHexView = new Uint8Array(value);
    }
    constructor(...args) {
      var _b;
      super(...args);
      const params = args[0] || {};
      this.isHexOnly = (_b = params.isHexOnly) !== null && _b !== void 0 ? _b : false;
      this.valueHexView = params.valueHex ? BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
      const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
      if (!checkBufferParams(this, view, inputOffset, inputLength)) {
        return -1;
      }
      const endLength = inputOffset + inputLength;
      this.valueHexView = view.subarray(inputOffset, endLength);
      if (!this.valueHexView.length) {
        this.warnings.push("Zero buffer length");
        return inputOffset;
      }
      this.blockLength = inputLength;
      return endLength;
    }
    toBER(sizeOnly = false) {
      if (!this.isHexOnly) {
        this.error = "Flag 'isHexOnly' is not set, abort";
        return EMPTY_BUFFER;
      }
      if (sizeOnly) {
        return new ArrayBuffer(this.valueHexView.byteLength);
      }
      return this.valueHexView.byteLength === this.valueHexView.buffer.byteLength ? this.valueHexView.buffer : this.valueHexView.slice().buffer;
    }
    toJSON() {
      return {
        ...super.toJSON(),
        isHexOnly: this.isHexOnly,
        valueHex: Convert.ToHex(this.valueHexView)
      };
    }
  }, _a4.NAME = "hexBlock", _a4;
}
var LocalBaseBlock = class {
  static blockName() {
    return this.NAME;
  }
  get valueBeforeDecode() {
    return this.valueBeforeDecodeView.slice().buffer;
  }
  set valueBeforeDecode(value) {
    this.valueBeforeDecodeView = new Uint8Array(value);
  }
  constructor({ blockLength = 0, error: error2 = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW } = {}) {
    this.blockLength = blockLength;
    this.error = error2;
    this.warnings = warnings;
    this.valueBeforeDecodeView = BufferSourceConverter.toUint8Array(valueBeforeDecode);
  }
  toJSON() {
    return {
      blockName: this.constructor.NAME,
      blockLength: this.blockLength,
      error: this.error,
      warnings: this.warnings,
      valueBeforeDecode: Convert.ToHex(this.valueBeforeDecodeView)
    };
  }
};
LocalBaseBlock.NAME = "baseBlock";
var ValueBlock = class extends LocalBaseBlock {
  fromBER(_inputBuffer, _inputOffset, _inputLength) {
    throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
  }
  toBER(_sizeOnly, _writer) {
    throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
  }
};
ValueBlock.NAME = "valueBlock";
var LocalIdentificationBlock = class extends HexBlock(LocalBaseBlock) {
  constructor({ idBlock = {} } = {}) {
    var _a4, _b, _c, _d;
    super();
    if (idBlock) {
      this.isHexOnly = (_a4 = idBlock.isHexOnly) !== null && _a4 !== void 0 ? _a4 : false;
      this.valueHexView = idBlock.valueHex ? BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;
      this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;
      this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;
      this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;
    } else {
      this.tagClass = -1;
      this.tagNumber = -1;
      this.isConstructed = false;
    }
  }
  toBER(sizeOnly = false) {
    let firstOctet = 0;
    switch (this.tagClass) {
      case 1:
        firstOctet |= 0;
        break;
      case 2:
        firstOctet |= 64;
        break;
      case 3:
        firstOctet |= 128;
        break;
      case 4:
        firstOctet |= 192;
        break;
      default:
        this.error = "Unknown tag class";
        return EMPTY_BUFFER;
    }
    if (this.isConstructed) firstOctet |= 32;
    if (this.tagNumber < 31 && !this.isHexOnly) {
      const retView2 = new Uint8Array(1);
      if (!sizeOnly) {
        let number = this.tagNumber;
        number &= 31;
        firstOctet |= number;
        retView2[0] = firstOctet;
      }
      return retView2.buffer;
    }
    if (!this.isHexOnly) {
      const encodedBuf = utilToBase(this.tagNumber, 7);
      const encodedView = new Uint8Array(encodedBuf);
      const size = encodedBuf.byteLength;
      const retView2 = new Uint8Array(size + 1);
      retView2[0] = firstOctet | 31;
      if (!sizeOnly) {
        for (let i2 = 0; i2 < size - 1; i2++) retView2[i2 + 1] = encodedView[i2] | 128;
        retView2[size] = encodedView[size - 1];
      }
      return retView2.buffer;
    }
    const retView = new Uint8Array(this.valueHexView.byteLength + 1);
    retView[0] = firstOctet | 31;
    if (!sizeOnly) {
      const curView = this.valueHexView;
      for (let i2 = 0; i2 < curView.length - 1; i2++) retView[i2 + 1] = curView[i2] | 128;
      retView[this.valueHexView.byteLength] = curView[curView.length - 1];
    }
    return retView.buffer;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    if (intBuffer.length === 0) {
      this.error = "Zero buffer length";
      return -1;
    }
    const tagClassMask = intBuffer[0] & 192;
    switch (tagClassMask) {
      case 0:
        this.tagClass = 1;
        break;
      case 64:
        this.tagClass = 2;
        break;
      case 128:
        this.tagClass = 3;
        break;
      case 192:
        this.tagClass = 4;
        break;
      default:
        this.error = "Unknown tag class";
        return -1;
    }
    this.isConstructed = (intBuffer[0] & 32) === 32;
    this.isHexOnly = false;
    const tagNumberMask = intBuffer[0] & 31;
    if (tagNumberMask !== 31) {
      this.tagNumber = tagNumberMask;
      this.blockLength = 1;
    } else {
      let count = 1;
      let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);
      let tagNumberBufferMaxLength = 255;
      while (intBuffer[count] & 128) {
        intTagNumberBuffer[count - 1] = intBuffer[count] & 127;
        count++;
        if (count >= intBuffer.length) {
          this.error = "End of input reached before message was fully decoded";
          return -1;
        }
        if (count === tagNumberBufferMaxLength) {
          tagNumberBufferMaxLength += 255;
          const tempBufferView2 = new Uint8Array(tagNumberBufferMaxLength);
          for (let i2 = 0; i2 < intTagNumberBuffer.length; i2++) tempBufferView2[i2] = intTagNumberBuffer[i2];
          intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);
        }
      }
      this.blockLength = count + 1;
      intTagNumberBuffer[count - 1] = intBuffer[count] & 127;
      const tempBufferView = new Uint8Array(count);
      for (let i2 = 0; i2 < count; i2++) tempBufferView[i2] = intTagNumberBuffer[i2];
      intTagNumberBuffer = this.valueHexView = new Uint8Array(count);
      intTagNumberBuffer.set(tempBufferView);
      if (this.blockLength <= 9) this.tagNumber = utilFromBase(intTagNumberBuffer, 7);
      else {
        this.isHexOnly = true;
        this.warnings.push("Tag too long, represented as hex-coded");
      }
    }
    if (this.tagClass === 1 && this.isConstructed) {
      switch (this.tagNumber) {
        case 1:
        case 2:
        case 5:
        case 6:
        case 9:
        case 13:
        case 14:
        case 23:
        case 24:
        case 31:
        case 32:
        case 33:
        case 34:
          this.error = "Constructed encoding used for primitive type";
          return -1;
      }
    }
    return inputOffset + this.blockLength;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      tagClass: this.tagClass,
      tagNumber: this.tagNumber,
      isConstructed: this.isConstructed
    };
  }
};
LocalIdentificationBlock.NAME = "identificationBlock";
var LocalLengthBlock = class extends LocalBaseBlock {
  constructor({ lenBlock = {} } = {}) {
    var _a4, _b, _c;
    super();
    this.isIndefiniteForm = (_a4 = lenBlock.isIndefiniteForm) !== null && _a4 !== void 0 ? _a4 : false;
    this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;
    this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const view = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, view, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);
    if (intBuffer.length === 0) {
      this.error = "Zero buffer length";
      return -1;
    }
    if (intBuffer[0] === 255) {
      this.error = "Length block 0xFF is reserved by standard";
      return -1;
    }
    this.isIndefiniteForm = intBuffer[0] === 128;
    if (this.isIndefiniteForm) {
      this.blockLength = 1;
      return inputOffset + this.blockLength;
    }
    this.longFormUsed = !!(intBuffer[0] & 128);
    if (this.longFormUsed === false) {
      this.length = intBuffer[0];
      this.blockLength = 1;
      return inputOffset + this.blockLength;
    }
    const count = intBuffer[0] & 127;
    if (count > 8) {
      this.error = "Too big integer";
      return -1;
    }
    if (count + 1 > intBuffer.length) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    const lenOffset = inputOffset + 1;
    const lengthBufferView = view.subarray(lenOffset, lenOffset + count);
    if (lengthBufferView[count - 1] === 0) this.warnings.push("Needlessly long encoded length");
    this.length = utilFromBase(lengthBufferView, 8);
    if (this.longFormUsed && this.length <= 127) this.warnings.push("Unnecessary usage of long length form");
    this.blockLength = count + 1;
    return inputOffset + this.blockLength;
  }
  toBER(sizeOnly = false) {
    let retBuf;
    let retView;
    if (this.length > 127) this.longFormUsed = true;
    if (this.isIndefiniteForm) {
      retBuf = new ArrayBuffer(1);
      if (sizeOnly === false) {
        retView = new Uint8Array(retBuf);
        retView[0] = 128;
      }
      return retBuf;
    }
    if (this.longFormUsed) {
      const encodedBuf = utilToBase(this.length, 8);
      if (encodedBuf.byteLength > 127) {
        this.error = "Too big length";
        return EMPTY_BUFFER;
      }
      retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);
      if (sizeOnly) return retBuf;
      const encodedView = new Uint8Array(encodedBuf);
      retView = new Uint8Array(retBuf);
      retView[0] = encodedBuf.byteLength | 128;
      for (let i2 = 0; i2 < encodedBuf.byteLength; i2++) retView[i2 + 1] = encodedView[i2];
      return retBuf;
    }
    retBuf = new ArrayBuffer(1);
    if (sizeOnly === false) {
      retView = new Uint8Array(retBuf);
      retView[0] = this.length;
    }
    return retBuf;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      isIndefiniteForm: this.isIndefiniteForm,
      longFormUsed: this.longFormUsed,
      length: this.length
    };
  }
};
LocalLengthBlock.NAME = "lengthBlock";
var typeStore = {};
var BaseBlock = class extends LocalBaseBlock {
  constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {
    super(parameters);
    this.name = name;
    this.optional = optional;
    if (primitiveSchema) {
      this.primitiveSchema = primitiveSchema;
    }
    this.idBlock = new LocalIdentificationBlock(parameters);
    this.lenBlock = new LocalLengthBlock(parameters);
    this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  toBER(sizeOnly, writer) {
    const _writer = writer || new ViewWriter();
    if (!writer) {
      prepareIndefiniteForm(this);
    }
    const idBlockBuf = this.idBlock.toBER(sizeOnly);
    _writer.write(idBlockBuf);
    if (this.lenBlock.isIndefiniteForm) {
      _writer.write(new Uint8Array([
        128
      ]).buffer);
      this.valueBlock.toBER(sizeOnly, _writer);
      _writer.write(new ArrayBuffer(2));
    } else {
      const valueBlockBuf = this.valueBlock.toBER(sizeOnly);
      this.lenBlock.length = valueBlockBuf.byteLength;
      const lenBlockBuf = this.lenBlock.toBER(sizeOnly);
      _writer.write(lenBlockBuf);
      _writer.write(valueBlockBuf);
    }
    if (!writer) {
      return _writer.final();
    }
    return EMPTY_BUFFER;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      idBlock: this.idBlock.toJSON(),
      lenBlock: this.lenBlock.toJSON(),
      valueBlock: this.valueBlock.toJSON(),
      name: this.name,
      optional: this.optional
    };
    if (this.primitiveSchema) object.primitiveSchema = this.primitiveSchema.toJSON();
    return object;
  }
  toString(encoding = "ascii") {
    if (encoding === "ascii") {
      return this.onAsciiEncoding();
    }
    return Convert.ToHex(this.toBER());
  }
  onAsciiEncoding() {
    const name = this.constructor.NAME;
    const value = Convert.ToHex(this.valueBlock.valueBeforeDecodeView);
    return `${name} : ${value}`;
  }
  isEqual(other) {
    if (this === other) {
      return true;
    }
    if (!(other instanceof this.constructor)) {
      return false;
    }
    const thisRaw = this.toBER();
    const otherRaw = other.toBER();
    return isEqualBuffer(thisRaw, otherRaw);
  }
};
BaseBlock.NAME = "BaseBlock";
function prepareIndefiniteForm(baseBlock) {
  var _a4;
  if (baseBlock instanceof typeStore.Constructed) {
    for (const value of baseBlock.valueBlock.value) {
      if (prepareIndefiniteForm(value)) {
        baseBlock.lenBlock.isIndefiniteForm = true;
      }
    }
  }
  return !!((_a4 = baseBlock.lenBlock) === null || _a4 === void 0 ? void 0 : _a4.isIndefiniteForm);
}
var BaseStringBlock = class extends BaseBlock {
  getValue() {
    return this.valueBlock.value;
  }
  setValue(value) {
    this.valueBlock.value = value;
  }
  constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {
    super(parameters, stringValueBlockType);
    if (value) {
      this.fromString(value);
    }
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    this.fromBuffer(this.valueBlock.valueHexView);
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : '${this.valueBlock.value}'`;
  }
};
BaseStringBlock.NAME = "BaseStringBlock";
var LocalPrimitiveValueBlock = class extends HexBlock(ValueBlock) {
  constructor({ isHexOnly = true, ...parameters } = {}) {
    super(parameters);
    this.isHexOnly = isHexOnly;
  }
};
LocalPrimitiveValueBlock.NAME = "PrimitiveValueBlock";
var _a$w;
var Primitive = class extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalPrimitiveValueBlock);
    this.idBlock.isConstructed = false;
  }
};
_a$w = Primitive;
(() => {
  typeStore.Primitive = _a$w;
})();
Primitive.NAME = "PRIMITIVE";
function localChangeType(inputObject, newType) {
  if (inputObject instanceof newType) {
    return inputObject;
  }
  const newObject = new newType();
  newObject.idBlock = inputObject.idBlock;
  newObject.lenBlock = inputObject.lenBlock;
  newObject.warnings = inputObject.warnings;
  newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;
  return newObject;
}
function localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {
  const incomingOffset = inputOffset;
  let returnObject = new BaseBlock({}, ValueBlock);
  const baseBlock = new LocalBaseBlock();
  if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {
    returnObject.error = baseBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);
  if (!intBuffer.length) {
    returnObject.error = "Zero buffer length";
    return {
      offset: -1,
      result: returnObject
    };
  }
  let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);
  if (returnObject.idBlock.warnings.length) {
    returnObject.warnings.concat(returnObject.idBlock.warnings);
  }
  if (resultOffset === -1) {
    returnObject.error = returnObject.idBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  inputOffset = resultOffset;
  inputLength -= returnObject.idBlock.blockLength;
  resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);
  if (returnObject.lenBlock.warnings.length) {
    returnObject.warnings.concat(returnObject.lenBlock.warnings);
  }
  if (resultOffset === -1) {
    returnObject.error = returnObject.lenBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  inputOffset = resultOffset;
  inputLength -= returnObject.lenBlock.blockLength;
  if (!returnObject.idBlock.isConstructed && returnObject.lenBlock.isIndefiniteForm) {
    returnObject.error = "Indefinite length form used for primitive encoding form";
    return {
      offset: -1,
      result: returnObject
    };
  }
  let newASN1Type = BaseBlock;
  switch (returnObject.idBlock.tagClass) {
    case 1:
      if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {
        returnObject.error = "UNIVERSAL 37 and upper tags are reserved by ASN.1 standard";
        return {
          offset: -1,
          result: returnObject
        };
      }
      switch (returnObject.idBlock.tagNumber) {
        case 0:
          if (returnObject.idBlock.isConstructed && returnObject.lenBlock.length > 0) {
            returnObject.error = "Type [UNIVERSAL 0] is reserved";
            return {
              offset: -1,
              result: returnObject
            };
          }
          newASN1Type = typeStore.EndOfContent;
          break;
        case 1:
          newASN1Type = typeStore.Boolean;
          break;
        case 2:
          newASN1Type = typeStore.Integer;
          break;
        case 3:
          newASN1Type = typeStore.BitString;
          break;
        case 4:
          newASN1Type = typeStore.OctetString;
          break;
        case 5:
          newASN1Type = typeStore.Null;
          break;
        case 6:
          newASN1Type = typeStore.ObjectIdentifier;
          break;
        case 10:
          newASN1Type = typeStore.Enumerated;
          break;
        case 12:
          newASN1Type = typeStore.Utf8String;
          break;
        case 13:
          newASN1Type = typeStore.RelativeObjectIdentifier;
          break;
        case 14:
          newASN1Type = typeStore.TIME;
          break;
        case 15:
          returnObject.error = "[UNIVERSAL 15] is reserved by ASN.1 standard";
          return {
            offset: -1,
            result: returnObject
          };
        case 16:
          newASN1Type = typeStore.Sequence;
          break;
        case 17:
          newASN1Type = typeStore.Set;
          break;
        case 18:
          newASN1Type = typeStore.NumericString;
          break;
        case 19:
          newASN1Type = typeStore.PrintableString;
          break;
        case 20:
          newASN1Type = typeStore.TeletexString;
          break;
        case 21:
          newASN1Type = typeStore.VideotexString;
          break;
        case 22:
          newASN1Type = typeStore.IA5String;
          break;
        case 23:
          newASN1Type = typeStore.UTCTime;
          break;
        case 24:
          newASN1Type = typeStore.GeneralizedTime;
          break;
        case 25:
          newASN1Type = typeStore.GraphicString;
          break;
        case 26:
          newASN1Type = typeStore.VisibleString;
          break;
        case 27:
          newASN1Type = typeStore.GeneralString;
          break;
        case 28:
          newASN1Type = typeStore.UniversalString;
          break;
        case 29:
          newASN1Type = typeStore.CharacterString;
          break;
        case 30:
          newASN1Type = typeStore.BmpString;
          break;
        case 31:
          newASN1Type = typeStore.DATE;
          break;
        case 32:
          newASN1Type = typeStore.TimeOfDay;
          break;
        case 33:
          newASN1Type = typeStore.DateTime;
          break;
        case 34:
          newASN1Type = typeStore.Duration;
          break;
        default: {
          const newObject = returnObject.idBlock.isConstructed ? new typeStore.Constructed() : new typeStore.Primitive();
          newObject.idBlock = returnObject.idBlock;
          newObject.lenBlock = returnObject.lenBlock;
          newObject.warnings = returnObject.warnings;
          returnObject = newObject;
        }
      }
      break;
    case 2:
    case 3:
    case 4:
    default: {
      newASN1Type = returnObject.idBlock.isConstructed ? typeStore.Constructed : typeStore.Primitive;
    }
  }
  returnObject = localChangeType(returnObject, newASN1Type);
  resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);
  returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);
  return {
    offset: resultOffset,
    result: returnObject
  };
}
function fromBER(inputBuffer) {
  if (!inputBuffer.byteLength) {
    const result = new BaseBlock({}, ValueBlock);
    result.error = "Input buffer has zero length";
    return {
      offset: -1,
      result
    };
  }
  return localFromBER(BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);
}
function checkLen(indefiniteLength, length) {
  if (indefiniteLength) {
    return 1;
  }
  return length;
}
var LocalConstructedValueBlock = class extends ValueBlock {
  constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {
    super(parameters);
    this.value = value;
    this.isIndefiniteForm = isIndefiniteForm;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const view = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, view, inputOffset, inputLength)) {
      return -1;
    }
    this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);
    if (this.valueBeforeDecodeView.length === 0) {
      this.warnings.push("Zero buffer length");
      return inputOffset;
    }
    let currentOffset = inputOffset;
    while (checkLen(this.isIndefiniteForm, inputLength) > 0) {
      const returnObject = localFromBER(view, currentOffset, inputLength);
      if (returnObject.offset === -1) {
        this.error = returnObject.result.error;
        this.warnings.concat(returnObject.result.warnings);
        return -1;
      }
      currentOffset = returnObject.offset;
      this.blockLength += returnObject.result.blockLength;
      inputLength -= returnObject.result.blockLength;
      this.value.push(returnObject.result);
      if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {
        break;
      }
    }
    if (this.isIndefiniteForm) {
      if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {
        this.value.pop();
      } else {
        this.warnings.push("No EndOfContent block encoded");
      }
    }
    return currentOffset;
  }
  toBER(sizeOnly, writer) {
    const _writer = writer || new ViewWriter();
    for (let i2 = 0; i2 < this.value.length; i2++) {
      this.value[i2].toBER(sizeOnly, _writer);
    }
    if (!writer) {
      return _writer.final();
    }
    return EMPTY_BUFFER;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      isIndefiniteForm: this.isIndefiniteForm,
      value: []
    };
    for (const value of this.value) {
      object.value.push(value.toJSON());
    }
    return object;
  }
};
LocalConstructedValueBlock.NAME = "ConstructedValueBlock";
var _a$v;
var Constructed = class extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalConstructedValueBlock);
    this.idBlock.isConstructed = true;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  onAsciiEncoding() {
    const values = [];
    for (const value of this.valueBlock.value) {
      values.push(value.toString("ascii").split("\n").map((o2) => `  ${o2}`).join("\n"));
    }
    const blockName = this.idBlock.tagClass === 3 ? `[${this.idBlock.tagNumber}]` : this.constructor.NAME;
    return values.length ? `${blockName} :
${values.join("\n")}` : `${blockName} :`;
  }
};
_a$v = Constructed;
(() => {
  typeStore.Constructed = _a$v;
})();
Constructed.NAME = "CONSTRUCTED";
var LocalEndOfContentValueBlock = class extends ValueBlock {
  fromBER(inputBuffer, inputOffset, _inputLength) {
    return inputOffset;
  }
  toBER(_sizeOnly) {
    return EMPTY_BUFFER;
  }
};
LocalEndOfContentValueBlock.override = "EndOfContentValueBlock";
var _a$u;
var EndOfContent = class extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalEndOfContentValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 0;
  }
};
_a$u = EndOfContent;
(() => {
  typeStore.EndOfContent = _a$u;
})();
EndOfContent.NAME = END_OF_CONTENT_NAME;
var _a$t;
var Null = class extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, ValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 5;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (this.lenBlock.length > 0) this.warnings.push("Non-zero length of value block for Null type");
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    this.blockLength += inputLength;
    if (inputOffset + inputLength > inputBuffer.byteLength) {
      this.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
      return -1;
    }
    return inputOffset + inputLength;
  }
  toBER(sizeOnly, writer) {
    const retBuf = new ArrayBuffer(2);
    if (!sizeOnly) {
      const retView = new Uint8Array(retBuf);
      retView[0] = 5;
      retView[1] = 0;
    }
    if (writer) {
      writer.write(retBuf);
    }
    return retBuf;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME}`;
  }
};
_a$t = Null;
(() => {
  typeStore.Null = _a$t;
})();
Null.NAME = "NULL";
var LocalBooleanValueBlock = class extends HexBlock(ValueBlock) {
  get value() {
    for (const octet of this.valueHexView) {
      if (octet > 0) {
        return true;
      }
    }
    return false;
  }
  set value(value) {
    this.valueHexView[0] = value ? 255 : 0;
  }
  constructor({ value, ...parameters } = {}) {
    super(parameters);
    if (parameters.valueHex) {
      this.valueHexView = BufferSourceConverter.toUint8Array(parameters.valueHex);
    } else {
      this.valueHexView = new Uint8Array(1);
    }
    if (value) {
      this.value = value;
    }
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);
    if (inputLength > 1) this.warnings.push("Boolean value encoded in more then 1 octet");
    this.isHexOnly = true;
    utilDecodeTC.call(this);
    this.blockLength = inputLength;
    return inputOffset + inputLength;
  }
  toBER() {
    return this.valueHexView.slice();
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.value
    };
  }
};
LocalBooleanValueBlock.NAME = "BooleanValueBlock";
var _a$s;
var Boolean2 = class extends BaseBlock {
  getValue() {
    return this.valueBlock.value;
  }
  setValue(value) {
    this.valueBlock.value = value;
  }
  constructor(parameters = {}) {
    super(parameters, LocalBooleanValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 1;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.getValue}`;
  }
};
_a$s = Boolean2;
(() => {
  typeStore.Boolean = _a$s;
})();
Boolean2.NAME = "BOOLEAN";
var LocalOctetStringValueBlock = class extends HexBlock(LocalConstructedValueBlock) {
  constructor({ isConstructed = false, ...parameters } = {}) {
    super(parameters);
    this.isConstructed = isConstructed;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = 0;
    if (this.isConstructed) {
      this.isHexOnly = false;
      resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
      if (resultOffset === -1) return resultOffset;
      for (let i2 = 0; i2 < this.value.length; i2++) {
        const currentBlockName = this.value[i2].constructor.NAME;
        if (currentBlockName === END_OF_CONTENT_NAME) {
          if (this.isIndefiniteForm) break;
          else {
            this.error = "EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only";
            return -1;
          }
        }
        if (currentBlockName !== OCTET_STRING_NAME) {
          this.error = "OCTET STRING may consists of OCTET STRINGs only";
          return -1;
        }
      }
    } else {
      this.isHexOnly = true;
      resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
      this.blockLength = inputLength;
    }
    return resultOffset;
  }
  toBER(sizeOnly, writer) {
    if (this.isConstructed) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
    return sizeOnly ? new ArrayBuffer(this.valueHexView.byteLength) : this.valueHexView.slice().buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      isConstructed: this.isConstructed
    };
  }
};
LocalOctetStringValueBlock.NAME = "OctetStringValueBlock";
var _a$r;
var OctetString = class extends BaseBlock {
  constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {
    var _b, _c;
    (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
    super({
      idBlock: {
        isConstructed: parameters.isConstructed,
        ...idBlock
      },
      lenBlock: {
        ...lenBlock,
        isIndefiniteForm: !!parameters.isIndefiniteForm
      },
      ...parameters
    }, LocalOctetStringValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 4;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isConstructed = this.idBlock.isConstructed;
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    if (inputLength === 0) {
      if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
      if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
      return inputOffset;
    }
    if (!this.valueBlock.isConstructed) {
      const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
      const buf = view.subarray(inputOffset, inputOffset + inputLength);
      try {
        if (buf.byteLength) {
          const asn = localFromBER(buf, 0, buf.byteLength);
          if (asn.offset !== -1 && asn.offset === inputLength) {
            this.valueBlock.value = [
              asn.result
            ];
          }
        }
      } catch {
      }
    }
    return super.fromBER(inputBuffer, inputOffset, inputLength);
  }
  onAsciiEncoding() {
    if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
      return Constructed.prototype.onAsciiEncoding.call(this);
    }
    const name = this.constructor.NAME;
    const value = Convert.ToHex(this.valueBlock.valueHexView);
    return `${name} : ${value}`;
  }
  getValue() {
    if (!this.idBlock.isConstructed) {
      return this.valueBlock.valueHexView.slice().buffer;
    }
    const array = [];
    for (const content of this.valueBlock.value) {
      if (content instanceof _a$r) {
        array.push(content.valueBlock.valueHexView);
      }
    }
    return BufferSourceConverter.concat(array);
  }
};
_a$r = OctetString;
(() => {
  typeStore.OctetString = _a$r;
})();
OctetString.NAME = OCTET_STRING_NAME;
var LocalBitStringValueBlock = class extends HexBlock(LocalConstructedValueBlock) {
  constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {
    super(parameters);
    this.unusedBits = unusedBits;
    this.isConstructed = isConstructed;
    this.blockLength = this.valueHexView.byteLength;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (!inputLength) {
      return inputOffset;
    }
    let resultOffset = -1;
    if (this.isConstructed) {
      resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
      if (resultOffset === -1) return resultOffset;
      for (const value of this.value) {
        const currentBlockName = value.constructor.NAME;
        if (currentBlockName === END_OF_CONTENT_NAME) {
          if (this.isIndefiniteForm) break;
          else {
            this.error = "EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only";
            return -1;
          }
        }
        if (currentBlockName !== BIT_STRING_NAME) {
          this.error = "BIT STRING may consists of BIT STRINGs only";
          return -1;
        }
        const valueBlock = value.valueBlock;
        if (this.unusedBits > 0 && valueBlock.unusedBits > 0) {
          this.error = 'Using of "unused bits" inside constructive BIT STRING allowed for least one only';
          return -1;
        }
        this.unusedBits = valueBlock.unusedBits;
      }
      return resultOffset;
    }
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.unusedBits = intBuffer[0];
    if (this.unusedBits > 7) {
      this.error = "Unused bits for BitString must be in range 0-7";
      return -1;
    }
    if (!this.unusedBits) {
      const buf = intBuffer.subarray(1);
      try {
        if (buf.byteLength) {
          const asn = localFromBER(buf, 0, buf.byteLength);
          if (asn.offset !== -1 && asn.offset === inputLength - 1) {
            this.value = [
              asn.result
            ];
          }
        }
      } catch {
      }
    }
    this.valueHexView = intBuffer.subarray(1);
    this.blockLength = intBuffer.length;
    return inputOffset + inputLength;
  }
  toBER(sizeOnly, writer) {
    if (this.isConstructed) {
      return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
    }
    if (sizeOnly) {
      return new ArrayBuffer(this.valueHexView.byteLength + 1);
    }
    if (!this.valueHexView.byteLength) {
      return EMPTY_BUFFER;
    }
    const retView = new Uint8Array(this.valueHexView.length + 1);
    retView[0] = this.unusedBits;
    retView.set(this.valueHexView, 1);
    return retView.buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      unusedBits: this.unusedBits,
      isConstructed: this.isConstructed
    };
  }
};
LocalBitStringValueBlock.NAME = "BitStringValueBlock";
var _a$q;
var BitString = class extends BaseBlock {
  constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {
    var _b, _c;
    (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
    super({
      idBlock: {
        isConstructed: parameters.isConstructed,
        ...idBlock
      },
      lenBlock: {
        ...lenBlock,
        isIndefiniteForm: !!parameters.isIndefiniteForm
      },
      ...parameters
    }, LocalBitStringValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 3;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isConstructed = this.idBlock.isConstructed;
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    return super.fromBER(inputBuffer, inputOffset, inputLength);
  }
  onAsciiEncoding() {
    if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
      return Constructed.prototype.onAsciiEncoding.call(this);
    } else {
      const bits = [];
      const valueHex = this.valueBlock.valueHexView;
      for (const byte of valueHex) {
        bits.push(byte.toString(2).padStart(8, "0"));
      }
      const bitsStr = bits.join("");
      const name = this.constructor.NAME;
      const value = bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits);
      return `${name} : ${value}`;
    }
  }
};
_a$q = BitString;
(() => {
  typeStore.BitString = _a$q;
})();
BitString.NAME = BIT_STRING_NAME;
var _a$p;
function viewAdd(first, second) {
  const c = new Uint8Array([
    0
  ]);
  const firstView = new Uint8Array(first);
  const secondView = new Uint8Array(second);
  let firstViewCopy = firstView.slice(0);
  const firstViewCopyLength = firstViewCopy.length - 1;
  const secondViewCopy = secondView.slice(0);
  const secondViewCopyLength = secondViewCopy.length - 1;
  let value = 0;
  const max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;
  let counter = 0;
  for (let i2 = max; i2 >= 0; i2--, counter++) {
    switch (true) {
      case counter < secondViewCopy.length:
        value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];
        break;
      default:
        value = firstViewCopy[firstViewCopyLength - counter] + c[0];
    }
    c[0] = value / 10;
    switch (true) {
      case counter >= firstViewCopy.length:
        firstViewCopy = utilConcatView(new Uint8Array([
          value % 10
        ]), firstViewCopy);
        break;
      default:
        firstViewCopy[firstViewCopyLength - counter] = value % 10;
    }
  }
  if (c[0] > 0) firstViewCopy = utilConcatView(c, firstViewCopy);
  return firstViewCopy;
}
function power2(n2) {
  if (n2 >= powers2.length) {
    for (let p = powers2.length; p <= n2; p++) {
      const c = new Uint8Array([
        0
      ]);
      let digits = powers2[p - 1].slice(0);
      for (let i2 = digits.length - 1; i2 >= 0; i2--) {
        const newValue = new Uint8Array([
          (digits[i2] << 1) + c[0]
        ]);
        c[0] = newValue[0] / 10;
        digits[i2] = newValue[0] % 10;
      }
      if (c[0] > 0) digits = utilConcatView(c, digits);
      powers2.push(digits);
    }
  }
  return powers2[n2];
}
function viewSub(first, second) {
  let b = 0;
  const firstView = new Uint8Array(first);
  const secondView = new Uint8Array(second);
  const firstViewCopy = firstView.slice(0);
  const firstViewCopyLength = firstViewCopy.length - 1;
  const secondViewCopy = secondView.slice(0);
  const secondViewCopyLength = secondViewCopy.length - 1;
  let value;
  let counter = 0;
  for (let i2 = secondViewCopyLength; i2 >= 0; i2--, counter++) {
    value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;
    switch (true) {
      case value < 0:
        b = 1;
        firstViewCopy[firstViewCopyLength - counter] = value + 10;
        break;
      default:
        b = 0;
        firstViewCopy[firstViewCopyLength - counter] = value;
    }
  }
  if (b > 0) {
    for (let i2 = firstViewCopyLength - secondViewCopyLength + 1; i2 >= 0; i2--, counter++) {
      value = firstViewCopy[firstViewCopyLength - counter] - b;
      if (value < 0) {
        b = 1;
        firstViewCopy[firstViewCopyLength - counter] = value + 10;
      } else {
        b = 0;
        firstViewCopy[firstViewCopyLength - counter] = value;
        break;
      }
    }
  }
  return firstViewCopy.slice();
}
var LocalIntegerValueBlock = class extends HexBlock(ValueBlock) {
  setValueHex() {
    if (this.valueHexView.length >= 4) {
      this.warnings.push("Too big Integer for decoding, hex only");
      this.isHexOnly = true;
      this._valueDec = 0;
    } else {
      this.isHexOnly = false;
      if (this.valueHexView.length > 0) {
        this._valueDec = utilDecodeTC.call(this);
      }
    }
  }
  constructor({ value, ...parameters } = {}) {
    super(parameters);
    this._valueDec = 0;
    if (parameters.valueHex) {
      this.setValueHex();
    }
    if (value !== void 0) {
      this.valueDec = value;
    }
  }
  set valueDec(v) {
    this._valueDec = v;
    this.isHexOnly = false;
    this.valueHexView = new Uint8Array(utilEncodeTC(v));
  }
  get valueDec() {
    return this._valueDec;
  }
  fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {
    const offset = this.fromBER(inputBuffer, inputOffset, inputLength);
    if (offset === -1) return offset;
    const view = this.valueHexView;
    if (view[0] === 0 && (view[1] & 128) !== 0) {
      this.valueHexView = view.subarray(1);
    } else {
      if (expectedLength !== 0) {
        if (view.length < expectedLength) {
          if (expectedLength - view.length > 1) expectedLength = view.length + 1;
          this.valueHexView = view.subarray(expectedLength - view.length);
        }
      }
    }
    return offset;
  }
  toDER(sizeOnly = false) {
    const view = this.valueHexView;
    switch (true) {
      case (view[0] & 128) !== 0:
        {
          const updatedView = new Uint8Array(this.valueHexView.length + 1);
          updatedView[0] = 0;
          updatedView.set(view, 1);
          this.valueHexView = updatedView;
        }
        break;
      case (view[0] === 0 && (view[1] & 128) === 0):
        {
          this.valueHexView = this.valueHexView.subarray(1);
        }
        break;
    }
    return this.toBER(sizeOnly);
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
    if (resultOffset === -1) {
      return resultOffset;
    }
    this.setValueHex();
    return resultOffset;
  }
  toBER(sizeOnly) {
    return sizeOnly ? new ArrayBuffer(this.valueHexView.length) : this.valueHexView.slice().buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec
    };
  }
  toString() {
    const firstBit = this.valueHexView.length * 8 - 1;
    let digits = new Uint8Array(this.valueHexView.length * 8 / 3);
    let bitNumber = 0;
    let currentByte;
    const asn1View = this.valueHexView;
    let result = "";
    let flag = false;
    for (let byteNumber = asn1View.byteLength - 1; byteNumber >= 0; byteNumber--) {
      currentByte = asn1View[byteNumber];
      for (let i2 = 0; i2 < 8; i2++) {
        if ((currentByte & 1) === 1) {
          switch (bitNumber) {
            case firstBit:
              digits = viewSub(power2(bitNumber), digits);
              result = "-";
              break;
            default:
              digits = viewAdd(digits, power2(bitNumber));
          }
        }
        bitNumber++;
        currentByte >>= 1;
      }
    }
    for (let i2 = 0; i2 < digits.length; i2++) {
      if (digits[i2]) flag = true;
      if (flag) result += digitsString.charAt(digits[i2]);
    }
    if (flag === false) result += digitsString.charAt(0);
    return result;
  }
};
_a$p = LocalIntegerValueBlock;
LocalIntegerValueBlock.NAME = "IntegerValueBlock";
(() => {
  Object.defineProperty(_a$p.prototype, "valueHex", {
    set: function(v) {
      this.valueHexView = new Uint8Array(v);
      this.setValueHex();
    },
    get: function() {
      return this.valueHexView.slice().buffer;
    }
  });
})();
var _a$o;
var Integer = class extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalIntegerValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 2;
  }
  toBigInt() {
    assertBigInt();
    return BigInt(this.valueBlock.toString());
  }
  static fromBigInt(value) {
    assertBigInt();
    const bigIntValue = BigInt(value);
    const writer = new ViewWriter();
    const hex = bigIntValue.toString(16).replace(/^-/, "");
    const view = new Uint8Array(Convert.FromHex(hex));
    if (bigIntValue < 0) {
      const first = new Uint8Array(view.length + (view[0] & 128 ? 1 : 0));
      first[0] |= 128;
      const firstInt = BigInt(`0x${Convert.ToHex(first)}`);
      const secondInt = firstInt + bigIntValue;
      const second = BufferSourceConverter.toUint8Array(Convert.FromHex(secondInt.toString(16)));
      second[0] |= 128;
      writer.write(second);
    } else {
      if (view[0] & 128) {
        writer.write(new Uint8Array([
          0
        ]));
      }
      writer.write(view);
    }
    const res = new _a$o({
      valueHex: writer.final()
    });
    return res;
  }
  convertToDER() {
    const integer = new _a$o({
      valueHex: this.valueBlock.valueHexView
    });
    integer.valueBlock.toDER();
    return integer;
  }
  convertFromDER() {
    return new _a$o({
      valueHex: this.valueBlock.valueHexView[0] === 0 ? this.valueBlock.valueHexView.subarray(1) : this.valueBlock.valueHexView
    });
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;
  }
};
_a$o = Integer;
(() => {
  typeStore.Integer = _a$o;
})();
Integer.NAME = "INTEGER";
var _a$n;
var Enumerated = class extends Integer {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 10;
  }
};
_a$n = Enumerated;
(() => {
  typeStore.Enumerated = _a$n;
})();
Enumerated.NAME = "ENUMERATED";
var LocalSidValueBlock = class extends HexBlock(ValueBlock) {
  constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {
    super(parameters);
    this.valueDec = valueDec;
    this.isFirstSid = isFirstSid;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (!inputLength) {
      return inputOffset;
    }
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.valueHexView = new Uint8Array(inputLength);
    for (let i2 = 0; i2 < inputLength; i2++) {
      this.valueHexView[i2] = intBuffer[i2] & 127;
      this.blockLength++;
      if ((intBuffer[i2] & 128) === 0) break;
    }
    const tempView = new Uint8Array(this.blockLength);
    for (let i2 = 0; i2 < this.blockLength; i2++) {
      tempView[i2] = this.valueHexView[i2];
    }
    this.valueHexView = tempView;
    if ((intBuffer[this.blockLength - 1] & 128) !== 0) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    if (this.valueHexView[0] === 0) this.warnings.push("Needlessly long format of SID encoding");
    if (this.blockLength <= 8) this.valueDec = utilFromBase(this.valueHexView, 7);
    else {
      this.isHexOnly = true;
      this.warnings.push("Too big SID for decoding, hex only");
    }
    return inputOffset + this.blockLength;
  }
  set valueBigInt(value) {
    assertBigInt();
    let bits = BigInt(value).toString(2);
    while (bits.length % 7) {
      bits = "0" + bits;
    }
    const bytes = new Uint8Array(bits.length / 7);
    for (let i2 = 0; i2 < bytes.length; i2++) {
      bytes[i2] = parseInt(bits.slice(i2 * 7, i2 * 7 + 7), 2) + (i2 + 1 < bytes.length ? 128 : 0);
    }
    this.fromBER(bytes.buffer, 0, bytes.length);
  }
  toBER(sizeOnly) {
    if (this.isHexOnly) {
      if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
      const curView = this.valueHexView;
      const retView2 = new Uint8Array(this.blockLength);
      for (let i2 = 0; i2 < this.blockLength - 1; i2++) retView2[i2] = curView[i2] | 128;
      retView2[this.blockLength - 1] = curView[this.blockLength - 1];
      return retView2.buffer;
    }
    const encodedBuf = utilToBase(this.valueDec, 7);
    if (encodedBuf.byteLength === 0) {
      this.error = "Error during encoding SID value";
      return EMPTY_BUFFER;
    }
    const retView = new Uint8Array(encodedBuf.byteLength);
    if (!sizeOnly) {
      const encodedView = new Uint8Array(encodedBuf);
      const len = encodedBuf.byteLength - 1;
      for (let i2 = 0; i2 < len; i2++) retView[i2] = encodedView[i2] | 128;
      retView[len] = encodedView[len];
    }
    return retView;
  }
  toString() {
    let result = "";
    if (this.isHexOnly) result = Convert.ToHex(this.valueHexView);
    else {
      if (this.isFirstSid) {
        let sidValue = this.valueDec;
        if (this.valueDec <= 39) result = "0.";
        else {
          if (this.valueDec <= 79) {
            result = "1.";
            sidValue -= 40;
          } else {
            result = "2.";
            sidValue -= 80;
          }
        }
        result += sidValue.toString();
      } else result = this.valueDec.toString();
    }
    return result;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec,
      isFirstSid: this.isFirstSid
    };
  }
};
LocalSidValueBlock.NAME = "sidBlock";
var LocalObjectIdentifierValueBlock = class extends ValueBlock {
  constructor({ value = EMPTY_STRING, ...parameters } = {}) {
    super(parameters);
    this.value = [];
    if (value) {
      this.fromString(value);
    }
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = inputOffset;
    while (inputLength > 0) {
      const sidBlock = new LocalSidValueBlock();
      resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
      if (resultOffset === -1) {
        this.blockLength = 0;
        this.error = sidBlock.error;
        return resultOffset;
      }
      if (this.value.length === 0) sidBlock.isFirstSid = true;
      this.blockLength += sidBlock.blockLength;
      inputLength -= sidBlock.blockLength;
      this.value.push(sidBlock);
    }
    return resultOffset;
  }
  toBER(sizeOnly) {
    const retBuffers = [];
    for (let i2 = 0; i2 < this.value.length; i2++) {
      const valueBuf = this.value[i2].toBER(sizeOnly);
      if (valueBuf.byteLength === 0) {
        this.error = this.value[i2].error;
        return EMPTY_BUFFER;
      }
      retBuffers.push(valueBuf);
    }
    return concat2(retBuffers);
  }
  fromString(string) {
    this.value = [];
    let pos1 = 0;
    let pos2 = 0;
    let sid = "";
    let flag = false;
    do {
      pos2 = string.indexOf(".", pos1);
      if (pos2 === -1) sid = string.substring(pos1);
      else sid = string.substring(pos1, pos2);
      pos1 = pos2 + 1;
      if (flag) {
        const sidBlock = this.value[0];
        let plus = 0;
        switch (sidBlock.valueDec) {
          case 0:
            break;
          case 1:
            plus = 40;
            break;
          case 2:
            plus = 80;
            break;
          default:
            this.value = [];
            return;
        }
        const parsedSID = parseInt(sid, 10);
        if (isNaN(parsedSID)) return;
        sidBlock.valueDec = parsedSID + plus;
        flag = false;
      } else {
        const sidBlock = new LocalSidValueBlock();
        if (sid > Number.MAX_SAFE_INTEGER) {
          assertBigInt();
          const sidValue = BigInt(sid);
          sidBlock.valueBigInt = sidValue;
        } else {
          sidBlock.valueDec = parseInt(sid, 10);
          if (isNaN(sidBlock.valueDec)) return;
        }
        if (!this.value.length) {
          sidBlock.isFirstSid = true;
          flag = true;
        }
        this.value.push(sidBlock);
      }
    } while (pos2 !== -1);
  }
  toString() {
    let result = "";
    let isHexOnly = false;
    for (let i2 = 0; i2 < this.value.length; i2++) {
      isHexOnly = this.value[i2].isHexOnly;
      let sidStr = this.value[i2].toString();
      if (i2 !== 0) result = `${result}.`;
      if (isHexOnly) {
        sidStr = `{${sidStr}}`;
        if (this.value[i2].isFirstSid) result = `2.{${sidStr} - 80}`;
        else result += sidStr;
      } else result += sidStr;
    }
    return result;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      value: this.toString(),
      sidArray: []
    };
    for (let i2 = 0; i2 < this.value.length; i2++) {
      object.sidArray.push(this.value[i2].toJSON());
    }
    return object;
  }
};
LocalObjectIdentifierValueBlock.NAME = "ObjectIdentifierValueBlock";
var _a$m;
var ObjectIdentifier = class extends BaseBlock {
  getValue() {
    return this.valueBlock.toString();
  }
  setValue(value) {
    this.valueBlock.fromString(value);
  }
  constructor(parameters = {}) {
    super(parameters, LocalObjectIdentifierValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 6;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.getValue()
    };
  }
};
_a$m = ObjectIdentifier;
(() => {
  typeStore.ObjectIdentifier = _a$m;
})();
ObjectIdentifier.NAME = "OBJECT IDENTIFIER";
var LocalRelativeSidValueBlock = class extends HexBlock(LocalBaseBlock) {
  constructor({ valueDec = 0, ...parameters } = {}) {
    super(parameters);
    this.valueDec = valueDec;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (inputLength === 0) return inputOffset;
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) return -1;
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.valueHexView = new Uint8Array(inputLength);
    for (let i2 = 0; i2 < inputLength; i2++) {
      this.valueHexView[i2] = intBuffer[i2] & 127;
      this.blockLength++;
      if ((intBuffer[i2] & 128) === 0) break;
    }
    const tempView = new Uint8Array(this.blockLength);
    for (let i2 = 0; i2 < this.blockLength; i2++) tempView[i2] = this.valueHexView[i2];
    this.valueHexView = tempView;
    if ((intBuffer[this.blockLength - 1] & 128) !== 0) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    if (this.valueHexView[0] === 0) this.warnings.push("Needlessly long format of SID encoding");
    if (this.blockLength <= 8) this.valueDec = utilFromBase(this.valueHexView, 7);
    else {
      this.isHexOnly = true;
      this.warnings.push("Too big SID for decoding, hex only");
    }
    return inputOffset + this.blockLength;
  }
  toBER(sizeOnly) {
    if (this.isHexOnly) {
      if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
      const curView = this.valueHexView;
      const retView2 = new Uint8Array(this.blockLength);
      for (let i2 = 0; i2 < this.blockLength - 1; i2++) retView2[i2] = curView[i2] | 128;
      retView2[this.blockLength - 1] = curView[this.blockLength - 1];
      return retView2.buffer;
    }
    const encodedBuf = utilToBase(this.valueDec, 7);
    if (encodedBuf.byteLength === 0) {
      this.error = "Error during encoding SID value";
      return EMPTY_BUFFER;
    }
    const retView = new Uint8Array(encodedBuf.byteLength);
    if (!sizeOnly) {
      const encodedView = new Uint8Array(encodedBuf);
      const len = encodedBuf.byteLength - 1;
      for (let i2 = 0; i2 < len; i2++) retView[i2] = encodedView[i2] | 128;
      retView[len] = encodedView[len];
    }
    return retView.buffer;
  }
  toString() {
    let result = "";
    if (this.isHexOnly) result = Convert.ToHex(this.valueHexView);
    else {
      result = this.valueDec.toString();
    }
    return result;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec
    };
  }
};
LocalRelativeSidValueBlock.NAME = "relativeSidBlock";
var LocalRelativeObjectIdentifierValueBlock = class extends ValueBlock {
  constructor({ value = EMPTY_STRING, ...parameters } = {}) {
    super(parameters);
    this.value = [];
    if (value) {
      this.fromString(value);
    }
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = inputOffset;
    while (inputLength > 0) {
      const sidBlock = new LocalRelativeSidValueBlock();
      resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
      if (resultOffset === -1) {
        this.blockLength = 0;
        this.error = sidBlock.error;
        return resultOffset;
      }
      this.blockLength += sidBlock.blockLength;
      inputLength -= sidBlock.blockLength;
      this.value.push(sidBlock);
    }
    return resultOffset;
  }
  toBER(sizeOnly, _writer) {
    const retBuffers = [];
    for (let i2 = 0; i2 < this.value.length; i2++) {
      const valueBuf = this.value[i2].toBER(sizeOnly);
      if (valueBuf.byteLength === 0) {
        this.error = this.value[i2].error;
        return EMPTY_BUFFER;
      }
      retBuffers.push(valueBuf);
    }
    return concat2(retBuffers);
  }
  fromString(string) {
    this.value = [];
    let pos1 = 0;
    let pos2 = 0;
    let sid = "";
    do {
      pos2 = string.indexOf(".", pos1);
      if (pos2 === -1) sid = string.substring(pos1);
      else sid = string.substring(pos1, pos2);
      pos1 = pos2 + 1;
      const sidBlock = new LocalRelativeSidValueBlock();
      sidBlock.valueDec = parseInt(sid, 10);
      if (isNaN(sidBlock.valueDec)) return true;
      this.value.push(sidBlock);
    } while (pos2 !== -1);
    return true;
  }
  toString() {
    let result = "";
    let isHexOnly = false;
    for (let i2 = 0; i2 < this.value.length; i2++) {
      isHexOnly = this.value[i2].isHexOnly;
      let sidStr = this.value[i2].toString();
      if (i2 !== 0) result = `${result}.`;
      if (isHexOnly) {
        sidStr = `{${sidStr}}`;
        result += sidStr;
      } else result += sidStr;
    }
    return result;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      value: this.toString(),
      sidArray: []
    };
    for (let i2 = 0; i2 < this.value.length; i2++) object.sidArray.push(this.value[i2].toJSON());
    return object;
  }
};
LocalRelativeObjectIdentifierValueBlock.NAME = "RelativeObjectIdentifierValueBlock";
var _a$l;
var RelativeObjectIdentifier = class extends BaseBlock {
  getValue() {
    return this.valueBlock.toString();
  }
  setValue(value) {
    this.valueBlock.fromString(value);
  }
  constructor(parameters = {}) {
    super(parameters, LocalRelativeObjectIdentifierValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 13;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.getValue()
    };
  }
};
_a$l = RelativeObjectIdentifier;
(() => {
  typeStore.RelativeObjectIdentifier = _a$l;
})();
RelativeObjectIdentifier.NAME = "RelativeObjectIdentifier";
var _a$k;
var Sequence = class extends Constructed {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 16;
  }
};
_a$k = Sequence;
(() => {
  typeStore.Sequence = _a$k;
})();
Sequence.NAME = "SEQUENCE";
var _a$j;
var Set2 = class extends Constructed {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 17;
  }
};
_a$j = Set2;
(() => {
  typeStore.Set = _a$j;
})();
Set2.NAME = "SET";
var LocalStringValueBlock = class extends HexBlock(ValueBlock) {
  constructor({ ...parameters } = {}) {
    super(parameters);
    this.isHexOnly = true;
    this.value = EMPTY_STRING;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.value
    };
  }
};
LocalStringValueBlock.NAME = "StringValueBlock";
var LocalSimpleStringValueBlock = class extends LocalStringValueBlock {
};
LocalSimpleStringValueBlock.NAME = "SimpleStringValueBlock";
var LocalSimpleStringBlock = class extends BaseStringBlock {
  constructor({ ...parameters } = {}) {
    super(parameters, LocalSimpleStringValueBlock);
  }
  fromBuffer(inputBuffer) {
    this.valueBlock.value = String.fromCharCode.apply(null, BufferSourceConverter.toUint8Array(inputBuffer));
  }
  fromString(inputString) {
    const strLen = inputString.length;
    const view = this.valueBlock.valueHexView = new Uint8Array(strLen);
    for (let i2 = 0; i2 < strLen; i2++) view[i2] = inputString.charCodeAt(i2);
    this.valueBlock.value = inputString;
  }
};
LocalSimpleStringBlock.NAME = "SIMPLE STRING";
var LocalUtf8StringValueBlock = class extends LocalSimpleStringBlock {
  fromBuffer(inputBuffer) {
    this.valueBlock.valueHexView = BufferSourceConverter.toUint8Array(inputBuffer);
    try {
      this.valueBlock.value = Convert.ToUtf8String(inputBuffer);
    } catch (ex) {
      this.warnings.push(`Error during "decodeURIComponent": ${ex}, using raw string`);
      this.valueBlock.value = Convert.ToBinary(inputBuffer);
    }
  }
  fromString(inputString) {
    this.valueBlock.valueHexView = new Uint8Array(Convert.FromUtf8String(inputString));
    this.valueBlock.value = inputString;
  }
};
LocalUtf8StringValueBlock.NAME = "Utf8StringValueBlock";
var _a$i;
var Utf8String = class extends LocalUtf8StringValueBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 12;
  }
};
_a$i = Utf8String;
(() => {
  typeStore.Utf8String = _a$i;
})();
Utf8String.NAME = "UTF8String";
var LocalBmpStringValueBlock = class extends LocalSimpleStringBlock {
  fromBuffer(inputBuffer) {
    this.valueBlock.value = Convert.ToUtf16String(inputBuffer);
    this.valueBlock.valueHexView = BufferSourceConverter.toUint8Array(inputBuffer);
  }
  fromString(inputString) {
    this.valueBlock.value = inputString;
    this.valueBlock.valueHexView = new Uint8Array(Convert.FromUtf16String(inputString));
  }
};
LocalBmpStringValueBlock.NAME = "BmpStringValueBlock";
var _a$h;
var BmpString = class extends LocalBmpStringValueBlock {
  constructor({ ...parameters } = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 30;
  }
};
_a$h = BmpString;
(() => {
  typeStore.BmpString = _a$h;
})();
BmpString.NAME = "BMPString";
var LocalUniversalStringValueBlock = class extends LocalSimpleStringBlock {
  fromBuffer(inputBuffer) {
    const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);
    const valueView = new Uint8Array(copyBuffer);
    for (let i2 = 0; i2 < valueView.length; i2 += 4) {
      valueView[i2] = valueView[i2 + 3];
      valueView[i2 + 1] = valueView[i2 + 2];
      valueView[i2 + 2] = 0;
      valueView[i2 + 3] = 0;
    }
    this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));
  }
  fromString(inputString) {
    const strLength = inputString.length;
    const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);
    for (let i2 = 0; i2 < strLength; i2++) {
      const codeBuf = utilToBase(inputString.charCodeAt(i2), 8);
      const codeView = new Uint8Array(codeBuf);
      if (codeView.length > 4) continue;
      const dif = 4 - codeView.length;
      for (let j = codeView.length - 1; j >= 0; j--) valueHexView[i2 * 4 + j + dif] = codeView[j];
    }
    this.valueBlock.value = inputString;
  }
};
LocalUniversalStringValueBlock.NAME = "UniversalStringValueBlock";
var _a$g;
var UniversalString = class extends LocalUniversalStringValueBlock {
  constructor({ ...parameters } = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 28;
  }
};
_a$g = UniversalString;
(() => {
  typeStore.UniversalString = _a$g;
})();
UniversalString.NAME = "UniversalString";
var _a$f;
var NumericString = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 18;
  }
};
_a$f = NumericString;
(() => {
  typeStore.NumericString = _a$f;
})();
NumericString.NAME = "NumericString";
var _a$e;
var PrintableString = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 19;
  }
};
_a$e = PrintableString;
(() => {
  typeStore.PrintableString = _a$e;
})();
PrintableString.NAME = "PrintableString";
var _a$d;
var TeletexString = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 20;
  }
};
_a$d = TeletexString;
(() => {
  typeStore.TeletexString = _a$d;
})();
TeletexString.NAME = "TeletexString";
var _a$c;
var VideotexString = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 21;
  }
};
_a$c = VideotexString;
(() => {
  typeStore.VideotexString = _a$c;
})();
VideotexString.NAME = "VideotexString";
var _a$b;
var IA5String = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 22;
  }
};
_a$b = IA5String;
(() => {
  typeStore.IA5String = _a$b;
})();
IA5String.NAME = "IA5String";
var _a$a;
var GraphicString = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 25;
  }
};
_a$a = GraphicString;
(() => {
  typeStore.GraphicString = _a$a;
})();
GraphicString.NAME = "GraphicString";
var _a$9;
var VisibleString = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 26;
  }
};
_a$9 = VisibleString;
(() => {
  typeStore.VisibleString = _a$9;
})();
VisibleString.NAME = "VisibleString";
var _a$8;
var GeneralString = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 27;
  }
};
_a$8 = GeneralString;
(() => {
  typeStore.GeneralString = _a$8;
})();
GeneralString.NAME = "GeneralString";
var _a$7;
var CharacterString = class extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 29;
  }
};
_a$7 = CharacterString;
(() => {
  typeStore.CharacterString = _a$7;
})();
CharacterString.NAME = "CharacterString";
var _a$6;
var UTCTime = class extends VisibleString {
  constructor({ value, valueDate, ...parameters } = {}) {
    super(parameters);
    this.year = 0;
    this.month = 0;
    this.day = 0;
    this.hour = 0;
    this.minute = 0;
    this.second = 0;
    if (value) {
      this.fromString(value);
      this.valueBlock.valueHexView = new Uint8Array(value.length);
      for (let i2 = 0; i2 < value.length; i2++) this.valueBlock.valueHexView[i2] = value.charCodeAt(i2);
    }
    if (valueDate) {
      this.fromDate(valueDate);
      this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());
    }
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 23;
  }
  fromBuffer(inputBuffer) {
    this.fromString(String.fromCharCode.apply(null, BufferSourceConverter.toUint8Array(inputBuffer)));
  }
  toBuffer() {
    const str = this.toString();
    const buffer = new ArrayBuffer(str.length);
    const view = new Uint8Array(buffer);
    for (let i2 = 0; i2 < str.length; i2++) view[i2] = str.charCodeAt(i2);
    return buffer;
  }
  fromDate(inputDate) {
    this.year = inputDate.getUTCFullYear();
    this.month = inputDate.getUTCMonth() + 1;
    this.day = inputDate.getUTCDate();
    this.hour = inputDate.getUTCHours();
    this.minute = inputDate.getUTCMinutes();
    this.second = inputDate.getUTCSeconds();
  }
  toDate() {
    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));
  }
  fromString(inputString) {
    const parser = /(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/ig;
    const parserArray = parser.exec(inputString);
    if (parserArray === null) {
      this.error = "Wrong input string for conversion";
      return;
    }
    const year2 = parseInt(parserArray[1], 10);
    if (year2 >= 50) this.year = 1900 + year2;
    else this.year = 2e3 + year2;
    this.month = parseInt(parserArray[2], 10);
    this.day = parseInt(parserArray[3], 10);
    this.hour = parseInt(parserArray[4], 10);
    this.minute = parseInt(parserArray[5], 10);
    this.second = parseInt(parserArray[6], 10);
  }
  toString(encoding = "iso") {
    if (encoding === "iso") {
      const outputArray = new Array(7);
      outputArray[0] = padNumber(this.year < 2e3 ? this.year - 1900 : this.year - 2e3, 2);
      outputArray[1] = padNumber(this.month, 2);
      outputArray[2] = padNumber(this.day, 2);
      outputArray[3] = padNumber(this.hour, 2);
      outputArray[4] = padNumber(this.minute, 2);
      outputArray[5] = padNumber(this.second, 2);
      outputArray[6] = "Z";
      return outputArray.join("");
    }
    return super.toString(encoding);
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      year: this.year,
      month: this.month,
      day: this.day,
      hour: this.hour,
      minute: this.minute,
      second: this.second
    };
  }
};
_a$6 = UTCTime;
(() => {
  typeStore.UTCTime = _a$6;
})();
UTCTime.NAME = "UTCTime";
var _a$5;
var GeneralizedTime = class extends UTCTime {
  constructor(parameters = {}) {
    var _b;
    super(parameters);
    (_b = this.millisecond) !== null && _b !== void 0 ? _b : this.millisecond = 0;
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 24;
  }
  fromDate(inputDate) {
    super.fromDate(inputDate);
    this.millisecond = inputDate.getUTCMilliseconds();
  }
  toDate() {
    const utcDate = Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond);
    return new Date(utcDate);
  }
  fromString(inputString) {
    let isUTC = false;
    let timeString = "";
    let dateTimeString = "";
    let fractionPart = 0;
    let parser;
    let hourDifference = 0;
    let minuteDifference = 0;
    if (inputString[inputString.length - 1] === "Z") {
      timeString = inputString.substring(0, inputString.length - 1);
      isUTC = true;
    } else {
      const number = new Number(inputString[inputString.length - 1]);
      if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
      timeString = inputString;
    }
    if (isUTC) {
      if (timeString.indexOf("+") !== -1) throw new Error("Wrong input string for conversion");
      if (timeString.indexOf("-") !== -1) throw new Error("Wrong input string for conversion");
    } else {
      let multiplier = 1;
      let differencePosition = timeString.indexOf("+");
      let differenceString = "";
      if (differencePosition === -1) {
        differencePosition = timeString.indexOf("-");
        multiplier = -1;
      }
      if (differencePosition !== -1) {
        differenceString = timeString.substring(differencePosition + 1);
        timeString = timeString.substring(0, differencePosition);
        if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error("Wrong input string for conversion");
        let number = parseInt(differenceString.substring(0, 2), 10);
        if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
        hourDifference = multiplier * number;
        if (differenceString.length === 4) {
          number = parseInt(differenceString.substring(2, 4), 10);
          if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
          minuteDifference = multiplier * number;
        }
      }
    }
    let fractionPointPosition = timeString.indexOf(".");
    if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(",");
    if (fractionPointPosition !== -1) {
      const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);
      if (isNaN(fractionPartCheck.valueOf())) throw new Error("Wrong input string for conversion");
      fractionPart = fractionPartCheck.valueOf();
      dateTimeString = timeString.substring(0, fractionPointPosition);
    } else dateTimeString = timeString;
    switch (true) {
      case dateTimeString.length === 8:
        parser = /(\d{4})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) throw new Error("Wrong input string for conversion");
        break;
      case dateTimeString.length === 10:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          let fractionResult = 60 * fractionPart;
          this.minute = Math.floor(fractionResult);
          fractionResult = 60 * (fractionResult - this.minute);
          this.second = Math.floor(fractionResult);
          fractionResult = 1e3 * (fractionResult - this.second);
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      case dateTimeString.length === 12:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          let fractionResult = 60 * fractionPart;
          this.second = Math.floor(fractionResult);
          fractionResult = 1e3 * (fractionResult - this.second);
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      case dateTimeString.length === 14:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          const fractionResult = 1e3 * fractionPart;
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      default:
        throw new Error("Wrong input string for conversion");
    }
    const parserArray = parser.exec(dateTimeString);
    if (parserArray === null) throw new Error("Wrong input string for conversion");
    for (let j = 1; j < parserArray.length; j++) {
      switch (j) {
        case 1:
          this.year = parseInt(parserArray[j], 10);
          break;
        case 2:
          this.month = parseInt(parserArray[j], 10);
          break;
        case 3:
          this.day = parseInt(parserArray[j], 10);
          break;
        case 4:
          this.hour = parseInt(parserArray[j], 10) + hourDifference;
          break;
        case 5:
          this.minute = parseInt(parserArray[j], 10) + minuteDifference;
          break;
        case 6:
          this.second = parseInt(parserArray[j], 10);
          break;
        default:
          throw new Error("Wrong input string for conversion");
      }
    }
    if (isUTC === false) {
      const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
      this.year = tempDate.getUTCFullYear();
      this.month = tempDate.getUTCMonth();
      this.day = tempDate.getUTCDay();
      this.hour = tempDate.getUTCHours();
      this.minute = tempDate.getUTCMinutes();
      this.second = tempDate.getUTCSeconds();
      this.millisecond = tempDate.getUTCMilliseconds();
    }
  }
  toString(encoding = "iso") {
    if (encoding === "iso") {
      const outputArray = [];
      outputArray.push(padNumber(this.year, 4));
      outputArray.push(padNumber(this.month, 2));
      outputArray.push(padNumber(this.day, 2));
      outputArray.push(padNumber(this.hour, 2));
      outputArray.push(padNumber(this.minute, 2));
      outputArray.push(padNumber(this.second, 2));
      if (this.millisecond !== 0) {
        outputArray.push(".");
        outputArray.push(padNumber(this.millisecond, 3));
      }
      outputArray.push("Z");
      return outputArray.join("");
    }
    return super.toString(encoding);
  }
  toJSON() {
    return {
      ...super.toJSON(),
      millisecond: this.millisecond
    };
  }
};
_a$5 = GeneralizedTime;
(() => {
  typeStore.GeneralizedTime = _a$5;
})();
GeneralizedTime.NAME = "GeneralizedTime";
var _a$4;
var DATE = class extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 31;
  }
};
_a$4 = DATE;
(() => {
  typeStore.DATE = _a$4;
})();
DATE.NAME = "DATE";
var _a$3;
var TimeOfDay = class extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 32;
  }
};
_a$3 = TimeOfDay;
(() => {
  typeStore.TimeOfDay = _a$3;
})();
TimeOfDay.NAME = "TimeOfDay";
var _a$2;
var DateTime = class extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 33;
  }
};
_a$2 = DateTime;
(() => {
  typeStore.DateTime = _a$2;
})();
DateTime.NAME = "DateTime";
var _a$1;
var Duration = class extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 34;
  }
};
_a$1 = Duration;
(() => {
  typeStore.Duration = _a$1;
})();
Duration.NAME = "Duration";
var _a;
var TIME = class extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 14;
  }
};
_a = TIME;
(() => {
  typeStore.TIME = _a;
})();
TIME.NAME = "TIME";
var Any = class {
  constructor({ name = EMPTY_STRING, optional = false } = {}) {
    this.name = name;
    this.optional = optional;
  }
};
var Choice = class extends Any {
  constructor({ value = [], ...parameters } = {}) {
    super(parameters);
    this.value = value;
  }
};
var Repeated = class extends Any {
  constructor({ value = new Any(), local = false, ...parameters } = {}) {
    super(parameters);
    this.value = value;
    this.local = local;
  }
};
var RawData = class {
  get data() {
    return this.dataView.slice().buffer;
  }
  set data(value) {
    this.dataView = BufferSourceConverter.toUint8Array(value);
  }
  constructor({ data = EMPTY_VIEW } = {}) {
    this.dataView = BufferSourceConverter.toUint8Array(data);
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const endLength = inputOffset + inputLength;
    this.dataView = BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);
    return endLength;
  }
  toBER(_sizeOnly) {
    return this.dataView.slice().buffer;
  }
};
function compareSchema(root, inputData, inputSchema) {
  if (inputSchema instanceof Choice) {
    for (const element of inputSchema.value) {
      const result = compareSchema(root, inputData, element);
      if (result.verified) {
        return {
          verified: true,
          result: root
        };
      }
    }
    {
      const _result = {
        verified: false,
        result: {
          error: "Wrong values for Choice type"
        }
      };
      if (inputSchema.hasOwnProperty(NAME)) _result.name = inputSchema.name;
      return _result;
    }
  }
  if (inputSchema instanceof Any) {
    if (inputSchema.hasOwnProperty(NAME)) root[inputSchema.name] = inputData;
    return {
      verified: true,
      result: root
    };
  }
  if (root instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong root object"
      }
    };
  }
  if (inputData instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 data"
      }
    };
  }
  if (inputSchema instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (ID_BLOCK in inputSchema === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (FROM_BER in inputSchema.idBlock === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (TO_BER in inputSchema.idBlock === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  const encodedId = inputSchema.idBlock.toBER(false);
  if (encodedId.byteLength === 0) {
    return {
      verified: false,
      result: {
        error: "Error encoding idBlock for ASN.1 schema"
      }
    };
  }
  const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);
  if (decodedOffset === -1) {
    return {
      verified: false,
      result: {
        error: "Error decoding idBlock for ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {
    return {
      verified: false,
      result: root
    };
  }
  if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {
    return {
      verified: false,
      result: root
    };
  }
  if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {
    return {
      verified: false,
      result: root
    };
  }
  if (!(IS_HEX_ONLY in inputSchema.idBlock)) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {
    return {
      verified: false,
      result: root
    };
  }
  if (inputSchema.idBlock.isHexOnly) {
    if (VALUE_HEX_VIEW in inputSchema.idBlock === false) {
      return {
        verified: false,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
    }
    const schemaView = inputSchema.idBlock.valueHexView;
    const asn1View = inputData.idBlock.valueHexView;
    if (schemaView.length !== asn1View.length) {
      return {
        verified: false,
        result: root
      };
    }
    for (let i2 = 0; i2 < schemaView.length; i2++) {
      if (schemaView[i2] !== asn1View[1]) {
        return {
          verified: false,
          result: root
        };
      }
    }
  }
  if (inputSchema.name) {
    inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
    if (inputSchema.name) root[inputSchema.name] = inputData;
  }
  if (inputSchema instanceof typeStore.Constructed) {
    let admission = 0;
    let result = {
      verified: false,
      result: {
        error: "Unknown error"
      }
    };
    let maxLength = inputSchema.valueBlock.value.length;
    if (maxLength > 0) {
      if (inputSchema.valueBlock.value[0] instanceof Repeated) {
        maxLength = inputData.valueBlock.value.length;
      }
    }
    if (maxLength === 0) {
      return {
        verified: true,
        result: root
      };
    }
    if (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {
      let _optional = true;
      for (let i2 = 0; i2 < inputSchema.valueBlock.value.length; i2++) _optional = _optional && (inputSchema.valueBlock.value[i2].optional || false);
      if (_optional) {
        return {
          verified: true,
          result: root
        };
      }
      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
        if (inputSchema.name) delete root[inputSchema.name];
      }
      root.error = "Inconsistent object length";
      return {
        verified: false,
        result: root
      };
    }
    for (let i2 = 0; i2 < maxLength; i2++) {
      if (i2 - admission >= inputData.valueBlock.value.length) {
        if (inputSchema.valueBlock.value[i2].optional === false) {
          const _result = {
            verified: false,
            result: root
          };
          root.error = "Inconsistent length between ASN.1 data and schema";
          if (inputSchema.name) {
            inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
            if (inputSchema.name) {
              delete root[inputSchema.name];
              _result.name = inputSchema.name;
            }
          }
          return _result;
        }
      } else {
        if (inputSchema.valueBlock.value[0] instanceof Repeated) {
          result = compareSchema(root, inputData.valueBlock.value[i2], inputSchema.valueBlock.value[0].value);
          if (result.verified === false) {
            if (inputSchema.valueBlock.value[0].optional) admission++;
            else {
              if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) delete root[inputSchema.name];
              }
              return result;
            }
          }
          if (NAME in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {
            let arrayRoot = {};
            if (LOCAL in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local) arrayRoot = inputData;
            else arrayRoot = root;
            if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === "undefined") arrayRoot[inputSchema.valueBlock.value[0].name] = [];
            arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i2]);
          }
        } else {
          result = compareSchema(root, inputData.valueBlock.value[i2 - admission], inputSchema.valueBlock.value[i2]);
          if (result.verified === false) {
            if (inputSchema.valueBlock.value[i2].optional) admission++;
            else {
              if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) delete root[inputSchema.name];
              }
              return result;
            }
          }
        }
      }
    }
    if (result.verified === false) {
      const _result = {
        verified: false,
        result: root
      };
      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
        if (inputSchema.name) {
          delete root[inputSchema.name];
          _result.name = inputSchema.name;
        }
      }
      return _result;
    }
    return {
      verified: true,
      result: root
    };
  }
  if (inputSchema.primitiveSchema && VALUE_HEX_VIEW in inputData.valueBlock) {
    const asn1 = localFromBER(inputData.valueBlock.valueHexView);
    if (asn1.offset === -1) {
      const _result = {
        verified: false,
        result: asn1.result
      };
      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
        if (inputSchema.name) {
          delete root[inputSchema.name];
          _result.name = inputSchema.name;
        }
      }
      return _result;
    }
    return compareSchema(root, asn1.result, inputSchema.primitiveSchema);
  }
  return {
    verified: true,
    result: root
  };
}

// deno:https://unpkg.com/bytestreamjs@2.0.1/build/mjs/byte_stream.js?module
var ByteStream = class _ByteStream {
  constructor(parameters = {}) {
    if ("view" in parameters) {
      this.fromUint8Array(parameters.view);
    } else if ("buffer" in parameters) {
      this.fromArrayBuffer(parameters.buffer);
    } else if ("string" in parameters) {
      this.fromString(parameters.string);
    } else if ("hexstring" in parameters) {
      this.fromHexString(parameters.hexstring);
    } else {
      if ("length" in parameters && parameters.length > 0) {
        this.length = parameters.length;
        if (parameters.stub) {
          for (let i2 = 0; i2 < this._view.length; i2++) {
            this._view[i2] = parameters.stub;
          }
        }
      } else {
        this.length = 0;
      }
    }
  }
  set buffer(value) {
    this._buffer = value;
    this._view = new Uint8Array(this._buffer);
  }
  get buffer() {
    return this._buffer;
  }
  set view(value) {
    this._buffer = new ArrayBuffer(value.length);
    this._view = new Uint8Array(this._buffer);
    this._view.set(value);
  }
  get view() {
    return this._view;
  }
  get length() {
    return this.view.byteLength;
  }
  set length(value) {
    this._buffer = new ArrayBuffer(value);
    this._view = new Uint8Array(this._buffer);
  }
  clear() {
    this._buffer = new ArrayBuffer(0);
    this._view = new Uint8Array(this._buffer);
  }
  fromArrayBuffer(array) {
    this._buffer = array;
    this._view = new Uint8Array(this._buffer);
  }
  fromUint8Array(array) {
    this.fromArrayBuffer(new Uint8Array(array).buffer);
  }
  fromString(string) {
    const stringLength = string.length;
    this.length = stringLength;
    for (let i2 = 0; i2 < stringLength; i2++) this.view[i2] = string.charCodeAt(i2);
  }
  toString(start = 0, length = this.view.length - start) {
    let result = "";
    if (start >= this.view.length || start < 0) {
      start = 0;
    }
    if (length >= this.view.length || length < 0) {
      length = this.view.length - start;
    }
    for (let i2 = start; i2 < start + length; i2++) result += String.fromCharCode(this.view[i2]);
    return result;
  }
  fromHexString(hexString) {
    const stringLength = hexString.length;
    this.buffer = new ArrayBuffer(stringLength >> 1);
    this.view = new Uint8Array(this.buffer);
    const hexMap = /* @__PURE__ */ new Map();
    hexMap.set("0", 0);
    hexMap.set("1", 1);
    hexMap.set("2", 2);
    hexMap.set("3", 3);
    hexMap.set("4", 4);
    hexMap.set("5", 5);
    hexMap.set("6", 6);
    hexMap.set("7", 7);
    hexMap.set("8", 8);
    hexMap.set("9", 9);
    hexMap.set("A", 10);
    hexMap.set("a", 10);
    hexMap.set("B", 11);
    hexMap.set("b", 11);
    hexMap.set("C", 12);
    hexMap.set("c", 12);
    hexMap.set("D", 13);
    hexMap.set("d", 13);
    hexMap.set("E", 14);
    hexMap.set("e", 14);
    hexMap.set("F", 15);
    hexMap.set("f", 15);
    let j = 0;
    let temp = 0;
    for (let i2 = 0; i2 < stringLength; i2++) {
      if (!(i2 % 2)) {
        temp = hexMap.get(hexString.charAt(i2)) << 4;
      } else {
        temp |= hexMap.get(hexString.charAt(i2));
        this.view[j] = temp;
        j++;
      }
    }
  }
  toHexString(start = 0, length = this.view.length - start) {
    let result = "";
    if (start >= this.view.length || start < 0) {
      start = 0;
    }
    if (length >= this.view.length || length < 0) {
      length = this.view.length - start;
    }
    for (let i2 = start; i2 < start + length; i2++) {
      const str = this.view[i2].toString(16).toUpperCase();
      result = result + (str.length == 1 ? "0" : "") + str;
    }
    return result;
  }
  copy(start = 0, length = this.length - start) {
    if (!start && !this.length) {
      return new _ByteStream();
    }
    if (start < 0 || start > this.length - 1) {
      throw new Error(`Wrong start position: ${start}`);
    }
    const stream = new _ByteStream({
      buffer: this._buffer.slice(start, start + length)
    });
    return stream;
  }
  slice(start = 0, end = this.length) {
    if (!start && !this.length) {
      return new _ByteStream();
    }
    if (start < 0 || start > this.length - 1) {
      throw new Error(`Wrong start position: ${start}`);
    }
    const stream = new _ByteStream({
      buffer: this._buffer.slice(start, end)
    });
    return stream;
  }
  realloc(size) {
    const buffer = new ArrayBuffer(size);
    const view = new Uint8Array(buffer);
    if (size > this._view.length) view.set(this._view);
    else {
      view.set(new Uint8Array(this._buffer, 0, size));
    }
    this._buffer = buffer;
    this._view = new Uint8Array(this._buffer);
  }
  append(stream) {
    const initialSize = this.length;
    const streamViewLength = stream.length;
    const subarrayView = stream._view.subarray();
    this.realloc(initialSize + streamViewLength);
    this._view.set(subarrayView, initialSize);
  }
  insert(stream, start = 0, length = this.length - start) {
    if (start > this.length - 1) return false;
    if (length > this.length - start) {
      length = this.length - start;
    }
    if (length > stream.length) {
      length = stream.length;
    }
    if (length == stream.length) this._view.set(stream._view, start);
    else {
      this._view.set(stream._view.subarray(0, length), start);
    }
    return true;
  }
  isEqual(stream) {
    if (this.length != stream.length) return false;
    for (let i2 = 0; i2 < stream.length; i2++) {
      if (this.view[i2] != stream.view[i2]) return false;
    }
    return true;
  }
  isEqualView(view) {
    if (view.length != this.view.length) return false;
    for (let i2 = 0; i2 < view.length; i2++) {
      if (this.view[i2] != view[i2]) return false;
    }
    return true;
  }
  findPattern(pattern, start_, length_, backward_) {
    const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);
    const patternLength = pattern.length;
    if (patternLength > length) {
      return -1;
    }
    const patternArray = [];
    for (let i2 = 0; i2 < patternLength; i2++) patternArray.push(pattern.view[i2]);
    for (let i2 = 0; i2 <= length - patternLength; i2++) {
      let equal = true;
      const equalStart = backward ? start - patternLength - i2 : start + i2;
      for (let j = 0; j < patternLength; j++) {
        if (this.view[j + equalStart] != patternArray[j]) {
          equal = false;
          break;
        }
      }
      if (equal) {
        return backward ? start - patternLength - i2 : start + patternLength + i2;
      }
    }
    return -1;
  }
  findFirstIn(patterns, start_, length_, backward_) {
    const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);
    const result = {
      id: -1,
      position: backward ? 0 : start + length,
      length: 0
    };
    for (let i2 = 0; i2 < patterns.length; i2++) {
      const position3 = this.findPattern(patterns[i2], start, length, backward);
      if (position3 != -1) {
        let valid = false;
        const patternLength = patterns[i2].length;
        if (backward) {
          if (position3 - patternLength >= result.position - result.length) valid = true;
        } else {
          if (position3 - patternLength <= result.position - result.length) valid = true;
        }
        if (valid) {
          result.position = position3;
          result.id = i2;
          result.length = patternLength;
        }
      }
    }
    return result;
  }
  findAllIn(patterns, start_, length_) {
    let { start, length } = this.prepareFindParameters(start_, length_);
    const result = [];
    let patternFound = {
      id: -1,
      position: start
    };
    do {
      const position3 = patternFound.position;
      patternFound = this.findFirstIn(patterns, patternFound.position, length);
      if (patternFound.id == -1) {
        break;
      }
      length -= patternFound.position - position3;
      result.push({
        id: patternFound.id,
        position: patternFound.position
      });
    } while (true);
    return result;
  }
  findAllPatternIn(pattern, start_, length_) {
    const { start, length } = this.prepareFindParameters(start_, length_);
    const result = [];
    const patternLength = pattern.length;
    if (patternLength > length) {
      return -1;
    }
    const patternArray = Array.from(pattern.view);
    for (let i2 = 0; i2 <= length - patternLength; i2++) {
      let equal = true;
      const equalStart = start + i2;
      for (let j = 0; j < patternLength; j++) {
        if (this.view[j + equalStart] != patternArray[j]) {
          equal = false;
          break;
        }
      }
      if (equal) {
        result.push(start + patternLength + i2);
        i2 += patternLength - 1;
      }
    }
    return result;
  }
  findFirstNotIn(patterns, start_, length_, backward_) {
    let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);
    const result = {
      left: {
        id: -1,
        position: start
      },
      right: {
        id: -1,
        position: 0
      },
      value: new _ByteStream()
    };
    let currentLength = length;
    while (currentLength > 0) {
      result.right = this.findFirstIn(patterns, backward ? start - length + currentLength : start + length - currentLength, currentLength, backward);
      if (result.right.id == -1) {
        length = currentLength;
        if (backward) {
          start -= length;
        } else {
          start = result.left.position;
        }
        result.value = new _ByteStream({
          buffer: this._buffer.slice(start, start + length)
        });
        break;
      }
      if (result.right.position != (backward ? result.left.position - patterns[result.right.id].length : result.left.position + patterns[result.right.id].length)) {
        if (backward) {
          start = result.right.position + patterns[result.right.id].length;
          length = result.left.position - result.right.position - patterns[result.right.id].length;
        } else {
          start = result.left.position;
          length = result.right.position - result.left.position - patterns[result.right.id].length;
        }
        result.value = new _ByteStream({
          buffer: this._buffer.slice(start, start + length)
        });
        break;
      }
      result.left = result.right;
      currentLength -= patterns[result.right.id].length;
    }
    if (backward) {
      const temp = result.right;
      result.right = result.left;
      result.left = temp;
    }
    return result;
  }
  findAllNotIn(patterns, start_, length_) {
    let { start, length } = this.prepareFindParameters(start_, length_);
    const result = [];
    let patternFound = {
      left: {
        id: -1,
        position: start
      },
      right: {
        id: -1,
        position: start
      },
      value: new _ByteStream()
    };
    do {
      const position3 = patternFound.right.position;
      patternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);
      length -= patternFound.right.position - position3;
      result.push({
        left: {
          id: patternFound.left.id,
          position: patternFound.left.position
        },
        right: {
          id: patternFound.right.id,
          position: patternFound.right.position
        },
        value: patternFound.value
      });
    } while (patternFound.right.id != -1);
    return result;
  }
  findFirstSequence(patterns, start_, length_, backward_) {
    let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);
    const firstIn = this.skipNotPatterns(patterns, start, length, backward);
    if (firstIn == -1) {
      return {
        position: -1,
        value: new _ByteStream()
      };
    }
    const firstNotIn = this.skipPatterns(patterns, firstIn, length - (backward ? start - firstIn : firstIn - start), backward);
    if (backward) {
      start = firstNotIn;
      length = firstIn - firstNotIn;
    } else {
      start = firstIn;
      length = firstNotIn - firstIn;
    }
    const value = new _ByteStream({
      buffer: this._buffer.slice(start, start + length)
    });
    return {
      position: firstNotIn,
      value
    };
  }
  findAllSequences(patterns, start_, length_) {
    let { start, length } = this.prepareFindParameters(start_, length_);
    const result = [];
    let patternFound = {
      position: start,
      value: new _ByteStream()
    };
    do {
      const position3 = patternFound.position;
      patternFound = this.findFirstSequence(patterns, patternFound.position, length);
      if (patternFound.position != -1) {
        length -= patternFound.position - position3;
        result.push({
          position: patternFound.position,
          value: patternFound.value
        });
      }
    } while (patternFound.position != -1);
    return result;
  }
  findPairedPatterns(leftPattern, rightPattern, start_, length_) {
    const result = [];
    if (leftPattern.isEqual(rightPattern)) return result;
    const { start, length } = this.prepareFindParameters(start_, length_);
    let currentPositionLeft = 0;
    const leftPatterns = this.findAllPatternIn(leftPattern, start, length);
    if (!Array.isArray(leftPatterns) || leftPatterns.length == 0) {
      return result;
    }
    const rightPatterns = this.findAllPatternIn(rightPattern, start, length);
    if (!Array.isArray(rightPatterns) || rightPatterns.length == 0) {
      return result;
    }
    while (currentPositionLeft < leftPatterns.length) {
      if (rightPatterns.length == 0) {
        break;
      }
      if (leftPatterns[0] == rightPatterns[0]) {
        result.push({
          left: leftPatterns[0],
          right: rightPatterns[0]
        });
        leftPatterns.splice(0, 1);
        rightPatterns.splice(0, 1);
        continue;
      }
      if (leftPatterns[currentPositionLeft] > rightPatterns[0]) {
        break;
      }
      while (leftPatterns[currentPositionLeft] < rightPatterns[0]) {
        currentPositionLeft++;
        if (currentPositionLeft >= leftPatterns.length) {
          break;
        }
      }
      result.push({
        left: leftPatterns[currentPositionLeft - 1],
        right: rightPatterns[0]
      });
      leftPatterns.splice(currentPositionLeft - 1, 1);
      rightPatterns.splice(0, 1);
      currentPositionLeft = 0;
    }
    result.sort((a2, b) => a2.left - b.left);
    return result;
  }
  findPairedArrays(inputLeftPatterns, inputRightPatterns, start_, length_) {
    const { start, length } = this.prepareFindParameters(start_, length_);
    const result = [];
    let currentPositionLeft = 0;
    const leftPatterns = this.findAllIn(inputLeftPatterns, start, length);
    if (leftPatterns.length == 0) return result;
    const rightPatterns = this.findAllIn(inputRightPatterns, start, length);
    if (rightPatterns.length == 0) return result;
    while (currentPositionLeft < leftPatterns.length) {
      if (rightPatterns.length == 0) {
        break;
      }
      if (leftPatterns[0].position == rightPatterns[0].position) {
        result.push({
          left: leftPatterns[0],
          right: rightPatterns[0]
        });
        leftPatterns.splice(0, 1);
        rightPatterns.splice(0, 1);
        continue;
      }
      if (leftPatterns[currentPositionLeft].position > rightPatterns[0].position) {
        break;
      }
      while (leftPatterns[currentPositionLeft].position < rightPatterns[0].position) {
        currentPositionLeft++;
        if (currentPositionLeft >= leftPatterns.length) {
          break;
        }
      }
      result.push({
        left: leftPatterns[currentPositionLeft - 1],
        right: rightPatterns[0]
      });
      leftPatterns.splice(currentPositionLeft - 1, 1);
      rightPatterns.splice(0, 1);
      currentPositionLeft = 0;
    }
    result.sort((a2, b) => a2.left.position - b.left.position);
    return result;
  }
  replacePattern(searchPattern, replacePattern, start_, length_, findAllResult = null) {
    let result = [];
    let i2;
    const output = {
      status: -1,
      searchPatternPositions: [],
      replacePatternPositions: []
    };
    const { start, length } = this.prepareFindParameters(start_, length_);
    if (findAllResult == null) {
      result = this.findAllIn([
        searchPattern
      ], start, length);
      if (result.length == 0) {
        return output;
      }
    } else {
      result = findAllResult;
    }
    output.searchPatternPositions.push(...Array.from(result, (element) => element.position));
    const patternDifference = searchPattern.length - replacePattern.length;
    const changedBuffer = new ArrayBuffer(this.view.length - result.length * patternDifference);
    const changedView = new Uint8Array(changedBuffer);
    changedView.set(new Uint8Array(this.buffer, 0, start));
    for (i2 = 0; i2 < result.length; i2++) {
      const currentPosition = i2 == 0 ? start : result[i2 - 1].position;
      changedView.set(new Uint8Array(this.buffer, currentPosition, result[i2].position - searchPattern.length - currentPosition), currentPosition - i2 * patternDifference);
      changedView.set(replacePattern.view, result[i2].position - searchPattern.length - i2 * patternDifference);
      output.replacePatternPositions.push(result[i2].position - searchPattern.length - i2 * patternDifference);
    }
    i2--;
    changedView.set(new Uint8Array(this.buffer, result[i2].position, this.length - result[i2].position), result[i2].position - searchPattern.length + replacePattern.length - i2 * patternDifference);
    this.buffer = changedBuffer;
    this.view = new Uint8Array(this.buffer);
    output.status = 1;
    return output;
  }
  skipPatterns(patterns, start_, length_, backward_) {
    const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);
    let result = start;
    for (let k = 0; k < patterns.length; k++) {
      const patternLength = patterns[k].length;
      const equalStart = backward ? result - patternLength : result;
      let equal = true;
      for (let j = 0; j < patternLength; j++) {
        if (this.view[j + equalStart] != patterns[k].view[j]) {
          equal = false;
          break;
        }
      }
      if (equal) {
        k = -1;
        if (backward) {
          result -= patternLength;
          if (result <= 0) return result;
        } else {
          result += patternLength;
          if (result >= start + length) return result;
        }
      }
    }
    return result;
  }
  skipNotPatterns(patterns, start_, length_, backward_) {
    const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);
    let result = -1;
    for (let i2 = 0; i2 < length; i2++) {
      for (let k = 0; k < patterns.length; k++) {
        const patternLength = patterns[k].length;
        const equalStart = backward ? start - i2 - patternLength : start + i2;
        let equal = true;
        for (let j = 0; j < patternLength; j++) {
          if (this.view[j + equalStart] != patterns[k].view[j]) {
            equal = false;
            break;
          }
        }
        if (equal) {
          result = backward ? start - i2 : start + i2;
          break;
        }
      }
      if (result != -1) {
        break;
      }
    }
    return result;
  }
  prepareFindParameters(start = null, length = null, backward = false) {
    if (start === null) {
      start = backward ? this.length : 0;
    }
    if (start > this.length) {
      start = this.length;
    }
    if (backward) {
      if (length === null) {
        length = start;
      }
      if (length > start) {
        length = start;
      }
    } else {
      if (length === null) {
        length = this.length - start;
      }
      if (length > this.length - start) {
        length = this.length - start;
      }
    }
    return {
      start,
      length,
      backward
    };
  }
};

// deno:https://unpkg.com/bytestreamjs@2.0.1/build/mjs/seq_stream.js?module
var pow2_24 = 16777216;
var SeqStream = class _SeqStream {
  constructor(parameters = {}) {
    this._stream = new ByteStream();
    this._length = 0;
    this._start = 0;
    this.backward = false;
    this.appendBlock = 0;
    this.prevLength = 0;
    this.prevStart = 0;
    if ("view" in parameters) {
      this.stream = new ByteStream({
        view: parameters.view
      });
    } else if ("buffer" in parameters) {
      this.stream = new ByteStream({
        buffer: parameters.buffer
      });
    } else if ("string" in parameters) {
      this.stream = new ByteStream({
        string: parameters.string
      });
    } else if ("hexstring" in parameters) {
      this.stream = new ByteStream({
        hexstring: parameters.hexstring
      });
    } else if ("stream" in parameters) {
      this.stream = parameters.stream.slice();
    } else {
      this.stream = new ByteStream();
    }
    if ("backward" in parameters && parameters.backward) {
      this.backward = parameters.backward;
      this._start = this.stream.length;
    }
    if ("length" in parameters && parameters.length > 0) {
      this._length = parameters.length;
    }
    if ("start" in parameters && parameters.start && parameters.start > 0) {
      this._start = parameters.start;
    }
    if ("appendBlock" in parameters && parameters.appendBlock && parameters.appendBlock > 0) {
      this.appendBlock = parameters.appendBlock;
    }
  }
  set stream(value) {
    this._stream = value;
    this.prevLength = this._length;
    this._length = value.length;
    this.prevStart = this._start;
    this._start = 0;
  }
  get stream() {
    return this._stream;
  }
  set length(value) {
    this.prevLength = this._length;
    this._length = value;
  }
  get length() {
    if (this.appendBlock) {
      return this.start;
    }
    return this._length;
  }
  set start(value) {
    if (value > this.stream.length) return;
    this.prevStart = this._start;
    this.prevLength = this._length;
    this._length -= this.backward ? this._start - value : value - this._start;
    this._start = value;
  }
  get start() {
    return this._start;
  }
  get buffer() {
    return this._stream.buffer.slice(0, this._length);
  }
  resetPosition() {
    this._start = this.prevStart;
    this._length = this.prevLength;
  }
  findPattern(pattern, gap = null) {
    if (gap == null || gap > this.length) {
      gap = this.length;
    }
    const result = this.stream.findPattern(pattern, this.start, this.length, this.backward);
    if (result == -1) return result;
    if (this.backward) {
      if (result < this.start - pattern.length - gap) {
        return -1;
      }
    } else {
      if (result > this.start + pattern.length + gap) {
        return -1;
      }
    }
    this.start = result;
    return result;
  }
  findFirstIn(patterns, gap = null) {
    if (gap == null || gap > this.length) {
      gap = this.length;
    }
    const result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);
    if (result.id == -1) return result;
    if (this.backward) {
      if (result.position < this.start - patterns[result.id].length - gap) {
        return {
          id: -1,
          position: this.backward ? 0 : this.start + this.length
        };
      }
    } else {
      if (result.position > this.start + patterns[result.id].length + gap) {
        return {
          id: -1,
          position: this.backward ? 0 : this.start + this.length
        };
      }
    }
    this.start = result.position;
    return result;
  }
  findAllIn(patterns) {
    const start = this.backward ? this.start - this.length : this.start;
    return this.stream.findAllIn(patterns, start, this.length);
  }
  findFirstNotIn(patterns, gap = null) {
    if (gap == null || gap > this._length) {
      gap = this._length;
    }
    const result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);
    if (result.left.id == -1 && result.right.id == -1) {
      return result;
    }
    if (this.backward) {
      if (result.right.id != -1) {
        if (result.right.position < this._start - patterns[result.right.id].length - gap) {
          return {
            left: {
              id: -1,
              position: this._start
            },
            right: {
              id: -1,
              position: 0
            },
            value: new ByteStream()
          };
        }
      }
    } else {
      if (result.left.id != -1) {
        if (result.left.position > this._start + patterns[result.left.id].length + gap) {
          return {
            left: {
              id: -1,
              position: this._start
            },
            right: {
              id: -1,
              position: 0
            },
            value: new ByteStream()
          };
        }
      }
    }
    if (this.backward) {
      if (result.left.id == -1) {
        this.start = 0;
      } else {
        this.start = result.left.position;
      }
    } else {
      if (result.right.id == -1) {
        this.start = this._start + this._length;
      } else {
        this.start = result.right.position;
      }
    }
    return result;
  }
  findAllNotIn(patterns) {
    const start = this.backward ? this._start - this._length : this._start;
    return this._stream.findAllNotIn(patterns, start, this._length);
  }
  findFirstSequence(patterns, length = null, gap = null) {
    if (length == null || length > this._length) {
      length = this._length;
    }
    if (gap == null || gap > length) {
      gap = length;
    }
    const result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);
    if (result.value.length == 0) {
      return result;
    }
    if (this.backward) {
      if (result.position < this._start - result.value.length - gap) {
        return {
          position: -1,
          value: new ByteStream()
        };
      }
    } else {
      if (result.position > this._start + result.value.length + gap) {
        return {
          position: -1,
          value: new ByteStream()
        };
      }
    }
    this.start = result.position;
    return result;
  }
  findAllSequences(patterns) {
    const start = this.backward ? this.start - this.length : this.start;
    return this.stream.findAllSequences(patterns, start, this.length);
  }
  findPairedPatterns(leftPattern, rightPattern, gap = null) {
    if (gap == null || gap > this.length) {
      gap = this.length;
    }
    const start = this.backward ? this.start - this.length : this.start;
    const result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);
    if (result.length) {
      if (this.backward) {
        if (result[0].right < this.start - rightPattern.length - gap) {
          return [];
        }
      } else {
        if (result[0].left > this.start + leftPattern.length + gap) {
          return [];
        }
      }
    }
    return result;
  }
  findPairedArrays(leftPatterns, rightPatterns, gap = null) {
    if (gap == null || gap > this.length) {
      gap = this.length;
    }
    const start = this.backward ? this.start - this.length : this.start;
    const result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);
    if (result.length) {
      if (this.backward) {
        if (result[0].right.position < this.start - rightPatterns[result[0].right.id].length - gap) {
          return [];
        }
      } else {
        if (result[0].left.position > this.start + leftPatterns[result[0].left.id].length + gap) {
          return [];
        }
      }
    }
    return result;
  }
  replacePattern(searchPattern, replacePattern) {
    const start = this.backward ? this.start - this.length : this.start;
    return this.stream.replacePattern(searchPattern, replacePattern, start, this.length);
  }
  skipPatterns(patterns) {
    const result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);
    this.start = result;
    return result;
  }
  skipNotPatterns(patterns) {
    const result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);
    if (result == -1) return -1;
    this.start = result;
    return result;
  }
  append(stream) {
    this.beforeAppend(stream.length);
    this._stream.view.set(stream.view, this._start);
    this._length += stream.length * 2;
    this.start = this._start + stream.length;
    this.prevLength -= stream.length * 2;
  }
  appendView(view) {
    this.beforeAppend(view.length);
    this._stream.view.set(view, this._start);
    this._length += view.length * 2;
    this.start = this._start + view.length;
    this.prevLength -= view.length * 2;
  }
  appendChar(char) {
    this.beforeAppend(1);
    this._stream.view[this._start] = char;
    this._length += 2;
    this.start = this._start + 1;
    this.prevLength -= 2;
  }
  appendUint16(number) {
    this.beforeAppend(2);
    const value = new Uint16Array([
      number
    ]);
    const view = new Uint8Array(value.buffer);
    this.stream.view[this._start] = view[1];
    this._stream.view[this._start + 1] = view[0];
    this._length += 4;
    this.start = this._start + 2;
    this.prevLength -= 4;
  }
  appendUint24(number) {
    this.beforeAppend(3);
    const value = new Uint32Array([
      number
    ]);
    const view = new Uint8Array(value.buffer);
    this._stream.view[this._start] = view[2];
    this._stream.view[this._start + 1] = view[1];
    this._stream.view[this._start + 2] = view[0];
    this._length += 6;
    this.start = this._start + 3;
    this.prevLength -= 6;
  }
  appendUint32(number) {
    this.beforeAppend(4);
    const value = new Uint32Array([
      number
    ]);
    const view = new Uint8Array(value.buffer);
    this._stream.view[this._start] = view[3];
    this._stream.view[this._start + 1] = view[2];
    this._stream.view[this._start + 2] = view[1];
    this._stream.view[this._start + 3] = view[0];
    this._length += 8;
    this.start = this._start + 4;
    this.prevLength -= 8;
  }
  appendInt16(number) {
    this.beforeAppend(2);
    const value = new Int16Array([
      number
    ]);
    const view = new Uint8Array(value.buffer);
    this._stream.view[this._start] = view[1];
    this._stream.view[this._start + 1] = view[0];
    this._length += 4;
    this.start = this._start + 2;
    this.prevLength -= 4;
  }
  appendInt32(number) {
    this.beforeAppend(4);
    const value = new Int32Array([
      number
    ]);
    const view = new Uint8Array(value.buffer);
    this._stream.view[this._start] = view[3];
    this._stream.view[this._start + 1] = view[2];
    this._stream.view[this._start + 2] = view[1];
    this._stream.view[this._start + 3] = view[0];
    this._length += 8;
    this.start = this._start + 4;
    this.prevLength -= 8;
  }
  getBlock(size, changeLength = true) {
    if (this._length <= 0) {
      return new Uint8Array(0);
    }
    if (this._length < size) {
      size = this._length;
    }
    let result;
    if (this.backward) {
      const view = this._stream.view.subarray(this._length - size, this._length);
      result = new Uint8Array(size);
      for (let i2 = 0; i2 < size; i2++) {
        result[size - 1 - i2] = view[i2];
      }
    } else {
      result = this._stream.view.subarray(this._start, this._start + size);
    }
    if (changeLength) {
      this.start += this.backward ? -1 * size : size;
    }
    return result;
  }
  getUint16(changeLength = true) {
    const block = this.getBlock(2, changeLength);
    if (block.length < 2) return 0;
    return block[0] << 8 | block[1];
  }
  getInt16(changeLength = true) {
    const num = this.getUint16(changeLength);
    const negative = 32768;
    if (num & negative) {
      return -(negative - (num ^ negative));
    }
    return num;
  }
  getUint24(changeLength = true) {
    const block = this.getBlock(4, changeLength);
    if (block.length < 3) return 0;
    return block[0] << 16 | block[1] << 8 | block[2];
  }
  getUint32(changeLength = true) {
    const block = this.getBlock(4, changeLength);
    if (block.length < 4) return 0;
    return block[0] * pow2_24 + (block[1] << 16) + (block[2] << 8) + block[3];
  }
  getInt32(changeLength = true) {
    const num = this.getUint32(changeLength);
    const negative = 2147483648;
    if (num & negative) {
      return -(negative - (num ^ negative));
    }
    return num;
  }
  beforeAppend(size) {
    if (this._start + size > this._stream.length) {
      if (size > this.appendBlock) {
        this.appendBlock = size + _SeqStream.APPEND_BLOCK;
      }
      this._stream.realloc(this._stream.length + this.appendBlock);
    }
  }
};
SeqStream.APPEND_BLOCK = 1e3;

// deno:https://unpkg.com/pkijs@3.0.15/build/index.es.js?module
var EMPTY_BUFFER2 = new ArrayBuffer(0);
var EMPTY_STRING2 = "";
var ArgumentError = class _ArgumentError extends TypeError {
  constructor() {
    super(...arguments);
    this.name = _ArgumentError.NAME;
  }
  static isType(value, type) {
    if (typeof type === "string") {
      if (type === "Array" && Array.isArray(value)) {
        return true;
      } else if (type === "ArrayBuffer" && value instanceof ArrayBuffer) {
        return true;
      } else if (type === "ArrayBufferView" && ArrayBuffer.isView(value)) {
        return true;
      } else if (typeof value === type) {
        return true;
      }
    } else if (value instanceof type) {
      return true;
    }
    return false;
  }
  static assert(value, name, ...types2) {
    for (const type of types2) {
      if (this.isType(value, type)) {
        return;
      }
    }
    const typeNames = types2.map((o2) => o2 instanceof Function && "name" in o2 ? o2.name : `${o2}`);
    throw new _ArgumentError(`Parameter '${name}' is not of type ${typeNames.length > 1 ? `(${typeNames.join(" or ")})` : typeNames[0]}`);
  }
};
ArgumentError.NAME = "ArgumentError";
var ParameterError = class _ParameterError extends TypeError {
  constructor(field, target2 = null, message2) {
    super();
    this.name = _ParameterError.NAME;
    this.field = field;
    if (target2) {
      this.target = target2;
    }
    if (message2) {
      this.message = message2;
    } else {
      this.message = `Absent mandatory parameter '${field}' ${target2 ? ` in '${target2}'` : EMPTY_STRING2}`;
    }
  }
  static assert(...args) {
    let target2 = null;
    let params;
    let fields;
    if (typeof args[0] === "string") {
      target2 = args[0];
      params = args[1];
      fields = args.slice(2);
    } else {
      params = args[0];
      fields = args.slice(1);
    }
    ArgumentError.assert(params, "parameters", "object");
    for (const field of fields) {
      const value = params[field];
      if (value === void 0 || value === null) {
        throw new _ParameterError(field, target2);
      }
    }
  }
  static assertEmpty(value, name, target2) {
    if (value === void 0 || value === null) {
      throw new _ParameterError(name, target2);
    }
  }
};
ParameterError.NAME = "ParameterError";
var AsnError = class _AsnError extends Error {
  static assertSchema(asn1, target2) {
    if (!asn1.verified) {
      throw new Error(`Object's schema was not verified against input data for ${target2}`);
    }
  }
  static assert(asn, target2) {
    if (asn.offset === -1) {
      throw new _AsnError(`Error during parsing of ASN.1 data. Data is not correct for '${target2}'.`);
    }
  }
  constructor(message2) {
    super(message2);
    this.name = "AsnError";
  }
};
var PkiObject = class {
  static blockName() {
    return this.CLASS_NAME;
  }
  static fromBER(raw) {
    const asn1 = fromBER(raw);
    AsnError.assert(asn1, this.name);
    try {
      return new this({
        schema: asn1.result
      });
    } catch (e2) {
      throw new AsnError(`Cannot create '${this.CLASS_NAME}' from ASN.1 object`);
    }
  }
  static defaultValues(memberName) {
    throw new Error(`Invalid member name for ${this.CLASS_NAME} class: ${memberName}`);
  }
  static schema(parameters = {}) {
    throw new Error(`Method '${this.CLASS_NAME}.schema' should be overridden`);
  }
  get className() {
    return this.constructor.CLASS_NAME;
  }
  toString(encoding = "hex") {
    let schema;
    try {
      schema = this.toSchema();
    } catch {
      schema = this.toSchema(true);
    }
    return Convert.ToString(schema.toBER(), encoding);
  }
};
PkiObject.CLASS_NAME = "PkiObject";
function stringPrep(inputString) {
  let isSpace = false;
  let cutResult = EMPTY_STRING2;
  const result = inputString.trim();
  for (let i2 = 0; i2 < result.length; i2++) {
    if (result.charCodeAt(i2) === 32) {
      if (isSpace === false) isSpace = true;
    } else {
      if (isSpace) {
        cutResult += " ";
        isSpace = false;
      }
      cutResult += result[i2];
    }
  }
  return cutResult.toLowerCase();
}
var TYPE$5 = "type";
var VALUE$6 = "value";
var AttributeTypeAndValue = class _AttributeTypeAndValue extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = getParametersValue(parameters, TYPE$5, _AttributeTypeAndValue.defaultValues(TYPE$5));
    this.value = getParametersValue(parameters, VALUE$6, _AttributeTypeAndValue.defaultValues(VALUE$6));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE$5:
        return EMPTY_STRING2;
      case VALUE$6:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.type || EMPTY_STRING2
        }),
        new Any({
          name: names.value || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      TYPE$5,
      "typeValue"
    ]);
    const asn1 = compareSchema(schema, schema, _AttributeTypeAndValue.schema({
      names: {
        type: TYPE$5,
        value: "typeValue"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.type = asn1.result.type.valueBlock.toString();
    this.value = asn1.result.typeValue;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.type
        }),
        this.value
      ]
    });
  }
  toJSON() {
    const _object = {
      type: this.type
    };
    if (Object.keys(this.value).length !== 0) {
      _object.value = this.value.toJSON();
    } else {
      _object.value = this.value;
    }
    return _object;
  }
  isEqual(compareTo) {
    const stringBlockNames = [
      Utf8String.blockName(),
      BmpString.blockName(),
      UniversalString.blockName(),
      NumericString.blockName(),
      PrintableString.blockName(),
      TeletexString.blockName(),
      VideotexString.blockName(),
      IA5String.blockName(),
      GraphicString.blockName(),
      VisibleString.blockName(),
      GeneralString.blockName(),
      CharacterString.blockName()
    ];
    if (compareTo instanceof ArrayBuffer) {
      return BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo);
    }
    if (compareTo.constructor.blockName() === _AttributeTypeAndValue.blockName()) {
      if (this.type !== compareTo.type) return false;
      const isStringPair = [
        false,
        false
      ];
      const thisName = this.value.constructor.blockName();
      for (const name of stringBlockNames) {
        if (thisName === name) {
          isStringPair[0] = true;
        }
        if (compareTo.value.constructor.blockName() === name) {
          isStringPair[1] = true;
        }
      }
      if (isStringPair[0] !== isStringPair[1]) {
        return false;
      }
      const isString = isStringPair[0] && isStringPair[1];
      if (isString) {
        const value1 = stringPrep(this.value.valueBlock.value);
        const value2 = stringPrep(compareTo.value.valueBlock.value);
        if (value1.localeCompare(value2) !== 0) return false;
      } else {
        if (!BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo.value.valueBeforeDecodeView)) return false;
      }
      return true;
    }
    return false;
  }
};
AttributeTypeAndValue.CLASS_NAME = "AttributeTypeAndValue";
var TYPE_AND_VALUES = "typesAndValues";
var VALUE_BEFORE_DECODE = "valueBeforeDecode";
var RDN = "RDN";
var RelativeDistinguishedNames = class _RelativeDistinguishedNames extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.typesAndValues = getParametersValue(parameters, TYPE_AND_VALUES, _RelativeDistinguishedNames.defaultValues(TYPE_AND_VALUES));
    this.valueBeforeDecode = getParametersValue(parameters, VALUE_BEFORE_DECODE, _RelativeDistinguishedNames.defaultValues(VALUE_BEFORE_DECODE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE_AND_VALUES:
        return [];
      case VALUE_BEFORE_DECODE:
        return EMPTY_BUFFER2;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TYPE_AND_VALUES:
        return memberValue.length === 0;
      case VALUE_BEFORE_DECODE:
        return memberValue.byteLength === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.repeatedSequence || EMPTY_STRING2,
          value: new Set2({
            value: [
              new Repeated({
                name: names.repeatedSet || EMPTY_STRING2,
                value: AttributeTypeAndValue.schema(names.typeAndValue || {})
              })
            ]
          })
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      RDN,
      TYPE_AND_VALUES
    ]);
    const asn1 = compareSchema(schema, schema, _RelativeDistinguishedNames.schema({
      names: {
        blockName: RDN,
        repeatedSet: TYPE_AND_VALUES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (TYPE_AND_VALUES in asn1.result) {
      this.typesAndValues = Array.from(asn1.result.typesAndValues, (element) => new AttributeTypeAndValue({
        schema: element
      }));
    }
    this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecodeView.slice().buffer;
  }
  toSchema() {
    if (this.valueBeforeDecode.byteLength === 0) {
      return new Sequence({
        value: [
          new Set2({
            value: Array.from(this.typesAndValues, (o2) => o2.toSchema())
          })
        ]
      });
    }
    const asn1 = fromBER(this.valueBeforeDecode);
    AsnError.assert(asn1, "RelativeDistinguishedNames");
    if (!(asn1.result instanceof Sequence)) {
      throw new Error("ASN.1 result should be SEQUENCE");
    }
    return asn1.result;
  }
  toJSON() {
    return {
      typesAndValues: Array.from(this.typesAndValues, (o2) => o2.toJSON())
    };
  }
  isEqual(compareTo) {
    if (compareTo instanceof _RelativeDistinguishedNames) {
      if (this.typesAndValues.length !== compareTo.typesAndValues.length) return false;
      for (const [index, typeAndValue] of this.typesAndValues.entries()) {
        if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false) return false;
      }
      return true;
    }
    if (compareTo instanceof ArrayBuffer) {
      return isEqualBuffer(this.valueBeforeDecode, compareTo);
    }
    return false;
  }
};
RelativeDistinguishedNames.CLASS_NAME = "RelativeDistinguishedNames";
var TYPE$4 = "type";
var VALUE$5 = "value";
function builtInStandardAttributes(parameters = {}, optional = false) {
  const names = getParametersValue(parameters, "names", {});
  return new Sequence({
    optional,
    value: [
      new Constructed({
        optional: true,
        idBlock: {
          tagClass: 2,
          tagNumber: 1
        },
        name: names.country_name || EMPTY_STRING2,
        value: [
          new Choice({
            value: [
              new NumericString(),
              new PrintableString()
            ]
          })
        ]
      }),
      new Constructed({
        optional: true,
        idBlock: {
          tagClass: 2,
          tagNumber: 2
        },
        name: names.administration_domain_name || EMPTY_STRING2,
        value: [
          new Choice({
            value: [
              new NumericString(),
              new PrintableString()
            ]
          })
        ]
      }),
      new Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        name: names.network_address || EMPTY_STRING2,
        isHexOnly: true
      }),
      new Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        name: names.terminal_identifier || EMPTY_STRING2,
        isHexOnly: true
      }),
      new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        name: names.private_domain_name || EMPTY_STRING2,
        value: [
          new Choice({
            value: [
              new NumericString(),
              new PrintableString()
            ]
          })
        ]
      }),
      new Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        name: names.organization_name || EMPTY_STRING2,
        isHexOnly: true
      }),
      new Primitive({
        optional: true,
        name: names.numeric_user_identifier || EMPTY_STRING2,
        idBlock: {
          tagClass: 3,
          tagNumber: 4
        },
        isHexOnly: true
      }),
      new Constructed({
        optional: true,
        name: names.personal_name || EMPTY_STRING2,
        idBlock: {
          tagClass: 3,
          tagNumber: 5
        },
        value: [
          new Primitive({
            idBlock: {
              tagClass: 3,
              tagNumber: 0
            },
            isHexOnly: true
          }),
          new Primitive({
            optional: true,
            idBlock: {
              tagClass: 3,
              tagNumber: 1
            },
            isHexOnly: true
          }),
          new Primitive({
            optional: true,
            idBlock: {
              tagClass: 3,
              tagNumber: 2
            },
            isHexOnly: true
          }),
          new Primitive({
            optional: true,
            idBlock: {
              tagClass: 3,
              tagNumber: 3
            },
            isHexOnly: true
          })
        ]
      }),
      new Constructed({
        optional: true,
        name: names.organizational_unit_names || EMPTY_STRING2,
        idBlock: {
          tagClass: 3,
          tagNumber: 6
        },
        value: [
          new Repeated({
            value: new PrintableString()
          })
        ]
      })
    ]
  });
}
function builtInDomainDefinedAttributes(optional = false) {
  return new Sequence({
    optional,
    value: [
      new PrintableString(),
      new PrintableString()
    ]
  });
}
function extensionAttributes(optional = false) {
  return new Set2({
    optional,
    value: [
      new Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        isHexOnly: true
      }),
      new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [
          new Any()
        ]
      })
    ]
  });
}
var GeneralName = class _GeneralName extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = getParametersValue(parameters, TYPE$4, _GeneralName.defaultValues(TYPE$4));
    this.value = getParametersValue(parameters, VALUE$5, _GeneralName.defaultValues(VALUE$5));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE$4:
        return 9;
      case VALUE$5:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TYPE$4:
        return memberValue === _GeneralName.defaultValues(memberName);
      case VALUE$5:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Choice({
      value: [
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          name: names.blockName || EMPTY_STRING2,
          value: [
            new ObjectIdentifier(),
            new Constructed({
              idBlock: {
                tagClass: 3,
                tagNumber: 0
              },
              value: [
                new Any()
              ]
            })
          ]
        }),
        new Primitive({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          }
        }),
        new Primitive({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          }
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 3
          },
          name: names.blockName || EMPTY_STRING2,
          value: [
            builtInStandardAttributes(names.builtInStandardAttributes || {}, false),
            builtInDomainDefinedAttributes(true),
            extensionAttributes(true)
          ]
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 4
          },
          name: names.blockName || EMPTY_STRING2,
          value: [
            RelativeDistinguishedNames.schema(names.directoryName || {})
          ]
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 5
          },
          name: names.blockName || EMPTY_STRING2,
          value: [
            new Constructed({
              optional: true,
              idBlock: {
                tagClass: 3,
                tagNumber: 0
              },
              value: [
                new Choice({
                  value: [
                    new TeletexString(),
                    new PrintableString(),
                    new UniversalString(),
                    new Utf8String(),
                    new BmpString()
                  ]
                })
              ]
            }),
            new Constructed({
              idBlock: {
                tagClass: 3,
                tagNumber: 1
              },
              value: [
                new Choice({
                  value: [
                    new TeletexString(),
                    new PrintableString(),
                    new UniversalString(),
                    new Utf8String(),
                    new BmpString()
                  ]
                })
              ]
            })
          ]
        }),
        new Primitive({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 6
          }
        }),
        new Primitive({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 7
          }
        }),
        new Primitive({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 8
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      "blockName",
      "otherName",
      "rfc822Name",
      "dNSName",
      "x400Address",
      "directoryName",
      "ediPartyName",
      "uniformResourceIdentifier",
      "iPAddress",
      "registeredID"
    ]);
    const asn1 = compareSchema(schema, schema, _GeneralName.schema({
      names: {
        blockName: "blockName",
        otherName: "otherName",
        rfc822Name: "rfc822Name",
        dNSName: "dNSName",
        x400Address: "x400Address",
        directoryName: {
          names: {
            blockName: "directoryName"
          }
        },
        ediPartyName: "ediPartyName",
        uniformResourceIdentifier: "uniformResourceIdentifier",
        iPAddress: "iPAddress",
        registeredID: "registeredID"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.type = asn1.result.blockName.idBlock.tagNumber;
    switch (this.type) {
      case 0:
        this.value = asn1.result.blockName;
        break;
      case 1:
      case 2:
      case 6:
        {
          const value = asn1.result.blockName;
          value.idBlock.tagClass = 1;
          value.idBlock.tagNumber = 22;
          const valueBER = value.toBER(false);
          const asnValue = fromBER(valueBER);
          AsnError.assert(asnValue, "GeneralName value");
          this.value = asnValue.result.valueBlock.value;
        }
        break;
      case 3:
        this.value = asn1.result.blockName;
        break;
      case 4:
        this.value = new RelativeDistinguishedNames({
          schema: asn1.result.directoryName
        });
        break;
      case 5:
        this.value = asn1.result.ediPartyName;
        break;
      case 7:
        this.value = new OctetString({
          valueHex: asn1.result.blockName.valueBlock.valueHex
        });
        break;
      case 8:
        {
          const value = asn1.result.blockName;
          value.idBlock.tagClass = 1;
          value.idBlock.tagNumber = 6;
          const valueBER = value.toBER(false);
          const asnValue = fromBER(valueBER);
          AsnError.assert(asnValue, "GeneralName registeredID");
          this.value = asnValue.result.valueBlock.toString();
        }
        break;
    }
  }
  toSchema() {
    switch (this.type) {
      case 0:
      case 3:
      case 5:
        return new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: this.type
          },
          value: [
            this.value
          ]
        });
      case 1:
      case 2:
      case 6: {
        const value = new IA5String({
          value: this.value
        });
        value.idBlock.tagClass = 3;
        value.idBlock.tagNumber = this.type;
        return value;
      }
      case 4:
        return new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 4
          },
          value: [
            this.value.toSchema()
          ]
        });
      case 7: {
        const value = this.value;
        value.idBlock.tagClass = 3;
        value.idBlock.tagNumber = this.type;
        return value;
      }
      case 8: {
        const value = new ObjectIdentifier({
          value: this.value
        });
        value.idBlock.tagClass = 3;
        value.idBlock.tagNumber = this.type;
        return value;
      }
      default:
        return _GeneralName.schema();
    }
  }
  toJSON() {
    const _object = {
      type: this.type,
      value: EMPTY_STRING2
    };
    if (typeof this.value === "string") _object.value = this.value;
    else {
      try {
        _object.value = this.value.toJSON();
      } catch (ex) {
      }
    }
    return _object;
  }
};
GeneralName.CLASS_NAME = "GeneralName";
var ACCESS_METHOD = "accessMethod";
var ACCESS_LOCATION = "accessLocation";
var CLEAR_PROPS$1v = [
  ACCESS_METHOD,
  ACCESS_LOCATION
];
var AccessDescription = class _AccessDescription extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.accessMethod = getParametersValue(parameters, ACCESS_METHOD, _AccessDescription.defaultValues(ACCESS_METHOD));
    this.accessLocation = getParametersValue(parameters, ACCESS_LOCATION, _AccessDescription.defaultValues(ACCESS_LOCATION));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ACCESS_METHOD:
        return EMPTY_STRING2;
      case ACCESS_LOCATION:
        return new GeneralName();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.accessMethod || EMPTY_STRING2
        }),
        GeneralName.schema(names.accessLocation || {})
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1v);
    const asn1 = compareSchema(schema, schema, _AccessDescription.schema({
      names: {
        accessMethod: ACCESS_METHOD,
        accessLocation: {
          names: {
            blockName: ACCESS_LOCATION
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.accessMethod = asn1.result.accessMethod.valueBlock.toString();
    this.accessLocation = new GeneralName({
      schema: asn1.result.accessLocation
    });
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.accessMethod
        }),
        this.accessLocation.toSchema()
      ]
    });
  }
  toJSON() {
    return {
      accessMethod: this.accessMethod,
      accessLocation: this.accessLocation.toJSON()
    };
  }
};
AccessDescription.CLASS_NAME = "AccessDescription";
var SECONDS = "seconds";
var MILLIS = "millis";
var MICROS = "micros";
var Accuracy = class _Accuracy extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (SECONDS in parameters) {
      this.seconds = getParametersValue(parameters, SECONDS, _Accuracy.defaultValues(SECONDS));
    }
    if (MILLIS in parameters) {
      this.millis = getParametersValue(parameters, MILLIS, _Accuracy.defaultValues(MILLIS));
    }
    if (MICROS in parameters) {
      this.micros = getParametersValue(parameters, MICROS, _Accuracy.defaultValues(MICROS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SECONDS:
      case MILLIS:
      case MICROS:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SECONDS:
      case MILLIS:
      case MICROS:
        return memberValue === _Accuracy.defaultValues(memberName);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      optional: true,
      value: [
        new Integer({
          optional: true,
          name: names.seconds || EMPTY_STRING2
        }),
        new Primitive({
          name: names.millis || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          }
        }),
        new Primitive({
          name: names.micros || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      SECONDS,
      MILLIS,
      MICROS
    ]);
    const asn1 = compareSchema(schema, schema, _Accuracy.schema({
      names: {
        seconds: SECONDS,
        millis: MILLIS,
        micros: MICROS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if ("seconds" in asn1.result) {
      this.seconds = asn1.result.seconds.valueBlock.valueDec;
    }
    if ("millis" in asn1.result) {
      const intMillis = new Integer({
        valueHex: asn1.result.millis.valueBlock.valueHex
      });
      this.millis = intMillis.valueBlock.valueDec;
    }
    if ("micros" in asn1.result) {
      const intMicros = new Integer({
        valueHex: asn1.result.micros.valueBlock.valueHex
      });
      this.micros = intMicros.valueBlock.valueDec;
    }
  }
  toSchema() {
    const outputArray = [];
    if (this.seconds !== void 0) outputArray.push(new Integer({
      value: this.seconds
    }));
    if (this.millis !== void 0) {
      const intMillis = new Integer({
        value: this.millis
      });
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        valueHex: intMillis.valueBlock.valueHexView
      }));
    }
    if (this.micros !== void 0) {
      const intMicros = new Integer({
        value: this.micros
      });
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: intMicros.valueBlock.valueHexView
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const _object = {};
    if (this.seconds !== void 0) _object.seconds = this.seconds;
    if (this.millis !== void 0) _object.millis = this.millis;
    if (this.micros !== void 0) _object.micros = this.micros;
    return _object;
  }
};
Accuracy.CLASS_NAME = "Accuracy";
var ALGORITHM_ID = "algorithmId";
var ALGORITHM_PARAMS = "algorithmParams";
var ALGORITHM$2 = "algorithm";
var PARAMS = "params";
var CLEAR_PROPS$1u = [
  ALGORITHM$2,
  PARAMS
];
var AlgorithmIdentifier = class _AlgorithmIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.algorithmId = getParametersValue(parameters, ALGORITHM_ID, _AlgorithmIdentifier.defaultValues(ALGORITHM_ID));
    if (ALGORITHM_PARAMS in parameters) {
      this.algorithmParams = getParametersValue(parameters, ALGORITHM_PARAMS, _AlgorithmIdentifier.defaultValues(ALGORITHM_PARAMS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ALGORITHM_ID:
        return EMPTY_STRING2;
      case ALGORITHM_PARAMS:
        return new Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ALGORITHM_ID:
        return memberValue === EMPTY_STRING2;
      case ALGORITHM_PARAMS:
        return memberValue instanceof Any;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      optional: names.optional || false,
      value: [
        new ObjectIdentifier({
          name: names.algorithmIdentifier || EMPTY_STRING2
        }),
        new Any({
          name: names.algorithmParams || EMPTY_STRING2,
          optional: true
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1u);
    const asn1 = compareSchema(schema, schema, _AlgorithmIdentifier.schema({
      names: {
        algorithmIdentifier: ALGORITHM$2,
        algorithmParams: PARAMS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.algorithmId = asn1.result.algorithm.valueBlock.toString();
    if (PARAMS in asn1.result) {
      this.algorithmParams = asn1.result.params;
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new ObjectIdentifier({
      value: this.algorithmId
    }));
    if (this.algorithmParams && !(this.algorithmParams instanceof Any)) {
      outputArray.push(this.algorithmParams);
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {
      algorithmId: this.algorithmId
    };
    if (this.algorithmParams && !(this.algorithmParams instanceof Any)) {
      object.algorithmParams = this.algorithmParams.toJSON();
    }
    return object;
  }
  isEqual(algorithmIdentifier) {
    if (!(algorithmIdentifier instanceof _AlgorithmIdentifier)) {
      return false;
    }
    if (this.algorithmId !== algorithmIdentifier.algorithmId) {
      return false;
    }
    if (this.algorithmParams) {
      if (algorithmIdentifier.algorithmParams) {
        return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);
      }
      return false;
    }
    if (algorithmIdentifier.algorithmParams) {
      return false;
    }
    return true;
  }
};
AlgorithmIdentifier.CLASS_NAME = "AlgorithmIdentifier";
var ALT_NAMES = "altNames";
var CLEAR_PROPS$1t = [
  ALT_NAMES
];
var AltName = class _AltName extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.altNames = getParametersValue(parameters, ALT_NAMES, _AltName.defaultValues(ALT_NAMES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ALT_NAMES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.altNames || EMPTY_STRING2,
          value: GeneralName.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1t);
    const asn1 = compareSchema(schema, schema, _AltName.schema({
      names: {
        altNames: ALT_NAMES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (ALT_NAMES in asn1.result) {
      this.altNames = Array.from(asn1.result.altNames, (element) => new GeneralName({
        schema: element
      }));
    }
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.altNames, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      altNames: Array.from(this.altNames, (o2) => o2.toJSON())
    };
  }
};
AltName.CLASS_NAME = "AltName";
var TYPE$3 = "type";
var VALUES$1 = "values";
var CLEAR_PROPS$1s = [
  TYPE$3,
  VALUES$1
];
var Attribute = class _Attribute extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = getParametersValue(parameters, TYPE$3, _Attribute.defaultValues(TYPE$3));
    this.values = getParametersValue(parameters, VALUES$1, _Attribute.defaultValues(VALUES$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE$3:
        return EMPTY_STRING2;
      case VALUES$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TYPE$3:
        return memberValue === EMPTY_STRING2;
      case VALUES$1:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.type || EMPTY_STRING2
        }),
        new Set2({
          name: names.setName || EMPTY_STRING2,
          value: [
            new Repeated({
              name: names.values || EMPTY_STRING2,
              value: new Any()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1s);
    const asn1 = compareSchema(schema, schema, _Attribute.schema({
      names: {
        type: TYPE$3,
        values: VALUES$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.type = asn1.result.type.valueBlock.toString();
    this.values = asn1.result.values;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.type
        }),
        new Set2({
          value: this.values
        })
      ]
    });
  }
  toJSON() {
    return {
      type: this.type,
      values: Array.from(this.values, (o2) => o2.toJSON())
    };
  }
};
Attribute.CLASS_NAME = "Attribute";
var NOT_BEFORE_TIME = "notBeforeTime";
var NOT_AFTER_TIME = "notAfterTime";
var CLEAR_PROPS$1r = [
  NOT_BEFORE_TIME,
  NOT_AFTER_TIME
];
var AttCertValidityPeriod = class _AttCertValidityPeriod extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.notBeforeTime = getParametersValue(parameters, NOT_BEFORE_TIME, _AttCertValidityPeriod.defaultValues(NOT_BEFORE_TIME));
    this.notAfterTime = getParametersValue(parameters, NOT_AFTER_TIME, _AttCertValidityPeriod.defaultValues(NOT_AFTER_TIME));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case NOT_BEFORE_TIME:
      case NOT_AFTER_TIME:
        return new Date(0, 0, 0);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new GeneralizedTime({
          name: names.notBeforeTime || EMPTY_STRING2
        }),
        new GeneralizedTime({
          name: names.notAfterTime || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1r);
    const asn1 = compareSchema(schema, schema, _AttCertValidityPeriod.schema({
      names: {
        notBeforeTime: NOT_BEFORE_TIME,
        notAfterTime: NOT_AFTER_TIME
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.notBeforeTime = asn1.result.notBeforeTime.toDate();
    this.notAfterTime = asn1.result.notAfterTime.toDate();
  }
  toSchema() {
    return new Sequence({
      value: [
        new GeneralizedTime({
          valueDate: this.notBeforeTime
        }),
        new GeneralizedTime({
          valueDate: this.notAfterTime
        })
      ]
    });
  }
  toJSON() {
    return {
      notBeforeTime: this.notBeforeTime,
      notAfterTime: this.notAfterTime
    };
  }
};
AttCertValidityPeriod.CLASS_NAME = "AttCertValidityPeriod";
var NAMES = "names";
var GENERAL_NAMES = "generalNames";
var GeneralNames = class _GeneralNames extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.names = getParametersValue(parameters, NAMES, _GeneralNames.defaultValues(NAMES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case "names":
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}, optional = false) {
    const names = getParametersValue(parameters, NAMES, {});
    return new Sequence({
      optional,
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.generalNames || EMPTY_STRING2,
          value: GeneralName.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      NAMES,
      GENERAL_NAMES
    ]);
    const asn1 = compareSchema(schema, schema, _GeneralNames.schema({
      names: {
        blockName: NAMES,
        generalNames: GENERAL_NAMES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.names = Array.from(asn1.result.generalNames, (element) => new GeneralName({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.names, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      names: Array.from(this.names, (o2) => o2.toJSON())
    };
  }
};
GeneralNames.CLASS_NAME = "GeneralNames";
var id_SubjectDirectoryAttributes = "2.5.29.9";
var id_SubjectKeyIdentifier = "2.5.29.14";
var id_KeyUsage = "2.5.29.15";
var id_PrivateKeyUsagePeriod = "2.5.29.16";
var id_SubjectAltName = "2.5.29.17";
var id_IssuerAltName = "2.5.29.18";
var id_BasicConstraints = "2.5.29.19";
var id_CRLNumber = "2.5.29.20";
var id_BaseCRLNumber = "2.5.29.27";
var id_CRLReason = "2.5.29.21";
var id_InvalidityDate = "2.5.29.24";
var id_IssuingDistributionPoint = "2.5.29.28";
var id_CertificateIssuer = "2.5.29.29";
var id_NameConstraints = "2.5.29.30";
var id_CRLDistributionPoints = "2.5.29.31";
var id_FreshestCRL = "2.5.29.46";
var id_CertificatePolicies = "2.5.29.32";
var id_AnyPolicy = "2.5.29.32.0";
var id_MicrosoftAppPolicies = "1.3.6.1.4.1.311.21.10";
var id_PolicyMappings = "2.5.29.33";
var id_AuthorityKeyIdentifier = "2.5.29.35";
var id_PolicyConstraints = "2.5.29.36";
var id_ExtKeyUsage = "2.5.29.37";
var id_InhibitAnyPolicy = "2.5.29.54";
var id_AuthorityInfoAccess = "1.3.6.1.5.5.7.1.1";
var id_SubjectInfoAccess = "1.3.6.1.5.5.7.1.11";
var id_SignedCertificateTimestampList = "1.3.6.1.4.1.11129.2.4.2";
var id_MicrosoftCertTemplateV2 = "1.3.6.1.4.1.311.21.7";
var id_MicrosoftCaVersion = "1.3.6.1.4.1.311.21.1";
var id_QCStatements = "1.3.6.1.5.5.7.1.3";
var id_ContentType_Data = "1.2.840.113549.1.7.1";
var id_ContentType_SignedData = "1.2.840.113549.1.7.2";
var id_ContentType_EnvelopedData = "1.2.840.113549.1.7.3";
var id_ContentType_EncryptedData = "1.2.840.113549.1.7.6";
var id_eContentType_TSTInfo = "1.2.840.113549.1.9.16.1.4";
var id_CertBag_X509Certificate = "1.2.840.113549.1.9.22.1";
var id_CertBag_SDSICertificate = "1.2.840.113549.1.9.22.2";
var id_CertBag_AttributeCertificate = "1.2.840.113549.1.9.22.3";
var id_CRLBag_X509CRL = "1.2.840.113549.1.9.23.1";
var id_pkix = "1.3.6.1.5.5.7";
var id_ad = `${id_pkix}.48`;
var id_PKIX_OCSP_Basic = `${id_ad}.1.1`;
var id_ad_caIssuers = `${id_ad}.2`;
var id_ad_ocsp = `${id_ad}.1`;
var KEY_IDENTIFIER$1 = "keyIdentifier";
var AUTHORITY_CERT_ISSUER = "authorityCertIssuer";
var AUTHORITY_CERT_SERIAL_NUMBER = "authorityCertSerialNumber";
var CLEAR_PROPS$1q = [
  KEY_IDENTIFIER$1,
  AUTHORITY_CERT_ISSUER,
  AUTHORITY_CERT_SERIAL_NUMBER
];
var AuthorityKeyIdentifier = class _AuthorityKeyIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (KEY_IDENTIFIER$1 in parameters) {
      this.keyIdentifier = getParametersValue(parameters, KEY_IDENTIFIER$1, _AuthorityKeyIdentifier.defaultValues(KEY_IDENTIFIER$1));
    }
    if (AUTHORITY_CERT_ISSUER in parameters) {
      this.authorityCertIssuer = getParametersValue(parameters, AUTHORITY_CERT_ISSUER, _AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_ISSUER));
    }
    if (AUTHORITY_CERT_SERIAL_NUMBER in parameters) {
      this.authorityCertSerialNumber = getParametersValue(parameters, AUTHORITY_CERT_SERIAL_NUMBER, _AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_SERIAL_NUMBER));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_IDENTIFIER$1:
        return new OctetString();
      case AUTHORITY_CERT_ISSUER:
        return [];
      case AUTHORITY_CERT_SERIAL_NUMBER:
        return new Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Primitive({
          name: names.keyIdentifier || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          }
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new Repeated({
              name: names.authorityCertIssuer || EMPTY_STRING2,
              value: GeneralName.schema()
            })
          ]
        }),
        new Primitive({
          name: names.authorityCertSerialNumber || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1q);
    const asn1 = compareSchema(schema, schema, _AuthorityKeyIdentifier.schema({
      names: {
        keyIdentifier: KEY_IDENTIFIER$1,
        authorityCertIssuer: AUTHORITY_CERT_ISSUER,
        authorityCertSerialNumber: AUTHORITY_CERT_SERIAL_NUMBER
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (KEY_IDENTIFIER$1 in asn1.result) this.keyIdentifier = new OctetString({
      valueHex: asn1.result.keyIdentifier.valueBlock.valueHex
    });
    if (AUTHORITY_CERT_ISSUER in asn1.result) this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, (o2) => new GeneralName({
      schema: o2
    }));
    if (AUTHORITY_CERT_SERIAL_NUMBER in asn1.result) this.authorityCertSerialNumber = new Integer({
      valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex
    });
  }
  toSchema() {
    const outputArray = [];
    if (this.keyIdentifier) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        valueHex: this.keyIdentifier.valueBlock.valueHexView
      }));
    }
    if (this.authorityCertIssuer) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.authorityCertIssuer, (o2) => o2.toSchema())
      }));
    }
    if (this.authorityCertSerialNumber) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        valueHex: this.authorityCertSerialNumber.valueBlock.valueHexView
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {};
    if (this.keyIdentifier) {
      object.keyIdentifier = this.keyIdentifier.toJSON();
    }
    if (this.authorityCertIssuer) {
      object.authorityCertIssuer = Array.from(this.authorityCertIssuer, (o2) => o2.toJSON());
    }
    if (this.authorityCertSerialNumber) {
      object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();
    }
    return object;
  }
};
AuthorityKeyIdentifier.CLASS_NAME = "AuthorityKeyIdentifier";
var PATH_LENGTH_CONSTRAINT = "pathLenConstraint";
var CA = "cA";
var BasicConstraints = class _BasicConstraints extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.cA = getParametersValue(parameters, CA, false);
    if (PATH_LENGTH_CONSTRAINT in parameters) {
      this.pathLenConstraint = getParametersValue(parameters, PATH_LENGTH_CONSTRAINT, 0);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CA:
        return false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Boolean2({
          optional: true,
          name: names.cA || EMPTY_STRING2
        }),
        new Integer({
          optional: true,
          name: names.pathLenConstraint || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      CA,
      PATH_LENGTH_CONSTRAINT
    ]);
    const asn1 = compareSchema(schema, schema, _BasicConstraints.schema({
      names: {
        cA: CA,
        pathLenConstraint: PATH_LENGTH_CONSTRAINT
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (CA in asn1.result) {
      this.cA = asn1.result.cA.valueBlock.value;
    }
    if (PATH_LENGTH_CONSTRAINT in asn1.result) {
      if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) {
        this.pathLenConstraint = asn1.result.pathLenConstraint;
      } else {
        this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;
      }
    }
  }
  toSchema() {
    const outputArray = [];
    if (this.cA !== _BasicConstraints.defaultValues(CA)) outputArray.push(new Boolean2({
      value: this.cA
    }));
    if (PATH_LENGTH_CONSTRAINT in this) {
      if (this.pathLenConstraint instanceof Integer) {
        outputArray.push(this.pathLenConstraint);
      } else {
        outputArray.push(new Integer({
          value: this.pathLenConstraint
        }));
      }
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {};
    if (this.cA !== _BasicConstraints.defaultValues(CA)) {
      object.cA = this.cA;
    }
    if (PATH_LENGTH_CONSTRAINT in this) {
      if (this.pathLenConstraint instanceof Integer) {
        object.pathLenConstraint = this.pathLenConstraint.toJSON();
      } else {
        object.pathLenConstraint = this.pathLenConstraint;
      }
    }
    return object;
  }
};
BasicConstraints.CLASS_NAME = "BasicConstraints";
var CERTIFICATE_INDEX = "certificateIndex";
var KEY_INDEX = "keyIndex";
var CAVersion = class _CAVersion extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certificateIndex = getParametersValue(parameters, CERTIFICATE_INDEX, _CAVersion.defaultValues(CERTIFICATE_INDEX));
    this.keyIndex = getParametersValue(parameters, KEY_INDEX, _CAVersion.defaultValues(KEY_INDEX));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERTIFICATE_INDEX:
      case KEY_INDEX:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema() {
    return new Integer();
  }
  fromSchema(schema) {
    if (schema.constructor.blockName() !== Integer.blockName()) {
      throw new Error("Object's schema was not verified against input data for CAVersion");
    }
    let value = schema.valueBlock.valueHex.slice(0);
    const valueView = new Uint8Array(value);
    switch (true) {
      case value.byteLength < 4:
        {
          const tempValue = new ArrayBuffer(4);
          const tempValueView = new Uint8Array(tempValue);
          tempValueView.set(valueView, 4 - value.byteLength);
          value = tempValue.slice(0);
        }
        break;
      case value.byteLength > 4:
        {
          const tempValue = new ArrayBuffer(4);
          const tempValueView = new Uint8Array(tempValue);
          tempValueView.set(valueView.slice(0, 4));
          value = tempValue.slice(0);
        }
        break;
    }
    const keyIndexBuffer = value.slice(0, 2);
    const keyIndexView8 = new Uint8Array(keyIndexBuffer);
    let temp = keyIndexView8[0];
    keyIndexView8[0] = keyIndexView8[1];
    keyIndexView8[1] = temp;
    const keyIndexView16 = new Uint16Array(keyIndexBuffer);
    this.keyIndex = keyIndexView16[0];
    const certificateIndexBuffer = value.slice(2);
    const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);
    temp = certificateIndexView8[0];
    certificateIndexView8[0] = certificateIndexView8[1];
    certificateIndexView8[1] = temp;
    const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);
    this.certificateIndex = certificateIndexView16[0];
  }
  toSchema() {
    const certificateIndexBuffer = new ArrayBuffer(2);
    const certificateIndexView = new Uint16Array(certificateIndexBuffer);
    certificateIndexView[0] = this.certificateIndex;
    const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);
    let temp = certificateIndexView8[0];
    certificateIndexView8[0] = certificateIndexView8[1];
    certificateIndexView8[1] = temp;
    const keyIndexBuffer = new ArrayBuffer(2);
    const keyIndexView = new Uint16Array(keyIndexBuffer);
    keyIndexView[0] = this.keyIndex;
    const keyIndexView8 = new Uint8Array(keyIndexBuffer);
    temp = keyIndexView8[0];
    keyIndexView8[0] = keyIndexView8[1];
    keyIndexView8[1] = temp;
    return new Integer({
      valueHex: utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)
    });
  }
  toJSON() {
    return {
      certificateIndex: this.certificateIndex,
      keyIndex: this.keyIndex
    };
  }
};
CAVersion.CLASS_NAME = "CAVersion";
var POLICY_QUALIFIER_ID = "policyQualifierId";
var QUALIFIER = "qualifier";
var CLEAR_PROPS$1p = [
  POLICY_QUALIFIER_ID,
  QUALIFIER
];
var PolicyQualifierInfo = class _PolicyQualifierInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.policyQualifierId = getParametersValue(parameters, POLICY_QUALIFIER_ID, _PolicyQualifierInfo.defaultValues(POLICY_QUALIFIER_ID));
    this.qualifier = getParametersValue(parameters, QUALIFIER, _PolicyQualifierInfo.defaultValues(QUALIFIER));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case POLICY_QUALIFIER_ID:
        return EMPTY_STRING2;
      case QUALIFIER:
        return new Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.policyQualifierId || EMPTY_STRING2
        }),
        new Any({
          name: names.qualifier || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1p);
    const asn1 = compareSchema(schema, schema, _PolicyQualifierInfo.schema({
      names: {
        policyQualifierId: POLICY_QUALIFIER_ID,
        qualifier: QUALIFIER
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();
    this.qualifier = asn1.result.qualifier;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.policyQualifierId
        }),
        this.qualifier
      ]
    });
  }
  toJSON() {
    return {
      policyQualifierId: this.policyQualifierId,
      qualifier: this.qualifier.toJSON()
    };
  }
};
PolicyQualifierInfo.CLASS_NAME = "PolicyQualifierInfo";
var POLICY_IDENTIFIER = "policyIdentifier";
var POLICY_QUALIFIERS = "policyQualifiers";
var CLEAR_PROPS$1o = [
  POLICY_IDENTIFIER,
  POLICY_QUALIFIERS
];
var PolicyInformation = class _PolicyInformation extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.policyIdentifier = getParametersValue(parameters, POLICY_IDENTIFIER, _PolicyInformation.defaultValues(POLICY_IDENTIFIER));
    if (POLICY_QUALIFIERS in parameters) {
      this.policyQualifiers = getParametersValue(parameters, POLICY_QUALIFIERS, _PolicyInformation.defaultValues(POLICY_QUALIFIERS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case POLICY_IDENTIFIER:
        return EMPTY_STRING2;
      case POLICY_QUALIFIERS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.policyIdentifier || EMPTY_STRING2
        }),
        new Sequence({
          optional: true,
          value: [
            new Repeated({
              name: names.policyQualifiers || EMPTY_STRING2,
              value: PolicyQualifierInfo.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1o);
    const asn1 = compareSchema(schema, schema, _PolicyInformation.schema({
      names: {
        policyIdentifier: POLICY_IDENTIFIER,
        policyQualifiers: POLICY_QUALIFIERS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();
    if (POLICY_QUALIFIERS in asn1.result) {
      this.policyQualifiers = Array.from(asn1.result.policyQualifiers, (element) => new PolicyQualifierInfo({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new ObjectIdentifier({
      value: this.policyIdentifier
    }));
    if (this.policyQualifiers) {
      outputArray.push(new Sequence({
        value: Array.from(this.policyQualifiers, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      policyIdentifier: this.policyIdentifier
    };
    if (this.policyQualifiers) res.policyQualifiers = Array.from(this.policyQualifiers, (o2) => o2.toJSON());
    return res;
  }
};
PolicyInformation.CLASS_NAME = "PolicyInformation";
var CERTIFICATE_POLICIES = "certificatePolicies";
var CLEAR_PROPS$1n = [
  CERTIFICATE_POLICIES
];
var CertificatePolicies = class _CertificatePolicies extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certificatePolicies = getParametersValue(parameters, CERTIFICATE_POLICIES, _CertificatePolicies.defaultValues(CERTIFICATE_POLICIES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERTIFICATE_POLICIES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.certificatePolicies || EMPTY_STRING2,
          value: PolicyInformation.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1n);
    const asn1 = compareSchema(schema, schema, _CertificatePolicies.schema({
      names: {
        certificatePolicies: CERTIFICATE_POLICIES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.certificatePolicies = Array.from(asn1.result.certificatePolicies, (element) => new PolicyInformation({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.certificatePolicies, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      certificatePolicies: Array.from(this.certificatePolicies, (o2) => o2.toJSON())
    };
  }
};
CertificatePolicies.CLASS_NAME = "CertificatePolicies";
var TEMPLATE_ID = "templateID";
var TEMPLATE_MAJOR_VERSION = "templateMajorVersion";
var TEMPLATE_MINOR_VERSION = "templateMinorVersion";
var CLEAR_PROPS$1m = [
  TEMPLATE_ID,
  TEMPLATE_MAJOR_VERSION,
  TEMPLATE_MINOR_VERSION
];
var CertificateTemplate = class _CertificateTemplate extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.templateID = getParametersValue(parameters, TEMPLATE_ID, _CertificateTemplate.defaultValues(TEMPLATE_ID));
    if (TEMPLATE_MAJOR_VERSION in parameters) {
      this.templateMajorVersion = getParametersValue(parameters, TEMPLATE_MAJOR_VERSION, _CertificateTemplate.defaultValues(TEMPLATE_MAJOR_VERSION));
    }
    if (TEMPLATE_MINOR_VERSION in parameters) {
      this.templateMinorVersion = getParametersValue(parameters, TEMPLATE_MINOR_VERSION, _CertificateTemplate.defaultValues(TEMPLATE_MINOR_VERSION));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TEMPLATE_ID:
        return EMPTY_STRING2;
      case TEMPLATE_MAJOR_VERSION:
      case TEMPLATE_MINOR_VERSION:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.templateID || EMPTY_STRING2
        }),
        new Integer({
          name: names.templateMajorVersion || EMPTY_STRING2,
          optional: true
        }),
        new Integer({
          name: names.templateMinorVersion || EMPTY_STRING2,
          optional: true
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1m);
    const asn1 = compareSchema(schema, schema, _CertificateTemplate.schema({
      names: {
        templateID: TEMPLATE_ID,
        templateMajorVersion: TEMPLATE_MAJOR_VERSION,
        templateMinorVersion: TEMPLATE_MINOR_VERSION
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.templateID = asn1.result.templateID.valueBlock.toString();
    if (TEMPLATE_MAJOR_VERSION in asn1.result) {
      this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;
    }
    if (TEMPLATE_MINOR_VERSION in asn1.result) {
      this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new ObjectIdentifier({
      value: this.templateID
    }));
    if (TEMPLATE_MAJOR_VERSION in this) {
      outputArray.push(new Integer({
        value: this.templateMajorVersion
      }));
    }
    if (TEMPLATE_MINOR_VERSION in this) {
      outputArray.push(new Integer({
        value: this.templateMinorVersion
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      templateID: this.templateID
    };
    if (TEMPLATE_MAJOR_VERSION in this) res.templateMajorVersion = this.templateMajorVersion;
    if (TEMPLATE_MINOR_VERSION in this) res.templateMinorVersion = this.templateMinorVersion;
    return res;
  }
};
var DISTRIBUTION_POINT$1 = "distributionPoint";
var DISTRIBUTION_POINT_NAMES$1 = "distributionPointNames";
var REASONS = "reasons";
var CRL_ISSUER = "cRLIssuer";
var CRL_ISSUER_NAMES = "cRLIssuerNames";
var CLEAR_PROPS$1l = [
  DISTRIBUTION_POINT$1,
  DISTRIBUTION_POINT_NAMES$1,
  REASONS,
  CRL_ISSUER,
  CRL_ISSUER_NAMES
];
var DistributionPoint = class _DistributionPoint extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (DISTRIBUTION_POINT$1 in parameters) {
      this.distributionPoint = getParametersValue(parameters, DISTRIBUTION_POINT$1, _DistributionPoint.defaultValues(DISTRIBUTION_POINT$1));
    }
    if (REASONS in parameters) {
      this.reasons = getParametersValue(parameters, REASONS, _DistributionPoint.defaultValues(REASONS));
    }
    if (CRL_ISSUER in parameters) {
      this.cRLIssuer = getParametersValue(parameters, CRL_ISSUER, _DistributionPoint.defaultValues(CRL_ISSUER));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DISTRIBUTION_POINT$1:
        return [];
      case REASONS:
        return new BitString();
      case CRL_ISSUER:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Choice({
              value: [
                new Constructed({
                  name: names.distributionPoint || EMPTY_STRING2,
                  optional: true,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                  },
                  value: [
                    new Repeated({
                      name: names.distributionPointNames || EMPTY_STRING2,
                      value: GeneralName.schema()
                    })
                  ]
                }),
                new Constructed({
                  name: names.distributionPoint || EMPTY_STRING2,
                  optional: true,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                  },
                  value: RelativeDistinguishedNames.schema().valueBlock.value
                })
              ]
            })
          ]
        }),
        new Primitive({
          name: names.reasons || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          }
        }),
        new Constructed({
          name: names.cRLIssuer || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: [
            new Repeated({
              name: names.cRLIssuerNames || EMPTY_STRING2,
              value: GeneralName.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1l);
    const asn1 = compareSchema(schema, schema, _DistributionPoint.schema({
      names: {
        distributionPoint: DISTRIBUTION_POINT$1,
        distributionPointNames: DISTRIBUTION_POINT_NAMES$1,
        reasons: REASONS,
        cRLIssuer: CRL_ISSUER,
        cRLIssuerNames: CRL_ISSUER_NAMES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (DISTRIBUTION_POINT$1 in asn1.result) {
      if (asn1.result.distributionPoint.idBlock.tagNumber === 0) {
        this.distributionPoint = Array.from(asn1.result.distributionPointNames, (element) => new GeneralName({
          schema: element
        }));
      }
      if (asn1.result.distributionPoint.idBlock.tagNumber === 1) {
        this.distributionPoint = new RelativeDistinguishedNames({
          schema: new Sequence({
            value: asn1.result.distributionPoint.valueBlock.value
          })
        });
      }
    }
    if (REASONS in asn1.result) {
      this.reasons = new BitString({
        valueHex: asn1.result.reasons.valueBlock.valueHex
      });
    }
    if (CRL_ISSUER in asn1.result) {
      this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, (element) => new GeneralName({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [];
    if (this.distributionPoint) {
      let internalValue;
      if (this.distributionPoint instanceof Array) {
        internalValue = new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: Array.from(this.distributionPoint, (o2) => o2.toSchema())
        });
      } else {
        internalValue = new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            this.distributionPoint.toSchema()
          ]
        });
      }
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          internalValue
        ]
      }));
    }
    if (this.reasons) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: this.reasons.valueBlock.valueHexView
      }));
    }
    if (this.cRLIssuer) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: Array.from(this.cRLIssuer, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {};
    if (this.distributionPoint) {
      if (this.distributionPoint instanceof Array) {
        object.distributionPoint = Array.from(this.distributionPoint, (o2) => o2.toJSON());
      } else {
        object.distributionPoint = this.distributionPoint.toJSON();
      }
    }
    if (this.reasons) {
      object.reasons = this.reasons.toJSON();
    }
    if (this.cRLIssuer) {
      object.cRLIssuer = Array.from(this.cRLIssuer, (o2) => o2.toJSON());
    }
    return object;
  }
};
DistributionPoint.CLASS_NAME = "DistributionPoint";
var DISTRIBUTION_POINTS = "distributionPoints";
var CLEAR_PROPS$1k = [
  DISTRIBUTION_POINTS
];
var CRLDistributionPoints = class _CRLDistributionPoints extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.distributionPoints = getParametersValue(parameters, DISTRIBUTION_POINTS, _CRLDistributionPoints.defaultValues(DISTRIBUTION_POINTS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DISTRIBUTION_POINTS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.distributionPoints || EMPTY_STRING2,
          value: DistributionPoint.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1k);
    const asn1 = compareSchema(schema, schema, _CRLDistributionPoints.schema({
      names: {
        distributionPoints: DISTRIBUTION_POINTS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.distributionPoints = Array.from(asn1.result.distributionPoints, (element) => new DistributionPoint({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.distributionPoints, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      distributionPoints: Array.from(this.distributionPoints, (o2) => o2.toJSON())
    };
  }
};
CRLDistributionPoints.CLASS_NAME = "CRLDistributionPoints";
var KEY_PURPOSES = "keyPurposes";
var CLEAR_PROPS$1j = [
  KEY_PURPOSES
];
var ExtKeyUsage = class _ExtKeyUsage extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyPurposes = getParametersValue(parameters, KEY_PURPOSES, _ExtKeyUsage.defaultValues(KEY_PURPOSES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_PURPOSES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.keyPurposes || EMPTY_STRING2,
          value: new ObjectIdentifier()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1j);
    const asn1 = compareSchema(schema, schema, _ExtKeyUsage.schema({
      names: {
        keyPurposes: KEY_PURPOSES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyPurposes = Array.from(asn1.result.keyPurposes, (element) => element.valueBlock.toString());
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.keyPurposes, (element) => new ObjectIdentifier({
        value: element
      }))
    });
  }
  toJSON() {
    return {
      keyPurposes: Array.from(this.keyPurposes)
    };
  }
};
ExtKeyUsage.CLASS_NAME = "ExtKeyUsage";
var ACCESS_DESCRIPTIONS = "accessDescriptions";
var InfoAccess = class _InfoAccess extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.accessDescriptions = getParametersValue(parameters, ACCESS_DESCRIPTIONS, _InfoAccess.defaultValues(ACCESS_DESCRIPTIONS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ACCESS_DESCRIPTIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.accessDescriptions || EMPTY_STRING2,
          value: AccessDescription.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      ACCESS_DESCRIPTIONS
    ]);
    const asn1 = compareSchema(schema, schema, _InfoAccess.schema({
      names: {
        accessDescriptions: ACCESS_DESCRIPTIONS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.accessDescriptions = Array.from(asn1.result.accessDescriptions, (element) => new AccessDescription({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.accessDescriptions, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      accessDescriptions: Array.from(this.accessDescriptions, (o2) => o2.toJSON())
    };
  }
};
InfoAccess.CLASS_NAME = "InfoAccess";
var DISTRIBUTION_POINT = "distributionPoint";
var DISTRIBUTION_POINT_NAMES = "distributionPointNames";
var ONLY_CONTAINS_USER_CERTS = "onlyContainsUserCerts";
var ONLY_CONTAINS_CA_CERTS = "onlyContainsCACerts";
var ONLY_SOME_REASON = "onlySomeReasons";
var INDIRECT_CRL = "indirectCRL";
var ONLY_CONTAINS_ATTRIBUTE_CERTS = "onlyContainsAttributeCerts";
var CLEAR_PROPS$1i = [
  DISTRIBUTION_POINT,
  DISTRIBUTION_POINT_NAMES,
  ONLY_CONTAINS_USER_CERTS,
  ONLY_CONTAINS_CA_CERTS,
  ONLY_SOME_REASON,
  INDIRECT_CRL,
  ONLY_CONTAINS_ATTRIBUTE_CERTS
];
var IssuingDistributionPoint = class _IssuingDistributionPoint extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (DISTRIBUTION_POINT in parameters) {
      this.distributionPoint = getParametersValue(parameters, DISTRIBUTION_POINT, _IssuingDistributionPoint.defaultValues(DISTRIBUTION_POINT));
    }
    this.onlyContainsUserCerts = getParametersValue(parameters, ONLY_CONTAINS_USER_CERTS, _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS));
    this.onlyContainsCACerts = getParametersValue(parameters, ONLY_CONTAINS_CA_CERTS, _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS));
    if (ONLY_SOME_REASON in parameters) {
      this.onlySomeReasons = getParametersValue(parameters, ONLY_SOME_REASON, _IssuingDistributionPoint.defaultValues(ONLY_SOME_REASON));
    }
    this.indirectCRL = getParametersValue(parameters, INDIRECT_CRL, _IssuingDistributionPoint.defaultValues(INDIRECT_CRL));
    this.onlyContainsAttributeCerts = getParametersValue(parameters, ONLY_CONTAINS_ATTRIBUTE_CERTS, _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DISTRIBUTION_POINT:
        return [];
      case ONLY_CONTAINS_USER_CERTS:
        return false;
      case ONLY_CONTAINS_CA_CERTS:
        return false;
      case ONLY_SOME_REASON:
        return 0;
      case INDIRECT_CRL:
        return false;
      case ONLY_CONTAINS_ATTRIBUTE_CERTS:
        return false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Choice({
              value: [
                new Constructed({
                  name: names.distributionPoint || EMPTY_STRING2,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                  },
                  value: [
                    new Repeated({
                      name: names.distributionPointNames || EMPTY_STRING2,
                      value: GeneralName.schema()
                    })
                  ]
                }),
                new Constructed({
                  name: names.distributionPoint || EMPTY_STRING2,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                  },
                  value: RelativeDistinguishedNames.schema().valueBlock.value
                })
              ]
            })
          ]
        }),
        new Primitive({
          name: names.onlyContainsUserCerts || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          }
        }),
        new Primitive({
          name: names.onlyContainsCACerts || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          }
        }),
        new Primitive({
          name: names.onlySomeReasons || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 3
          }
        }),
        new Primitive({
          name: names.indirectCRL || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 4
          }
        }),
        new Primitive({
          name: names.onlyContainsAttributeCerts || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 5
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1i);
    const asn1 = compareSchema(schema, schema, _IssuingDistributionPoint.schema({
      names: {
        distributionPoint: DISTRIBUTION_POINT,
        distributionPointNames: DISTRIBUTION_POINT_NAMES,
        onlyContainsUserCerts: ONLY_CONTAINS_USER_CERTS,
        onlyContainsCACerts: ONLY_CONTAINS_CA_CERTS,
        onlySomeReasons: ONLY_SOME_REASON,
        indirectCRL: INDIRECT_CRL,
        onlyContainsAttributeCerts: ONLY_CONTAINS_ATTRIBUTE_CERTS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (DISTRIBUTION_POINT in asn1.result) {
      switch (true) {
        case asn1.result.distributionPoint.idBlock.tagNumber === 0:
          this.distributionPoint = Array.from(asn1.result.distributionPointNames, (element) => new GeneralName({
            schema: element
          }));
          break;
        case asn1.result.distributionPoint.idBlock.tagNumber === 1:
          {
            this.distributionPoint = new RelativeDistinguishedNames({
              schema: new Sequence({
                value: asn1.result.distributionPoint.valueBlock.value
              })
            });
          }
          break;
        default:
          throw new Error("Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}");
      }
    }
    if (ONLY_CONTAINS_USER_CERTS in asn1.result) {
      const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);
      this.onlyContainsUserCerts = view[0] !== 0;
    }
    if (ONLY_CONTAINS_CA_CERTS in asn1.result) {
      const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);
      this.onlyContainsCACerts = view[0] !== 0;
    }
    if (ONLY_SOME_REASON in asn1.result) {
      const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);
      this.onlySomeReasons = view[0];
    }
    if (INDIRECT_CRL in asn1.result) {
      const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);
      this.indirectCRL = view[0] !== 0;
    }
    if (ONLY_CONTAINS_ATTRIBUTE_CERTS in asn1.result) {
      const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);
      this.onlyContainsAttributeCerts = view[0] !== 0;
    }
  }
  toSchema() {
    const outputArray = [];
    if (this.distributionPoint) {
      let value;
      if (this.distributionPoint instanceof Array) {
        value = new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: Array.from(this.distributionPoint, (o2) => o2.toSchema())
        });
      } else {
        value = this.distributionPoint.toSchema();
        value.idBlock.tagClass = 3;
        value.idBlock.tagNumber = 1;
      }
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          value
        ]
      }));
    }
    if (this.onlyContainsUserCerts !== _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: new Uint8Array([
          255
        ]).buffer
      }));
    }
    if (this.onlyContainsCACerts !== _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        valueHex: new Uint8Array([
          255
        ]).buffer
      }));
    }
    if (this.onlySomeReasons !== void 0) {
      const buffer = new ArrayBuffer(1);
      const view = new Uint8Array(buffer);
      view[0] = this.onlySomeReasons;
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        valueHex: buffer
      }));
    }
    if (this.indirectCRL !== _IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 4
        },
        valueHex: new Uint8Array([
          255
        ]).buffer
      }));
    }
    if (this.onlyContainsAttributeCerts !== _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 5
        },
        valueHex: new Uint8Array([
          255
        ]).buffer
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const obj = {};
    if (this.distributionPoint) {
      if (this.distributionPoint instanceof Array) {
        obj.distributionPoint = Array.from(this.distributionPoint, (o2) => o2.toJSON());
      } else {
        obj.distributionPoint = this.distributionPoint.toJSON();
      }
    }
    if (this.onlyContainsUserCerts !== _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {
      obj.onlyContainsUserCerts = this.onlyContainsUserCerts;
    }
    if (this.onlyContainsCACerts !== _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {
      obj.onlyContainsCACerts = this.onlyContainsCACerts;
    }
    if (ONLY_SOME_REASON in this) {
      obj.onlySomeReasons = this.onlySomeReasons;
    }
    if (this.indirectCRL !== _IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {
      obj.indirectCRL = this.indirectCRL;
    }
    if (this.onlyContainsAttributeCerts !== _IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {
      obj.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;
    }
    return obj;
  }
};
IssuingDistributionPoint.CLASS_NAME = "IssuingDistributionPoint";
var BASE = "base";
var MINIMUM = "minimum";
var MAXIMUM = "maximum";
var CLEAR_PROPS$1h = [
  BASE,
  MINIMUM,
  MAXIMUM
];
var GeneralSubtree = class _GeneralSubtree extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.base = getParametersValue(parameters, BASE, _GeneralSubtree.defaultValues(BASE));
    this.minimum = getParametersValue(parameters, MINIMUM, _GeneralSubtree.defaultValues(MINIMUM));
    if (MAXIMUM in parameters) {
      this.maximum = getParametersValue(parameters, MAXIMUM, _GeneralSubtree.defaultValues(MAXIMUM));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case BASE:
        return new GeneralName();
      case MINIMUM:
        return 0;
      case MAXIMUM:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        GeneralName.schema(names.base || {}),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Integer({
              name: names.minimum || EMPTY_STRING2
            })
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new Integer({
              name: names.maximum || EMPTY_STRING2
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1h);
    const asn1 = compareSchema(schema, schema, _GeneralSubtree.schema({
      names: {
        base: {
          names: {
            blockName: BASE
          }
        },
        minimum: MINIMUM,
        maximum: MAXIMUM
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.base = new GeneralName({
      schema: asn1.result.base
    });
    if (MINIMUM in asn1.result) {
      if (asn1.result.minimum.valueBlock.isHexOnly) this.minimum = asn1.result.minimum;
      else this.minimum = asn1.result.minimum.valueBlock.valueDec;
    }
    if (MAXIMUM in asn1.result) {
      if (asn1.result.maximum.valueBlock.isHexOnly) this.maximum = asn1.result.maximum;
      else this.maximum = asn1.result.maximum.valueBlock.valueDec;
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.base.toSchema());
    if (this.minimum !== 0) {
      let valueMinimum = 0;
      if (this.minimum instanceof Integer) {
        valueMinimum = this.minimum;
      } else {
        valueMinimum = new Integer({
          value: this.minimum
        });
      }
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          valueMinimum
        ]
      }));
    }
    if (MAXIMUM in this) {
      let valueMaximum = 0;
      if (this.maximum instanceof Integer) {
        valueMaximum = this.maximum;
      } else {
        valueMaximum = new Integer({
          value: this.maximum
        });
      }
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [
          valueMaximum
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      base: this.base.toJSON()
    };
    if (this.minimum !== 0) {
      if (typeof this.minimum === "number") {
        res.minimum = this.minimum;
      } else {
        res.minimum = this.minimum.toJSON();
      }
    }
    if (this.maximum !== void 0) {
      if (typeof this.maximum === "number") {
        res.maximum = this.maximum;
      } else {
        res.maximum = this.maximum.toJSON();
      }
    }
    return res;
  }
};
GeneralSubtree.CLASS_NAME = "GeneralSubtree";
var PERMITTED_SUBTREES = "permittedSubtrees";
var EXCLUDED_SUBTREES = "excludedSubtrees";
var CLEAR_PROPS$1g = [
  PERMITTED_SUBTREES,
  EXCLUDED_SUBTREES
];
var NameConstraints = class _NameConstraints extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (PERMITTED_SUBTREES in parameters) {
      this.permittedSubtrees = getParametersValue(parameters, PERMITTED_SUBTREES, _NameConstraints.defaultValues(PERMITTED_SUBTREES));
    }
    if (EXCLUDED_SUBTREES in parameters) {
      this.excludedSubtrees = getParametersValue(parameters, EXCLUDED_SUBTREES, _NameConstraints.defaultValues(EXCLUDED_SUBTREES));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case PERMITTED_SUBTREES:
      case EXCLUDED_SUBTREES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Repeated({
              name: names.permittedSubtrees || EMPTY_STRING2,
              value: GeneralSubtree.schema()
            })
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new Repeated({
              name: names.excludedSubtrees || EMPTY_STRING2,
              value: GeneralSubtree.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1g);
    const asn1 = compareSchema(schema, schema, _NameConstraints.schema({
      names: {
        permittedSubtrees: PERMITTED_SUBTREES,
        excludedSubtrees: EXCLUDED_SUBTREES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (PERMITTED_SUBTREES in asn1.result) this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, (element) => new GeneralSubtree({
      schema: element
    }));
    if (EXCLUDED_SUBTREES in asn1.result) this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, (element) => new GeneralSubtree({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    if (this.permittedSubtrees) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: Array.from(this.permittedSubtrees, (o2) => o2.toSchema())
      }));
    }
    if (this.excludedSubtrees) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.excludedSubtrees, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {};
    if (this.permittedSubtrees) {
      object.permittedSubtrees = Array.from(this.permittedSubtrees, (o2) => o2.toJSON());
    }
    if (this.excludedSubtrees) {
      object.excludedSubtrees = Array.from(this.excludedSubtrees, (o2) => o2.toJSON());
    }
    return object;
  }
};
NameConstraints.CLASS_NAME = "NameConstraints";
var REQUIRE_EXPLICIT_POLICY = "requireExplicitPolicy";
var INHIBIT_POLICY_MAPPING = "inhibitPolicyMapping";
var CLEAR_PROPS$1f = [
  REQUIRE_EXPLICIT_POLICY,
  INHIBIT_POLICY_MAPPING
];
var PolicyConstraints = class _PolicyConstraints extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (REQUIRE_EXPLICIT_POLICY in parameters) {
      this.requireExplicitPolicy = getParametersValue(parameters, REQUIRE_EXPLICIT_POLICY, _PolicyConstraints.defaultValues(REQUIRE_EXPLICIT_POLICY));
    }
    if (INHIBIT_POLICY_MAPPING in parameters) {
      this.inhibitPolicyMapping = getParametersValue(parameters, INHIBIT_POLICY_MAPPING, _PolicyConstraints.defaultValues(INHIBIT_POLICY_MAPPING));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case REQUIRE_EXPLICIT_POLICY:
        return 0;
      case INHIBIT_POLICY_MAPPING:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Primitive({
          name: names.requireExplicitPolicy || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          }
        }),
        new Primitive({
          name: names.inhibitPolicyMapping || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1f);
    const asn1 = compareSchema(schema, schema, _PolicyConstraints.schema({
      names: {
        requireExplicitPolicy: REQUIRE_EXPLICIT_POLICY,
        inhibitPolicyMapping: INHIBIT_POLICY_MAPPING
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (REQUIRE_EXPLICIT_POLICY in asn1.result) {
      const field1 = asn1.result.requireExplicitPolicy;
      field1.idBlock.tagClass = 1;
      field1.idBlock.tagNumber = 2;
      const ber1 = field1.toBER(false);
      const int1 = fromBER(ber1);
      AsnError.assert(int1, "Integer");
      this.requireExplicitPolicy = int1.result.valueBlock.valueDec;
    }
    if (INHIBIT_POLICY_MAPPING in asn1.result) {
      const field2 = asn1.result.inhibitPolicyMapping;
      field2.idBlock.tagClass = 1;
      field2.idBlock.tagNumber = 2;
      const ber2 = field2.toBER(false);
      const int2 = fromBER(ber2);
      AsnError.assert(int2, "Integer");
      this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;
    }
  }
  toSchema() {
    const outputArray = [];
    if (REQUIRE_EXPLICIT_POLICY in this) {
      const int1 = new Integer({
        value: this.requireExplicitPolicy
      });
      int1.idBlock.tagClass = 3;
      int1.idBlock.tagNumber = 0;
      outputArray.push(int1);
    }
    if (INHIBIT_POLICY_MAPPING in this) {
      const int2 = new Integer({
        value: this.inhibitPolicyMapping
      });
      int2.idBlock.tagClass = 3;
      int2.idBlock.tagNumber = 1;
      outputArray.push(int2);
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {};
    if (REQUIRE_EXPLICIT_POLICY in this) {
      res.requireExplicitPolicy = this.requireExplicitPolicy;
    }
    if (INHIBIT_POLICY_MAPPING in this) {
      res.inhibitPolicyMapping = this.inhibitPolicyMapping;
    }
    return res;
  }
};
PolicyConstraints.CLASS_NAME = "PolicyConstraints";
var ISSUER_DOMAIN_POLICY = "issuerDomainPolicy";
var SUBJECT_DOMAIN_POLICY = "subjectDomainPolicy";
var CLEAR_PROPS$1e = [
  ISSUER_DOMAIN_POLICY,
  SUBJECT_DOMAIN_POLICY
];
var PolicyMapping = class _PolicyMapping extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.issuerDomainPolicy = getParametersValue(parameters, ISSUER_DOMAIN_POLICY, _PolicyMapping.defaultValues(ISSUER_DOMAIN_POLICY));
    this.subjectDomainPolicy = getParametersValue(parameters, SUBJECT_DOMAIN_POLICY, _PolicyMapping.defaultValues(SUBJECT_DOMAIN_POLICY));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ISSUER_DOMAIN_POLICY:
        return EMPTY_STRING2;
      case SUBJECT_DOMAIN_POLICY:
        return EMPTY_STRING2;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.issuerDomainPolicy || EMPTY_STRING2
        }),
        new ObjectIdentifier({
          name: names.subjectDomainPolicy || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1e);
    const asn1 = compareSchema(schema, schema, _PolicyMapping.schema({
      names: {
        issuerDomainPolicy: ISSUER_DOMAIN_POLICY,
        subjectDomainPolicy: SUBJECT_DOMAIN_POLICY
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();
    this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.issuerDomainPolicy
        }),
        new ObjectIdentifier({
          value: this.subjectDomainPolicy
        })
      ]
    });
  }
  toJSON() {
    return {
      issuerDomainPolicy: this.issuerDomainPolicy,
      subjectDomainPolicy: this.subjectDomainPolicy
    };
  }
};
PolicyMapping.CLASS_NAME = "PolicyMapping";
var MAPPINGS = "mappings";
var CLEAR_PROPS$1d = [
  MAPPINGS
];
var PolicyMappings = class _PolicyMappings extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.mappings = getParametersValue(parameters, MAPPINGS, _PolicyMappings.defaultValues(MAPPINGS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case MAPPINGS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.mappings || EMPTY_STRING2,
          value: PolicyMapping.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1d);
    const asn1 = compareSchema(schema, schema, _PolicyMappings.schema({
      names: {
        mappings: MAPPINGS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.mappings = Array.from(asn1.result.mappings, (element) => new PolicyMapping({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.mappings, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      mappings: Array.from(this.mappings, (o2) => o2.toJSON())
    };
  }
};
PolicyMappings.CLASS_NAME = "PolicyMappings";
var NOT_BEFORE$1 = "notBefore";
var NOT_AFTER$1 = "notAfter";
var CLEAR_PROPS$1c = [
  NOT_BEFORE$1,
  NOT_AFTER$1
];
var PrivateKeyUsagePeriod = class _PrivateKeyUsagePeriod extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (NOT_BEFORE$1 in parameters) {
      this.notBefore = getParametersValue(parameters, NOT_BEFORE$1, _PrivateKeyUsagePeriod.defaultValues(NOT_BEFORE$1));
    }
    if (NOT_AFTER$1 in parameters) {
      this.notAfter = getParametersValue(parameters, NOT_AFTER$1, _PrivateKeyUsagePeriod.defaultValues(NOT_AFTER$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case NOT_BEFORE$1:
        return /* @__PURE__ */ new Date();
      case NOT_AFTER$1:
        return /* @__PURE__ */ new Date();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Primitive({
          name: names.notBefore || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          }
        }),
        new Primitive({
          name: names.notAfter || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1c);
    const asn1 = compareSchema(schema, schema, _PrivateKeyUsagePeriod.schema({
      names: {
        notBefore: NOT_BEFORE$1,
        notAfter: NOT_AFTER$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (NOT_BEFORE$1 in asn1.result) {
      const localNotBefore = new GeneralizedTime();
      localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);
      this.notBefore = localNotBefore.toDate();
    }
    if (NOT_AFTER$1 in asn1.result) {
      const localNotAfter = new GeneralizedTime({
        valueHex: asn1.result.notAfter.valueBlock.valueHex
      });
      localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);
      this.notAfter = localNotAfter.toDate();
    }
  }
  toSchema() {
    const outputArray = [];
    if (NOT_BEFORE$1 in this) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        valueHex: new GeneralizedTime({
          valueDate: this.notBefore
        }).valueBlock.valueHexView
      }));
    }
    if (NOT_AFTER$1 in this) {
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: new GeneralizedTime({
          valueDate: this.notAfter
        }).valueBlock.valueHexView
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {};
    if (this.notBefore) {
      res.notBefore = this.notBefore;
    }
    if (this.notAfter) {
      res.notAfter = this.notAfter;
    }
    return res;
  }
};
PrivateKeyUsagePeriod.CLASS_NAME = "PrivateKeyUsagePeriod";
var ID = "id";
var TYPE$2 = "type";
var VALUES = "values";
var QC_STATEMENT_CLEAR_PROPS = [
  ID,
  TYPE$2
];
var QC_STATEMENTS_CLEAR_PROPS = [
  VALUES
];
var QCStatement = class _QCStatement extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.id = getParametersValue(parameters, ID, _QCStatement.defaultValues(ID));
    if (TYPE$2 in parameters) {
      this.type = getParametersValue(parameters, TYPE$2, _QCStatement.defaultValues(TYPE$2));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ID:
        return EMPTY_STRING2;
      case TYPE$2:
        return new Null();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ID:
        return memberValue === EMPTY_STRING2;
      case TYPE$2:
        return memberValue instanceof Null;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.id || EMPTY_STRING2
        }),
        new Any({
          name: names.type || EMPTY_STRING2,
          optional: true
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, QC_STATEMENT_CLEAR_PROPS);
    const asn1 = compareSchema(schema, schema, _QCStatement.schema({
      names: {
        id: ID,
        type: TYPE$2
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.id = asn1.result.id.valueBlock.toString();
    if (TYPE$2 in asn1.result) this.type = asn1.result.type;
  }
  toSchema() {
    const value = [
      new ObjectIdentifier({
        value: this.id
      })
    ];
    if (TYPE$2 in this) value.push(this.type);
    return new Sequence({
      value
    });
  }
  toJSON() {
    const object = {
      id: this.id
    };
    if (this.type) {
      object.type = this.type.toJSON();
    }
    return object;
  }
};
QCStatement.CLASS_NAME = "QCStatement";
var QCStatements = class _QCStatements extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.values = getParametersValue(parameters, VALUES, _QCStatements.defaultValues(VALUES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VALUES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VALUES:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.values || EMPTY_STRING2,
          value: QCStatement.schema(names.value || {})
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, QC_STATEMENTS_CLEAR_PROPS);
    const asn1 = compareSchema(schema, schema, _QCStatements.schema({
      names: {
        values: VALUES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.values = Array.from(asn1.result.values, (element) => new QCStatement({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.values, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      values: Array.from(this.values, (o2) => o2.toJSON())
    };
  }
};
QCStatements.CLASS_NAME = "QCStatements";
var _a2;
var ECNamedCurves = class {
  static register(name, id, size) {
    this.namedCurves[name.toLowerCase()] = this.namedCurves[id] = {
      name,
      id,
      size
    };
  }
  static find(nameOrId) {
    return this.namedCurves[nameOrId.toLowerCase()] || null;
  }
};
_a2 = ECNamedCurves;
ECNamedCurves.namedCurves = {};
(() => {
  _a2.register("P-256", "1.2.840.10045.3.1.7", 32);
  _a2.register("P-384", "1.3.132.0.34", 48);
  _a2.register("P-521", "1.3.132.0.35", 66);
  _a2.register("brainpoolP256r1", "1.3.36.3.3.2.8.1.1.7", 32);
  _a2.register("brainpoolP384r1", "1.3.36.3.3.2.8.1.1.11", 48);
  _a2.register("brainpoolP512r1", "1.3.36.3.3.2.8.1.1.13", 64);
})();
var X = "x";
var Y = "y";
var NAMED_CURVE$1 = "namedCurve";
var ECPublicKey = class _ECPublicKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.x = getParametersValue(parameters, X, _ECPublicKey.defaultValues(X));
    this.y = getParametersValue(parameters, Y, _ECPublicKey.defaultValues(Y));
    this.namedCurve = getParametersValue(parameters, NAMED_CURVE$1, _ECPublicKey.defaultValues(NAMED_CURVE$1));
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case X:
      case Y:
        return EMPTY_BUFFER2;
      case NAMED_CURVE$1:
        return EMPTY_STRING2;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case X:
      case Y:
        return memberValue instanceof ArrayBuffer && isEqualBuffer(memberValue, _ECPublicKey.defaultValues(memberName));
      case NAMED_CURVE$1:
        return typeof memberValue === "string" && memberValue === _ECPublicKey.defaultValues(memberName);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema() {
    return new RawData();
  }
  fromSchema(schema1) {
    const view = BufferSourceConverter.toUint8Array(schema1);
    if (view[0] !== 4) {
      throw new Error("Object's schema was not verified against input data for ECPublicKey");
    }
    const namedCurve = ECNamedCurves.find(this.namedCurve);
    if (!namedCurve) {
      throw new Error(`Incorrect curve OID: ${this.namedCurve}`);
    }
    const coordinateLength = namedCurve.size;
    if (view.byteLength !== coordinateLength * 2 + 1) {
      throw new Error("Object's schema was not verified against input data for ECPublicKey");
    }
    this.namedCurve = namedCurve.name;
    this.x = view.slice(1, coordinateLength + 1).buffer;
    this.y = view.slice(1 + coordinateLength, coordinateLength * 2 + 1).buffer;
  }
  toSchema() {
    return new RawData({
      data: utilConcatBuf(new Uint8Array([
        4
      ]).buffer, this.x, this.y)
    });
  }
  toJSON() {
    const namedCurve = ECNamedCurves.find(this.namedCurve);
    return {
      crv: namedCurve ? namedCurve.name : this.namedCurve,
      x: toBase64(arrayBufferToString(this.x), true, true, false),
      y: toBase64(arrayBufferToString(this.y), true, true, false)
    };
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "crv", "x", "y");
    let coordinateLength = 0;
    const namedCurve = ECNamedCurves.find(json.crv);
    if (namedCurve) {
      this.namedCurve = namedCurve.id;
      coordinateLength = namedCurve.size;
    }
    const xConvertBuffer = stringToArrayBuffer(fromBase64(json.x, true));
    if (xConvertBuffer.byteLength < coordinateLength) {
      this.x = new ArrayBuffer(coordinateLength);
      const view = new Uint8Array(this.x);
      const convertBufferView = new Uint8Array(xConvertBuffer);
      view.set(convertBufferView, 1);
    } else {
      this.x = xConvertBuffer.slice(0, coordinateLength);
    }
    const yConvertBuffer = stringToArrayBuffer(fromBase64(json.y, true));
    if (yConvertBuffer.byteLength < coordinateLength) {
      this.y = new ArrayBuffer(coordinateLength);
      const view = new Uint8Array(this.y);
      const convertBufferView = new Uint8Array(yConvertBuffer);
      view.set(convertBufferView, 1);
    } else {
      this.y = yConvertBuffer.slice(0, coordinateLength);
    }
  }
};
ECPublicKey.CLASS_NAME = "ECPublicKey";
var MODULUS$1 = "modulus";
var PUBLIC_EXPONENT$1 = "publicExponent";
var CLEAR_PROPS$1b = [
  MODULUS$1,
  PUBLIC_EXPONENT$1
];
var RSAPublicKey = class _RSAPublicKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.modulus = getParametersValue(parameters, MODULUS$1, _RSAPublicKey.defaultValues(MODULUS$1));
    this.publicExponent = getParametersValue(parameters, PUBLIC_EXPONENT$1, _RSAPublicKey.defaultValues(PUBLIC_EXPONENT$1));
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case MODULUS$1:
        return new Integer();
      case PUBLIC_EXPONENT$1:
        return new Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.modulus || EMPTY_STRING2
        }),
        new Integer({
          name: names.publicExponent || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1b);
    const asn1 = compareSchema(schema, schema, _RSAPublicKey.schema({
      names: {
        modulus: MODULUS$1,
        publicExponent: PUBLIC_EXPONENT$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.modulus = asn1.result.modulus.convertFromDER(256);
    this.publicExponent = asn1.result.publicExponent;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.modulus.convertToDER(),
        this.publicExponent
      ]
    });
  }
  toJSON() {
    return {
      n: Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),
      e: Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView)
    };
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "n", "e");
    const array = stringToArrayBuffer(fromBase64(json.n, true));
    this.modulus = new Integer({
      valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength)))
    });
    this.publicExponent = new Integer({
      valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3)
    });
  }
};
RSAPublicKey.CLASS_NAME = "RSAPublicKey";
var ALGORITHM$1 = "algorithm";
var SUBJECT_PUBLIC_KEY = "subjectPublicKey";
var CLEAR_PROPS$1a = [
  ALGORITHM$1,
  SUBJECT_PUBLIC_KEY
];
var PublicKeyInfo = class _PublicKeyInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.algorithm = getParametersValue(parameters, ALGORITHM$1, _PublicKeyInfo.defaultValues(ALGORITHM$1));
    this.subjectPublicKey = getParametersValue(parameters, SUBJECT_PUBLIC_KEY, _PublicKeyInfo.defaultValues(SUBJECT_PUBLIC_KEY));
    const parsedKey = getParametersValue(parameters, "parsedKey", null);
    if (parsedKey) {
      this.parsedKey = parsedKey;
    }
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  get parsedKey() {
    if (this._parsedKey === void 0) {
      switch (this.algorithm.algorithmId) {
        case "1.2.840.10045.2.1":
          if ("algorithmParams" in this.algorithm) {
            if (this.algorithm.algorithmParams.constructor.blockName() === ObjectIdentifier.blockName()) {
              try {
                this._parsedKey = new ECPublicKey({
                  namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),
                  schema: this.subjectPublicKey.valueBlock.valueHexView
                });
              } catch (ex) {
              }
            }
          }
          break;
        case "1.2.840.113549.1.1.1":
          {
            const publicKeyASN1 = fromBER(this.subjectPublicKey.valueBlock.valueHexView);
            if (publicKeyASN1.offset !== -1) {
              try {
                this._parsedKey = new RSAPublicKey({
                  schema: publicKeyASN1.result
                });
              } catch (ex) {
              }
            }
          }
          break;
      }
      this._parsedKey || (this._parsedKey = null);
    }
    return this._parsedKey || void 0;
  }
  set parsedKey(value) {
    this._parsedKey = value;
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ALGORITHM$1:
        return new AlgorithmIdentifier();
      case SUBJECT_PUBLIC_KEY:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.algorithm || {}),
        new BitString({
          name: names.subjectPublicKey || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1a);
    const asn1 = compareSchema(schema, schema, _PublicKeyInfo.schema({
      names: {
        algorithm: {
          names: {
            blockName: ALGORITHM$1
          }
        },
        subjectPublicKey: SUBJECT_PUBLIC_KEY
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.algorithm = new AlgorithmIdentifier({
      schema: asn1.result.algorithm
    });
    this.subjectPublicKey = asn1.result.subjectPublicKey;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.algorithm.toSchema(),
        this.subjectPublicKey
      ]
    });
  }
  toJSON() {
    if (!this.parsedKey) {
      return {
        algorithm: this.algorithm.toJSON(),
        subjectPublicKey: this.subjectPublicKey.toJSON()
      };
    }
    const jwk = {};
    switch (this.algorithm.algorithmId) {
      case "1.2.840.10045.2.1":
        jwk.kty = "EC";
        break;
      case "1.2.840.113549.1.1.1":
        jwk.kty = "RSA";
        break;
    }
    const publicKeyJWK = this.parsedKey.toJSON();
    Object.assign(jwk, publicKeyJWK);
    return jwk;
  }
  fromJSON(json) {
    if ("kty" in json) {
      switch (json.kty.toUpperCase()) {
        case "EC":
          this.parsedKey = new ECPublicKey({
            json
          });
          this.algorithm = new AlgorithmIdentifier({
            algorithmId: "1.2.840.10045.2.1",
            algorithmParams: new ObjectIdentifier({
              value: this.parsedKey.namedCurve
            })
          });
          break;
        case "RSA":
          this.parsedKey = new RSAPublicKey({
            json
          });
          this.algorithm = new AlgorithmIdentifier({
            algorithmId: "1.2.840.113549.1.1.1",
            algorithmParams: new Null()
          });
          break;
        default:
          throw new Error(`Invalid value for "kty" parameter: ${json.kty}`);
      }
      this.subjectPublicKey = new BitString({
        valueHex: this.parsedKey.toSchema().toBER(false)
      });
    }
  }
  async importKey(publicKey, crypto2 = getCrypto(true)) {
    try {
      if (!publicKey) {
        throw new Error("Need to provide publicKey input parameter");
      }
      const exportedKey = await crypto2.exportKey("spki", publicKey);
      const asn1 = fromBER(exportedKey);
      try {
        this.fromSchema(asn1.result);
      } catch (exception) {
        throw new Error("Error during initializing object from schema");
      }
    } catch (e2) {
      const message2 = e2 instanceof Error ? e2.message : `${e2}`;
      throw new Error(`Error during exporting public key: ${message2}`);
    }
  }
};
PublicKeyInfo.CLASS_NAME = "PublicKeyInfo";
var VERSION$l = "version";
var PRIVATE_KEY$1 = "privateKey";
var NAMED_CURVE = "namedCurve";
var PUBLIC_KEY$1 = "publicKey";
var CLEAR_PROPS$19 = [
  VERSION$l,
  PRIVATE_KEY$1,
  NAMED_CURVE,
  PUBLIC_KEY$1
];
var ECPrivateKey = class _ECPrivateKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$l, _ECPrivateKey.defaultValues(VERSION$l));
    this.privateKey = getParametersValue(parameters, PRIVATE_KEY$1, _ECPrivateKey.defaultValues(PRIVATE_KEY$1));
    if (NAMED_CURVE in parameters) {
      this.namedCurve = getParametersValue(parameters, NAMED_CURVE, _ECPrivateKey.defaultValues(NAMED_CURVE));
    }
    if (PUBLIC_KEY$1 in parameters) {
      this.publicKey = getParametersValue(parameters, PUBLIC_KEY$1, _ECPrivateKey.defaultValues(PUBLIC_KEY$1));
    }
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$l:
        return 1;
      case PRIVATE_KEY$1:
        return new OctetString();
      case NAMED_CURVE:
        return EMPTY_STRING2;
      case PUBLIC_KEY$1:
        return new ECPublicKey();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$l:
        return memberValue === _ECPrivateKey.defaultValues(memberName);
      case PRIVATE_KEY$1:
        return memberValue.isEqual(_ECPrivateKey.defaultValues(memberName));
      case NAMED_CURVE:
        return memberValue === EMPTY_STRING2;
      case PUBLIC_KEY$1:
        return ECPublicKey.compareWithDefault(NAMED_CURVE, memberValue.namedCurve) && ECPublicKey.compareWithDefault("x", memberValue.x) && ECPublicKey.compareWithDefault("y", memberValue.y);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        new OctetString({
          name: names.privateKey || EMPTY_STRING2
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new ObjectIdentifier({
              name: names.namedCurve || EMPTY_STRING2
            })
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new BitString({
              name: names.publicKey || EMPTY_STRING2
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$19);
    const asn1 = compareSchema(schema, schema, _ECPrivateKey.schema({
      names: {
        version: VERSION$l,
        privateKey: PRIVATE_KEY$1,
        namedCurve: NAMED_CURVE,
        publicKey: PUBLIC_KEY$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.privateKey = asn1.result.privateKey;
    if (NAMED_CURVE in asn1.result) {
      this.namedCurve = asn1.result.namedCurve.valueBlock.toString();
    }
    if (PUBLIC_KEY$1 in asn1.result) {
      const publicKeyData = {
        schema: asn1.result.publicKey.valueBlock.valueHex
      };
      if (NAMED_CURVE in this) {
        publicKeyData.namedCurve = this.namedCurve;
      }
      this.publicKey = new ECPublicKey(publicKeyData);
    }
  }
  toSchema() {
    const outputArray = [
      new Integer({
        value: this.version
      }),
      this.privateKey
    ];
    if (this.namedCurve) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          new ObjectIdentifier({
            value: this.namedCurve
          })
        ]
      }));
    }
    if (this.publicKey) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [
          new BitString({
            valueHex: this.publicKey.toSchema().toBER(false)
          })
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    if (!this.namedCurve || _ECPrivateKey.compareWithDefault(NAMED_CURVE, this.namedCurve)) {
      throw new Error('Not enough information for making JSON: absent "namedCurve" value');
    }
    const curve = ECNamedCurves.find(this.namedCurve);
    const privateKeyJSON = {
      crv: curve ? curve.name : this.namedCurve,
      d: Convert.ToBase64Url(this.privateKey.valueBlock.valueHexView)
    };
    if (this.publicKey) {
      const publicKeyJSON = this.publicKey.toJSON();
      privateKeyJSON.x = publicKeyJSON.x;
      privateKeyJSON.y = publicKeyJSON.y;
    }
    return privateKeyJSON;
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "crv", "d");
    let coordinateLength = 0;
    const curve = ECNamedCurves.find(json.crv);
    if (curve) {
      this.namedCurve = curve.id;
      coordinateLength = curve.size;
    }
    const convertBuffer = Convert.FromBase64Url(json.d);
    if (convertBuffer.byteLength < coordinateLength) {
      const buffer = new ArrayBuffer(coordinateLength);
      const view = new Uint8Array(buffer);
      const convertBufferView = new Uint8Array(convertBuffer);
      view.set(convertBufferView, 1);
      this.privateKey = new OctetString({
        valueHex: buffer
      });
    } else {
      this.privateKey = new OctetString({
        valueHex: convertBuffer.slice(0, coordinateLength)
      });
    }
    if (json.x && json.y) {
      this.publicKey = new ECPublicKey({
        json
      });
    }
  }
};
ECPrivateKey.CLASS_NAME = "ECPrivateKey";
var PRIME = "prime";
var EXPONENT = "exponent";
var COEFFICIENT$1 = "coefficient";
var CLEAR_PROPS$18 = [
  PRIME,
  EXPONENT,
  COEFFICIENT$1
];
var OtherPrimeInfo = class _OtherPrimeInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.prime = getParametersValue(parameters, PRIME, _OtherPrimeInfo.defaultValues(PRIME));
    this.exponent = getParametersValue(parameters, EXPONENT, _OtherPrimeInfo.defaultValues(EXPONENT));
    this.coefficient = getParametersValue(parameters, COEFFICIENT$1, _OtherPrimeInfo.defaultValues(COEFFICIENT$1));
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case PRIME:
        return new Integer();
      case EXPONENT:
        return new Integer();
      case COEFFICIENT$1:
        return new Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.prime || EMPTY_STRING2
        }),
        new Integer({
          name: names.exponent || EMPTY_STRING2
        }),
        new Integer({
          name: names.coefficient || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$18);
    const asn1 = compareSchema(schema, schema, _OtherPrimeInfo.schema({
      names: {
        prime: PRIME,
        exponent: EXPONENT,
        coefficient: COEFFICIENT$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.prime = asn1.result.prime.convertFromDER();
    this.exponent = asn1.result.exponent.convertFromDER();
    this.coefficient = asn1.result.coefficient.convertFromDER();
  }
  toSchema() {
    return new Sequence({
      value: [
        this.prime.convertToDER(),
        this.exponent.convertToDER(),
        this.coefficient.convertToDER()
      ]
    });
  }
  toJSON() {
    return {
      r: Convert.ToBase64Url(this.prime.valueBlock.valueHexView),
      d: Convert.ToBase64Url(this.exponent.valueBlock.valueHexView),
      t: Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView)
    };
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "r", "d", "r");
    this.prime = new Integer({
      valueHex: Convert.FromBase64Url(json.r)
    });
    this.exponent = new Integer({
      valueHex: Convert.FromBase64Url(json.d)
    });
    this.coefficient = new Integer({
      valueHex: Convert.FromBase64Url(json.t)
    });
  }
};
OtherPrimeInfo.CLASS_NAME = "OtherPrimeInfo";
var VERSION$k = "version";
var MODULUS = "modulus";
var PUBLIC_EXPONENT = "publicExponent";
var PRIVATE_EXPONENT = "privateExponent";
var PRIME1 = "prime1";
var PRIME2 = "prime2";
var EXPONENT1 = "exponent1";
var EXPONENT2 = "exponent2";
var COEFFICIENT = "coefficient";
var OTHER_PRIME_INFOS = "otherPrimeInfos";
var CLEAR_PROPS$17 = [
  VERSION$k,
  MODULUS,
  PUBLIC_EXPONENT,
  PRIVATE_EXPONENT,
  PRIME1,
  PRIME2,
  EXPONENT1,
  EXPONENT2,
  COEFFICIENT,
  OTHER_PRIME_INFOS
];
var RSAPrivateKey = class _RSAPrivateKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$k, _RSAPrivateKey.defaultValues(VERSION$k));
    this.modulus = getParametersValue(parameters, MODULUS, _RSAPrivateKey.defaultValues(MODULUS));
    this.publicExponent = getParametersValue(parameters, PUBLIC_EXPONENT, _RSAPrivateKey.defaultValues(PUBLIC_EXPONENT));
    this.privateExponent = getParametersValue(parameters, PRIVATE_EXPONENT, _RSAPrivateKey.defaultValues(PRIVATE_EXPONENT));
    this.prime1 = getParametersValue(parameters, PRIME1, _RSAPrivateKey.defaultValues(PRIME1));
    this.prime2 = getParametersValue(parameters, PRIME2, _RSAPrivateKey.defaultValues(PRIME2));
    this.exponent1 = getParametersValue(parameters, EXPONENT1, _RSAPrivateKey.defaultValues(EXPONENT1));
    this.exponent2 = getParametersValue(parameters, EXPONENT2, _RSAPrivateKey.defaultValues(EXPONENT2));
    this.coefficient = getParametersValue(parameters, COEFFICIENT, _RSAPrivateKey.defaultValues(COEFFICIENT));
    if (OTHER_PRIME_INFOS in parameters) {
      this.otherPrimeInfos = getParametersValue(parameters, OTHER_PRIME_INFOS, _RSAPrivateKey.defaultValues(OTHER_PRIME_INFOS));
    }
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$k:
        return 0;
      case MODULUS:
        return new Integer();
      case PUBLIC_EXPONENT:
        return new Integer();
      case PRIVATE_EXPONENT:
        return new Integer();
      case PRIME1:
        return new Integer();
      case PRIME2:
        return new Integer();
      case EXPONENT1:
        return new Integer();
      case EXPONENT2:
        return new Integer();
      case COEFFICIENT:
        return new Integer();
      case OTHER_PRIME_INFOS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        new Integer({
          name: names.modulus || EMPTY_STRING2
        }),
        new Integer({
          name: names.publicExponent || EMPTY_STRING2
        }),
        new Integer({
          name: names.privateExponent || EMPTY_STRING2
        }),
        new Integer({
          name: names.prime1 || EMPTY_STRING2
        }),
        new Integer({
          name: names.prime2 || EMPTY_STRING2
        }),
        new Integer({
          name: names.exponent1 || EMPTY_STRING2
        }),
        new Integer({
          name: names.exponent2 || EMPTY_STRING2
        }),
        new Integer({
          name: names.coefficient || EMPTY_STRING2
        }),
        new Sequence({
          optional: true,
          value: [
            new Repeated({
              name: names.otherPrimeInfosName || EMPTY_STRING2,
              value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$17);
    const asn1 = compareSchema(schema, schema, _RSAPrivateKey.schema({
      names: {
        version: VERSION$k,
        modulus: MODULUS,
        publicExponent: PUBLIC_EXPONENT,
        privateExponent: PRIVATE_EXPONENT,
        prime1: PRIME1,
        prime2: PRIME2,
        exponent1: EXPONENT1,
        exponent2: EXPONENT2,
        coefficient: COEFFICIENT,
        otherPrimeInfo: {
          names: {
            blockName: OTHER_PRIME_INFOS
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.modulus = asn1.result.modulus.convertFromDER(256);
    this.publicExponent = asn1.result.publicExponent;
    this.privateExponent = asn1.result.privateExponent.convertFromDER(256);
    this.prime1 = asn1.result.prime1.convertFromDER(128);
    this.prime2 = asn1.result.prime2.convertFromDER(128);
    this.exponent1 = asn1.result.exponent1.convertFromDER(128);
    this.exponent2 = asn1.result.exponent2.convertFromDER(128);
    this.coefficient = asn1.result.coefficient.convertFromDER(128);
    if (OTHER_PRIME_INFOS in asn1.result) this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, (element) => new OtherPrimeInfo({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.version
    }));
    outputArray.push(this.modulus.convertToDER());
    outputArray.push(this.publicExponent);
    outputArray.push(this.privateExponent.convertToDER());
    outputArray.push(this.prime1.convertToDER());
    outputArray.push(this.prime2.convertToDER());
    outputArray.push(this.exponent1.convertToDER());
    outputArray.push(this.exponent2.convertToDER());
    outputArray.push(this.coefficient.convertToDER());
    if (this.otherPrimeInfos) {
      outputArray.push(new Sequence({
        value: Array.from(this.otherPrimeInfos, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const jwk = {
      n: Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),
      e: Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),
      d: Convert.ToBase64Url(this.privateExponent.valueBlock.valueHexView),
      p: Convert.ToBase64Url(this.prime1.valueBlock.valueHexView),
      q: Convert.ToBase64Url(this.prime2.valueBlock.valueHexView),
      dp: Convert.ToBase64Url(this.exponent1.valueBlock.valueHexView),
      dq: Convert.ToBase64Url(this.exponent2.valueBlock.valueHexView),
      qi: Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView)
    };
    if (this.otherPrimeInfos) {
      jwk.oth = Array.from(this.otherPrimeInfos, (o2) => o2.toJSON());
    }
    return jwk;
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "n", "e", "d", "p", "q", "dp", "dq", "qi");
    this.modulus = new Integer({
      valueHex: Convert.FromBase64Url(json.n)
    });
    this.publicExponent = new Integer({
      valueHex: Convert.FromBase64Url(json.e)
    });
    this.privateExponent = new Integer({
      valueHex: Convert.FromBase64Url(json.d)
    });
    this.prime1 = new Integer({
      valueHex: Convert.FromBase64Url(json.p)
    });
    this.prime2 = new Integer({
      valueHex: Convert.FromBase64Url(json.q)
    });
    this.exponent1 = new Integer({
      valueHex: Convert.FromBase64Url(json.dp)
    });
    this.exponent2 = new Integer({
      valueHex: Convert.FromBase64Url(json.dq)
    });
    this.coefficient = new Integer({
      valueHex: Convert.FromBase64Url(json.qi)
    });
    if (json.oth) {
      this.otherPrimeInfos = Array.from(json.oth, (element) => new OtherPrimeInfo({
        json: element
      }));
    }
  }
};
RSAPrivateKey.CLASS_NAME = "RSAPrivateKey";
var VERSION$j = "version";
var PRIVATE_KEY_ALGORITHM = "privateKeyAlgorithm";
var PRIVATE_KEY = "privateKey";
var ATTRIBUTES$5 = "attributes";
var PARSED_KEY = "parsedKey";
var CLEAR_PROPS$16 = [
  VERSION$j,
  PRIVATE_KEY_ALGORITHM,
  PRIVATE_KEY,
  ATTRIBUTES$5
];
var PrivateKeyInfo = class _PrivateKeyInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$j, _PrivateKeyInfo.defaultValues(VERSION$j));
    this.privateKeyAlgorithm = getParametersValue(parameters, PRIVATE_KEY_ALGORITHM, _PrivateKeyInfo.defaultValues(PRIVATE_KEY_ALGORITHM));
    this.privateKey = getParametersValue(parameters, PRIVATE_KEY, _PrivateKeyInfo.defaultValues(PRIVATE_KEY));
    if (ATTRIBUTES$5 in parameters) {
      this.attributes = getParametersValue(parameters, ATTRIBUTES$5, _PrivateKeyInfo.defaultValues(ATTRIBUTES$5));
    }
    if (PARSED_KEY in parameters) {
      this.parsedKey = getParametersValue(parameters, PARSED_KEY, _PrivateKeyInfo.defaultValues(PARSED_KEY));
    }
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$j:
        return 0;
      case PRIVATE_KEY_ALGORITHM:
        return new AlgorithmIdentifier();
      case PRIVATE_KEY:
        return new OctetString();
      case ATTRIBUTES$5:
        return [];
      case PARSED_KEY:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),
        new OctetString({
          name: names.privateKey || EMPTY_STRING2
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Repeated({
              name: names.attributes || EMPTY_STRING2,
              value: Attribute.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$16);
    const asn1 = compareSchema(schema, schema, _PrivateKeyInfo.schema({
      names: {
        version: VERSION$j,
        privateKeyAlgorithm: {
          names: {
            blockName: PRIVATE_KEY_ALGORITHM
          }
        },
        privateKey: PRIVATE_KEY,
        attributes: ATTRIBUTES$5
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.privateKeyAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.privateKeyAlgorithm
    });
    this.privateKey = asn1.result.privateKey;
    if (ATTRIBUTES$5 in asn1.result) this.attributes = Array.from(asn1.result.attributes, (element) => new Attribute({
      schema: element
    }));
    switch (this.privateKeyAlgorithm.algorithmId) {
      case "1.2.840.113549.1.1.1":
        {
          const privateKeyASN1 = fromBER(this.privateKey.valueBlock.valueHexView);
          if (privateKeyASN1.offset !== -1) this.parsedKey = new RSAPrivateKey({
            schema: privateKeyASN1.result
          });
        }
        break;
      case "1.2.840.10045.2.1":
        if ("algorithmParams" in this.privateKeyAlgorithm) {
          if (this.privateKeyAlgorithm.algorithmParams instanceof ObjectIdentifier) {
            const privateKeyASN1 = fromBER(this.privateKey.valueBlock.valueHexView);
            if (privateKeyASN1.offset !== -1) {
              this.parsedKey = new ECPrivateKey({
                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),
                schema: privateKeyASN1.result
              });
            }
          }
        }
        break;
    }
  }
  toSchema() {
    const outputArray = [
      new Integer({
        value: this.version
      }),
      this.privateKeyAlgorithm.toSchema(),
      this.privateKey
    ];
    if (this.attributes) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: Array.from(this.attributes, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    if (!this.parsedKey) {
      const object = {
        version: this.version,
        privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),
        privateKey: this.privateKey.toJSON()
      };
      if (this.attributes) {
        object.attributes = Array.from(this.attributes, (o2) => o2.toJSON());
      }
      return object;
    }
    const jwk = {};
    switch (this.privateKeyAlgorithm.algorithmId) {
      case "1.2.840.10045.2.1":
        jwk.kty = "EC";
        break;
      case "1.2.840.113549.1.1.1":
        jwk.kty = "RSA";
        break;
    }
    const publicKeyJWK = this.parsedKey.toJSON();
    Object.assign(jwk, publicKeyJWK);
    return jwk;
  }
  fromJSON(json) {
    if ("kty" in json) {
      switch (json.kty.toUpperCase()) {
        case "EC":
          this.parsedKey = new ECPrivateKey({
            json
          });
          this.privateKeyAlgorithm = new AlgorithmIdentifier({
            algorithmId: "1.2.840.10045.2.1",
            algorithmParams: new ObjectIdentifier({
              value: this.parsedKey.namedCurve
            })
          });
          break;
        case "RSA":
          this.parsedKey = new RSAPrivateKey({
            json
          });
          this.privateKeyAlgorithm = new AlgorithmIdentifier({
            algorithmId: "1.2.840.113549.1.1.1",
            algorithmParams: new Null()
          });
          break;
        default:
          throw new Error(`Invalid value for "kty" parameter: ${json.kty}`);
      }
      this.privateKey = new OctetString({
        valueHex: this.parsedKey.toSchema().toBER(false)
      });
    }
  }
};
PrivateKeyInfo.CLASS_NAME = "PrivateKeyInfo";
var CONTENT_TYPE$1 = "contentType";
var CONTENT_ENCRYPTION_ALGORITHM = "contentEncryptionAlgorithm";
var ENCRYPTED_CONTENT = "encryptedContent";
var CLEAR_PROPS$15 = [
  CONTENT_TYPE$1,
  CONTENT_ENCRYPTION_ALGORITHM,
  ENCRYPTED_CONTENT
];
var PIECE_SIZE = 1024;
var EncryptedContentInfo = class _EncryptedContentInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.contentType = getParametersValue(parameters, CONTENT_TYPE$1, _EncryptedContentInfo.defaultValues(CONTENT_TYPE$1));
    this.contentEncryptionAlgorithm = getParametersValue(parameters, CONTENT_ENCRYPTION_ALGORITHM, _EncryptedContentInfo.defaultValues(CONTENT_ENCRYPTION_ALGORITHM));
    if (ENCRYPTED_CONTENT in parameters && parameters.encryptedContent) {
      this.encryptedContent = parameters.encryptedContent;
      if (this.encryptedContent.idBlock.tagClass === 1 && this.encryptedContent.idBlock.tagNumber === 4) {
        if (this.encryptedContent.idBlock.isConstructed === false && !parameters.disableSplit) {
          const constrString = new OctetString({
            idBlock: {
              isConstructed: true
            },
            isConstructed: true
          });
          let offset = 0;
          const valueHex = this.encryptedContent.valueBlock.valueHexView.slice().buffer;
          let length = valueHex.byteLength;
          while (length > 0) {
            const pieceView = new Uint8Array(valueHex, offset, offset + PIECE_SIZE > valueHex.byteLength ? valueHex.byteLength - offset : PIECE_SIZE);
            const _array = new ArrayBuffer(pieceView.length);
            const _view = new Uint8Array(_array);
            for (let i2 = 0; i2 < _view.length; i2++) _view[i2] = pieceView[i2];
            constrString.valueBlock.value.push(new OctetString({
              valueHex: _array
            }));
            length -= pieceView.length;
            offset += pieceView.length;
          }
          this.encryptedContent = constrString;
        }
      }
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CONTENT_TYPE$1:
        return EMPTY_STRING2;
      case CONTENT_ENCRYPTION_ALGORITHM:
        return new AlgorithmIdentifier();
      case ENCRYPTED_CONTENT:
        return new OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CONTENT_TYPE$1:
        return memberValue === EMPTY_STRING2;
      case CONTENT_ENCRYPTION_ALGORITHM:
        return memberValue.algorithmId === EMPTY_STRING2 && "algorithmParams" in memberValue === false;
      case ENCRYPTED_CONTENT:
        return memberValue.isEqual(_EncryptedContentInfo.defaultValues(ENCRYPTED_CONTENT));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.contentType || EMPTY_STRING2
        }),
        AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),
        new Choice({
          value: [
            new Constructed({
              name: names.encryptedContent || EMPTY_STRING2,
              idBlock: {
                tagClass: 3,
                tagNumber: 0
              },
              value: [
                new Repeated({
                  value: new OctetString()
                })
              ]
            }),
            new Primitive({
              name: names.encryptedContent || EMPTY_STRING2,
              idBlock: {
                tagClass: 3,
                tagNumber: 0
              }
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$15);
    const asn1 = compareSchema(schema, schema, _EncryptedContentInfo.schema({
      names: {
        contentType: CONTENT_TYPE$1,
        contentEncryptionAlgorithm: {
          names: {
            blockName: CONTENT_ENCRYPTION_ALGORITHM
          }
        },
        encryptedContent: ENCRYPTED_CONTENT
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.contentType = asn1.result.contentType.valueBlock.toString();
    this.contentEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.contentEncryptionAlgorithm
    });
    if (ENCRYPTED_CONTENT in asn1.result) {
      this.encryptedContent = asn1.result.encryptedContent;
      this.encryptedContent.idBlock.tagClass = 1;
      this.encryptedContent.idBlock.tagNumber = 4;
    }
  }
  toSchema() {
    const sequenceLengthBlock = {
      isIndefiniteForm: false
    };
    const outputArray = [];
    outputArray.push(new ObjectIdentifier({
      value: this.contentType
    }));
    outputArray.push(this.contentEncryptionAlgorithm.toSchema());
    if (this.encryptedContent) {
      sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;
      const encryptedValue = this.encryptedContent;
      encryptedValue.idBlock.tagClass = 3;
      encryptedValue.idBlock.tagNumber = 0;
      encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;
      outputArray.push(encryptedValue);
    }
    return new Sequence({
      lenBlock: sequenceLengthBlock,
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      contentType: this.contentType,
      contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()
    };
    if (this.encryptedContent) {
      res.encryptedContent = this.encryptedContent.toJSON();
    }
    return res;
  }
  getEncryptedContent() {
    if (!this.encryptedContent) {
      throw new Error("Parameter 'encryptedContent' is undefined");
    }
    return OctetString.prototype.getValue.call(this.encryptedContent);
  }
};
EncryptedContentInfo.CLASS_NAME = "EncryptedContentInfo";
var HASH_ALGORITHM$4 = "hashAlgorithm";
var MASK_GEN_ALGORITHM$1 = "maskGenAlgorithm";
var SALT_LENGTH = "saltLength";
var TRAILER_FIELD = "trailerField";
var CLEAR_PROPS$14 = [
  HASH_ALGORITHM$4,
  MASK_GEN_ALGORITHM$1,
  SALT_LENGTH,
  TRAILER_FIELD
];
var RSASSAPSSParams = class _RSASSAPSSParams extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM$4, _RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4));
    this.maskGenAlgorithm = getParametersValue(parameters, MASK_GEN_ALGORITHM$1, _RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1));
    this.saltLength = getParametersValue(parameters, SALT_LENGTH, _RSASSAPSSParams.defaultValues(SALT_LENGTH));
    this.trailerField = getParametersValue(parameters, TRAILER_FIELD, _RSASSAPSSParams.defaultValues(TRAILER_FIELD));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case HASH_ALGORITHM$4:
        return new AlgorithmIdentifier({
          algorithmId: "1.3.14.3.2.26",
          algorithmParams: new Null()
        });
      case MASK_GEN_ALGORITHM$1:
        return new AlgorithmIdentifier({
          algorithmId: "1.2.840.113549.1.1.8",
          algorithmParams: new AlgorithmIdentifier({
            algorithmId: "1.3.14.3.2.26",
            algorithmParams: new Null()
          }).toSchema()
        });
      case SALT_LENGTH:
        return 20;
      case TRAILER_FIELD:
        return 1;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          optional: true,
          value: [
            AlgorithmIdentifier.schema(names.hashAlgorithm || {})
          ]
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          optional: true,
          value: [
            AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})
          ]
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          optional: true,
          value: [
            new Integer({
              name: names.saltLength || EMPTY_STRING2
            })
          ]
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 3
          },
          optional: true,
          value: [
            new Integer({
              name: names.trailerField || EMPTY_STRING2
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$14);
    const asn1 = compareSchema(schema, schema, _RSASSAPSSParams.schema({
      names: {
        hashAlgorithm: {
          names: {
            blockName: HASH_ALGORITHM$4
          }
        },
        maskGenAlgorithm: {
          names: {
            blockName: MASK_GEN_ALGORITHM$1
          }
        },
        saltLength: SALT_LENGTH,
        trailerField: TRAILER_FIELD
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (HASH_ALGORITHM$4 in asn1.result) this.hashAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.hashAlgorithm
    });
    if (MASK_GEN_ALGORITHM$1 in asn1.result) this.maskGenAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.maskGenAlgorithm
    });
    if (SALT_LENGTH in asn1.result) this.saltLength = asn1.result.saltLength.valueBlock.valueDec;
    if (TRAILER_FIELD in asn1.result) this.trailerField = asn1.result.trailerField.valueBlock.valueDec;
  }
  toSchema() {
    const outputArray = [];
    if (!this.hashAlgorithm.isEqual(_RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          this.hashAlgorithm.toSchema()
        ]
      }));
    }
    if (!this.maskGenAlgorithm.isEqual(_RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [
          this.maskGenAlgorithm.toSchema()
        ]
      }));
    }
    if (this.saltLength !== _RSASSAPSSParams.defaultValues(SALT_LENGTH)) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: [
          new Integer({
            value: this.saltLength
          })
        ]
      }));
    }
    if (this.trailerField !== _RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        value: [
          new Integer({
            value: this.trailerField
          })
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {};
    if (!this.hashAlgorithm.isEqual(_RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {
      res.hashAlgorithm = this.hashAlgorithm.toJSON();
    }
    if (!this.maskGenAlgorithm.isEqual(_RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {
      res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();
    }
    if (this.saltLength !== _RSASSAPSSParams.defaultValues(SALT_LENGTH)) {
      res.saltLength = this.saltLength;
    }
    if (this.trailerField !== _RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {
      res.trailerField = this.trailerField;
    }
    return res;
  }
};
RSASSAPSSParams.CLASS_NAME = "RSASSAPSSParams";
var SALT = "salt";
var ITERATION_COUNT = "iterationCount";
var KEY_LENGTH = "keyLength";
var PRF = "prf";
var CLEAR_PROPS$13 = [
  SALT,
  ITERATION_COUNT,
  KEY_LENGTH,
  PRF
];
var PBKDF2Params = class _PBKDF2Params extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.salt = getParametersValue(parameters, SALT, _PBKDF2Params.defaultValues(SALT));
    this.iterationCount = getParametersValue(parameters, ITERATION_COUNT, _PBKDF2Params.defaultValues(ITERATION_COUNT));
    if (KEY_LENGTH in parameters) {
      this.keyLength = getParametersValue(parameters, KEY_LENGTH, _PBKDF2Params.defaultValues(KEY_LENGTH));
    }
    if (PRF in parameters) {
      this.prf = getParametersValue(parameters, PRF, _PBKDF2Params.defaultValues(PRF));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SALT:
        return {};
      case ITERATION_COUNT:
        return -1;
      case KEY_LENGTH:
        return 0;
      case PRF:
        return new AlgorithmIdentifier({
          algorithmId: "1.3.14.3.2.26",
          algorithmParams: new Null()
        });
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Choice({
          value: [
            new OctetString({
              name: names.saltPrimitive || EMPTY_STRING2
            }),
            AlgorithmIdentifier.schema(names.saltConstructed || {})
          ]
        }),
        new Integer({
          name: names.iterationCount || EMPTY_STRING2
        }),
        new Integer({
          name: names.keyLength || EMPTY_STRING2,
          optional: true
        }),
        AlgorithmIdentifier.schema(names.prf || {
          names: {
            optional: true
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$13);
    const asn1 = compareSchema(schema, schema, _PBKDF2Params.schema({
      names: {
        saltPrimitive: SALT,
        saltConstructed: {
          names: {
            blockName: SALT
          }
        },
        iterationCount: ITERATION_COUNT,
        keyLength: KEY_LENGTH,
        prf: {
          names: {
            blockName: PRF,
            optional: true
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.salt = asn1.result.salt;
    this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;
    if (KEY_LENGTH in asn1.result) this.keyLength = asn1.result.keyLength.valueBlock.valueDec;
    if (PRF in asn1.result) this.prf = new AlgorithmIdentifier({
      schema: asn1.result.prf
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.salt);
    outputArray.push(new Integer({
      value: this.iterationCount
    }));
    if (KEY_LENGTH in this) {
      if (_PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength) outputArray.push(new Integer({
        value: this.keyLength
      }));
    }
    if (this.prf) {
      if (_PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false) outputArray.push(this.prf.toSchema());
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      salt: this.salt.toJSON(),
      iterationCount: this.iterationCount
    };
    if (KEY_LENGTH in this) {
      if (_PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength) res.keyLength = this.keyLength;
    }
    if (this.prf) {
      if (_PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false) res.prf = this.prf.toJSON();
    }
    return res;
  }
};
PBKDF2Params.CLASS_NAME = "PBKDF2Params";
var KEY_DERIVATION_FUNC = "keyDerivationFunc";
var ENCRYPTION_SCHEME = "encryptionScheme";
var CLEAR_PROPS$12 = [
  KEY_DERIVATION_FUNC,
  ENCRYPTION_SCHEME
];
var PBES2Params = class _PBES2Params extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyDerivationFunc = getParametersValue(parameters, KEY_DERIVATION_FUNC, _PBES2Params.defaultValues(KEY_DERIVATION_FUNC));
    this.encryptionScheme = getParametersValue(parameters, ENCRYPTION_SCHEME, _PBES2Params.defaultValues(ENCRYPTION_SCHEME));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_DERIVATION_FUNC:
        return new AlgorithmIdentifier();
      case ENCRYPTION_SCHEME:
        return new AlgorithmIdentifier();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.keyDerivationFunc || {}),
        AlgorithmIdentifier.schema(names.encryptionScheme || {})
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$12);
    const asn1 = compareSchema(schema, schema, _PBES2Params.schema({
      names: {
        keyDerivationFunc: {
          names: {
            blockName: KEY_DERIVATION_FUNC
          }
        },
        encryptionScheme: {
          names: {
            blockName: ENCRYPTION_SCHEME
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyDerivationFunc = new AlgorithmIdentifier({
      schema: asn1.result.keyDerivationFunc
    });
    this.encryptionScheme = new AlgorithmIdentifier({
      schema: asn1.result.encryptionScheme
    });
  }
  toSchema() {
    return new Sequence({
      value: [
        this.keyDerivationFunc.toSchema(),
        this.encryptionScheme.toSchema()
      ]
    });
  }
  toJSON() {
    return {
      keyDerivationFunc: this.keyDerivationFunc.toJSON(),
      encryptionScheme: this.encryptionScheme.toJSON()
    };
  }
};
PBES2Params.CLASS_NAME = "PBES2Params";
var AbstractCryptoEngine = class {
  constructor(parameters) {
    this.crypto = parameters.crypto;
    this.subtle = "webkitSubtle" in parameters.crypto ? parameters.crypto.webkitSubtle : parameters.crypto.subtle;
    this.name = getParametersValue(parameters, "name", EMPTY_STRING2);
  }
  async encrypt(...args) {
    return this.subtle.encrypt(...args);
  }
  async decrypt(...args) {
    return this.subtle.decrypt(...args);
  }
  sign(...args) {
    return this.subtle.sign(...args);
  }
  async verify(...args) {
    return this.subtle.verify(...args);
  }
  async digest(...args) {
    return this.subtle.digest(...args);
  }
  async generateKey(...args) {
    return this.subtle.generateKey(...args);
  }
  async deriveKey(...args) {
    return this.subtle.deriveKey(...args);
  }
  async deriveBits(...args) {
    return this.subtle.deriveBits(...args);
  }
  async wrapKey(...args) {
    return this.subtle.wrapKey(...args);
  }
  async unwrapKey(...args) {
    return this.subtle.unwrapKey(...args);
  }
  exportKey(...args) {
    return this.subtle.exportKey(...args);
  }
  importKey(...args) {
    return this.subtle.importKey(...args);
  }
  getRandomValues(array) {
    return this.crypto.getRandomValues(array);
  }
};
async function makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount) {
  let u2;
  let v;
  const result = [];
  switch (hashAlgorithm.toUpperCase()) {
    case "SHA-1":
      u2 = 20;
      v = 64;
      break;
    case "SHA-256":
      u2 = 32;
      v = 64;
      break;
    case "SHA-384":
      u2 = 48;
      v = 128;
      break;
    case "SHA-512":
      u2 = 64;
      v = 128;
      break;
    default:
      throw new Error("Unsupported hashing algorithm");
  }
  const passwordViewInitial = new Uint8Array(password);
  const passwordTransformed = new ArrayBuffer(password.byteLength * 2 + 2);
  const passwordTransformedView = new Uint8Array(passwordTransformed);
  for (let i2 = 0; i2 < passwordViewInitial.length; i2++) {
    passwordTransformedView[i2 * 2] = 0;
    passwordTransformedView[i2 * 2 + 1] = passwordViewInitial[i2];
  }
  passwordTransformedView[passwordTransformedView.length - 2] = 0;
  passwordTransformedView[passwordTransformedView.length - 1] = 0;
  password = passwordTransformed.slice(0);
  const D = new ArrayBuffer(v);
  const dView = new Uint8Array(D);
  for (let i2 = 0; i2 < D.byteLength; i2++) dView[i2] = 3;
  const saltLength = salt.byteLength;
  const sLen = v * Math.ceil(saltLength / v);
  const S = new ArrayBuffer(sLen);
  const sView = new Uint8Array(S);
  const saltView = new Uint8Array(salt);
  for (let i2 = 0; i2 < sLen; i2++) sView[i2] = saltView[i2 % saltLength];
  const passwordLength = password.byteLength;
  const pLen = v * Math.ceil(passwordLength / v);
  const P = new ArrayBuffer(pLen);
  const pView = new Uint8Array(P);
  const passwordView = new Uint8Array(password);
  for (let i2 = 0; i2 < pLen; i2++) pView[i2] = passwordView[i2 % passwordLength];
  const sPlusPLength = S.byteLength + P.byteLength;
  let I = new ArrayBuffer(sPlusPLength);
  let iView = new Uint8Array(I);
  iView.set(sView);
  iView.set(pView, sView.length);
  const c = Math.ceil((keyLength >> 3) / u2);
  let internalSequence = Promise.resolve(I);
  for (let i2 = 0; i2 <= c; i2++) {
    internalSequence = internalSequence.then((_I) => {
      const dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);
      const dAndIView = new Uint8Array(dAndI);
      dAndIView.set(dView);
      dAndIView.set(iView, dView.length);
      return dAndI;
    });
    for (let j = 0; j < iterationCount; j++) internalSequence = internalSequence.then((roundBuffer) => cryptoEngine.digest({
      name: hashAlgorithm
    }, new Uint8Array(roundBuffer)));
    internalSequence = internalSequence.then((roundBuffer) => {
      const B = new ArrayBuffer(v);
      const bView = new Uint8Array(B);
      for (let j = 0; j < B.byteLength; j++) bView[j] = roundBuffer[j % roundBuffer.byteLength];
      const k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);
      const iRound = [];
      let sliceStart = 0;
      let sliceLength = v;
      for (let j = 0; j < k; j++) {
        const chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));
        sliceStart += v;
        if (sliceStart + v > I.byteLength) sliceLength = I.byteLength - sliceStart;
        let x = 511;
        for (let l = B.byteLength - 1; l >= 0; l--) {
          x >>= 8;
          x += bView[l] + chunk[l];
          chunk[l] = x & 255;
        }
        iRound.push(...chunk);
      }
      I = new ArrayBuffer(iRound.length);
      iView = new Uint8Array(I);
      iView.set(iRound);
      result.push(...new Uint8Array(roundBuffer));
      return I;
    });
  }
  internalSequence = internalSequence.then(() => {
    const resultBuffer = new ArrayBuffer(keyLength >> 3);
    const resultView = new Uint8Array(resultBuffer);
    resultView.set(new Uint8Array(result).slice(0, keyLength >> 3));
    return resultBuffer;
  });
  return internalSequence;
}
function prepareAlgorithm(data) {
  const res = typeof data === "string" ? {
    name: data
  } : data;
  if ("hash" in res) {
    return {
      ...res,
      hash: prepareAlgorithm(res.hash)
    };
  }
  return res;
}
var CryptoEngine = class extends AbstractCryptoEngine {
  async importKey(format, keyData, algorithm, extractable, keyUsages) {
    var _a4, _b, _c, _d, _e, _f;
    let jwk = {};
    const alg = prepareAlgorithm(algorithm);
    switch (format.toLowerCase()) {
      case "raw":
        return this.subtle.importKey("raw", keyData, algorithm, extractable, keyUsages);
      case "spki":
        {
          const asn1 = fromBER(BufferSourceConverter.toArrayBuffer(keyData));
          AsnError.assert(asn1, "keyData");
          const publicKeyInfo = new PublicKeyInfo();
          try {
            publicKeyInfo.fromSchema(asn1.result);
          } catch {
            throw new ArgumentError("Incorrect keyData");
          }
          switch (alg.name.toUpperCase()) {
            case "RSA-PSS": {
              if (!alg.hash) {
                throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
              }
              switch (alg.hash.name.toUpperCase()) {
                case "SHA-1":
                  jwk.alg = "PS1";
                  break;
                case "SHA-256":
                  jwk.alg = "PS256";
                  break;
                case "SHA-384":
                  jwk.alg = "PS384";
                  break;
                case "SHA-512":
                  jwk.alg = "PS512";
                  break;
                default:
                  throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
              }
            }
            case "RSASSA-PKCS1-V1_5":
              {
                keyUsages = [
                  "verify"
                ];
                jwk.kty = "RSA";
                jwk.ext = extractable;
                jwk.key_ops = keyUsages;
                if (publicKeyInfo.algorithm.algorithmId !== "1.2.840.113549.1.1.1") throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);
                if (!jwk.alg) {
                  if (!alg.hash) {
                    throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
                  }
                  switch (alg.hash.name.toUpperCase()) {
                    case "SHA-1":
                      jwk.alg = "RS1";
                      break;
                    case "SHA-256":
                      jwk.alg = "RS256";
                      break;
                    case "SHA-384":
                      jwk.alg = "RS384";
                      break;
                    case "SHA-512":
                      jwk.alg = "RS512";
                      break;
                    default:
                      throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
                  }
                }
                const publicKeyJSON = publicKeyInfo.toJSON();
                Object.assign(jwk, publicKeyJSON);
              }
              break;
            case "ECDSA":
              keyUsages = [
                "verify"
              ];
            case "ECDH":
              {
                jwk = {
                  kty: "EC",
                  ext: extractable,
                  key_ops: keyUsages
                };
                if (publicKeyInfo.algorithm.algorithmId !== "1.2.840.10045.2.1") {
                  throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);
                }
                const publicKeyJSON = publicKeyInfo.toJSON();
                Object.assign(jwk, publicKeyJSON);
              }
              break;
            case "RSA-OAEP":
              {
                jwk.kty = "RSA";
                jwk.ext = extractable;
                jwk.key_ops = keyUsages;
                if (this.name.toLowerCase() === "safari") jwk.alg = "RSA-OAEP";
                else {
                  if (!alg.hash) {
                    throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
                  }
                  switch (alg.hash.name.toUpperCase()) {
                    case "SHA-1":
                      jwk.alg = "RSA-OAEP";
                      break;
                    case "SHA-256":
                      jwk.alg = "RSA-OAEP-256";
                      break;
                    case "SHA-384":
                      jwk.alg = "RSA-OAEP-384";
                      break;
                    case "SHA-512":
                      jwk.alg = "RSA-OAEP-512";
                      break;
                    default:
                      throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
                  }
                }
                const publicKeyJSON = publicKeyInfo.toJSON();
                Object.assign(jwk, publicKeyJSON);
              }
              break;
            case "RSAES-PKCS1-V1_5":
              {
                jwk.kty = "RSA";
                jwk.ext = extractable;
                jwk.key_ops = keyUsages;
                jwk.alg = "PS1";
                const publicKeyJSON = publicKeyInfo.toJSON();
                Object.assign(jwk, publicKeyJSON);
              }
              break;
            default:
              throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);
          }
        }
        break;
      case "pkcs8":
        {
          const privateKeyInfo = new PrivateKeyInfo();
          const asn1 = fromBER(BufferSourceConverter.toArrayBuffer(keyData));
          AsnError.assert(asn1, "keyData");
          try {
            privateKeyInfo.fromSchema(asn1.result);
          } catch (ex) {
            throw new Error("Incorrect keyData");
          }
          if (!privateKeyInfo.parsedKey) throw new Error("Incorrect keyData");
          switch (alg.name.toUpperCase()) {
            case "RSA-PSS": {
              switch ((_a4 = alg.hash) === null || _a4 === void 0 ? void 0 : _a4.name.toUpperCase()) {
                case "SHA-1":
                  jwk.alg = "PS1";
                  break;
                case "SHA-256":
                  jwk.alg = "PS256";
                  break;
                case "SHA-384":
                  jwk.alg = "PS384";
                  break;
                case "SHA-512":
                  jwk.alg = "PS512";
                  break;
                default:
                  throw new Error(`Incorrect hash algorithm: ${(_b = alg.hash) === null || _b === void 0 ? void 0 : _b.name.toUpperCase()}`);
              }
            }
            case "RSASSA-PKCS1-V1_5":
              {
                keyUsages = [
                  "sign"
                ];
                jwk.kty = "RSA";
                jwk.ext = extractable;
                jwk.key_ops = keyUsages;
                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== "1.2.840.113549.1.1.1") throw new Error(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);
                if ("alg" in jwk === false) {
                  switch ((_c = alg.hash) === null || _c === void 0 ? void 0 : _c.name.toUpperCase()) {
                    case "SHA-1":
                      jwk.alg = "RS1";
                      break;
                    case "SHA-256":
                      jwk.alg = "RS256";
                      break;
                    case "SHA-384":
                      jwk.alg = "RS384";
                      break;
                    case "SHA-512":
                      jwk.alg = "RS512";
                      break;
                    default:
                      throw new Error(`Incorrect hash algorithm: ${(_d = alg.hash) === null || _d === void 0 ? void 0 : _d.name.toUpperCase()}`);
                  }
                }
                const privateKeyJSON = privateKeyInfo.toJSON();
                Object.assign(jwk, privateKeyJSON);
              }
              break;
            case "ECDSA":
              keyUsages = [
                "sign"
              ];
            case "ECDH":
              {
                jwk = {
                  kty: "EC",
                  ext: extractable,
                  key_ops: keyUsages
                };
                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== "1.2.840.10045.2.1") throw new Error(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);
                const privateKeyJSON = privateKeyInfo.toJSON();
                Object.assign(jwk, privateKeyJSON);
              }
              break;
            case "RSA-OAEP":
              {
                jwk.kty = "RSA";
                jwk.ext = extractable;
                jwk.key_ops = keyUsages;
                if (this.name.toLowerCase() === "safari") jwk.alg = "RSA-OAEP";
                else {
                  switch ((_e = alg.hash) === null || _e === void 0 ? void 0 : _e.name.toUpperCase()) {
                    case "SHA-1":
                      jwk.alg = "RSA-OAEP";
                      break;
                    case "SHA-256":
                      jwk.alg = "RSA-OAEP-256";
                      break;
                    case "SHA-384":
                      jwk.alg = "RSA-OAEP-384";
                      break;
                    case "SHA-512":
                      jwk.alg = "RSA-OAEP-512";
                      break;
                    default:
                      throw new Error(`Incorrect hash algorithm: ${(_f = alg.hash) === null || _f === void 0 ? void 0 : _f.name.toUpperCase()}`);
                  }
                }
                const privateKeyJSON = privateKeyInfo.toJSON();
                Object.assign(jwk, privateKeyJSON);
              }
              break;
            case "RSAES-PKCS1-V1_5":
              {
                keyUsages = [
                  "decrypt"
                ];
                jwk.kty = "RSA";
                jwk.ext = extractable;
                jwk.key_ops = keyUsages;
                jwk.alg = "PS1";
                const privateKeyJSON = privateKeyInfo.toJSON();
                Object.assign(jwk, privateKeyJSON);
              }
              break;
            default:
              throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);
          }
        }
        break;
      case "jwk":
        jwk = keyData;
        break;
      default:
        throw new Error(`Incorrect format: ${format}`);
    }
    if (this.name.toLowerCase() === "safari") {
      try {
        return this.subtle.importKey("jwk", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);
      } catch {
        return this.subtle.importKey("jwk", jwk, algorithm, extractable, keyUsages);
      }
    }
    return this.subtle.importKey("jwk", jwk, algorithm, extractable, keyUsages);
  }
  async exportKey(format, key) {
    let jwk = await this.subtle.exportKey("jwk", key);
    if (this.name.toLowerCase() === "safari") {
      if (jwk instanceof ArrayBuffer) {
        jwk = JSON.parse(arrayBufferToString(jwk));
      }
    }
    switch (format.toLowerCase()) {
      case "raw":
        return this.subtle.exportKey("raw", key);
      case "spki": {
        const publicKeyInfo = new PublicKeyInfo();
        try {
          publicKeyInfo.fromJSON(jwk);
        } catch (ex) {
          throw new Error("Incorrect key data");
        }
        return publicKeyInfo.toSchema().toBER(false);
      }
      case "pkcs8": {
        const privateKeyInfo = new PrivateKeyInfo();
        try {
          privateKeyInfo.fromJSON(jwk);
        } catch (ex) {
          throw new Error("Incorrect key data");
        }
        return privateKeyInfo.toSchema().toBER(false);
      }
      case "jwk":
        return jwk;
      default:
        throw new Error(`Incorrect format: ${format}`);
    }
  }
  async convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {
    if (inputFormat.toLowerCase() === outputFormat.toLowerCase()) {
      return keyData;
    }
    const key = await this.importKey(inputFormat, keyData, algorithm, extractable, keyUsages);
    return this.exportKey(outputFormat, key);
  }
  getAlgorithmByOID(oid, safety = false, target2) {
    switch (oid) {
      case "1.2.840.113549.1.1.1":
        return {
          name: "RSAES-PKCS1-v1_5"
        };
      case "1.2.840.113549.1.1.5":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: {
            name: "SHA-1"
          }
        };
      case "1.2.840.113549.1.1.11":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: {
            name: "SHA-256"
          }
        };
      case "1.2.840.113549.1.1.12":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: {
            name: "SHA-384"
          }
        };
      case "1.2.840.113549.1.1.13":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: {
            name: "SHA-512"
          }
        };
      case "1.2.840.113549.1.1.10":
        return {
          name: "RSA-PSS"
        };
      case "1.2.840.113549.1.1.7":
        return {
          name: "RSA-OAEP"
        };
      case "1.2.840.10045.2.1":
      case "1.2.840.10045.4.1":
        return {
          name: "ECDSA",
          hash: {
            name: "SHA-1"
          }
        };
      case "1.2.840.10045.4.3.2":
        return {
          name: "ECDSA",
          hash: {
            name: "SHA-256"
          }
        };
      case "1.2.840.10045.4.3.3":
        return {
          name: "ECDSA",
          hash: {
            name: "SHA-384"
          }
        };
      case "1.2.840.10045.4.3.4":
        return {
          name: "ECDSA",
          hash: {
            name: "SHA-512"
          }
        };
      case "1.3.133.16.840.63.0.2":
        return {
          name: "ECDH",
          kdf: "SHA-1"
        };
      case "1.3.132.1.11.1":
        return {
          name: "ECDH",
          kdf: "SHA-256"
        };
      case "1.3.132.1.11.2":
        return {
          name: "ECDH",
          kdf: "SHA-384"
        };
      case "1.3.132.1.11.3":
        return {
          name: "ECDH",
          kdf: "SHA-512"
        };
      case "2.16.840.1.101.3.4.1.2":
        return {
          name: "AES-CBC",
          length: 128
        };
      case "2.16.840.1.101.3.4.1.22":
        return {
          name: "AES-CBC",
          length: 192
        };
      case "2.16.840.1.101.3.4.1.42":
        return {
          name: "AES-CBC",
          length: 256
        };
      case "2.16.840.1.101.3.4.1.6":
        return {
          name: "AES-GCM",
          length: 128
        };
      case "2.16.840.1.101.3.4.1.26":
        return {
          name: "AES-GCM",
          length: 192
        };
      case "2.16.840.1.101.3.4.1.46":
        return {
          name: "AES-GCM",
          length: 256
        };
      case "2.16.840.1.101.3.4.1.4":
        return {
          name: "AES-CFB",
          length: 128
        };
      case "2.16.840.1.101.3.4.1.24":
        return {
          name: "AES-CFB",
          length: 192
        };
      case "2.16.840.1.101.3.4.1.44":
        return {
          name: "AES-CFB",
          length: 256
        };
      case "2.16.840.1.101.3.4.1.5":
        return {
          name: "AES-KW",
          length: 128
        };
      case "2.16.840.1.101.3.4.1.25":
        return {
          name: "AES-KW",
          length: 192
        };
      case "2.16.840.1.101.3.4.1.45":
        return {
          name: "AES-KW",
          length: 256
        };
      case "1.2.840.113549.2.7":
        return {
          name: "HMAC",
          hash: {
            name: "SHA-1"
          }
        };
      case "1.2.840.113549.2.9":
        return {
          name: "HMAC",
          hash: {
            name: "SHA-256"
          }
        };
      case "1.2.840.113549.2.10":
        return {
          name: "HMAC",
          hash: {
            name: "SHA-384"
          }
        };
      case "1.2.840.113549.2.11":
        return {
          name: "HMAC",
          hash: {
            name: "SHA-512"
          }
        };
      case "1.2.840.113549.1.9.16.3.5":
        return {
          name: "DH"
        };
      case "1.3.14.3.2.26":
        return {
          name: "SHA-1"
        };
      case "2.16.840.1.101.3.4.2.1":
        return {
          name: "SHA-256"
        };
      case "2.16.840.1.101.3.4.2.2":
        return {
          name: "SHA-384"
        };
      case "2.16.840.1.101.3.4.2.3":
        return {
          name: "SHA-512"
        };
      case "1.2.840.113549.1.5.12":
        return {
          name: "PBKDF2"
        };
      case "1.2.840.10045.3.1.7":
        return {
          name: "P-256"
        };
      case "1.3.132.0.34":
        return {
          name: "P-384"
        };
      case "1.3.132.0.35":
        return {
          name: "P-521"
        };
    }
    if (safety) {
      throw new Error(`Unsupported algorithm identifier ${target2 ? `for ${target2} ` : EMPTY_STRING2}: ${oid}`);
    }
    return {};
  }
  getOIDByAlgorithm(algorithm, safety = false, target2) {
    let result = EMPTY_STRING2;
    switch (algorithm.name.toUpperCase()) {
      case "RSAES-PKCS1-V1_5":
        result = "1.2.840.113549.1.1.1";
        break;
      case "RSASSA-PKCS1-V1_5":
        switch (algorithm.hash.name.toUpperCase()) {
          case "SHA-1":
            result = "1.2.840.113549.1.1.5";
            break;
          case "SHA-256":
            result = "1.2.840.113549.1.1.11";
            break;
          case "SHA-384":
            result = "1.2.840.113549.1.1.12";
            break;
          case "SHA-512":
            result = "1.2.840.113549.1.1.13";
            break;
        }
        break;
      case "RSA-PSS":
        result = "1.2.840.113549.1.1.10";
        break;
      case "RSA-OAEP":
        result = "1.2.840.113549.1.1.7";
        break;
      case "ECDSA":
        switch (algorithm.hash.name.toUpperCase()) {
          case "SHA-1":
            result = "1.2.840.10045.4.1";
            break;
          case "SHA-256":
            result = "1.2.840.10045.4.3.2";
            break;
          case "SHA-384":
            result = "1.2.840.10045.4.3.3";
            break;
          case "SHA-512":
            result = "1.2.840.10045.4.3.4";
            break;
        }
        break;
      case "ECDH":
        switch (algorithm.kdf.toUpperCase()) {
          case "SHA-1":
            result = "1.3.133.16.840.63.0.2";
            break;
          case "SHA-256":
            result = "1.3.132.1.11.1";
            break;
          case "SHA-384":
            result = "1.3.132.1.11.2";
            break;
          case "SHA-512":
            result = "1.3.132.1.11.3";
            break;
        }
        break;
      case "AES-CTR":
        break;
      case "AES-CBC":
        switch (algorithm.length) {
          case 128:
            result = "2.16.840.1.101.3.4.1.2";
            break;
          case 192:
            result = "2.16.840.1.101.3.4.1.22";
            break;
          case 256:
            result = "2.16.840.1.101.3.4.1.42";
            break;
        }
        break;
      case "AES-CMAC":
        break;
      case "AES-GCM":
        switch (algorithm.length) {
          case 128:
            result = "2.16.840.1.101.3.4.1.6";
            break;
          case 192:
            result = "2.16.840.1.101.3.4.1.26";
            break;
          case 256:
            result = "2.16.840.1.101.3.4.1.46";
            break;
        }
        break;
      case "AES-CFB":
        switch (algorithm.length) {
          case 128:
            result = "2.16.840.1.101.3.4.1.4";
            break;
          case 192:
            result = "2.16.840.1.101.3.4.1.24";
            break;
          case 256:
            result = "2.16.840.1.101.3.4.1.44";
            break;
        }
        break;
      case "AES-KW":
        switch (algorithm.length) {
          case 128:
            result = "2.16.840.1.101.3.4.1.5";
            break;
          case 192:
            result = "2.16.840.1.101.3.4.1.25";
            break;
          case 256:
            result = "2.16.840.1.101.3.4.1.45";
            break;
        }
        break;
      case "HMAC":
        switch (algorithm.hash.name.toUpperCase()) {
          case "SHA-1":
            result = "1.2.840.113549.2.7";
            break;
          case "SHA-256":
            result = "1.2.840.113549.2.9";
            break;
          case "SHA-384":
            result = "1.2.840.113549.2.10";
            break;
          case "SHA-512":
            result = "1.2.840.113549.2.11";
            break;
        }
        break;
      case "DH":
        result = "1.2.840.113549.1.9.16.3.5";
        break;
      case "SHA-1":
        result = "1.3.14.3.2.26";
        break;
      case "SHA-256":
        result = "2.16.840.1.101.3.4.2.1";
        break;
      case "SHA-384":
        result = "2.16.840.1.101.3.4.2.2";
        break;
      case "SHA-512":
        result = "2.16.840.1.101.3.4.2.3";
        break;
      case "CONCAT":
        break;
      case "HKDF":
        break;
      case "PBKDF2":
        result = "1.2.840.113549.1.5.12";
        break;
      case "P-256":
        result = "1.2.840.10045.3.1.7";
        break;
      case "P-384":
        result = "1.3.132.0.34";
        break;
      case "P-521":
        result = "1.3.132.0.35";
        break;
    }
    if (!result && safety) {
      throw new Error(`Unsupported algorithm ${target2 ? `for ${target2} ` : EMPTY_STRING2}: ${algorithm.name}`);
    }
    return result;
  }
  getAlgorithmParameters(algorithmName, operation) {
    let result = {
      algorithm: {},
      usages: []
    };
    switch (algorithmName.toUpperCase()) {
      case "RSAES-PKCS1-V1_5":
      case "RSASSA-PKCS1-V1_5":
        switch (operation.toLowerCase()) {
          case "generatekey":
            result = {
              algorithm: {
                name: "RSASSA-PKCS1-v1_5",
                modulusLength: 2048,
                publicExponent: new Uint8Array([
                  1,
                  0,
                  1
                ]),
                hash: {
                  name: "SHA-256"
                }
              },
              usages: [
                "sign",
                "verify"
              ]
            };
            break;
          case "verify":
          case "sign":
          case "importkey":
            result = {
              algorithm: {
                name: "RSASSA-PKCS1-v1_5",
                hash: {
                  name: "SHA-256"
                }
              },
              usages: [
                "verify"
              ]
            };
            break;
          case "exportkey":
          default:
            return {
              algorithm: {
                name: "RSASSA-PKCS1-v1_5"
              },
              usages: []
            };
        }
        break;
      case "RSA-PSS":
        switch (operation.toLowerCase()) {
          case "sign":
          case "verify":
            result = {
              algorithm: {
                name: "RSA-PSS",
                hash: {
                  name: "SHA-1"
                },
                saltLength: 20
              },
              usages: [
                "sign",
                "verify"
              ]
            };
            break;
          case "generatekey":
            result = {
              algorithm: {
                name: "RSA-PSS",
                modulusLength: 2048,
                publicExponent: new Uint8Array([
                  1,
                  0,
                  1
                ]),
                hash: {
                  name: "SHA-1"
                }
              },
              usages: [
                "sign",
                "verify"
              ]
            };
            break;
          case "importkey":
            result = {
              algorithm: {
                name: "RSA-PSS",
                hash: {
                  name: "SHA-1"
                }
              },
              usages: [
                "verify"
              ]
            };
            break;
          case "exportkey":
          default:
            return {
              algorithm: {
                name: "RSA-PSS"
              },
              usages: []
            };
        }
        break;
      case "RSA-OAEP":
        switch (operation.toLowerCase()) {
          case "encrypt":
          case "decrypt":
            result = {
              algorithm: {
                name: "RSA-OAEP"
              },
              usages: [
                "encrypt",
                "decrypt"
              ]
            };
            break;
          case "generatekey":
            result = {
              algorithm: {
                name: "RSA-OAEP",
                modulusLength: 2048,
                publicExponent: new Uint8Array([
                  1,
                  0,
                  1
                ]),
                hash: {
                  name: "SHA-256"
                }
              },
              usages: [
                "encrypt",
                "decrypt",
                "wrapKey",
                "unwrapKey"
              ]
            };
            break;
          case "importkey":
            result = {
              algorithm: {
                name: "RSA-OAEP",
                hash: {
                  name: "SHA-256"
                }
              },
              usages: [
                "encrypt"
              ]
            };
            break;
          case "exportkey":
          default:
            return {
              algorithm: {
                name: "RSA-OAEP"
              },
              usages: []
            };
        }
        break;
      case "ECDSA":
        switch (operation.toLowerCase()) {
          case "generatekey":
            result = {
              algorithm: {
                name: "ECDSA",
                namedCurve: "P-256"
              },
              usages: [
                "sign",
                "verify"
              ]
            };
            break;
          case "importkey":
            result = {
              algorithm: {
                name: "ECDSA",
                namedCurve: "P-256"
              },
              usages: [
                "verify"
              ]
            };
            break;
          case "verify":
          case "sign":
            result = {
              algorithm: {
                name: "ECDSA",
                hash: {
                  name: "SHA-256"
                }
              },
              usages: [
                "sign"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "ECDSA"
              },
              usages: []
            };
        }
        break;
      case "ECDH":
        switch (operation.toLowerCase()) {
          case "exportkey":
          case "importkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "ECDH",
                namedCurve: "P-256"
              },
              usages: [
                "deriveKey",
                "deriveBits"
              ]
            };
            break;
          case "derivekey":
          case "derivebits":
            result = {
              algorithm: {
                name: "ECDH",
                namedCurve: "P-256",
                public: []
              },
              usages: [
                "encrypt",
                "decrypt"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "ECDH"
              },
              usages: []
            };
        }
        break;
      case "AES-CTR":
        switch (operation.toLowerCase()) {
          case "importkey":
          case "exportkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "AES-CTR",
                length: 256
              },
              usages: [
                "encrypt",
                "decrypt",
                "wrapKey",
                "unwrapKey"
              ]
            };
            break;
          case "decrypt":
          case "encrypt":
            result = {
              algorithm: {
                name: "AES-CTR",
                counter: new Uint8Array(16),
                length: 10
              },
              usages: [
                "encrypt",
                "decrypt",
                "wrapKey",
                "unwrapKey"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "AES-CTR"
              },
              usages: []
            };
        }
        break;
      case "AES-CBC":
        switch (operation.toLowerCase()) {
          case "importkey":
          case "exportkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "AES-CBC",
                length: 256
              },
              usages: [
                "encrypt",
                "decrypt",
                "wrapKey",
                "unwrapKey"
              ]
            };
            break;
          case "decrypt":
          case "encrypt":
            result = {
              algorithm: {
                name: "AES-CBC",
                iv: this.getRandomValues(new Uint8Array(16))
              },
              usages: [
                "encrypt",
                "decrypt",
                "wrapKey",
                "unwrapKey"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "AES-CBC"
              },
              usages: []
            };
        }
        break;
      case "AES-GCM":
        switch (operation.toLowerCase()) {
          case "importkey":
          case "exportkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "AES-GCM",
                length: 256
              },
              usages: [
                "encrypt",
                "decrypt",
                "wrapKey",
                "unwrapKey"
              ]
            };
            break;
          case "decrypt":
          case "encrypt":
            result = {
              algorithm: {
                name: "AES-GCM",
                iv: this.getRandomValues(new Uint8Array(16))
              },
              usages: [
                "encrypt",
                "decrypt",
                "wrapKey",
                "unwrapKey"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "AES-GCM"
              },
              usages: []
            };
        }
        break;
      case "AES-KW":
        switch (operation.toLowerCase()) {
          case "importkey":
          case "exportkey":
          case "generatekey":
          case "wrapkey":
          case "unwrapkey":
            result = {
              algorithm: {
                name: "AES-KW",
                length: 256
              },
              usages: [
                "wrapKey",
                "unwrapKey"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "AES-KW"
              },
              usages: []
            };
        }
        break;
      case "HMAC":
        switch (operation.toLowerCase()) {
          case "sign":
          case "verify":
            result = {
              algorithm: {
                name: "HMAC"
              },
              usages: [
                "sign",
                "verify"
              ]
            };
            break;
          case "importkey":
          case "exportkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "HMAC",
                length: 32,
                hash: {
                  name: "SHA-256"
                }
              },
              usages: [
                "sign",
                "verify"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "HMAC"
              },
              usages: []
            };
        }
        break;
      case "HKDF":
        switch (operation.toLowerCase()) {
          case "derivekey":
            result = {
              algorithm: {
                name: "HKDF",
                hash: "SHA-256",
                salt: new Uint8Array([]),
                info: new Uint8Array([])
              },
              usages: [
                "encrypt",
                "decrypt"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "HKDF"
              },
              usages: []
            };
        }
        break;
      case "PBKDF2":
        switch (operation.toLowerCase()) {
          case "derivekey":
            result = {
              algorithm: {
                name: "PBKDF2",
                hash: {
                  name: "SHA-256"
                },
                salt: new Uint8Array([]),
                iterations: 1e4
              },
              usages: [
                "encrypt",
                "decrypt"
              ]
            };
            break;
          default:
            return {
              algorithm: {
                name: "PBKDF2"
              },
              usages: []
            };
        }
        break;
    }
    return result;
  }
  getHashAlgorithm(signatureAlgorithm) {
    let result = EMPTY_STRING2;
    switch (signatureAlgorithm.algorithmId) {
      case "1.2.840.10045.4.1":
      case "1.2.840.113549.1.1.5":
        result = "SHA-1";
        break;
      case "1.2.840.10045.4.3.2":
      case "1.2.840.113549.1.1.11":
        result = "SHA-256";
        break;
      case "1.2.840.10045.4.3.3":
      case "1.2.840.113549.1.1.12":
        result = "SHA-384";
        break;
      case "1.2.840.10045.4.3.4":
      case "1.2.840.113549.1.1.13":
        result = "SHA-512";
        break;
      case "1.2.840.113549.1.1.10":
        {
          try {
            const params = new RSASSAPSSParams({
              schema: signatureAlgorithm.algorithmParams
            });
            if (params.hashAlgorithm) {
              const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);
              if ("name" in algorithm) {
                result = algorithm.name;
              } else {
                return EMPTY_STRING2;
              }
            } else result = "SHA-1";
          } catch {
          }
        }
        break;
    }
    return result;
  }
  async encryptEncryptedContentInfo(parameters) {
    ParameterError.assert(parameters, "password", "contentEncryptionAlgorithm", "hmacHashAlgorithm", "iterationCount", "contentToEncrypt", "contentToEncrypt", "contentType");
    const contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm, true, "contentEncryptionAlgorithm");
    const pbkdf2OID = this.getOIDByAlgorithm({
      name: "PBKDF2"
    }, true, "PBKDF2");
    const hmacOID = this.getOIDByAlgorithm({
      name: "HMAC",
      hash: {
        name: parameters.hmacHashAlgorithm
      }
    }, true, "hmacHashAlgorithm");
    const ivBuffer = new ArrayBuffer(16);
    const ivView = new Uint8Array(ivBuffer);
    this.getRandomValues(ivView);
    const saltBuffer = new ArrayBuffer(64);
    const saltView = new Uint8Array(saltBuffer);
    this.getRandomValues(saltView);
    const contentView = new Uint8Array(parameters.contentToEncrypt);
    const pbkdf2Params = new PBKDF2Params({
      salt: new OctetString({
        valueHex: saltBuffer
      }),
      iterationCount: parameters.iterationCount,
      prf: new AlgorithmIdentifier({
        algorithmId: hmacOID,
        algorithmParams: new Null()
      })
    });
    const passwordView = new Uint8Array(parameters.password);
    const pbkdfKey = await this.importKey("raw", passwordView, "PBKDF2", false, [
      "deriveKey"
    ]);
    const derivedKey = await this.deriveKey({
      name: "PBKDF2",
      hash: {
        name: parameters.hmacHashAlgorithm
      },
      salt: saltView,
      iterations: parameters.iterationCount
    }, pbkdfKey, parameters.contentEncryptionAlgorithm, false, [
      "encrypt"
    ]);
    const encryptedData = await this.encrypt({
      name: parameters.contentEncryptionAlgorithm.name,
      iv: ivView
    }, derivedKey, contentView);
    const pbes2Parameters = new PBES2Params({
      keyDerivationFunc: new AlgorithmIdentifier({
        algorithmId: pbkdf2OID,
        algorithmParams: pbkdf2Params.toSchema()
      }),
      encryptionScheme: new AlgorithmIdentifier({
        algorithmId: contentEncryptionOID,
        algorithmParams: new OctetString({
          valueHex: ivBuffer
        })
      })
    });
    return new EncryptedContentInfo({
      contentType: parameters.contentType,
      contentEncryptionAlgorithm: new AlgorithmIdentifier({
        algorithmId: "1.2.840.113549.1.5.13",
        algorithmParams: pbes2Parameters.toSchema()
      }),
      encryptedContent: new OctetString({
        valueHex: encryptedData
      })
    });
  }
  async decryptEncryptedContentInfo(parameters) {
    ParameterError.assert(parameters, "password", "encryptedContentInfo");
    if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== "1.2.840.113549.1.5.13") throw new Error(`Unknown "contentEncryptionAlgorithm": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);
    let pbes2Parameters;
    try {
      pbes2Parameters = new PBES2Params({
        schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams
      });
    } catch (ex) {
      throw new Error('Incorrectly encoded "pbes2Parameters"');
    }
    let pbkdf2Params;
    try {
      pbkdf2Params = new PBKDF2Params({
        schema: pbes2Parameters.keyDerivationFunc.algorithmParams
      });
    } catch (ex) {
      throw new Error('Incorrectly encoded "pbkdf2Params"');
    }
    const contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId, true);
    const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;
    const ivView = new Uint8Array(ivBuffer);
    const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;
    const saltView = new Uint8Array(saltBuffer);
    const iterationCount = pbkdf2Params.iterationCount;
    let hmacHashAlgorithm = "SHA-1";
    if (pbkdf2Params.prf) {
      const algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true);
      hmacHashAlgorithm = algorithm.hash.name;
    }
    const pbkdfKey = await this.importKey("raw", parameters.password, "PBKDF2", false, [
      "deriveKey"
    ]);
    const result = await this.deriveKey({
      name: "PBKDF2",
      hash: {
        name: hmacHashAlgorithm
      },
      salt: saltView,
      iterations: iterationCount
    }, pbkdfKey, contentEncryptionAlgorithm, false, [
      "decrypt"
    ]);
    const dataBuffer = parameters.encryptedContentInfo.getEncryptedContent();
    return this.decrypt({
      name: contentEncryptionAlgorithm.name,
      iv: ivView
    }, result, dataBuffer);
  }
  async stampDataWithPassword(parameters) {
    if (parameters instanceof Object === false) throw new Error('Parameters must have type "Object"');
    ParameterError.assert(parameters, "password", "hashAlgorithm", "iterationCount", "salt", "contentToStamp");
    let length;
    switch (parameters.hashAlgorithm.toLowerCase()) {
      case "sha-1":
        length = 160;
        break;
      case "sha-256":
        length = 256;
        break;
      case "sha-384":
        length = 384;
        break;
      case "sha-512":
        length = 512;
        break;
      default:
        throw new Error(`Incorrect "parameters.hashAlgorithm" parameter: ${parameters.hashAlgorithm}`);
    }
    const hmacAlgorithm = {
      name: "HMAC",
      length,
      hash: {
        name: parameters.hashAlgorithm
      }
    };
    const pkcsKey = await makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);
    const hmacKey = await this.importKey("raw", new Uint8Array(pkcsKey), hmacAlgorithm, false, [
      "sign"
    ]);
    return this.sign(hmacAlgorithm, hmacKey, new Uint8Array(parameters.contentToStamp));
  }
  async verifyDataStampedWithPassword(parameters) {
    ParameterError.assert(parameters, "password", "hashAlgorithm", "salt", "iterationCount", "contentToVerify", "signatureToVerify");
    let length = 0;
    switch (parameters.hashAlgorithm.toLowerCase()) {
      case "sha-1":
        length = 160;
        break;
      case "sha-256":
        length = 256;
        break;
      case "sha-384":
        length = 384;
        break;
      case "sha-512":
        length = 512;
        break;
      default:
        throw new Error(`Incorrect "parameters.hashAlgorithm" parameter: ${parameters.hashAlgorithm}`);
    }
    const hmacAlgorithm = {
      name: "HMAC",
      length,
      hash: {
        name: parameters.hashAlgorithm
      }
    };
    const pkcsKey = await makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);
    const hmacKey = await this.importKey("raw", new Uint8Array(pkcsKey), hmacAlgorithm, false, [
      "verify"
    ]);
    return this.verify(hmacAlgorithm, hmacKey, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));
  }
  async getSignatureParameters(privateKey, hashAlgorithm = "SHA-1") {
    this.getOIDByAlgorithm({
      name: hashAlgorithm
    }, true, "hashAlgorithm");
    const signatureAlgorithm = new AlgorithmIdentifier();
    const parameters = this.getAlgorithmParameters(privateKey.algorithm.name, "sign");
    if (!Object.keys(parameters.algorithm).length) {
      throw new Error("Parameter 'algorithm' is empty");
    }
    const algorithm = parameters.algorithm;
    algorithm.hash.name = hashAlgorithm;
    switch (privateKey.algorithm.name.toUpperCase()) {
      case "RSASSA-PKCS1-V1_5":
      case "ECDSA":
        signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(algorithm, true);
        break;
      case "RSA-PSS":
        {
          switch (hashAlgorithm.toUpperCase()) {
            case "SHA-256":
              algorithm.saltLength = 32;
              break;
            case "SHA-384":
              algorithm.saltLength = 48;
              break;
            case "SHA-512":
              algorithm.saltLength = 64;
              break;
          }
          const paramsObject = {};
          if (hashAlgorithm.toUpperCase() !== "SHA-1") {
            const hashAlgorithmOID = this.getOIDByAlgorithm({
              name: hashAlgorithm
            }, true, "hashAlgorithm");
            paramsObject.hashAlgorithm = new AlgorithmIdentifier({
              algorithmId: hashAlgorithmOID,
              algorithmParams: new Null()
            });
            paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({
              algorithmId: "1.2.840.113549.1.1.8",
              algorithmParams: paramsObject.hashAlgorithm.toSchema()
            });
          }
          if (algorithm.saltLength !== 20) paramsObject.saltLength = algorithm.saltLength;
          const pssParameters = new RSASSAPSSParams(paramsObject);
          signatureAlgorithm.algorithmId = "1.2.840.113549.1.1.10";
          signatureAlgorithm.algorithmParams = pssParameters.toSchema();
        }
        break;
      default:
        throw new Error(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);
    }
    return {
      signatureAlgorithm,
      parameters
    };
  }
  async signWithPrivateKey(data, privateKey, parameters) {
    const signature = await this.sign(parameters.algorithm, privateKey, data);
    if (parameters.algorithm.name === "ECDSA") {
      return createCMSECDSASignature(signature);
    }
    return signature;
  }
  fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {
    const parameters = {};
    const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);
    if (shaAlgorithm === EMPTY_STRING2) throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);
    let algorithmId;
    if (signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = signatureAlgorithm.algorithmId;
    else algorithmId = publicKeyInfo.algorithm.algorithmId;
    const algorithmObject = this.getAlgorithmByOID(algorithmId, true);
    parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, "importKey");
    if ("hash" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;
    if (algorithmObject.name === "ECDSA") {
      const publicKeyAlgorithm = publicKeyInfo.algorithm;
      if (!publicKeyAlgorithm.algorithmParams) {
        throw new Error("Algorithm parameters for ECDSA public key are missed");
      }
      const publicKeyAlgorithmParams = publicKeyAlgorithm.algorithmParams;
      if ("idBlock" in publicKeyAlgorithm.algorithmParams) {
        if (!(publicKeyAlgorithmParams.idBlock.tagClass === 1 && publicKeyAlgorithmParams.idBlock.tagNumber === 6)) {
          throw new Error("Incorrect type for ECDSA public key parameters");
        }
      }
      const curveObject = this.getAlgorithmByOID(publicKeyAlgorithmParams.valueBlock.toString(), true);
      parameters.algorithm.algorithm.namedCurve = curveObject.name;
    }
    return parameters;
  }
  async getPublicKey(publicKeyInfo, signatureAlgorithm, parameters) {
    if (!parameters) {
      parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);
    }
    const publicKeyInfoBuffer = publicKeyInfo.toSchema().toBER(false);
    return this.importKey("spki", publicKeyInfoBuffer, parameters.algorithm.algorithm, true, parameters.algorithm.usages);
  }
  async verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm) {
    let publicKey;
    if (!shaAlgorithm) {
      shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);
      if (!shaAlgorithm) throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);
      publicKey = await this.getPublicKey(publicKeyInfo, signatureAlgorithm);
    } else {
      const parameters = {};
      let algorithmId;
      if (signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = signatureAlgorithm.algorithmId;
      else algorithmId = publicKeyInfo.algorithm.algorithmId;
      const algorithmObject = this.getAlgorithmByOID(algorithmId, true);
      parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, "importKey");
      if ("hash" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;
      if (algorithmObject.name === "ECDSA") {
        let algorithmParamsChecked = false;
        if ("algorithmParams" in publicKeyInfo.algorithm === true) {
          if ("idBlock" in publicKeyInfo.algorithm.algorithmParams) {
            if (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;
          }
        }
        if (algorithmParamsChecked === false) {
          throw new Error("Incorrect type for ECDSA public key parameters");
        }
        const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString(), true);
        parameters.algorithm.algorithm.namedCurve = curveObject.name;
      }
      publicKey = await this.getPublicKey(publicKeyInfo, null, parameters);
    }
    const algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, "verify");
    if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
    let signatureValue = signature.valueBlock.valueHexView;
    if (publicKey.algorithm.name === "ECDSA") {
      const namedCurve = ECNamedCurves.find(publicKey.algorithm.namedCurve);
      if (!namedCurve) {
        throw new Error("Unsupported named curve in use");
      }
      const asn1 = fromBER(signatureValue);
      AsnError.assert(asn1, "Signature value");
      signatureValue = createECDSASignatureFromCMS(asn1.result, namedCurve.size);
    }
    if (publicKey.algorithm.name === "RSA-PSS") {
      const pssParameters = new RSASSAPSSParams({
        schema: signatureAlgorithm.algorithmParams
      });
      if ("saltLength" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;
      else algorithm.algorithm.saltLength = 20;
      let hashAlgo = "SHA-1";
      if ("hashAlgorithm" in pssParameters) {
        const hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId, true);
        hashAlgo = hashAlgorithm.name;
      }
      algorithm.algorithm.hash.name = hashAlgo;
    }
    return this.verify(algorithm.algorithm, publicKey, signatureValue, data);
  }
};
var engine = {
  name: "none",
  crypto: null
};
function isCryptoEngine(engine2) {
  return engine2 && typeof engine2 === "object" && "crypto" in engine2 ? true : false;
}
function setEngine(name, ...args) {
  let crypto2 = null;
  if (args.length < 2) {
    if (args.length) {
      crypto2 = args[0];
    } else {
      crypto2 = typeof self !== "undefined" && self.crypto ? new CryptoEngine({
        name: "browser",
        crypto: self.crypto
      }) : null;
    }
  } else {
    const cryptoArg = args[0];
    const subtleArg = args[1];
    if (isCryptoEngine(subtleArg)) {
      crypto2 = subtleArg;
    } else if (isCryptoEngine(cryptoArg)) {
      crypto2 = cryptoArg;
    } else if ("subtle" in cryptoArg && "getRandomValues" in cryptoArg) {
      crypto2 = new CryptoEngine({
        crypto: cryptoArg
      });
    }
  }
  if (typeof process !== "undefined" && "pid" in process && typeof global !== "undefined" && typeof window === "undefined") {
    if (typeof global[process.pid] === "undefined") {
      global[process.pid] = {};
    } else {
      if (typeof global[process.pid] !== "object") {
        throw new Error(`Name global.${process.pid} already exists and it is not an object`);
      }
    }
    if (typeof global[process.pid].pkijs === "undefined") {
      global[process.pid].pkijs = {};
    } else {
      if (typeof global[process.pid].pkijs !== "object") {
        throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);
      }
    }
    global[process.pid].pkijs.engine = {
      name,
      crypto: crypto2
    };
  } else {
    engine = {
      name,
      crypto: crypto2
    };
  }
}
function getEngine() {
  if (typeof process !== "undefined" && "pid" in process && typeof global !== "undefined" && typeof window === "undefined") {
    let _engine;
    try {
      _engine = global[process.pid].pkijs.engine;
    } catch (ex) {
      throw new Error("Please call 'setEngine' before call to 'getEngine'");
    }
    return _engine;
  }
  return engine;
}
function getCrypto(safety = false) {
  const _engine = getEngine();
  if (!_engine.crypto && safety) {
    throw new Error("Unable to create WebCrypto object");
  }
  return _engine.crypto;
}
function createCMSECDSASignature(signatureBuffer) {
  if (signatureBuffer.byteLength % 2 !== 0) return EMPTY_BUFFER2;
  const length = signatureBuffer.byteLength / 2;
  const rBuffer = new ArrayBuffer(length);
  const rView = new Uint8Array(rBuffer);
  rView.set(new Uint8Array(signatureBuffer, 0, length));
  const rInteger = new Integer({
    valueHex: rBuffer
  });
  const sBuffer = new ArrayBuffer(length);
  const sView = new Uint8Array(sBuffer);
  sView.set(new Uint8Array(signatureBuffer, length, length));
  const sInteger = new Integer({
    valueHex: sBuffer
  });
  return new Sequence({
    value: [
      rInteger.convertToDER(),
      sInteger.convertToDER()
    ]
  }).toBER(false);
}
function createECDSASignatureFromCMS(cmsSignature, pointSize) {
  if (!(cmsSignature instanceof Sequence && cmsSignature.valueBlock.value.length === 2 && cmsSignature.valueBlock.value[0] instanceof Integer && cmsSignature.valueBlock.value[1] instanceof Integer)) return EMPTY_BUFFER2;
  const rValueView = cmsSignature.valueBlock.value[0].convertFromDER().valueBlock.valueHexView;
  const sValueView = cmsSignature.valueBlock.value[1].convertFromDER().valueBlock.valueHexView;
  const res = new Uint8Array(pointSize * 2);
  res.set(rValueView, pointSize - rValueView.byteLength);
  res.set(sValueView, 2 * pointSize - sValueView.byteLength);
  return res.buffer;
}
async function kdfWithCounter(hashFunction, zBuffer, Counter, SharedInfo, crypto2) {
  switch (hashFunction.toUpperCase()) {
    case "SHA-1":
    case "SHA-256":
    case "SHA-384":
    case "SHA-512":
      break;
    default:
      throw new ArgumentError(`Unknown hash function: ${hashFunction}`);
  }
  ArgumentError.assert(zBuffer, "zBuffer", "ArrayBuffer");
  if (zBuffer.byteLength === 0) throw new ArgumentError("'zBuffer' has zero length, error");
  ArgumentError.assert(SharedInfo, "SharedInfo", "ArrayBuffer");
  if (Counter > 255) throw new ArgumentError("Please set 'Counter' argument to value less or equal to 255");
  const counterBuffer = new ArrayBuffer(4);
  const counterView = new Uint8Array(counterBuffer);
  counterView[0] = 0;
  counterView[1] = 0;
  counterView[2] = 0;
  counterView[3] = Counter;
  let combinedBuffer = EMPTY_BUFFER2;
  combinedBuffer = utilConcatBuf(combinedBuffer, zBuffer);
  combinedBuffer = utilConcatBuf(combinedBuffer, counterBuffer);
  combinedBuffer = utilConcatBuf(combinedBuffer, SharedInfo);
  const result = await crypto2.digest({
    name: hashFunction
  }, combinedBuffer);
  return {
    counter: Counter,
    result
  };
}
async function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo, crypto2 = getCrypto(true)) {
  let hashLength = 0;
  let maxCounter = 1;
  switch (hashFunction.toUpperCase()) {
    case "SHA-1":
      hashLength = 160;
      break;
    case "SHA-256":
      hashLength = 256;
      break;
    case "SHA-384":
      hashLength = 384;
      break;
    case "SHA-512":
      hashLength = 512;
      break;
    default:
      throw new ArgumentError(`Unknown hash function: ${hashFunction}`);
  }
  ArgumentError.assert(Zbuffer, "Zbuffer", "ArrayBuffer");
  if (Zbuffer.byteLength === 0) throw new ArgumentError("'Zbuffer' has zero length, error");
  ArgumentError.assert(SharedInfo, "SharedInfo", "ArrayBuffer");
  const quotient = keydatalen / hashLength;
  if (Math.floor(quotient) > 0) {
    maxCounter = Math.floor(quotient);
    if (quotient - maxCounter > 0) maxCounter++;
  }
  const incomingResult = [];
  for (let i2 = 1; i2 <= maxCounter; i2++) incomingResult.push(await kdfWithCounter(hashFunction, Zbuffer, i2, SharedInfo, crypto2));
  let combinedBuffer = EMPTY_BUFFER2;
  let currentCounter = 1;
  let found = true;
  while (found) {
    found = false;
    for (const result of incomingResult) {
      if (result.counter === currentCounter) {
        combinedBuffer = utilConcatBuf(combinedBuffer, result.result);
        found = true;
        break;
      }
    }
    currentCounter++;
  }
  keydatalen >>= 3;
  if (combinedBuffer.byteLength > keydatalen) {
    const newBuffer = new ArrayBuffer(keydatalen);
    const newView = new Uint8Array(newBuffer);
    const combinedView = new Uint8Array(combinedBuffer);
    for (let i2 = 0; i2 < keydatalen; i2++) newView[i2] = combinedView[i2];
    return newBuffer;
  }
  return combinedBuffer;
}
var VERSION$i = "version";
var LOG_ID = "logID";
var EXTENSIONS$6 = "extensions";
var TIMESTAMP = "timestamp";
var HASH_ALGORITHM$3 = "hashAlgorithm";
var SIGNATURE_ALGORITHM$8 = "signatureAlgorithm";
var SIGNATURE$7 = "signature";
var NONE = "none";
var MD5 = "md5";
var SHA1 = "sha1";
var SHA224 = "sha224";
var SHA256 = "sha256";
var SHA384 = "sha384";
var SHA512 = "sha512";
var ANONYMOUS = "anonymous";
var RSA = "rsa";
var DSA = "dsa";
var ECDSA = "ecdsa";
var SignedCertificateTimestamp = class _SignedCertificateTimestamp extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$i, _SignedCertificateTimestamp.defaultValues(VERSION$i));
    this.logID = getParametersValue(parameters, LOG_ID, _SignedCertificateTimestamp.defaultValues(LOG_ID));
    this.timestamp = getParametersValue(parameters, TIMESTAMP, _SignedCertificateTimestamp.defaultValues(TIMESTAMP));
    this.extensions = getParametersValue(parameters, EXTENSIONS$6, _SignedCertificateTimestamp.defaultValues(EXTENSIONS$6));
    this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM$3, _SignedCertificateTimestamp.defaultValues(HASH_ALGORITHM$3));
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$8, _SignedCertificateTimestamp.defaultValues(SIGNATURE_ALGORITHM$8));
    this.signature = getParametersValue(parameters, SIGNATURE$7, _SignedCertificateTimestamp.defaultValues(SIGNATURE$7));
    if ("stream" in parameters && parameters.stream) {
      this.fromStream(parameters.stream);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$i:
        return 0;
      case LOG_ID:
      case EXTENSIONS$6:
        return EMPTY_BUFFER2;
      case TIMESTAMP:
        return /* @__PURE__ */ new Date(0);
      case HASH_ALGORITHM$3:
      case SIGNATURE_ALGORITHM$8:
        return EMPTY_STRING2;
      case SIGNATURE$7:
        return new Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  fromSchema(schema) {
    if (schema instanceof RawData === false) throw new Error("Object's schema was not verified against input data for SignedCertificateTimestamp");
    const seqStream = new SeqStream({
      stream: new ByteStream({
        buffer: schema.data
      })
    });
    this.fromStream(seqStream);
  }
  fromStream(stream) {
    const blockLength = stream.getUint16();
    this.version = stream.getBlock(1)[0];
    if (this.version === 0) {
      this.logID = new Uint8Array(stream.getBlock(32)).buffer.slice(0);
      this.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8));
      const extensionsLength = stream.getUint16();
      this.extensions = new Uint8Array(stream.getBlock(extensionsLength)).buffer.slice(0);
      switch (stream.getBlock(1)[0]) {
        case 0:
          this.hashAlgorithm = NONE;
          break;
        case 1:
          this.hashAlgorithm = MD5;
          break;
        case 2:
          this.hashAlgorithm = SHA1;
          break;
        case 3:
          this.hashAlgorithm = SHA224;
          break;
        case 4:
          this.hashAlgorithm = SHA256;
          break;
        case 5:
          this.hashAlgorithm = SHA384;
          break;
        case 6:
          this.hashAlgorithm = SHA512;
          break;
        default:
          throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
      }
      switch (stream.getBlock(1)[0]) {
        case 0:
          this.signatureAlgorithm = ANONYMOUS;
          break;
        case 1:
          this.signatureAlgorithm = RSA;
          break;
        case 2:
          this.signatureAlgorithm = DSA;
          break;
        case 3:
          this.signatureAlgorithm = ECDSA;
          break;
        default:
          throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
      }
      const signatureLength = stream.getUint16();
      const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);
      const asn1 = fromBER(signatureData);
      AsnError.assert(asn1, "SignedCertificateTimestamp");
      this.signature = asn1.result;
      if (blockLength !== 47 + extensionsLength + signatureLength) {
        throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
      }
    }
  }
  toSchema() {
    const stream = this.toStream();
    return new RawData({
      data: stream.stream.buffer
    });
  }
  toStream() {
    const stream = new SeqStream();
    stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecodeView.byteLength);
    stream.appendChar(this.version);
    stream.appendView(new Uint8Array(this.logID));
    const timeBuffer = new ArrayBuffer(8);
    const timeView = new Uint8Array(timeBuffer);
    const baseArray = utilToBase(this.timestamp.valueOf(), 8);
    timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);
    stream.appendView(timeView);
    stream.appendUint16(this.extensions.byteLength);
    if (this.extensions.byteLength) stream.appendView(new Uint8Array(this.extensions));
    let _hashAlgorithm;
    switch (this.hashAlgorithm.toLowerCase()) {
      case NONE:
        _hashAlgorithm = 0;
        break;
      case MD5:
        _hashAlgorithm = 1;
        break;
      case SHA1:
        _hashAlgorithm = 2;
        break;
      case SHA224:
        _hashAlgorithm = 3;
        break;
      case SHA256:
        _hashAlgorithm = 4;
        break;
      case SHA384:
        _hashAlgorithm = 5;
        break;
      case SHA512:
        _hashAlgorithm = 6;
        break;
      default:
        throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);
    }
    stream.appendChar(_hashAlgorithm);
    let _signatureAlgorithm;
    switch (this.signatureAlgorithm.toLowerCase()) {
      case ANONYMOUS:
        _signatureAlgorithm = 0;
        break;
      case RSA:
        _signatureAlgorithm = 1;
        break;
      case DSA:
        _signatureAlgorithm = 2;
        break;
      case ECDSA:
        _signatureAlgorithm = 3;
        break;
      default:
        throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);
    }
    stream.appendChar(_signatureAlgorithm);
    const _signature = this.signature.toBER(false);
    stream.appendUint16(_signature.byteLength);
    stream.appendView(new Uint8Array(_signature));
    return stream;
  }
  toJSON() {
    return {
      version: this.version,
      logID: bufferToHexCodes(this.logID),
      timestamp: this.timestamp,
      extensions: bufferToHexCodes(this.extensions),
      hashAlgorithm: this.hashAlgorithm,
      signatureAlgorithm: this.signatureAlgorithm,
      signature: this.signature.toJSON()
    };
  }
  async verify(logs, data, dataType = 0, crypto2 = getCrypto(true)) {
    const logId = toBase64(arrayBufferToString(this.logID));
    let publicKeyBase64 = null;
    const stream = new SeqStream();
    for (const log of logs) {
      if (log.log_id === logId) {
        publicKeyBase64 = log.key;
        break;
      }
    }
    if (!publicKeyBase64) {
      throw new Error(`Public key not found for CT with logId: ${logId}`);
    }
    const pki = stringToArrayBuffer(fromBase64(publicKeyBase64));
    const publicKeyInfo = PublicKeyInfo.fromBER(pki);
    stream.appendChar(0);
    stream.appendChar(0);
    const timeBuffer = new ArrayBuffer(8);
    const timeView = new Uint8Array(timeBuffer);
    const baseArray = utilToBase(this.timestamp.valueOf(), 8);
    timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);
    stream.appendView(timeView);
    stream.appendUint16(dataType);
    if (dataType === 0) stream.appendUint24(data.byteLength);
    stream.appendView(new Uint8Array(data));
    stream.appendUint16(this.extensions.byteLength);
    if (this.extensions.byteLength !== 0) stream.appendView(new Uint8Array(this.extensions));
    return crypto2.verifyWithPublicKey(stream.buffer.slice(0, stream.length), new OctetString({
      valueHex: this.signature.toBER(false)
    }), publicKeyInfo, {
      algorithmId: EMPTY_STRING2
    }, "SHA-256");
  }
};
SignedCertificateTimestamp.CLASS_NAME = "SignedCertificateTimestamp";
var TIMESTAMPS = "timestamps";
var SignedCertificateTimestampList = class _SignedCertificateTimestampList extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.timestamps = getParametersValue(parameters, TIMESTAMPS, _SignedCertificateTimestampList.defaultValues(TIMESTAMPS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TIMESTAMPS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TIMESTAMPS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    var _a4;
    const names = getParametersValue(parameters, "names", {});
    (_a4 = names.optional) !== null && _a4 !== void 0 ? _a4 : names.optional = false;
    return new OctetString({
      name: names.blockName || "SignedCertificateTimestampList",
      optional: names.optional
    });
  }
  fromSchema(schema) {
    if (schema instanceof OctetString === false) {
      throw new Error("Object's schema was not verified against input data for SignedCertificateTimestampList");
    }
    const seqStream = new SeqStream({
      stream: new ByteStream({
        buffer: schema.valueBlock.valueHex
      })
    });
    const dataLength = seqStream.getUint16();
    if (dataLength !== seqStream.length) {
      throw new Error("Object's schema was not verified against input data for SignedCertificateTimestampList");
    }
    while (seqStream.length) {
      this.timestamps.push(new SignedCertificateTimestamp({
        stream: seqStream
      }));
    }
  }
  toSchema() {
    const stream = new SeqStream();
    let overallLength = 0;
    const timestampsData = [];
    for (const timestamp of this.timestamps) {
      const timestampStream = timestamp.toStream();
      timestampsData.push(timestampStream);
      overallLength += timestampStream.stream.buffer.byteLength;
    }
    stream.appendUint16(overallLength);
    for (const timestamp of timestampsData) {
      stream.appendView(timestamp.stream.view);
    }
    return new OctetString({
      valueHex: stream.stream.buffer.slice(0)
    });
  }
  toJSON() {
    return {
      timestamps: Array.from(this.timestamps, (o2) => o2.toJSON())
    };
  }
};
SignedCertificateTimestampList.CLASS_NAME = "SignedCertificateTimestampList";
var ATTRIBUTES$4 = "attributes";
var CLEAR_PROPS$11 = [
  ATTRIBUTES$4
];
var SubjectDirectoryAttributes = class _SubjectDirectoryAttributes extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.attributes = getParametersValue(parameters, ATTRIBUTES$4, _SubjectDirectoryAttributes.defaultValues(ATTRIBUTES$4));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ATTRIBUTES$4:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.attributes || EMPTY_STRING2,
          value: Attribute.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$11);
    const asn1 = compareSchema(schema, schema, _SubjectDirectoryAttributes.schema({
      names: {
        attributes: ATTRIBUTES$4
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.attributes = Array.from(asn1.result.attributes, (element) => new Attribute({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.attributes, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      attributes: Array.from(this.attributes, (o2) => o2.toJSON())
    };
  }
};
SubjectDirectoryAttributes.CLASS_NAME = "SubjectDirectoryAttributes";
var ExtensionValueFactory = class _ExtensionValueFactory {
  static getItems() {
    if (!this.types) {
      this.types = {};
      _ExtensionValueFactory.register(id_SubjectAltName, "SubjectAltName", AltName);
      _ExtensionValueFactory.register(id_IssuerAltName, "IssuerAltName", AltName);
      _ExtensionValueFactory.register(id_AuthorityKeyIdentifier, "AuthorityKeyIdentifier", AuthorityKeyIdentifier);
      _ExtensionValueFactory.register(id_BasicConstraints, "BasicConstraints", BasicConstraints);
      _ExtensionValueFactory.register(id_MicrosoftCaVersion, "MicrosoftCaVersion", CAVersion);
      _ExtensionValueFactory.register(id_CertificatePolicies, "CertificatePolicies", CertificatePolicies);
      _ExtensionValueFactory.register(id_MicrosoftAppPolicies, "CertificatePoliciesMicrosoft", CertificatePolicies);
      _ExtensionValueFactory.register(id_MicrosoftCertTemplateV2, "MicrosoftCertTemplateV2", CertificateTemplate);
      _ExtensionValueFactory.register(id_CRLDistributionPoints, "CRLDistributionPoints", CRLDistributionPoints);
      _ExtensionValueFactory.register(id_FreshestCRL, "FreshestCRL", CRLDistributionPoints);
      _ExtensionValueFactory.register(id_ExtKeyUsage, "ExtKeyUsage", ExtKeyUsage);
      _ExtensionValueFactory.register(id_CertificateIssuer, "CertificateIssuer", GeneralNames);
      _ExtensionValueFactory.register(id_AuthorityInfoAccess, "AuthorityInfoAccess", InfoAccess);
      _ExtensionValueFactory.register(id_SubjectInfoAccess, "SubjectInfoAccess", InfoAccess);
      _ExtensionValueFactory.register(id_IssuingDistributionPoint, "IssuingDistributionPoint", IssuingDistributionPoint);
      _ExtensionValueFactory.register(id_NameConstraints, "NameConstraints", NameConstraints);
      _ExtensionValueFactory.register(id_PolicyConstraints, "PolicyConstraints", PolicyConstraints);
      _ExtensionValueFactory.register(id_PolicyMappings, "PolicyMappings", PolicyMappings);
      _ExtensionValueFactory.register(id_PrivateKeyUsagePeriod, "PrivateKeyUsagePeriod", PrivateKeyUsagePeriod);
      _ExtensionValueFactory.register(id_QCStatements, "QCStatements", QCStatements);
      _ExtensionValueFactory.register(id_SignedCertificateTimestampList, "SignedCertificateTimestampList", SignedCertificateTimestampList);
      _ExtensionValueFactory.register(id_SubjectDirectoryAttributes, "SubjectDirectoryAttributes", SubjectDirectoryAttributes);
    }
    return this.types;
  }
  static fromBER(id, raw) {
    const asn1 = fromBER(raw);
    if (asn1.offset === -1) {
      return null;
    }
    const item = this.find(id);
    if (item) {
      try {
        return new item.type({
          schema: asn1.result
        });
      } catch (ex) {
        const res = new item.type();
        res.parsingError = `Incorrectly formatted value of extension ${item.name} (${id})`;
        return res;
      }
    }
    return asn1.result;
  }
  static find(id) {
    const types2 = this.getItems();
    return types2[id] || null;
  }
  static register(id, name, type) {
    this.getItems()[id] = {
      name,
      type
    };
  }
};
var EXTN_ID = "extnID";
var CRITICAL = "critical";
var EXTN_VALUE = "extnValue";
var PARSED_VALUE$5 = "parsedValue";
var CLEAR_PROPS$10 = [
  EXTN_ID,
  CRITICAL,
  EXTN_VALUE
];
var Extension = class _Extension extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.extnID = getParametersValue(parameters, EXTN_ID, _Extension.defaultValues(EXTN_ID));
    this.critical = getParametersValue(parameters, CRITICAL, _Extension.defaultValues(CRITICAL));
    if (EXTN_VALUE in parameters) {
      this.extnValue = new OctetString({
        valueHex: parameters.extnValue
      });
    } else {
      this.extnValue = _Extension.defaultValues(EXTN_VALUE);
    }
    if (PARSED_VALUE$5 in parameters) {
      this.parsedValue = getParametersValue(parameters, PARSED_VALUE$5, _Extension.defaultValues(PARSED_VALUE$5));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  get parsedValue() {
    if (this._parsedValue === void 0) {
      const parsedValue = ExtensionValueFactory.fromBER(this.extnID, this.extnValue.valueBlock.valueHexView);
      this._parsedValue = parsedValue;
    }
    return this._parsedValue || void 0;
  }
  set parsedValue(value) {
    this._parsedValue = value;
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case EXTN_ID:
        return EMPTY_STRING2;
      case CRITICAL:
        return false;
      case EXTN_VALUE:
        return new OctetString();
      case PARSED_VALUE$5:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.extnID || EMPTY_STRING2
        }),
        new Boolean2({
          name: names.critical || EMPTY_STRING2,
          optional: true
        }),
        new OctetString({
          name: names.extnValue || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$10);
    const asn1 = compareSchema(schema, schema, _Extension.schema({
      names: {
        extnID: EXTN_ID,
        critical: CRITICAL,
        extnValue: EXTN_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.extnID = asn1.result.extnID.valueBlock.toString();
    if (CRITICAL in asn1.result) {
      this.critical = asn1.result.critical.valueBlock.value;
    }
    this.extnValue = asn1.result.extnValue;
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new ObjectIdentifier({
      value: this.extnID
    }));
    if (this.critical !== _Extension.defaultValues(CRITICAL)) {
      outputArray.push(new Boolean2({
        value: this.critical
      }));
    }
    outputArray.push(this.extnValue);
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {
      extnID: this.extnID,
      extnValue: this.extnValue.toJSON()
    };
    if (this.critical !== _Extension.defaultValues(CRITICAL)) {
      object.critical = this.critical;
    }
    if (this.parsedValue && this.parsedValue.toJSON) {
      object.parsedValue = this.parsedValue.toJSON();
    }
    return object;
  }
};
Extension.CLASS_NAME = "Extension";
var EXTENSIONS$5 = "extensions";
var CLEAR_PROPS$$ = [
  EXTENSIONS$5
];
var Extensions = class _Extensions extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.extensions = getParametersValue(parameters, EXTENSIONS$5, _Extensions.defaultValues(EXTENSIONS$5));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case EXTENSIONS$5:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}, optional = false) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      optional,
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.extensions || EMPTY_STRING2,
          value: Extension.schema(names.extension || {})
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$$);
    const asn1 = compareSchema(schema, schema, _Extensions.schema({
      names: {
        extensions: EXTENSIONS$5
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.extensions = Array.from(asn1.result.extensions, (element) => new Extension({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.extensions, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      extensions: this.extensions.map((o2) => o2.toJSON())
    };
  }
};
Extensions.CLASS_NAME = "Extensions";
var ISSUER$5 = "issuer";
var SERIAL_NUMBER$6 = "serialNumber";
var ISSUER_UID = "issuerUID";
var CLEAR_PROPS$_ = [
  ISSUER$5,
  SERIAL_NUMBER$6,
  ISSUER_UID
];
var IssuerSerial = class _IssuerSerial extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.issuer = getParametersValue(parameters, ISSUER$5, _IssuerSerial.defaultValues(ISSUER$5));
    this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$6, _IssuerSerial.defaultValues(SERIAL_NUMBER$6));
    if (ISSUER_UID in parameters) {
      this.issuerUID = getParametersValue(parameters, ISSUER_UID, _IssuerSerial.defaultValues(ISSUER_UID));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ISSUER$5:
        return new GeneralNames();
      case SERIAL_NUMBER$6:
        return new Integer();
      case ISSUER_UID:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        GeneralNames.schema(names.issuer || {}),
        new Integer({
          name: names.serialNumber || EMPTY_STRING2
        }),
        new BitString({
          optional: true,
          name: names.issuerUID || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$_);
    const asn1 = compareSchema(schema, schema, _IssuerSerial.schema({
      names: {
        issuer: {
          names: {
            blockName: ISSUER$5
          }
        },
        serialNumber: SERIAL_NUMBER$6,
        issuerUID: ISSUER_UID
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.issuer = new GeneralNames({
      schema: asn1.result.issuer
    });
    this.serialNumber = asn1.result.serialNumber;
    if (ISSUER_UID in asn1.result) this.issuerUID = asn1.result.issuerUID;
  }
  toSchema() {
    const result = new Sequence({
      value: [
        this.issuer.toSchema(),
        this.serialNumber
      ]
    });
    if (this.issuerUID) {
      result.valueBlock.value.push(this.issuerUID);
    }
    return result;
  }
  toJSON() {
    const result = {
      issuer: this.issuer.toJSON(),
      serialNumber: this.serialNumber.toJSON()
    };
    if (this.issuerUID) {
      result.issuerUID = this.issuerUID.toJSON();
    }
    return result;
  }
};
IssuerSerial.CLASS_NAME = "IssuerSerial";
var VERSION$h = "version";
var BASE_CERTIFICATE_ID$2 = "baseCertificateID";
var SUBJECT_NAME = "subjectName";
var ISSUER$4 = "issuer";
var SIGNATURE$6 = "signature";
var SERIAL_NUMBER$5 = "serialNumber";
var ATTR_CERT_VALIDITY_PERIOD$1 = "attrCertValidityPeriod";
var ATTRIBUTES$3 = "attributes";
var ISSUER_UNIQUE_ID$2 = "issuerUniqueID";
var EXTENSIONS$4 = "extensions";
var CLEAR_PROPS$Z = [
  VERSION$h,
  BASE_CERTIFICATE_ID$2,
  SUBJECT_NAME,
  ISSUER$4,
  SIGNATURE$6,
  SERIAL_NUMBER$5,
  ATTR_CERT_VALIDITY_PERIOD$1,
  ATTRIBUTES$3,
  ISSUER_UNIQUE_ID$2,
  EXTENSIONS$4
];
var AttributeCertificateInfoV1 = class _AttributeCertificateInfoV1 extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$h, _AttributeCertificateInfoV1.defaultValues(VERSION$h));
    if (BASE_CERTIFICATE_ID$2 in parameters) {
      this.baseCertificateID = getParametersValue(parameters, BASE_CERTIFICATE_ID$2, _AttributeCertificateInfoV1.defaultValues(BASE_CERTIFICATE_ID$2));
    }
    if (SUBJECT_NAME in parameters) {
      this.subjectName = getParametersValue(parameters, SUBJECT_NAME, _AttributeCertificateInfoV1.defaultValues(SUBJECT_NAME));
    }
    this.issuer = getParametersValue(parameters, ISSUER$4, _AttributeCertificateInfoV1.defaultValues(ISSUER$4));
    this.signature = getParametersValue(parameters, SIGNATURE$6, _AttributeCertificateInfoV1.defaultValues(SIGNATURE$6));
    this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$5, _AttributeCertificateInfoV1.defaultValues(SERIAL_NUMBER$5));
    this.attrCertValidityPeriod = getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD$1, _AttributeCertificateInfoV1.defaultValues(ATTR_CERT_VALIDITY_PERIOD$1));
    this.attributes = getParametersValue(parameters, ATTRIBUTES$3, _AttributeCertificateInfoV1.defaultValues(ATTRIBUTES$3));
    if (ISSUER_UNIQUE_ID$2 in parameters) this.issuerUniqueID = getParametersValue(parameters, ISSUER_UNIQUE_ID$2, _AttributeCertificateInfoV1.defaultValues(ISSUER_UNIQUE_ID$2));
    if (EXTENSIONS$4 in parameters) {
      this.extensions = getParametersValue(parameters, EXTENSIONS$4, _AttributeCertificateInfoV1.defaultValues(EXTENSIONS$4));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$h:
        return 0;
      case BASE_CERTIFICATE_ID$2:
        return new IssuerSerial();
      case SUBJECT_NAME:
        return new GeneralNames();
      case ISSUER$4:
        return new GeneralNames();
      case SIGNATURE$6:
        return new AlgorithmIdentifier();
      case SERIAL_NUMBER$5:
        return new Integer();
      case ATTR_CERT_VALIDITY_PERIOD$1:
        return new AttCertValidityPeriod();
      case ATTRIBUTES$3:
        return [];
      case ISSUER_UNIQUE_ID$2:
        return new BitString();
      case EXTENSIONS$4:
        return new Extensions();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        new Choice({
          value: [
            new Constructed({
              name: names.baseCertificateID || EMPTY_STRING2,
              idBlock: {
                tagClass: 3,
                tagNumber: 0
              },
              value: IssuerSerial.schema().valueBlock.value
            }),
            new Constructed({
              name: names.subjectName || EMPTY_STRING2,
              idBlock: {
                tagClass: 3,
                tagNumber: 1
              },
              value: GeneralNames.schema().valueBlock.value
            })
          ]
        }),
        GeneralNames.schema({
          names: {
            blockName: names.issuer || EMPTY_STRING2
          }
        }),
        AlgorithmIdentifier.schema(names.signature || {}),
        new Integer({
          name: names.serialNumber || EMPTY_STRING2
        }),
        AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),
        new Sequence({
          name: names.attributes || EMPTY_STRING2,
          value: [
            new Repeated({
              value: Attribute.schema()
            })
          ]
        }),
        new BitString({
          optional: true,
          name: names.issuerUniqueID || EMPTY_STRING2
        }),
        Extensions.schema(names.extensions || {}, true)
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$Z);
    const asn1 = compareSchema(schema, schema, _AttributeCertificateInfoV1.schema({
      names: {
        version: VERSION$h,
        baseCertificateID: BASE_CERTIFICATE_ID$2,
        subjectName: SUBJECT_NAME,
        issuer: ISSUER$4,
        signature: {
          names: {
            blockName: SIGNATURE$6
          }
        },
        serialNumber: SERIAL_NUMBER$5,
        attrCertValidityPeriod: {
          names: {
            blockName: ATTR_CERT_VALIDITY_PERIOD$1
          }
        },
        attributes: ATTRIBUTES$3,
        issuerUniqueID: ISSUER_UNIQUE_ID$2,
        extensions: {
          names: {
            blockName: EXTENSIONS$4
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    if (BASE_CERTIFICATE_ID$2 in asn1.result) {
      this.baseCertificateID = new IssuerSerial({
        schema: new Sequence({
          value: asn1.result.baseCertificateID.valueBlock.value
        })
      });
    }
    if (SUBJECT_NAME in asn1.result) {
      this.subjectName = new GeneralNames({
        schema: new Sequence({
          value: asn1.result.subjectName.valueBlock.value
        })
      });
    }
    this.issuer = asn1.result.issuer;
    this.signature = new AlgorithmIdentifier({
      schema: asn1.result.signature
    });
    this.serialNumber = asn1.result.serialNumber;
    this.attrCertValidityPeriod = new AttCertValidityPeriod({
      schema: asn1.result.attrCertValidityPeriod
    });
    this.attributes = Array.from(asn1.result.attributes.valueBlock.value, (element) => new Attribute({
      schema: element
    }));
    if (ISSUER_UNIQUE_ID$2 in asn1.result) {
      this.issuerUniqueID = asn1.result.issuerUniqueID;
    }
    if (EXTENSIONS$4 in asn1.result) {
      this.extensions = new Extensions({
        schema: asn1.result.extensions
      });
    }
  }
  toSchema() {
    const result = new Sequence({
      value: [
        new Integer({
          value: this.version
        })
      ]
    });
    if (this.baseCertificateID) {
      result.valueBlock.value.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.baseCertificateID.toSchema().valueBlock.value
      }));
    }
    if (this.subjectName) {
      result.valueBlock.value.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: this.subjectName.toSchema().valueBlock.value
      }));
    }
    result.valueBlock.value.push(this.issuer.toSchema());
    result.valueBlock.value.push(this.signature.toSchema());
    result.valueBlock.value.push(this.serialNumber);
    result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());
    result.valueBlock.value.push(new Sequence({
      value: Array.from(this.attributes, (o2) => o2.toSchema())
    }));
    if (this.issuerUniqueID) {
      result.valueBlock.value.push(this.issuerUniqueID);
    }
    if (this.extensions) {
      result.valueBlock.value.push(this.extensions.toSchema());
    }
    return result;
  }
  toJSON() {
    const result = {
      version: this.version
    };
    if (this.baseCertificateID) {
      result.baseCertificateID = this.baseCertificateID.toJSON();
    }
    if (this.subjectName) {
      result.subjectName = this.subjectName.toJSON();
    }
    result.issuer = this.issuer.toJSON();
    result.signature = this.signature.toJSON();
    result.serialNumber = this.serialNumber.toJSON();
    result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();
    result.attributes = Array.from(this.attributes, (o2) => o2.toJSON());
    if (this.issuerUniqueID) {
      result.issuerUniqueID = this.issuerUniqueID.toJSON();
    }
    if (this.extensions) {
      result.extensions = this.extensions.toJSON();
    }
    return result;
  }
};
AttributeCertificateInfoV1.CLASS_NAME = "AttributeCertificateInfoV1";
var ACINFO$1 = "acinfo";
var SIGNATURE_ALGORITHM$7 = "signatureAlgorithm";
var SIGNATURE_VALUE$4 = "signatureValue";
var CLEAR_PROPS$Y = [
  ACINFO$1,
  SIGNATURE_VALUE$4,
  SIGNATURE_ALGORITHM$7
];
var AttributeCertificateV1 = class _AttributeCertificateV1 extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.acinfo = getParametersValue(parameters, ACINFO$1, _AttributeCertificateV1.defaultValues(ACINFO$1));
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$7, _AttributeCertificateV1.defaultValues(SIGNATURE_ALGORITHM$7));
    this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE$4, _AttributeCertificateV1.defaultValues(SIGNATURE_VALUE$4));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ACINFO$1:
        return new AttributeCertificateInfoV1();
      case SIGNATURE_ALGORITHM$7:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE$4:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AttributeCertificateInfoV1.schema(names.acinfo || {}),
        AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),
        new BitString({
          name: names.signatureValue || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$Y);
    const asn1 = compareSchema(schema, schema, _AttributeCertificateV1.schema({
      names: {
        acinfo: {
          names: {
            blockName: ACINFO$1
          }
        },
        signatureAlgorithm: {
          names: {
            blockName: SIGNATURE_ALGORITHM$7
          }
        },
        signatureValue: SIGNATURE_VALUE$4
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.acinfo = new AttributeCertificateInfoV1({
      schema: asn1.result.acinfo
    });
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.acinfo.toSchema(),
        this.signatureAlgorithm.toSchema(),
        this.signatureValue
      ]
    });
  }
  toJSON() {
    return {
      acinfo: this.acinfo.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
  }
};
AttributeCertificateV1.CLASS_NAME = "AttributeCertificateV1";
var DIGESTED_OBJECT_TYPE = "digestedObjectType";
var OTHER_OBJECT_TYPE_ID = "otherObjectTypeID";
var DIGEST_ALGORITHM$2 = "digestAlgorithm";
var OBJECT_DIGEST = "objectDigest";
var CLEAR_PROPS$X = [
  DIGESTED_OBJECT_TYPE,
  OTHER_OBJECT_TYPE_ID,
  DIGEST_ALGORITHM$2,
  OBJECT_DIGEST
];
var ObjectDigestInfo = class _ObjectDigestInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.digestedObjectType = getParametersValue(parameters, DIGESTED_OBJECT_TYPE, _ObjectDigestInfo.defaultValues(DIGESTED_OBJECT_TYPE));
    if (OTHER_OBJECT_TYPE_ID in parameters) {
      this.otherObjectTypeID = getParametersValue(parameters, OTHER_OBJECT_TYPE_ID, _ObjectDigestInfo.defaultValues(OTHER_OBJECT_TYPE_ID));
    }
    this.digestAlgorithm = getParametersValue(parameters, DIGEST_ALGORITHM$2, _ObjectDigestInfo.defaultValues(DIGEST_ALGORITHM$2));
    this.objectDigest = getParametersValue(parameters, OBJECT_DIGEST, _ObjectDigestInfo.defaultValues(OBJECT_DIGEST));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DIGESTED_OBJECT_TYPE:
        return new Enumerated();
      case OTHER_OBJECT_TYPE_ID:
        return new ObjectIdentifier();
      case DIGEST_ALGORITHM$2:
        return new AlgorithmIdentifier();
      case OBJECT_DIGEST:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Enumerated({
          name: names.digestedObjectType || EMPTY_STRING2
        }),
        new ObjectIdentifier({
          optional: true,
          name: names.otherObjectTypeID || EMPTY_STRING2
        }),
        AlgorithmIdentifier.schema(names.digestAlgorithm || {}),
        new BitString({
          name: names.objectDigest || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$X);
    const asn1 = compareSchema(schema, schema, _ObjectDigestInfo.schema({
      names: {
        digestedObjectType: DIGESTED_OBJECT_TYPE,
        otherObjectTypeID: OTHER_OBJECT_TYPE_ID,
        digestAlgorithm: {
          names: {
            blockName: DIGEST_ALGORITHM$2
          }
        },
        objectDigest: OBJECT_DIGEST
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.digestedObjectType = asn1.result.digestedObjectType;
    if (OTHER_OBJECT_TYPE_ID in asn1.result) {
      this.otherObjectTypeID = asn1.result.otherObjectTypeID;
    }
    this.digestAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.digestAlgorithm
    });
    this.objectDigest = asn1.result.objectDigest;
  }
  toSchema() {
    const result = new Sequence({
      value: [
        this.digestedObjectType
      ]
    });
    if (this.otherObjectTypeID) {
      result.valueBlock.value.push(this.otherObjectTypeID);
    }
    result.valueBlock.value.push(this.digestAlgorithm.toSchema());
    result.valueBlock.value.push(this.objectDigest);
    return result;
  }
  toJSON() {
    const result = {
      digestedObjectType: this.digestedObjectType.toJSON(),
      digestAlgorithm: this.digestAlgorithm.toJSON(),
      objectDigest: this.objectDigest.toJSON()
    };
    if (this.otherObjectTypeID) {
      result.otherObjectTypeID = this.otherObjectTypeID.toJSON();
    }
    return result;
  }
};
ObjectDigestInfo.CLASS_NAME = "ObjectDigestInfo";
var ISSUER_NAME = "issuerName";
var BASE_CERTIFICATE_ID$1 = "baseCertificateID";
var OBJECT_DIGEST_INFO$1 = "objectDigestInfo";
var CLEAR_PROPS$W = [
  ISSUER_NAME,
  BASE_CERTIFICATE_ID$1,
  OBJECT_DIGEST_INFO$1
];
var V2Form = class _V2Form extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (ISSUER_NAME in parameters) {
      this.issuerName = getParametersValue(parameters, ISSUER_NAME, _V2Form.defaultValues(ISSUER_NAME));
    }
    if (BASE_CERTIFICATE_ID$1 in parameters) {
      this.baseCertificateID = getParametersValue(parameters, BASE_CERTIFICATE_ID$1, _V2Form.defaultValues(BASE_CERTIFICATE_ID$1));
    }
    if (OBJECT_DIGEST_INFO$1 in parameters) {
      this.objectDigestInfo = getParametersValue(parameters, OBJECT_DIGEST_INFO$1, _V2Form.defaultValues(OBJECT_DIGEST_INFO$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ISSUER_NAME:
        return new GeneralNames();
      case BASE_CERTIFICATE_ID$1:
        return new IssuerSerial();
      case OBJECT_DIGEST_INFO$1:
        return new ObjectDigestInfo();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        GeneralNames.schema({
          names: {
            blockName: names.issuerName
          }
        }, true),
        new Constructed({
          optional: true,
          name: names.baseCertificateID || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: IssuerSerial.schema().valueBlock.value
        }),
        new Constructed({
          optional: true,
          name: names.objectDigestInfo || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: ObjectDigestInfo.schema().valueBlock.value
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$W);
    const asn1 = compareSchema(schema, schema, _V2Form.schema({
      names: {
        issuerName: ISSUER_NAME,
        baseCertificateID: BASE_CERTIFICATE_ID$1,
        objectDigestInfo: OBJECT_DIGEST_INFO$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (ISSUER_NAME in asn1.result) this.issuerName = new GeneralNames({
      schema: asn1.result.issuerName
    });
    if (BASE_CERTIFICATE_ID$1 in asn1.result) {
      this.baseCertificateID = new IssuerSerial({
        schema: new Sequence({
          value: asn1.result.baseCertificateID.valueBlock.value
        })
      });
    }
    if (OBJECT_DIGEST_INFO$1 in asn1.result) {
      this.objectDigestInfo = new ObjectDigestInfo({
        schema: new Sequence({
          value: asn1.result.objectDigestInfo.valueBlock.value
        })
      });
    }
  }
  toSchema() {
    const result = new Sequence();
    if (this.issuerName) result.valueBlock.value.push(this.issuerName.toSchema());
    if (this.baseCertificateID) {
      result.valueBlock.value.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.baseCertificateID.toSchema().valueBlock.value
      }));
    }
    if (this.objectDigestInfo) {
      result.valueBlock.value.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: this.objectDigestInfo.toSchema().valueBlock.value
      }));
    }
    return result;
  }
  toJSON() {
    const result = {};
    if (this.issuerName) {
      result.issuerName = this.issuerName.toJSON();
    }
    if (this.baseCertificateID) {
      result.baseCertificateID = this.baseCertificateID.toJSON();
    }
    if (this.objectDigestInfo) {
      result.objectDigestInfo = this.objectDigestInfo.toJSON();
    }
    return result;
  }
};
V2Form.CLASS_NAME = "V2Form";
var BASE_CERTIFICATE_ID = "baseCertificateID";
var ENTITY_NAME = "entityName";
var OBJECT_DIGEST_INFO = "objectDigestInfo";
var CLEAR_PROPS$V = [
  BASE_CERTIFICATE_ID,
  ENTITY_NAME,
  OBJECT_DIGEST_INFO
];
var Holder = class _Holder extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (BASE_CERTIFICATE_ID in parameters) {
      this.baseCertificateID = getParametersValue(parameters, BASE_CERTIFICATE_ID, _Holder.defaultValues(BASE_CERTIFICATE_ID));
    }
    if (ENTITY_NAME in parameters) {
      this.entityName = getParametersValue(parameters, ENTITY_NAME, _Holder.defaultValues(ENTITY_NAME));
    }
    if (OBJECT_DIGEST_INFO in parameters) {
      this.objectDigestInfo = getParametersValue(parameters, OBJECT_DIGEST_INFO, _Holder.defaultValues(OBJECT_DIGEST_INFO));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case BASE_CERTIFICATE_ID:
        return new IssuerSerial();
      case ENTITY_NAME:
        return new GeneralNames();
      case OBJECT_DIGEST_INFO:
        return new ObjectDigestInfo();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Constructed({
          optional: true,
          name: names.baseCertificateID || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: IssuerSerial.schema().valueBlock.value
        }),
        new Constructed({
          optional: true,
          name: names.entityName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: GeneralNames.schema().valueBlock.value
        }),
        new Constructed({
          optional: true,
          name: names.objectDigestInfo || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: ObjectDigestInfo.schema().valueBlock.value
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$V);
    const asn1 = compareSchema(schema, schema, _Holder.schema({
      names: {
        baseCertificateID: BASE_CERTIFICATE_ID,
        entityName: ENTITY_NAME,
        objectDigestInfo: OBJECT_DIGEST_INFO
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (BASE_CERTIFICATE_ID in asn1.result) {
      this.baseCertificateID = new IssuerSerial({
        schema: new Sequence({
          value: asn1.result.baseCertificateID.valueBlock.value
        })
      });
    }
    if (ENTITY_NAME in asn1.result) {
      this.entityName = new GeneralNames({
        schema: new Sequence({
          value: asn1.result.entityName.valueBlock.value
        })
      });
    }
    if (OBJECT_DIGEST_INFO in asn1.result) {
      this.objectDigestInfo = new ObjectDigestInfo({
        schema: new Sequence({
          value: asn1.result.objectDigestInfo.valueBlock.value
        })
      });
    }
  }
  toSchema() {
    const result = new Sequence();
    if (this.baseCertificateID) {
      result.valueBlock.value.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.baseCertificateID.toSchema().valueBlock.value
      }));
    }
    if (this.entityName) {
      result.valueBlock.value.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: this.entityName.toSchema().valueBlock.value
      }));
    }
    if (this.objectDigestInfo) {
      result.valueBlock.value.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: this.objectDigestInfo.toSchema().valueBlock.value
      }));
    }
    return result;
  }
  toJSON() {
    const result = {};
    if (this.baseCertificateID) {
      result.baseCertificateID = this.baseCertificateID.toJSON();
    }
    if (this.entityName) {
      result.entityName = this.entityName.toJSON();
    }
    if (this.objectDigestInfo) {
      result.objectDigestInfo = this.objectDigestInfo.toJSON();
    }
    return result;
  }
};
Holder.CLASS_NAME = "Holder";
var VERSION$g = "version";
var HOLDER = "holder";
var ISSUER$3 = "issuer";
var SIGNATURE$5 = "signature";
var SERIAL_NUMBER$4 = "serialNumber";
var ATTR_CERT_VALIDITY_PERIOD = "attrCertValidityPeriod";
var ATTRIBUTES$2 = "attributes";
var ISSUER_UNIQUE_ID$1 = "issuerUniqueID";
var EXTENSIONS$3 = "extensions";
var CLEAR_PROPS$U = [
  VERSION$g,
  HOLDER,
  ISSUER$3,
  SIGNATURE$5,
  SERIAL_NUMBER$4,
  ATTR_CERT_VALIDITY_PERIOD,
  ATTRIBUTES$2,
  ISSUER_UNIQUE_ID$1,
  EXTENSIONS$3
];
var AttributeCertificateInfoV2 = class _AttributeCertificateInfoV2 extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$g, _AttributeCertificateInfoV2.defaultValues(VERSION$g));
    this.holder = getParametersValue(parameters, HOLDER, _AttributeCertificateInfoV2.defaultValues(HOLDER));
    this.issuer = getParametersValue(parameters, ISSUER$3, _AttributeCertificateInfoV2.defaultValues(ISSUER$3));
    this.signature = getParametersValue(parameters, SIGNATURE$5, _AttributeCertificateInfoV2.defaultValues(SIGNATURE$5));
    this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$4, _AttributeCertificateInfoV2.defaultValues(SERIAL_NUMBER$4));
    this.attrCertValidityPeriod = getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD, _AttributeCertificateInfoV2.defaultValues(ATTR_CERT_VALIDITY_PERIOD));
    this.attributes = getParametersValue(parameters, ATTRIBUTES$2, _AttributeCertificateInfoV2.defaultValues(ATTRIBUTES$2));
    if (ISSUER_UNIQUE_ID$1 in parameters) {
      this.issuerUniqueID = getParametersValue(parameters, ISSUER_UNIQUE_ID$1, _AttributeCertificateInfoV2.defaultValues(ISSUER_UNIQUE_ID$1));
    }
    if (EXTENSIONS$3 in parameters) {
      this.extensions = getParametersValue(parameters, EXTENSIONS$3, _AttributeCertificateInfoV2.defaultValues(EXTENSIONS$3));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$g:
        return 1;
      case HOLDER:
        return new Holder();
      case ISSUER$3:
        return {};
      case SIGNATURE$5:
        return new AlgorithmIdentifier();
      case SERIAL_NUMBER$4:
        return new Integer();
      case ATTR_CERT_VALIDITY_PERIOD:
        return new AttCertValidityPeriod();
      case ATTRIBUTES$2:
        return [];
      case ISSUER_UNIQUE_ID$1:
        return new BitString();
      case EXTENSIONS$3:
        return new Extensions();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        Holder.schema(names.holder || {}),
        new Choice({
          value: [
            GeneralNames.schema({
              names: {
                blockName: names.issuer || EMPTY_STRING2
              }
            }),
            new Constructed({
              name: names.issuer || EMPTY_STRING2,
              idBlock: {
                tagClass: 3,
                tagNumber: 0
              },
              value: V2Form.schema().valueBlock.value
            })
          ]
        }),
        AlgorithmIdentifier.schema(names.signature || {}),
        new Integer({
          name: names.serialNumber || EMPTY_STRING2
        }),
        AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),
        new Sequence({
          name: names.attributes || EMPTY_STRING2,
          value: [
            new Repeated({
              value: Attribute.schema()
            })
          ]
        }),
        new BitString({
          optional: true,
          name: names.issuerUniqueID || EMPTY_STRING2
        }),
        Extensions.schema(names.extensions || {}, true)
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$U);
    const asn1 = compareSchema(schema, schema, _AttributeCertificateInfoV2.schema({
      names: {
        version: VERSION$g,
        holder: {
          names: {
            blockName: HOLDER
          }
        },
        issuer: ISSUER$3,
        signature: {
          names: {
            blockName: SIGNATURE$5
          }
        },
        serialNumber: SERIAL_NUMBER$4,
        attrCertValidityPeriod: {
          names: {
            blockName: ATTR_CERT_VALIDITY_PERIOD
          }
        },
        attributes: ATTRIBUTES$2,
        issuerUniqueID: ISSUER_UNIQUE_ID$1,
        extensions: {
          names: {
            blockName: EXTENSIONS$3
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.holder = new Holder({
      schema: asn1.result.holder
    });
    switch (asn1.result.issuer.idBlock.tagClass) {
      case 3:
        this.issuer = new V2Form({
          schema: new Sequence({
            value: asn1.result.issuer.valueBlock.value
          })
        });
        break;
      case 1:
      default:
        throw new Error("Incorrect value for 'issuer' in AttributeCertificateInfoV2");
    }
    this.signature = new AlgorithmIdentifier({
      schema: asn1.result.signature
    });
    this.serialNumber = asn1.result.serialNumber;
    this.attrCertValidityPeriod = new AttCertValidityPeriod({
      schema: asn1.result.attrCertValidityPeriod
    });
    this.attributes = Array.from(asn1.result.attributes.valueBlock.value, (element) => new Attribute({
      schema: element
    }));
    if (ISSUER_UNIQUE_ID$1 in asn1.result) {
      this.issuerUniqueID = asn1.result.issuerUniqueID;
    }
    if (EXTENSIONS$3 in asn1.result) {
      this.extensions = new Extensions({
        schema: asn1.result.extensions
      });
    }
  }
  toSchema() {
    const result = new Sequence({
      value: [
        new Integer({
          value: this.version
        }),
        this.holder.toSchema(),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: this.issuer.toSchema().valueBlock.value
        }),
        this.signature.toSchema(),
        this.serialNumber,
        this.attrCertValidityPeriod.toSchema(),
        new Sequence({
          value: Array.from(this.attributes, (o2) => o2.toSchema())
        })
      ]
    });
    if (this.issuerUniqueID) {
      result.valueBlock.value.push(this.issuerUniqueID);
    }
    if (this.extensions) {
      result.valueBlock.value.push(this.extensions.toSchema());
    }
    return result;
  }
  toJSON() {
    const result = {
      version: this.version,
      holder: this.holder.toJSON(),
      issuer: this.issuer.toJSON(),
      signature: this.signature.toJSON(),
      serialNumber: this.serialNumber.toJSON(),
      attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),
      attributes: Array.from(this.attributes, (o2) => o2.toJSON())
    };
    if (this.issuerUniqueID) {
      result.issuerUniqueID = this.issuerUniqueID.toJSON();
    }
    if (this.extensions) {
      result.extensions = this.extensions.toJSON();
    }
    return result;
  }
};
AttributeCertificateInfoV2.CLASS_NAME = "AttributeCertificateInfoV2";
var ACINFO = "acinfo";
var SIGNATURE_ALGORITHM$6 = "signatureAlgorithm";
var SIGNATURE_VALUE$3 = "signatureValue";
var CLEAR_PROPS$T = [
  ACINFO,
  SIGNATURE_ALGORITHM$6,
  SIGNATURE_VALUE$3
];
var AttributeCertificateV2 = class _AttributeCertificateV2 extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.acinfo = getParametersValue(parameters, ACINFO, _AttributeCertificateV2.defaultValues(ACINFO));
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$6, _AttributeCertificateV2.defaultValues(SIGNATURE_ALGORITHM$6));
    this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE$3, _AttributeCertificateV2.defaultValues(SIGNATURE_VALUE$3));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ACINFO:
        return new AttributeCertificateInfoV2();
      case SIGNATURE_ALGORITHM$6:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE$3:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AttributeCertificateInfoV2.schema(names.acinfo || {}),
        AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),
        new BitString({
          name: names.signatureValue || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$T);
    const asn1 = compareSchema(schema, schema, _AttributeCertificateV2.schema({
      names: {
        acinfo: {
          names: {
            blockName: ACINFO
          }
        },
        signatureAlgorithm: {
          names: {
            blockName: SIGNATURE_ALGORITHM$6
          }
        },
        signatureValue: SIGNATURE_VALUE$3
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.acinfo = new AttributeCertificateInfoV2({
      schema: asn1.result.acinfo
    });
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.acinfo.toSchema(),
        this.signatureAlgorithm.toSchema(),
        this.signatureValue
      ]
    });
  }
  toJSON() {
    return {
      acinfo: this.acinfo.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
  }
};
AttributeCertificateV2.CLASS_NAME = "AttributeCertificateV2";
var CONTENT_TYPE = "contentType";
var CONTENT = "content";
var CLEAR_PROPS$S = [
  CONTENT_TYPE,
  CONTENT
];
var ContentInfo = class _ContentInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.contentType = getParametersValue(parameters, CONTENT_TYPE, _ContentInfo.defaultValues(CONTENT_TYPE));
    this.content = getParametersValue(parameters, CONTENT, _ContentInfo.defaultValues(CONTENT));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CONTENT_TYPE:
        return EMPTY_STRING2;
      case CONTENT:
        return new Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CONTENT_TYPE:
        return typeof memberValue === "string" && memberValue === this.defaultValues(CONTENT_TYPE);
      case CONTENT:
        return memberValue instanceof Any;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    if ("optional" in names === false) {
      names.optional = false;
    }
    return new Sequence({
      name: names.blockName || "ContentInfo",
      optional: names.optional,
      value: [
        new ObjectIdentifier({
          name: names.contentType || CONTENT_TYPE
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Any({
              name: names.content || CONTENT
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$S);
    const asn1 = compareSchema(schema, schema, _ContentInfo.schema());
    AsnError.assertSchema(asn1, this.className);
    this.contentType = asn1.result.contentType.valueBlock.toString();
    this.content = asn1.result.content;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.contentType
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            this.content
          ]
        })
      ]
    });
  }
  toJSON() {
    const object = {
      contentType: this.contentType
    };
    if (!(this.content instanceof Any)) {
      object.content = this.content.toJSON();
    }
    return object;
  }
};
ContentInfo.CLASS_NAME = "ContentInfo";
ContentInfo.DATA = id_ContentType_Data;
ContentInfo.SIGNED_DATA = id_ContentType_SignedData;
ContentInfo.ENVELOPED_DATA = id_ContentType_EnvelopedData;
ContentInfo.ENCRYPTED_DATA = id_ContentType_EncryptedData;
var TYPE$1 = "type";
var VALUE$4 = "value";
var UTC_TIME_NAME = "utcTimeName";
var GENERAL_TIME_NAME = "generalTimeName";
var CLEAR_PROPS$R = [
  UTC_TIME_NAME,
  GENERAL_TIME_NAME
];
var TimeType;
(function(TimeType2) {
  TimeType2[TimeType2["UTCTime"] = 0] = "UTCTime";
  TimeType2[TimeType2["GeneralizedTime"] = 1] = "GeneralizedTime";
  TimeType2[TimeType2["empty"] = 2] = "empty";
})(TimeType || (TimeType = {}));
var Time = class _Time extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = getParametersValue(parameters, TYPE$1, _Time.defaultValues(TYPE$1));
    this.value = getParametersValue(parameters, VALUE$4, _Time.defaultValues(VALUE$4));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE$1:
        return 0;
      case VALUE$4:
        return new Date(0, 0, 0);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}, optional = false) {
    const names = getParametersValue(parameters, "names", {});
    return new Choice({
      optional,
      value: [
        new UTCTime({
          name: names.utcTimeName || EMPTY_STRING2
        }),
        new GeneralizedTime({
          name: names.generalTimeName || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$R);
    const asn1 = compareSchema(schema, schema, _Time.schema({
      names: {
        utcTimeName: UTC_TIME_NAME,
        generalTimeName: GENERAL_TIME_NAME
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (UTC_TIME_NAME in asn1.result) {
      this.type = 0;
      this.value = asn1.result.utcTimeName.toDate();
    }
    if (GENERAL_TIME_NAME in asn1.result) {
      this.type = 1;
      this.value = asn1.result.generalTimeName.toDate();
    }
  }
  toSchema() {
    if (this.type === 0) {
      return new UTCTime({
        valueDate: this.value
      });
    } else if (this.type === 1) {
      return new GeneralizedTime({
        valueDate: this.value
      });
    }
    return {};
  }
  toJSON() {
    return {
      type: this.type,
      value: this.value
    };
  }
};
Time.CLASS_NAME = "Time";
var TBS$4 = "tbs";
var VERSION$f = "version";
var SERIAL_NUMBER$3 = "serialNumber";
var SIGNATURE$4 = "signature";
var ISSUER$2 = "issuer";
var NOT_BEFORE = "notBefore";
var NOT_AFTER = "notAfter";
var SUBJECT$1 = "subject";
var SUBJECT_PUBLIC_KEY_INFO = "subjectPublicKeyInfo";
var ISSUER_UNIQUE_ID = "issuerUniqueID";
var SUBJECT_UNIQUE_ID = "subjectUniqueID";
var EXTENSIONS$2 = "extensions";
var SIGNATURE_ALGORITHM$5 = "signatureAlgorithm";
var SIGNATURE_VALUE$2 = "signatureValue";
var TBS_CERTIFICATE = "tbsCertificate";
var TBS_CERTIFICATE_VERSION = `${TBS_CERTIFICATE}.${VERSION$f}`;
var TBS_CERTIFICATE_SERIAL_NUMBER = `${TBS_CERTIFICATE}.${SERIAL_NUMBER$3}`;
var TBS_CERTIFICATE_SIGNATURE = `${TBS_CERTIFICATE}.${SIGNATURE$4}`;
var TBS_CERTIFICATE_ISSUER = `${TBS_CERTIFICATE}.${ISSUER$2}`;
var TBS_CERTIFICATE_NOT_BEFORE = `${TBS_CERTIFICATE}.${NOT_BEFORE}`;
var TBS_CERTIFICATE_NOT_AFTER = `${TBS_CERTIFICATE}.${NOT_AFTER}`;
var TBS_CERTIFICATE_SUBJECT = `${TBS_CERTIFICATE}.${SUBJECT$1}`;
var TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY = `${TBS_CERTIFICATE}.${SUBJECT_PUBLIC_KEY_INFO}`;
var TBS_CERTIFICATE_ISSUER_UNIQUE_ID = `${TBS_CERTIFICATE}.${ISSUER_UNIQUE_ID}`;
var TBS_CERTIFICATE_SUBJECT_UNIQUE_ID = `${TBS_CERTIFICATE}.${SUBJECT_UNIQUE_ID}`;
var TBS_CERTIFICATE_EXTENSIONS = `${TBS_CERTIFICATE}.${EXTENSIONS$2}`;
var CLEAR_PROPS$Q = [
  TBS_CERTIFICATE,
  TBS_CERTIFICATE_VERSION,
  TBS_CERTIFICATE_SERIAL_NUMBER,
  TBS_CERTIFICATE_SIGNATURE,
  TBS_CERTIFICATE_ISSUER,
  TBS_CERTIFICATE_NOT_BEFORE,
  TBS_CERTIFICATE_NOT_AFTER,
  TBS_CERTIFICATE_SUBJECT,
  TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY,
  TBS_CERTIFICATE_ISSUER_UNIQUE_ID,
  TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,
  TBS_CERTIFICATE_EXTENSIONS,
  SIGNATURE_ALGORITHM$5,
  SIGNATURE_VALUE$2
];
function tbsCertificate(parameters = {}) {
  const names = getParametersValue(parameters, "names", {});
  return new Sequence({
    name: names.blockName || TBS_CERTIFICATE,
    value: [
      new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          new Integer({
            name: names.tbsCertificateVersion || TBS_CERTIFICATE_VERSION
          })
        ]
      }),
      new Integer({
        name: names.tbsCertificateSerialNumber || TBS_CERTIFICATE_SERIAL_NUMBER
      }),
      AlgorithmIdentifier.schema(names.signature || {
        names: {
          blockName: TBS_CERTIFICATE_SIGNATURE
        }
      }),
      RelativeDistinguishedNames.schema(names.issuer || {
        names: {
          blockName: TBS_CERTIFICATE_ISSUER
        }
      }),
      new Sequence({
        name: names.tbsCertificateValidity || "tbsCertificate.validity",
        value: [
          Time.schema(names.notBefore || {
            names: {
              utcTimeName: TBS_CERTIFICATE_NOT_BEFORE,
              generalTimeName: TBS_CERTIFICATE_NOT_BEFORE
            }
          }),
          Time.schema(names.notAfter || {
            names: {
              utcTimeName: TBS_CERTIFICATE_NOT_AFTER,
              generalTimeName: TBS_CERTIFICATE_NOT_AFTER
            }
          })
        ]
      }),
      RelativeDistinguishedNames.schema(names.subject || {
        names: {
          blockName: TBS_CERTIFICATE_SUBJECT
        }
      }),
      PublicKeyInfo.schema(names.subjectPublicKeyInfo || {
        names: {
          blockName: TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY
        }
      }),
      new Primitive({
        name: names.tbsCertificateIssuerUniqueID || TBS_CERTIFICATE_ISSUER_UNIQUE_ID,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        }
      }),
      new Primitive({
        name: names.tbsCertificateSubjectUniqueID || TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        }
      }),
      new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        value: [
          Extensions.schema(names.extensions || {
            names: {
              blockName: TBS_CERTIFICATE_EXTENSIONS
            }
          })
        ]
      })
    ]
  });
}
var Certificate = class _Certificate extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(getParametersValue(parameters, TBS$4, _Certificate.defaultValues(TBS$4)));
    this.version = getParametersValue(parameters, VERSION$f, _Certificate.defaultValues(VERSION$f));
    this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$3, _Certificate.defaultValues(SERIAL_NUMBER$3));
    this.signature = getParametersValue(parameters, SIGNATURE$4, _Certificate.defaultValues(SIGNATURE$4));
    this.issuer = getParametersValue(parameters, ISSUER$2, _Certificate.defaultValues(ISSUER$2));
    this.notBefore = getParametersValue(parameters, NOT_BEFORE, _Certificate.defaultValues(NOT_BEFORE));
    this.notAfter = getParametersValue(parameters, NOT_AFTER, _Certificate.defaultValues(NOT_AFTER));
    this.subject = getParametersValue(parameters, SUBJECT$1, _Certificate.defaultValues(SUBJECT$1));
    this.subjectPublicKeyInfo = getParametersValue(parameters, SUBJECT_PUBLIC_KEY_INFO, _Certificate.defaultValues(SUBJECT_PUBLIC_KEY_INFO));
    if (ISSUER_UNIQUE_ID in parameters) {
      this.issuerUniqueID = getParametersValue(parameters, ISSUER_UNIQUE_ID, _Certificate.defaultValues(ISSUER_UNIQUE_ID));
    }
    if (SUBJECT_UNIQUE_ID in parameters) {
      this.subjectUniqueID = getParametersValue(parameters, SUBJECT_UNIQUE_ID, _Certificate.defaultValues(SUBJECT_UNIQUE_ID));
    }
    if (EXTENSIONS$2 in parameters) {
      this.extensions = getParametersValue(parameters, EXTENSIONS$2, _Certificate.defaultValues(EXTENSIONS$2));
    }
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$5, _Certificate.defaultValues(SIGNATURE_ALGORITHM$5));
    this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE$2, _Certificate.defaultValues(SIGNATURE_VALUE$2));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  get tbs() {
    return BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS$4:
        return EMPTY_BUFFER2;
      case VERSION$f:
        return 0;
      case SERIAL_NUMBER$3:
        return new Integer();
      case SIGNATURE$4:
        return new AlgorithmIdentifier();
      case ISSUER$2:
        return new RelativeDistinguishedNames();
      case NOT_BEFORE:
        return new Time();
      case NOT_AFTER:
        return new Time();
      case SUBJECT$1:
        return new RelativeDistinguishedNames();
      case SUBJECT_PUBLIC_KEY_INFO:
        return new PublicKeyInfo();
      case ISSUER_UNIQUE_ID:
        return EMPTY_BUFFER2;
      case SUBJECT_UNIQUE_ID:
        return EMPTY_BUFFER2;
      case EXTENSIONS$2:
        return [];
      case SIGNATURE_ALGORITHM$5:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE$2:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        tbsCertificate(names.tbsCertificate),
        AlgorithmIdentifier.schema(names.signatureAlgorithm || {
          names: {
            blockName: SIGNATURE_ALGORITHM$5
          }
        }),
        new BitString({
          name: names.signatureValue || SIGNATURE_VALUE$2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$Q);
    const asn1 = compareSchema(schema, schema, _Certificate.schema({
      names: {
        tbsCertificate: {
          names: {
            extensions: {
              names: {
                extensions: TBS_CERTIFICATE_EXTENSIONS
              }
            }
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.tbsCertificate.valueBeforeDecodeView;
    if (TBS_CERTIFICATE_VERSION in asn1.result) this.version = asn1.result[TBS_CERTIFICATE_VERSION].valueBlock.valueDec;
    this.serialNumber = asn1.result[TBS_CERTIFICATE_SERIAL_NUMBER];
    this.signature = new AlgorithmIdentifier({
      schema: asn1.result[TBS_CERTIFICATE_SIGNATURE]
    });
    this.issuer = new RelativeDistinguishedNames({
      schema: asn1.result[TBS_CERTIFICATE_ISSUER]
    });
    this.notBefore = new Time({
      schema: asn1.result[TBS_CERTIFICATE_NOT_BEFORE]
    });
    this.notAfter = new Time({
      schema: asn1.result[TBS_CERTIFICATE_NOT_AFTER]
    });
    this.subject = new RelativeDistinguishedNames({
      schema: asn1.result[TBS_CERTIFICATE_SUBJECT]
    });
    this.subjectPublicKeyInfo = new PublicKeyInfo({
      schema: asn1.result[TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY]
    });
    if (TBS_CERTIFICATE_ISSUER_UNIQUE_ID in asn1.result) this.issuerUniqueID = asn1.result[TBS_CERTIFICATE_ISSUER_UNIQUE_ID].valueBlock.valueHex;
    if (TBS_CERTIFICATE_SUBJECT_UNIQUE_ID in asn1.result) this.subjectUniqueID = asn1.result[TBS_CERTIFICATE_SUBJECT_UNIQUE_ID].valueBlock.valueHex;
    if (TBS_CERTIFICATE_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TBS_CERTIFICATE_EXTENSIONS], (element) => new Extension({
      schema: element
    }));
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  encodeTBS() {
    const outputArray = [];
    if (VERSION$f in this && this.version !== _Certificate.defaultValues(VERSION$f)) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          new Integer({
            value: this.version
          })
        ]
      }));
    }
    outputArray.push(this.serialNumber);
    outputArray.push(this.signature.toSchema());
    outputArray.push(this.issuer.toSchema());
    outputArray.push(new Sequence({
      value: [
        this.notBefore.toSchema(),
        this.notAfter.toSchema()
      ]
    }));
    outputArray.push(this.subject.toSchema());
    outputArray.push(this.subjectPublicKeyInfo.toSchema());
    if (this.issuerUniqueID) {
      outputArray.push(new Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: this.issuerUniqueID
      }));
    }
    if (this.subjectUniqueID) {
      outputArray.push(new Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        valueHex: this.subjectUniqueID
      }));
    }
    if (this.extensions) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        value: [
          new Sequence({
            value: Array.from(this.extensions, (o2) => o2.toSchema())
          })
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (encodeFlag === false) {
      if (!this.tbsView.byteLength) {
        return _Certificate.schema().value[0];
      }
      const asn1 = fromBER(this.tbsView);
      AsnError.assert(asn1, "TBS Certificate");
      tbsSchema = asn1.result;
    } else {
      tbsSchema = this.encodeTBS();
    }
    return new Sequence({
      value: [
        tbsSchema,
        this.signatureAlgorithm.toSchema(),
        this.signatureValue
      ]
    });
  }
  toJSON() {
    const res = {
      tbs: Convert.ToHex(this.tbsView),
      version: this.version,
      serialNumber: this.serialNumber.toJSON(),
      signature: this.signature.toJSON(),
      issuer: this.issuer.toJSON(),
      notBefore: this.notBefore.toJSON(),
      notAfter: this.notAfter.toJSON(),
      subject: this.subject.toJSON(),
      subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
    if (VERSION$f in this && this.version !== _Certificate.defaultValues(VERSION$f)) {
      res.version = this.version;
    }
    if (this.issuerUniqueID) {
      res.issuerUniqueID = Convert.ToHex(this.issuerUniqueID);
    }
    if (this.subjectUniqueID) {
      res.subjectUniqueID = Convert.ToHex(this.subjectUniqueID);
    }
    if (this.extensions) {
      res.extensions = Array.from(this.extensions, (o2) => o2.toJSON());
    }
    return res;
  }
  async getPublicKey(parameters, crypto2 = getCrypto(true)) {
    return crypto2.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);
  }
  async getKeyHash(hashAlgorithm = "SHA-1", crypto2 = getCrypto(true)) {
    return crypto2.digest({
      name: hashAlgorithm
    }, this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
  }
  async sign(privateKey, hashAlgorithm = "SHA-1", crypto2 = getCrypto(true)) {
    if (!privateKey) {
      throw new Error("Need to provide a private key for signing");
    }
    const signatureParameters = await crypto2.getSignatureParameters(privateKey, hashAlgorithm);
    const parameters = signatureParameters.parameters;
    this.signature = signatureParameters.signatureAlgorithm;
    this.signatureAlgorithm = signatureParameters.signatureAlgorithm;
    this.tbsView = new Uint8Array(this.encodeTBS().toBER());
    const signature = await crypto2.signWithPrivateKey(this.tbsView, privateKey, parameters);
    this.signatureValue = new BitString({
      valueHex: signature
    });
  }
  async verify(issuerCertificate, crypto2 = getCrypto(true)) {
    let subjectPublicKeyInfo;
    if (issuerCertificate) {
      subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;
    } else if (this.issuer.isEqual(this.subject)) {
      subjectPublicKeyInfo = this.subjectPublicKeyInfo;
    }
    if (!(subjectPublicKeyInfo instanceof PublicKeyInfo)) {
      throw new Error("Please provide issuer certificate as a parameter");
    }
    return crypto2.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);
  }
};
Certificate.CLASS_NAME = "Certificate";
function checkCA(cert, signerCert = null) {
  if (signerCert && cert.issuer.isEqual(signerCert.issuer) && cert.serialNumber.isEqual(signerCert.serialNumber)) {
    return null;
  }
  let isCA = false;
  if (cert.extensions) {
    for (const extension of cert.extensions) {
      if (extension.extnID === id_BasicConstraints && extension.parsedValue instanceof BasicConstraints) {
        if (extension.parsedValue.cA) {
          isCA = true;
          break;
        }
      }
    }
  }
  if (isCA) {
    return cert;
  }
  return null;
}
var CERT_ID$1 = "certId";
var CERT_VALUE = "certValue";
var PARSED_VALUE$4 = "parsedValue";
var CLEAR_PROPS$P = [
  CERT_ID$1,
  CERT_VALUE
];
var CertBag = class _CertBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certId = getParametersValue(parameters, CERT_ID$1, _CertBag.defaultValues(CERT_ID$1));
    this.certValue = getParametersValue(parameters, CERT_VALUE, _CertBag.defaultValues(CERT_VALUE));
    if (PARSED_VALUE$4 in parameters) {
      this.parsedValue = getParametersValue(parameters, PARSED_VALUE$4, _CertBag.defaultValues(PARSED_VALUE$4));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERT_ID$1:
        return EMPTY_STRING2;
      case CERT_VALUE:
        return new Any();
      case PARSED_VALUE$4:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CERT_ID$1:
        return memberValue === EMPTY_STRING2;
      case CERT_VALUE:
        return memberValue instanceof Any;
      case PARSED_VALUE$4:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.id || "id"
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Any({
              name: names.value || "value"
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$P);
    const asn1 = compareSchema(schema, schema, _CertBag.schema({
      names: {
        id: CERT_ID$1,
        value: CERT_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.certId = asn1.result.certId.valueBlock.toString();
    this.certValue = asn1.result.certValue;
    const certValueHex = this.certValue.valueBlock.valueHexView;
    switch (this.certId) {
      case id_CertBag_X509Certificate:
        {
          try {
            this.parsedValue = Certificate.fromBER(certValueHex);
          } catch (ex) {
            AttributeCertificateV2.fromBER(certValueHex);
          }
        }
        break;
      case id_CertBag_AttributeCertificate:
        {
          this.parsedValue = AttributeCertificateV2.fromBER(certValueHex);
        }
        break;
      case id_CertBag_SDSICertificate:
      default:
        throw new Error(`Incorrect CERT_ID value in CertBag: ${this.certId}`);
    }
  }
  toSchema() {
    if (PARSED_VALUE$4 in this) {
      if ("acinfo" in this.parsedValue) {
        this.certId = id_CertBag_AttributeCertificate;
      } else {
        this.certId = id_CertBag_X509Certificate;
      }
      this.certValue = new OctetString({
        valueHex: this.parsedValue.toSchema().toBER(false)
      });
    }
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.certId
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            "toSchema" in this.certValue ? this.certValue.toSchema() : this.certValue
          ]
        })
      ]
    });
  }
  toJSON() {
    return {
      certId: this.certId,
      certValue: this.certValue.toJSON()
    };
  }
};
CertBag.CLASS_NAME = "CertBag";
var USER_CERTIFICATE = "userCertificate";
var REVOCATION_DATE = "revocationDate";
var CRL_ENTRY_EXTENSIONS = "crlEntryExtensions";
var CLEAR_PROPS$O = [
  USER_CERTIFICATE,
  REVOCATION_DATE,
  CRL_ENTRY_EXTENSIONS
];
var RevokedCertificate = class _RevokedCertificate extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.userCertificate = getParametersValue(parameters, USER_CERTIFICATE, _RevokedCertificate.defaultValues(USER_CERTIFICATE));
    this.revocationDate = getParametersValue(parameters, REVOCATION_DATE, _RevokedCertificate.defaultValues(REVOCATION_DATE));
    if (CRL_ENTRY_EXTENSIONS in parameters) {
      this.crlEntryExtensions = getParametersValue(parameters, CRL_ENTRY_EXTENSIONS, _RevokedCertificate.defaultValues(CRL_ENTRY_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case USER_CERTIFICATE:
        return new Integer();
      case REVOCATION_DATE:
        return new Time();
      case CRL_ENTRY_EXTENSIONS:
        return new Extensions();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.userCertificate || USER_CERTIFICATE
        }),
        Time.schema({
          names: {
            utcTimeName: names.revocationDate || REVOCATION_DATE,
            generalTimeName: names.revocationDate || REVOCATION_DATE
          }
        }),
        Extensions.schema({
          names: {
            blockName: names.crlEntryExtensions || CRL_ENTRY_EXTENSIONS
          }
        }, true)
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$O);
    const asn1 = compareSchema(schema, schema, _RevokedCertificate.schema());
    AsnError.assertSchema(asn1, this.className);
    this.userCertificate = asn1.result.userCertificate;
    this.revocationDate = new Time({
      schema: asn1.result.revocationDate
    });
    if (CRL_ENTRY_EXTENSIONS in asn1.result) {
      this.crlEntryExtensions = new Extensions({
        schema: asn1.result.crlEntryExtensions
      });
    }
  }
  toSchema() {
    const outputArray = [
      this.userCertificate,
      this.revocationDate.toSchema()
    ];
    if (this.crlEntryExtensions) {
      outputArray.push(this.crlEntryExtensions.toSchema());
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      userCertificate: this.userCertificate.toJSON(),
      revocationDate: this.revocationDate.toJSON()
    };
    if (this.crlEntryExtensions) {
      res.crlEntryExtensions = this.crlEntryExtensions.toJSON();
    }
    return res;
  }
};
RevokedCertificate.CLASS_NAME = "RevokedCertificate";
var TBS$3 = "tbs";
var VERSION$e = "version";
var SIGNATURE$3 = "signature";
var ISSUER$1 = "issuer";
var THIS_UPDATE$1 = "thisUpdate";
var NEXT_UPDATE$1 = "nextUpdate";
var REVOKED_CERTIFICATES = "revokedCertificates";
var CRL_EXTENSIONS = "crlExtensions";
var SIGNATURE_ALGORITHM$4 = "signatureAlgorithm";
var SIGNATURE_VALUE$1 = "signatureValue";
var TBS_CERT_LIST = "tbsCertList";
var TBS_CERT_LIST_VERSION = `${TBS_CERT_LIST}.version`;
var TBS_CERT_LIST_SIGNATURE = `${TBS_CERT_LIST}.signature`;
var TBS_CERT_LIST_ISSUER = `${TBS_CERT_LIST}.issuer`;
var TBS_CERT_LIST_THIS_UPDATE = `${TBS_CERT_LIST}.thisUpdate`;
var TBS_CERT_LIST_NEXT_UPDATE = `${TBS_CERT_LIST}.nextUpdate`;
var TBS_CERT_LIST_REVOKED_CERTIFICATES = `${TBS_CERT_LIST}.revokedCertificates`;
var TBS_CERT_LIST_EXTENSIONS = `${TBS_CERT_LIST}.extensions`;
var CLEAR_PROPS$N = [
  TBS_CERT_LIST,
  TBS_CERT_LIST_VERSION,
  TBS_CERT_LIST_SIGNATURE,
  TBS_CERT_LIST_ISSUER,
  TBS_CERT_LIST_THIS_UPDATE,
  TBS_CERT_LIST_NEXT_UPDATE,
  TBS_CERT_LIST_REVOKED_CERTIFICATES,
  TBS_CERT_LIST_EXTENSIONS,
  SIGNATURE_ALGORITHM$4,
  SIGNATURE_VALUE$1
];
function tbsCertList(parameters = {}) {
  const names = getParametersValue(parameters, "names", {});
  return new Sequence({
    name: names.blockName || TBS_CERT_LIST,
    value: [
      new Integer({
        optional: true,
        name: names.tbsCertListVersion || TBS_CERT_LIST_VERSION,
        value: 2
      }),
      AlgorithmIdentifier.schema(names.signature || {
        names: {
          blockName: TBS_CERT_LIST_SIGNATURE
        }
      }),
      RelativeDistinguishedNames.schema(names.issuer || {
        names: {
          blockName: TBS_CERT_LIST_ISSUER
        }
      }),
      Time.schema(names.tbsCertListThisUpdate || {
        names: {
          utcTimeName: TBS_CERT_LIST_THIS_UPDATE,
          generalTimeName: TBS_CERT_LIST_THIS_UPDATE
        }
      }),
      Time.schema(names.tbsCertListNextUpdate || {
        names: {
          utcTimeName: TBS_CERT_LIST_NEXT_UPDATE,
          generalTimeName: TBS_CERT_LIST_NEXT_UPDATE
        }
      }, true),
      new Sequence({
        optional: true,
        value: [
          new Repeated({
            name: names.tbsCertListRevokedCertificates || TBS_CERT_LIST_REVOKED_CERTIFICATES,
            value: new Sequence({
              value: [
                new Integer(),
                Time.schema(),
                Extensions.schema({}, true)
              ]
            })
          })
        ]
      }),
      new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          Extensions.schema(names.crlExtensions || {
            names: {
              blockName: TBS_CERT_LIST_EXTENSIONS
            }
          })
        ]
      })
    ]
  });
}
var WELL_KNOWN_EXTENSIONS = [
  id_AuthorityKeyIdentifier,
  id_IssuerAltName,
  id_CRLNumber,
  id_BaseCRLNumber,
  id_IssuingDistributionPoint,
  id_FreshestCRL,
  id_AuthorityInfoAccess,
  id_CRLReason,
  id_InvalidityDate,
  id_CertificateIssuer
];
var CertificateRevocationList = class _CertificateRevocationList extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(getParametersValue(parameters, TBS$3, _CertificateRevocationList.defaultValues(TBS$3)));
    this.version = getParametersValue(parameters, VERSION$e, _CertificateRevocationList.defaultValues(VERSION$e));
    this.signature = getParametersValue(parameters, SIGNATURE$3, _CertificateRevocationList.defaultValues(SIGNATURE$3));
    this.issuer = getParametersValue(parameters, ISSUER$1, _CertificateRevocationList.defaultValues(ISSUER$1));
    this.thisUpdate = getParametersValue(parameters, THIS_UPDATE$1, _CertificateRevocationList.defaultValues(THIS_UPDATE$1));
    if (NEXT_UPDATE$1 in parameters) {
      this.nextUpdate = getParametersValue(parameters, NEXT_UPDATE$1, _CertificateRevocationList.defaultValues(NEXT_UPDATE$1));
    }
    if (REVOKED_CERTIFICATES in parameters) {
      this.revokedCertificates = getParametersValue(parameters, REVOKED_CERTIFICATES, _CertificateRevocationList.defaultValues(REVOKED_CERTIFICATES));
    }
    if (CRL_EXTENSIONS in parameters) {
      this.crlExtensions = getParametersValue(parameters, CRL_EXTENSIONS, _CertificateRevocationList.defaultValues(CRL_EXTENSIONS));
    }
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$4, _CertificateRevocationList.defaultValues(SIGNATURE_ALGORITHM$4));
    this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE$1, _CertificateRevocationList.defaultValues(SIGNATURE_VALUE$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  get tbs() {
    return BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS$3:
        return EMPTY_BUFFER2;
      case VERSION$e:
        return 0;
      case SIGNATURE$3:
        return new AlgorithmIdentifier();
      case ISSUER$1:
        return new RelativeDistinguishedNames();
      case THIS_UPDATE$1:
        return new Time();
      case NEXT_UPDATE$1:
        return new Time();
      case REVOKED_CERTIFICATES:
        return [];
      case CRL_EXTENSIONS:
        return new Extensions();
      case SIGNATURE_ALGORITHM$4:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE$1:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || "CertificateList",
      value: [
        tbsCertList(parameters),
        AlgorithmIdentifier.schema(names.signatureAlgorithm || {
          names: {
            blockName: SIGNATURE_ALGORITHM$4
          }
        }),
        new BitString({
          name: names.signatureValue || SIGNATURE_VALUE$1
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$N);
    const asn1 = compareSchema(schema, schema, _CertificateRevocationList.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.tbsCertList.valueBeforeDecodeView;
    if (TBS_CERT_LIST_VERSION in asn1.result) {
      this.version = asn1.result[TBS_CERT_LIST_VERSION].valueBlock.valueDec;
    }
    this.signature = new AlgorithmIdentifier({
      schema: asn1.result[TBS_CERT_LIST_SIGNATURE]
    });
    this.issuer = new RelativeDistinguishedNames({
      schema: asn1.result[TBS_CERT_LIST_ISSUER]
    });
    this.thisUpdate = new Time({
      schema: asn1.result[TBS_CERT_LIST_THIS_UPDATE]
    });
    if (TBS_CERT_LIST_NEXT_UPDATE in asn1.result) {
      this.nextUpdate = new Time({
        schema: asn1.result[TBS_CERT_LIST_NEXT_UPDATE]
      });
    }
    if (TBS_CERT_LIST_REVOKED_CERTIFICATES in asn1.result) {
      this.revokedCertificates = Array.from(asn1.result[TBS_CERT_LIST_REVOKED_CERTIFICATES], (element) => new RevokedCertificate({
        schema: element
      }));
    }
    if (TBS_CERT_LIST_EXTENSIONS in asn1.result) {
      this.crlExtensions = new Extensions({
        schema: asn1.result[TBS_CERT_LIST_EXTENSIONS]
      });
    }
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  encodeTBS() {
    const outputArray = [];
    if (this.version !== _CertificateRevocationList.defaultValues(VERSION$e)) {
      outputArray.push(new Integer({
        value: this.version
      }));
    }
    outputArray.push(this.signature.toSchema());
    outputArray.push(this.issuer.toSchema());
    outputArray.push(this.thisUpdate.toSchema());
    if (this.nextUpdate) {
      outputArray.push(this.nextUpdate.toSchema());
    }
    if (this.revokedCertificates) {
      outputArray.push(new Sequence({
        value: Array.from(this.revokedCertificates, (o2) => o2.toSchema())
      }));
    }
    if (this.crlExtensions) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          this.crlExtensions.toSchema()
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (!encodeFlag) {
      if (!this.tbsView.byteLength) {
        return _CertificateRevocationList.schema();
      }
      const asn1 = fromBER(this.tbsView);
      AsnError.assert(asn1, "TBS Certificate Revocation List");
      tbsSchema = asn1.result;
    } else {
      tbsSchema = this.encodeTBS();
    }
    return new Sequence({
      value: [
        tbsSchema,
        this.signatureAlgorithm.toSchema(),
        this.signatureValue
      ]
    });
  }
  toJSON() {
    const res = {
      tbs: Convert.ToHex(this.tbsView),
      version: this.version,
      signature: this.signature.toJSON(),
      issuer: this.issuer.toJSON(),
      thisUpdate: this.thisUpdate.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
    if (this.version !== _CertificateRevocationList.defaultValues(VERSION$e)) res.version = this.version;
    if (this.nextUpdate) {
      res.nextUpdate = this.nextUpdate.toJSON();
    }
    if (this.revokedCertificates) {
      res.revokedCertificates = Array.from(this.revokedCertificates, (o2) => o2.toJSON());
    }
    if (this.crlExtensions) {
      res.crlExtensions = this.crlExtensions.toJSON();
    }
    return res;
  }
  isCertificateRevoked(certificate) {
    if (!this.issuer.isEqual(certificate.issuer)) {
      return false;
    }
    if (!this.revokedCertificates) {
      return false;
    }
    for (const revokedCertificate of this.revokedCertificates) {
      if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) {
        return true;
      }
    }
    return false;
  }
  async sign(privateKey, hashAlgorithm = "SHA-1", crypto2 = getCrypto(true)) {
    if (!privateKey) {
      throw new Error("Need to provide a private key for signing");
    }
    const signatureParameters = await crypto2.getSignatureParameters(privateKey, hashAlgorithm);
    const { parameters } = signatureParameters;
    this.signature = signatureParameters.signatureAlgorithm;
    this.signatureAlgorithm = signatureParameters.signatureAlgorithm;
    this.tbsView = new Uint8Array(this.encodeTBS().toBER());
    const signature = await crypto2.signWithPrivateKey(this.tbsView, privateKey, parameters);
    this.signatureValue = new BitString({
      valueHex: signature
    });
  }
  async verify(parameters = {}, crypto2 = getCrypto(true)) {
    let subjectPublicKeyInfo;
    if (parameters.issuerCertificate) {
      subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;
      if (!this.issuer.isEqual(parameters.issuerCertificate.subject)) {
        return false;
      }
    }
    if (parameters.publicKeyInfo) {
      subjectPublicKeyInfo = parameters.publicKeyInfo;
    }
    if (!subjectPublicKeyInfo) {
      throw new Error("Issuer's certificate must be provided as an input parameter");
    }
    if (this.crlExtensions) {
      for (const extension of this.crlExtensions.extensions) {
        if (extension.critical) {
          if (!WELL_KNOWN_EXTENSIONS.includes(extension.extnID)) return false;
        }
      }
    }
    return crypto2.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);
  }
};
CertificateRevocationList.CLASS_NAME = "CertificateRevocationList";
var CRL_ID = "crlId";
var CRL_VALUE = "crlValue";
var PARSED_VALUE$3 = "parsedValue";
var CLEAR_PROPS$M = [
  CRL_ID,
  CRL_VALUE
];
var CRLBag = class _CRLBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.crlId = getParametersValue(parameters, CRL_ID, _CRLBag.defaultValues(CRL_ID));
    this.crlValue = getParametersValue(parameters, CRL_VALUE, _CRLBag.defaultValues(CRL_VALUE));
    if (PARSED_VALUE$3 in parameters) {
      this.parsedValue = getParametersValue(parameters, PARSED_VALUE$3, _CRLBag.defaultValues(PARSED_VALUE$3));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CRL_ID:
        return EMPTY_STRING2;
      case CRL_VALUE:
        return new Any();
      case PARSED_VALUE$3:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CRL_ID:
        return memberValue === EMPTY_STRING2;
      case CRL_VALUE:
        return memberValue instanceof Any;
      case PARSED_VALUE$3:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.id || "id"
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Any({
              name: names.value || "value"
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$M);
    const asn1 = compareSchema(schema, schema, _CRLBag.schema({
      names: {
        id: CRL_ID,
        value: CRL_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.crlId = asn1.result.crlId.valueBlock.toString();
    this.crlValue = asn1.result.crlValue;
    switch (this.crlId) {
      case id_CRLBag_X509CRL:
        {
          this.parsedValue = CertificateRevocationList.fromBER(this.certValue.valueBlock.valueHex);
        }
        break;
      default:
        throw new Error(`Incorrect CRL_ID value in CRLBag: ${this.crlId}`);
    }
  }
  toSchema() {
    if (this.parsedValue) {
      this.crlId = id_CRLBag_X509CRL;
      this.crlValue = new OctetString({
        valueHex: this.parsedValue.toSchema().toBER(false)
      });
    }
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.crlId
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            this.crlValue.toSchema()
          ]
        })
      ]
    });
  }
  toJSON() {
    return {
      crlId: this.crlId,
      crlValue: this.crlValue.toJSON()
    };
  }
};
CRLBag.CLASS_NAME = "CRLBag";
var VERSION$d = "version";
var ENCRYPTED_CONTENT_INFO$1 = "encryptedContentInfo";
var UNPROTECTED_ATTRS$1 = "unprotectedAttrs";
var CLEAR_PROPS$L = [
  VERSION$d,
  ENCRYPTED_CONTENT_INFO$1,
  UNPROTECTED_ATTRS$1
];
var EncryptedData = class _EncryptedData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$d, _EncryptedData.defaultValues(VERSION$d));
    this.encryptedContentInfo = getParametersValue(parameters, ENCRYPTED_CONTENT_INFO$1, _EncryptedData.defaultValues(ENCRYPTED_CONTENT_INFO$1));
    if (UNPROTECTED_ATTRS$1 in parameters) {
      this.unprotectedAttrs = getParametersValue(parameters, UNPROTECTED_ATTRS$1, _EncryptedData.defaultValues(UNPROTECTED_ATTRS$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$d:
        return 0;
      case ENCRYPTED_CONTENT_INFO$1:
        return new EncryptedContentInfo();
      case UNPROTECTED_ATTRS$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$d:
        return memberValue === 0;
      case ENCRYPTED_CONTENT_INFO$1:
        return EncryptedContentInfo.compareWithDefault("contentType", memberValue.contentType) && EncryptedContentInfo.compareWithDefault("contentEncryptionAlgorithm", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault("encryptedContent", memberValue.encryptedContent);
      case UNPROTECTED_ATTRS$1:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        EncryptedContentInfo.schema(names.encryptedContentInfo || {}),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new Repeated({
              name: names.unprotectedAttrs || EMPTY_STRING2,
              value: Attribute.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$L);
    const asn1 = compareSchema(schema, schema, _EncryptedData.schema({
      names: {
        version: VERSION$d,
        encryptedContentInfo: {
          names: {
            blockName: ENCRYPTED_CONTENT_INFO$1
          }
        },
        unprotectedAttrs: UNPROTECTED_ATTRS$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.encryptedContentInfo = new EncryptedContentInfo({
      schema: asn1.result.encryptedContentInfo
    });
    if (UNPROTECTED_ATTRS$1 in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, (element) => new Attribute({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.version
    }));
    outputArray.push(this.encryptedContentInfo.toSchema());
    if (this.unprotectedAttrs) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.unprotectedAttrs, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      encryptedContentInfo: this.encryptedContentInfo.toJSON()
    };
    if (this.unprotectedAttrs) res.unprotectedAttrs = Array.from(this.unprotectedAttrs, (o2) => o2.toJSON());
    return res;
  }
  async encrypt(parameters, crypto2 = getCrypto(true)) {
    ArgumentError.assert(parameters, "parameters", "object");
    const encryptParams = {
      ...parameters,
      contentType: "1.2.840.113549.1.7.1"
    };
    this.encryptedContentInfo = await crypto2.encryptEncryptedContentInfo(encryptParams);
  }
  async decrypt(parameters, crypto2 = getCrypto(true)) {
    ArgumentError.assert(parameters, "parameters", "object");
    const decryptParams = {
      ...parameters,
      encryptedContentInfo: this.encryptedContentInfo
    };
    return crypto2.decryptEncryptedContentInfo(decryptParams);
  }
};
EncryptedData.CLASS_NAME = "EncryptedData";
var ENCRYPTION_ALGORITHM = "encryptionAlgorithm";
var ENCRYPTED_DATA = "encryptedData";
var PARSED_VALUE$2 = "parsedValue";
var CLEAR_PROPS$K = [
  ENCRYPTION_ALGORITHM,
  ENCRYPTED_DATA
];
var PKCS8ShroudedKeyBag = class _PKCS8ShroudedKeyBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.encryptionAlgorithm = getParametersValue(parameters, ENCRYPTION_ALGORITHM, _PKCS8ShroudedKeyBag.defaultValues(ENCRYPTION_ALGORITHM));
    this.encryptedData = getParametersValue(parameters, ENCRYPTED_DATA, _PKCS8ShroudedKeyBag.defaultValues(ENCRYPTED_DATA));
    if (PARSED_VALUE$2 in parameters) {
      this.parsedValue = getParametersValue(parameters, PARSED_VALUE$2, _PKCS8ShroudedKeyBag.defaultValues(PARSED_VALUE$2));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ENCRYPTION_ALGORITHM:
        return new AlgorithmIdentifier();
      case ENCRYPTED_DATA:
        return new OctetString();
      case PARSED_VALUE$2:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ENCRYPTION_ALGORITHM:
        return AlgorithmIdentifier.compareWithDefault("algorithmId", memberValue.algorithmId) && "algorithmParams" in memberValue === false;
      case ENCRYPTED_DATA:
        return memberValue.isEqual(_PKCS8ShroudedKeyBag.defaultValues(memberName));
      case PARSED_VALUE$2:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.encryptionAlgorithm || {
          names: {
            blockName: ENCRYPTION_ALGORITHM
          }
        }),
        new Choice({
          value: [
            new OctetString({
              name: names.encryptedData || ENCRYPTED_DATA
            }),
            new OctetString({
              idBlock: {
                isConstructed: true
              },
              name: names.encryptedData || ENCRYPTED_DATA
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$K);
    const asn1 = compareSchema(schema, schema, _PKCS8ShroudedKeyBag.schema({
      names: {
        encryptionAlgorithm: {
          names: {
            blockName: ENCRYPTION_ALGORITHM
          }
        },
        encryptedData: ENCRYPTED_DATA
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.encryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.encryptionAlgorithm
    });
    this.encryptedData = asn1.result.encryptedData;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.encryptionAlgorithm.toSchema(),
        this.encryptedData
      ]
    });
  }
  toJSON() {
    return {
      encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),
      encryptedData: this.encryptedData.toJSON()
    };
  }
  async parseInternalValues(parameters, crypto2 = getCrypto(true)) {
    const cmsEncrypted = new EncryptedData({
      encryptedContentInfo: new EncryptedContentInfo({
        contentEncryptionAlgorithm: this.encryptionAlgorithm,
        encryptedContent: this.encryptedData
      })
    });
    const decryptedData = await cmsEncrypted.decrypt(parameters, crypto2);
    this.parsedValue = PrivateKeyInfo.fromBER(decryptedData);
  }
  async makeInternalValues(parameters, crypto2 = getCrypto(true)) {
    if (!this.parsedValue) {
      throw new Error('Please initialize "parsedValue" first');
    }
    const cmsEncrypted = new EncryptedData();
    const encryptParams = {
      ...parameters,
      contentToEncrypt: this.parsedValue.toSchema().toBER(false)
    };
    await cmsEncrypted.encrypt(encryptParams, crypto2);
    if (!cmsEncrypted.encryptedContentInfo.encryptedContent) {
      throw new Error("The filed `encryptedContent` in EncryptedContentInfo is empty");
    }
    this.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;
    this.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;
  }
};
PKCS8ShroudedKeyBag.CLASS_NAME = "PKCS8ShroudedKeyBag";
var SECRET_TYPE_ID = "secretTypeId";
var SECRET_VALUE = "secretValue";
var CLEAR_PROPS$J = [
  SECRET_TYPE_ID,
  SECRET_VALUE
];
var SecretBag = class _SecretBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.secretTypeId = getParametersValue(parameters, SECRET_TYPE_ID, _SecretBag.defaultValues(SECRET_TYPE_ID));
    this.secretValue = getParametersValue(parameters, SECRET_VALUE, _SecretBag.defaultValues(SECRET_VALUE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SECRET_TYPE_ID:
        return EMPTY_STRING2;
      case SECRET_VALUE:
        return new Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SECRET_TYPE_ID:
        return memberValue === EMPTY_STRING2;
      case SECRET_VALUE:
        return memberValue instanceof Any;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.id || "id"
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Any({
              name: names.value || "value"
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$J);
    const asn1 = compareSchema(schema, schema, _SecretBag.schema({
      names: {
        id: SECRET_TYPE_ID,
        value: SECRET_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();
    this.secretValue = asn1.result.secretValue;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.secretTypeId
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            this.secretValue.toSchema()
          ]
        })
      ]
    });
  }
  toJSON() {
    return {
      secretTypeId: this.secretTypeId,
      secretValue: this.secretValue.toJSON()
    };
  }
};
SecretBag.CLASS_NAME = "SecretBag";
var SafeBagValueFactory = class _SafeBagValueFactory {
  static getItems() {
    if (!this.items) {
      this.items = {};
      _SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.1", PrivateKeyInfo);
      _SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.2", PKCS8ShroudedKeyBag);
      _SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.3", CertBag);
      _SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.4", CRLBag);
      _SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.5", SecretBag);
      _SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.6", SafeContents);
    }
    return this.items;
  }
  static register(id, type) {
    this.getItems()[id] = type;
  }
  static find(id) {
    return this.getItems()[id] || null;
  }
};
var BAG_ID = "bagId";
var BAG_VALUE = "bagValue";
var BAG_ATTRIBUTES = "bagAttributes";
var CLEAR_PROPS$I = [
  BAG_ID,
  BAG_VALUE,
  BAG_ATTRIBUTES
];
var SafeBag = class _SafeBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.bagId = getParametersValue(parameters, BAG_ID, _SafeBag.defaultValues(BAG_ID));
    this.bagValue = getParametersValue(parameters, BAG_VALUE, _SafeBag.defaultValues(BAG_VALUE));
    if (BAG_ATTRIBUTES in parameters) {
      this.bagAttributes = getParametersValue(parameters, BAG_ATTRIBUTES, _SafeBag.defaultValues(BAG_ATTRIBUTES));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case BAG_ID:
        return EMPTY_STRING2;
      case BAG_VALUE:
        return new Any();
      case BAG_ATTRIBUTES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case BAG_ID:
        return memberValue === EMPTY_STRING2;
      case BAG_VALUE:
        return memberValue instanceof Any;
      case BAG_ATTRIBUTES:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.bagId || BAG_ID
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Any({
              name: names.bagValue || BAG_VALUE
            })
          ]
        }),
        new Set2({
          optional: true,
          value: [
            new Repeated({
              name: names.bagAttributes || BAG_ATTRIBUTES,
              value: Attribute.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$I);
    const asn1 = compareSchema(schema, schema, _SafeBag.schema({
      names: {
        bagId: BAG_ID,
        bagValue: BAG_VALUE,
        bagAttributes: BAG_ATTRIBUTES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.bagId = asn1.result.bagId.valueBlock.toString();
    const bagType = SafeBagValueFactory.find(this.bagId);
    if (!bagType) {
      throw new Error(`Invalid BAG_ID for SafeBag: ${this.bagId}`);
    }
    this.bagValue = new bagType({
      schema: asn1.result.bagValue
    });
    if (BAG_ATTRIBUTES in asn1.result) {
      this.bagAttributes = Array.from(asn1.result.bagAttributes, (element) => new Attribute({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [
      new ObjectIdentifier({
        value: this.bagId
      }),
      new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          this.bagValue.toSchema()
        ]
      })
    ];
    if (this.bagAttributes) {
      outputArray.push(new Set2({
        value: Array.from(this.bagAttributes, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const output = {
      bagId: this.bagId,
      bagValue: this.bagValue.toJSON()
    };
    if (this.bagAttributes) {
      output.bagAttributes = Array.from(this.bagAttributes, (o2) => o2.toJSON());
    }
    return output;
  }
};
SafeBag.CLASS_NAME = "SafeBag";
var SAFE_BUGS = "safeBags";
var SafeContents = class _SafeContents extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.safeBags = getParametersValue(parameters, SAFE_BUGS, _SafeContents.defaultValues(SAFE_BUGS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SAFE_BUGS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SAFE_BUGS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.safeBags || EMPTY_STRING2,
          value: SafeBag.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      SAFE_BUGS
    ]);
    const asn1 = compareSchema(schema, schema, _SafeContents.schema({
      names: {
        safeBags: SAFE_BUGS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.safeBags = Array.from(asn1.result.safeBags, (element) => new SafeBag({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.safeBags, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      safeBags: Array.from(this.safeBags, (o2) => o2.toJSON())
    };
  }
};
SafeContents.CLASS_NAME = "SafeContents";
var OTHER_CERT_FORMAT = "otherCertFormat";
var OTHER_CERT = "otherCert";
var CLEAR_PROPS$H = [
  OTHER_CERT_FORMAT,
  OTHER_CERT
];
var OtherCertificateFormat = class _OtherCertificateFormat extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.otherCertFormat = getParametersValue(parameters, OTHER_CERT_FORMAT, _OtherCertificateFormat.defaultValues(OTHER_CERT_FORMAT));
    this.otherCert = getParametersValue(parameters, OTHER_CERT, _OtherCertificateFormat.defaultValues(OTHER_CERT));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case OTHER_CERT_FORMAT:
        return EMPTY_STRING2;
      case OTHER_CERT:
        return new Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.otherCertFormat || OTHER_CERT_FORMAT
        }),
        new Any({
          name: names.otherCert || OTHER_CERT
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$H);
    const asn1 = compareSchema(schema, schema, _OtherCertificateFormat.schema());
    AsnError.assertSchema(asn1, this.className);
    this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();
    this.otherCert = asn1.result.otherCert;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.otherCertFormat
        }),
        this.otherCert
      ]
    });
  }
  toJSON() {
    const res = {
      otherCertFormat: this.otherCertFormat
    };
    if (!(this.otherCert instanceof Any)) {
      res.otherCert = this.otherCert.toJSON();
    }
    return res;
  }
};
var CERTIFICATES$1 = "certificates";
var CLEAR_PROPS$G = [
  CERTIFICATES$1
];
var CertificateSet = class _CertificateSet extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certificates = getParametersValue(parameters, CERTIFICATES$1, _CertificateSet.defaultValues(CERTIFICATES$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERTIFICATES$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Set2({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.certificates || CERTIFICATES$1,
          value: new Choice({
            value: [
              Certificate.schema(),
              new Constructed({
                idBlock: {
                  tagClass: 3,
                  tagNumber: 0
                },
                value: [
                  new Any()
                ]
              }),
              new Constructed({
                idBlock: {
                  tagClass: 3,
                  tagNumber: 1
                },
                value: [
                  new Sequence()
                ]
              }),
              new Constructed({
                idBlock: {
                  tagClass: 3,
                  tagNumber: 2
                },
                value: AttributeCertificateV2.schema().valueBlock.value
              }),
              new Constructed({
                idBlock: {
                  tagClass: 3,
                  tagNumber: 3
                },
                value: OtherCertificateFormat.schema().valueBlock.value
              })
            ]
          })
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$G);
    const asn1 = compareSchema(schema, schema, _CertificateSet.schema());
    AsnError.assertSchema(asn1, this.className);
    this.certificates = Array.from(asn1.result.certificates || [], (element) => {
      const initialTagNumber = element.idBlock.tagNumber;
      if (element.idBlock.tagClass === 1) return new Certificate({
        schema: element
      });
      const elementSequence = new Sequence({
        value: element.valueBlock.value
      });
      switch (initialTagNumber) {
        case 1:
          if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {
            return new AttributeCertificateV2({
              schema: elementSequence
            });
          } else {
            return new AttributeCertificateV1({
              schema: elementSequence
            });
          }
        case 2:
          return new AttributeCertificateV2({
            schema: elementSequence
          });
        case 3:
          return new OtherCertificateFormat({
            schema: elementSequence
          });
      }
      return element;
    });
  }
  toSchema() {
    return new Set2({
      value: Array.from(this.certificates, (element) => {
        switch (true) {
          case element instanceof Certificate:
            return element.toSchema();
          case element instanceof AttributeCertificateV1:
            return new Constructed({
              idBlock: {
                tagClass: 3,
                tagNumber: 1
              },
              value: element.toSchema().valueBlock.value
            });
          case element instanceof AttributeCertificateV2:
            return new Constructed({
              idBlock: {
                tagClass: 3,
                tagNumber: 2
              },
              value: element.toSchema().valueBlock.value
            });
          case element instanceof OtherCertificateFormat:
            return new Constructed({
              idBlock: {
                tagClass: 3,
                tagNumber: 3
              },
              value: element.toSchema().valueBlock.value
            });
        }
        return element.toSchema();
      })
    });
  }
  toJSON() {
    return {
      certificates: Array.from(this.certificates, (o2) => o2.toJSON())
    };
  }
};
CertificateSet.CLASS_NAME = "CertificateSet";
var OTHER_REV_INFO_FORMAT = "otherRevInfoFormat";
var OTHER_REV_INFO = "otherRevInfo";
var CLEAR_PROPS$F = [
  OTHER_REV_INFO_FORMAT,
  OTHER_REV_INFO
];
var OtherRevocationInfoFormat = class _OtherRevocationInfoFormat extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.otherRevInfoFormat = getParametersValue(parameters, OTHER_REV_INFO_FORMAT, _OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO_FORMAT));
    this.otherRevInfo = getParametersValue(parameters, OTHER_REV_INFO, _OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case OTHER_REV_INFO_FORMAT:
        return EMPTY_STRING2;
      case OTHER_REV_INFO:
        return new Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.otherRevInfoFormat || OTHER_REV_INFO_FORMAT
        }),
        new Any({
          name: names.otherRevInfo || OTHER_REV_INFO
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$F);
    const asn1 = compareSchema(schema, schema, _OtherRevocationInfoFormat.schema());
    AsnError.assertSchema(asn1, this.className);
    this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();
    this.otherRevInfo = asn1.result.otherRevInfo;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.otherRevInfoFormat
        }),
        this.otherRevInfo
      ]
    });
  }
  toJSON() {
    const res = {
      otherRevInfoFormat: this.otherRevInfoFormat
    };
    if (!(this.otherRevInfo instanceof Any)) {
      res.otherRevInfo = this.otherRevInfo.toJSON();
    }
    return res;
  }
};
OtherRevocationInfoFormat.CLASS_NAME = "OtherRevocationInfoFormat";
var CRLS$3 = "crls";
var OTHER_REVOCATION_INFOS = "otherRevocationInfos";
var CLEAR_PROPS$E = [
  CRLS$3
];
var RevocationInfoChoices = class _RevocationInfoChoices extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.crls = getParametersValue(parameters, CRLS$3, _RevocationInfoChoices.defaultValues(CRLS$3));
    this.otherRevocationInfos = getParametersValue(parameters, OTHER_REVOCATION_INFOS, _RevocationInfoChoices.defaultValues(OTHER_REVOCATION_INFOS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CRLS$3:
        return [];
      case OTHER_REVOCATION_INFOS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Set2({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.crls || EMPTY_STRING2,
          value: new Choice({
            value: [
              CertificateRevocationList.schema(),
              new Constructed({
                idBlock: {
                  tagClass: 3,
                  tagNumber: 1
                },
                value: [
                  new ObjectIdentifier(),
                  new Any()
                ]
              })
            ]
          })
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$E);
    const asn1 = compareSchema(schema, schema, _RevocationInfoChoices.schema({
      names: {
        crls: CRLS$3
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.crls) {
      for (const element of asn1.result.crls) {
        if (element.idBlock.tagClass === 1) this.crls.push(new CertificateRevocationList({
          schema: element
        }));
        else this.otherRevocationInfos.push(new OtherRevocationInfoFormat({
          schema: element
        }));
      }
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(...Array.from(this.crls, (o2) => o2.toSchema()));
    outputArray.push(...Array.from(this.otherRevocationInfos, (element) => {
      const schema = element.toSchema();
      schema.idBlock.tagClass = 3;
      schema.idBlock.tagNumber = 1;
      return schema;
    }));
    return new Set2({
      value: outputArray
    });
  }
  toJSON() {
    return {
      crls: Array.from(this.crls, (o2) => o2.toJSON()),
      otherRevocationInfos: Array.from(this.otherRevocationInfos, (o2) => o2.toJSON())
    };
  }
};
RevocationInfoChoices.CLASS_NAME = "RevocationInfoChoices";
var CERTS$3 = "certs";
var CRLS$2 = "crls";
var CLEAR_PROPS$D = [
  CERTS$3,
  CRLS$2
];
var OriginatorInfo = class _OriginatorInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.crls = getParametersValue(parameters, CRLS$2, _OriginatorInfo.defaultValues(CRLS$2));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERTS$3:
        return new CertificateSet();
      case CRLS$2:
        return new RevocationInfoChoices();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CERTS$3:
        return memberValue.certificates.length === 0;
      case CRLS$2:
        return memberValue.crls.length === 0 && memberValue.otherRevocationInfos.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Constructed({
          name: names.certs || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: CertificateSet.schema().valueBlock.value
        }),
        new Constructed({
          name: names.crls || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: RevocationInfoChoices.schema().valueBlock.value
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$D);
    const asn1 = compareSchema(schema, schema, _OriginatorInfo.schema({
      names: {
        certs: CERTS$3,
        crls: CRLS$2
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (CERTS$3 in asn1.result) {
      this.certs = new CertificateSet({
        schema: new Set2({
          value: asn1.result.certs.valueBlock.value
        })
      });
    }
    if (CRLS$2 in asn1.result) {
      this.crls = new RevocationInfoChoices({
        schema: new Set2({
          value: asn1.result.crls.valueBlock.value
        })
      });
    }
  }
  toSchema() {
    const sequenceValue = [];
    if (this.certs) {
      sequenceValue.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.certs.toSchema().valueBlock.value
      }));
    }
    if (this.crls) {
      sequenceValue.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: this.crls.toSchema().valueBlock.value
      }));
    }
    return new Sequence({
      value: sequenceValue
    });
  }
  toJSON() {
    const res = {};
    if (this.certs) {
      res.certs = this.certs.toJSON();
    }
    if (this.crls) {
      res.crls = this.crls.toJSON();
    }
    return res;
  }
};
OriginatorInfo.CLASS_NAME = "OriginatorInfo";
var ISSUER = "issuer";
var SERIAL_NUMBER$2 = "serialNumber";
var CLEAR_PROPS$C = [
  ISSUER,
  SERIAL_NUMBER$2
];
var IssuerAndSerialNumber = class _IssuerAndSerialNumber extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.issuer = getParametersValue(parameters, ISSUER, _IssuerAndSerialNumber.defaultValues(ISSUER));
    this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$2, _IssuerAndSerialNumber.defaultValues(SERIAL_NUMBER$2));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ISSUER:
        return new RelativeDistinguishedNames();
      case SERIAL_NUMBER$2:
        return new Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        RelativeDistinguishedNames.schema(names.issuer || {}),
        new Integer({
          name: names.serialNumber || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$C);
    const asn1 = compareSchema(schema, schema, _IssuerAndSerialNumber.schema({
      names: {
        issuer: {
          names: {
            blockName: ISSUER
          }
        },
        serialNumber: SERIAL_NUMBER$2
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.issuer = new RelativeDistinguishedNames({
      schema: asn1.result.issuer
    });
    this.serialNumber = asn1.result.serialNumber;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.issuer.toSchema(),
        this.serialNumber
      ]
    });
  }
  toJSON() {
    return {
      issuer: this.issuer.toJSON(),
      serialNumber: this.serialNumber.toJSON()
    };
  }
};
IssuerAndSerialNumber.CLASS_NAME = "IssuerAndSerialNumber";
var VARIANT$3 = "variant";
var VALUE$3 = "value";
var CLEAR_PROPS$B = [
  "blockName"
];
var RecipientIdentifier = class _RecipientIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.variant = getParametersValue(parameters, VARIANT$3, _RecipientIdentifier.defaultValues(VARIANT$3));
    if (VALUE$3 in parameters) {
      this.value = getParametersValue(parameters, VALUE$3, _RecipientIdentifier.defaultValues(VALUE$3));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VARIANT$3:
        return -1;
      case VALUE$3:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VARIANT$3:
        return memberValue === -1;
      case VALUE$3:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Choice({
      value: [
        IssuerAndSerialNumber.schema({
          names: {
            blockName: names.blockName || EMPTY_STRING2
          }
        }),
        new Primitive({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$B);
    const asn1 = compareSchema(schema, schema, _RecipientIdentifier.schema({
      names: {
        blockName: "blockName"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.blockName.idBlock.tagClass === 1) {
      this.variant = 1;
      this.value = new IssuerAndSerialNumber({
        schema: asn1.result.blockName
      });
    } else {
      this.variant = 2;
      this.value = new OctetString({
        valueHex: asn1.result.blockName.valueBlock.valueHex
      });
    }
  }
  toSchema() {
    switch (this.variant) {
      case 1:
        if (!(this.value instanceof IssuerAndSerialNumber)) {
          throw new Error("Incorrect type of RecipientIdentifier.value. It should be IssuerAndSerialNumber.");
        }
        return this.value.toSchema();
      case 2:
        if (!(this.value instanceof OctetString)) {
          throw new Error("Incorrect type of RecipientIdentifier.value. It should be ASN.1 OctetString.");
        }
        return new Primitive({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          valueHex: this.value.valueBlock.valueHexView
        });
      default:
        return new Any();
    }
  }
  toJSON() {
    const res = {
      variant: this.variant
    };
    if ((this.variant === 1 || this.variant === 2) && this.value) {
      res.value = this.value.toJSON();
    }
    return res;
  }
};
RecipientIdentifier.CLASS_NAME = "RecipientIdentifier";
var VERSION$c = "version";
var RID$1 = "rid";
var KEY_ENCRYPTION_ALGORITHM$3 = "keyEncryptionAlgorithm";
var ENCRYPTED_KEY$3 = "encryptedKey";
var RECIPIENT_CERTIFICATE$1 = "recipientCertificate";
var CLEAR_PROPS$A = [
  VERSION$c,
  RID$1,
  KEY_ENCRYPTION_ALGORITHM$3,
  ENCRYPTED_KEY$3
];
var KeyTransRecipientInfo = class _KeyTransRecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$c, _KeyTransRecipientInfo.defaultValues(VERSION$c));
    this.rid = getParametersValue(parameters, RID$1, _KeyTransRecipientInfo.defaultValues(RID$1));
    this.keyEncryptionAlgorithm = getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$3, _KeyTransRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$3));
    this.encryptedKey = getParametersValue(parameters, ENCRYPTED_KEY$3, _KeyTransRecipientInfo.defaultValues(ENCRYPTED_KEY$3));
    this.recipientCertificate = getParametersValue(parameters, RECIPIENT_CERTIFICATE$1, _KeyTransRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$c:
        return -1;
      case RID$1:
        return {};
      case KEY_ENCRYPTION_ALGORITHM$3:
        return new AlgorithmIdentifier();
      case ENCRYPTED_KEY$3:
        return new OctetString();
      case RECIPIENT_CERTIFICATE$1:
        return new Certificate();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$c:
        return memberValue === _KeyTransRecipientInfo.defaultValues(VERSION$c);
      case RID$1:
        return Object.keys(memberValue).length === 0;
      case KEY_ENCRYPTION_ALGORITHM$3:
      case ENCRYPTED_KEY$3:
        return memberValue.isEqual(_KeyTransRecipientInfo.defaultValues(memberName));
      case RECIPIENT_CERTIFICATE$1:
        return false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        RecipientIdentifier.schema(names.rid || {}),
        AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),
        new OctetString({
          name: names.encryptedKey || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$A);
    const asn1 = compareSchema(schema, schema, _KeyTransRecipientInfo.schema({
      names: {
        version: VERSION$c,
        rid: {
          names: {
            blockName: RID$1
          }
        },
        keyEncryptionAlgorithm: {
          names: {
            blockName: KEY_ENCRYPTION_ALGORITHM$3
          }
        },
        encryptedKey: ENCRYPTED_KEY$3
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    if (asn1.result.rid.idBlock.tagClass === 3) {
      this.rid = new OctetString({
        valueHex: asn1.result.rid.valueBlock.valueHex
      });
    } else {
      this.rid = new IssuerAndSerialNumber({
        schema: asn1.result.rid
      });
    }
    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.keyEncryptionAlgorithm
    });
    this.encryptedKey = asn1.result.encryptedKey;
  }
  toSchema() {
    const outputArray = [];
    if (this.rid instanceof IssuerAndSerialNumber) {
      this.version = 0;
      outputArray.push(new Integer({
        value: this.version
      }));
      outputArray.push(this.rid.toSchema());
    } else {
      this.version = 2;
      outputArray.push(new Integer({
        value: this.version
      }));
      outputArray.push(new Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        valueHex: this.rid.valueBlock.valueHexView
      }));
    }
    outputArray.push(this.keyEncryptionAlgorithm.toSchema());
    outputArray.push(this.encryptedKey);
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    return {
      version: this.version,
      rid: this.rid.toJSON(),
      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
      encryptedKey: this.encryptedKey.toJSON()
    };
  }
};
KeyTransRecipientInfo.CLASS_NAME = "KeyTransRecipientInfo";
var ALGORITHM = "algorithm";
var PUBLIC_KEY = "publicKey";
var CLEAR_PROPS$z = [
  ALGORITHM,
  PUBLIC_KEY
];
var OriginatorPublicKey = class _OriginatorPublicKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.algorithm = getParametersValue(parameters, ALGORITHM, _OriginatorPublicKey.defaultValues(ALGORITHM));
    this.publicKey = getParametersValue(parameters, PUBLIC_KEY, _OriginatorPublicKey.defaultValues(PUBLIC_KEY));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ALGORITHM:
        return new AlgorithmIdentifier();
      case PUBLIC_KEY:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ALGORITHM:
      case PUBLIC_KEY:
        return memberValue.isEqual(_OriginatorPublicKey.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.algorithm || {}),
        new BitString({
          name: names.publicKey || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$z);
    const asn1 = compareSchema(schema, schema, _OriginatorPublicKey.schema({
      names: {
        algorithm: {
          names: {
            blockName: ALGORITHM
          }
        },
        publicKey: PUBLIC_KEY
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.algorithm = new AlgorithmIdentifier({
      schema: asn1.result.algorithm
    });
    this.publicKey = asn1.result.publicKey;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.algorithm.toSchema(),
        this.publicKey
      ]
    });
  }
  toJSON() {
    return {
      algorithm: this.algorithm.toJSON(),
      publicKey: this.publicKey.toJSON()
    };
  }
};
OriginatorPublicKey.CLASS_NAME = "OriginatorPublicKey";
var VARIANT$2 = "variant";
var VALUE$2 = "value";
var CLEAR_PROPS$y = [
  "blockName"
];
var OriginatorIdentifierOrKey = class _OriginatorIdentifierOrKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.variant = getParametersValue(parameters, VARIANT$2, _OriginatorIdentifierOrKey.defaultValues(VARIANT$2));
    if (VALUE$2 in parameters) {
      this.value = getParametersValue(parameters, VALUE$2, _OriginatorIdentifierOrKey.defaultValues(VALUE$2));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VARIANT$2:
        return -1;
      case VALUE$2:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VARIANT$2:
        return memberValue === -1;
      case VALUE$2:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Choice({
      value: [
        IssuerAndSerialNumber.schema({
          names: {
            blockName: names.blockName || EMPTY_STRING2
          }
        }),
        new Primitive({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          name: names.blockName || EMPTY_STRING2
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          name: names.blockName || EMPTY_STRING2,
          value: OriginatorPublicKey.schema().valueBlock.value
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$y);
    const asn1 = compareSchema(schema, schema, _OriginatorIdentifierOrKey.schema({
      names: {
        blockName: "blockName"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.blockName.idBlock.tagClass === 1) {
      this.variant = 1;
      this.value = new IssuerAndSerialNumber({
        schema: asn1.result.blockName
      });
    } else {
      if (asn1.result.blockName.idBlock.tagNumber === 0) {
        asn1.result.blockName.idBlock.tagClass = 1;
        asn1.result.blockName.idBlock.tagNumber = 4;
        this.variant = 2;
        this.value = asn1.result.blockName;
      } else {
        this.variant = 3;
        this.value = new OriginatorPublicKey({
          schema: new Sequence({
            value: asn1.result.blockName.valueBlock.value
          })
        });
      }
    }
  }
  toSchema() {
    switch (this.variant) {
      case 1:
        return this.value.toSchema();
      case 2:
        this.value.idBlock.tagClass = 3;
        this.value.idBlock.tagNumber = 0;
        return this.value;
      case 3: {
        const _schema = this.value.toSchema();
        _schema.idBlock.tagClass = 3;
        _schema.idBlock.tagNumber = 1;
        return _schema;
      }
      default:
        return new Any();
    }
  }
  toJSON() {
    const res = {
      variant: this.variant
    };
    if (this.variant === 1 || this.variant === 2 || this.variant === 3) {
      res.value = this.value.toJSON();
    }
    return res;
  }
};
OriginatorIdentifierOrKey.CLASS_NAME = "OriginatorIdentifierOrKey";
var KEY_ATTR_ID = "keyAttrId";
var KEY_ATTR = "keyAttr";
var CLEAR_PROPS$x = [
  KEY_ATTR_ID,
  KEY_ATTR
];
var OtherKeyAttribute = class _OtherKeyAttribute extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyAttrId = getParametersValue(parameters, KEY_ATTR_ID, _OtherKeyAttribute.defaultValues(KEY_ATTR_ID));
    if (KEY_ATTR in parameters) {
      this.keyAttr = getParametersValue(parameters, KEY_ATTR, _OtherKeyAttribute.defaultValues(KEY_ATTR));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_ATTR_ID:
        return EMPTY_STRING2;
      case KEY_ATTR:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case KEY_ATTR_ID:
        return typeof memberValue === "string" && memberValue === EMPTY_STRING2;
      case KEY_ATTR:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      optional: names.optional || true,
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.keyAttrId || EMPTY_STRING2
        }),
        new Any({
          optional: true,
          name: names.keyAttr || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$x);
    const asn1 = compareSchema(schema, schema, _OtherKeyAttribute.schema({
      names: {
        keyAttrId: KEY_ATTR_ID,
        keyAttr: KEY_ATTR
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();
    if (KEY_ATTR in asn1.result) {
      this.keyAttr = asn1.result.keyAttr;
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new ObjectIdentifier({
      value: this.keyAttrId
    }));
    if (KEY_ATTR in this) {
      outputArray.push(this.keyAttr);
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      keyAttrId: this.keyAttrId
    };
    if (KEY_ATTR in this) {
      res.keyAttr = this.keyAttr.toJSON();
    }
    return res;
  }
};
OtherKeyAttribute.CLASS_NAME = "OtherKeyAttribute";
var SUBJECT_KEY_IDENTIFIER = "subjectKeyIdentifier";
var DATE$1 = "date";
var OTHER$1 = "other";
var CLEAR_PROPS$w = [
  SUBJECT_KEY_IDENTIFIER,
  DATE$1,
  OTHER$1
];
var RecipientKeyIdentifier = class _RecipientKeyIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.subjectKeyIdentifier = getParametersValue(parameters, SUBJECT_KEY_IDENTIFIER, _RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));
    if (DATE$1 in parameters) {
      this.date = getParametersValue(parameters, DATE$1, _RecipientKeyIdentifier.defaultValues(DATE$1));
    }
    if (OTHER$1 in parameters) {
      this.other = getParametersValue(parameters, OTHER$1, _RecipientKeyIdentifier.defaultValues(OTHER$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SUBJECT_KEY_IDENTIFIER:
        return new OctetString();
      case DATE$1:
        return new GeneralizedTime();
      case OTHER$1:
        return new OtherKeyAttribute();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SUBJECT_KEY_IDENTIFIER:
        return memberValue.isEqual(_RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));
      case DATE$1:
        return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;
      case OTHER$1:
        return memberValue.keyAttrId === EMPTY_STRING2 && "keyAttr" in memberValue === false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new OctetString({
          name: names.subjectKeyIdentifier || EMPTY_STRING2
        }),
        new GeneralizedTime({
          optional: true,
          name: names.date || EMPTY_STRING2
        }),
        OtherKeyAttribute.schema(names.other || {})
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$w);
    const asn1 = compareSchema(schema, schema, _RecipientKeyIdentifier.schema({
      names: {
        subjectKeyIdentifier: SUBJECT_KEY_IDENTIFIER,
        date: DATE$1,
        other: {
          names: {
            blockName: OTHER$1
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;
    if (DATE$1 in asn1.result) this.date = asn1.result.date;
    if (OTHER$1 in asn1.result) this.other = new OtherKeyAttribute({
      schema: asn1.result.other
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.subjectKeyIdentifier);
    if (this.date) {
      outputArray.push(this.date);
    }
    if (this.other) {
      outputArray.push(this.other.toSchema());
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()
    };
    if (this.date) {
      res.date = this.date.toJSON();
    }
    if (this.other) {
      res.other = this.other.toJSON();
    }
    return res;
  }
};
RecipientKeyIdentifier.CLASS_NAME = "RecipientKeyIdentifier";
var VARIANT$1 = "variant";
var VALUE$1 = "value";
var CLEAR_PROPS$v = [
  "blockName"
];
var KeyAgreeRecipientIdentifier = class _KeyAgreeRecipientIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.variant = getParametersValue(parameters, VARIANT$1, _KeyAgreeRecipientIdentifier.defaultValues(VARIANT$1));
    this.value = getParametersValue(parameters, VALUE$1, _KeyAgreeRecipientIdentifier.defaultValues(VALUE$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VARIANT$1:
        return -1;
      case VALUE$1:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VARIANT$1:
        return memberValue === -1;
      case VALUE$1:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Choice({
      value: [
        IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {
          names: {
            blockName: names.blockName || EMPTY_STRING2
          }
        }),
        new Constructed({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: RecipientKeyIdentifier.schema(names.rKeyId || {
            names: {
              blockName: names.blockName || EMPTY_STRING2
            }
          }).valueBlock.value
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$v);
    const asn1 = compareSchema(schema, schema, _KeyAgreeRecipientIdentifier.schema({
      names: {
        blockName: "blockName"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.blockName.idBlock.tagClass === 1) {
      this.variant = 1;
      this.value = new IssuerAndSerialNumber({
        schema: asn1.result.blockName
      });
    } else {
      this.variant = 2;
      this.value = new RecipientKeyIdentifier({
        schema: new Sequence({
          value: asn1.result.blockName.valueBlock.value
        })
      });
    }
  }
  toSchema() {
    switch (this.variant) {
      case 1:
        return this.value.toSchema();
      case 2:
        return new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: this.value.toSchema().valueBlock.value
        });
      default:
        return new Any();
    }
  }
  toJSON() {
    const res = {
      variant: this.variant
    };
    if (this.variant === 1 || this.variant === 2) {
      res.value = this.value.toJSON();
    }
    return res;
  }
};
KeyAgreeRecipientIdentifier.CLASS_NAME = "KeyAgreeRecipientIdentifier";
var RID = "rid";
var ENCRYPTED_KEY$2 = "encryptedKey";
var CLEAR_PROPS$u = [
  RID,
  ENCRYPTED_KEY$2
];
var RecipientEncryptedKey = class _RecipientEncryptedKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.rid = getParametersValue(parameters, RID, _RecipientEncryptedKey.defaultValues(RID));
    this.encryptedKey = getParametersValue(parameters, ENCRYPTED_KEY$2, _RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case RID:
        return new KeyAgreeRecipientIdentifier();
      case ENCRYPTED_KEY$2:
        return new OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case RID:
        return memberValue.variant === -1 && "value" in memberValue === false;
      case ENCRYPTED_KEY$2:
        return memberValue.isEqual(_RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        KeyAgreeRecipientIdentifier.schema(names.rid || {}),
        new OctetString({
          name: names.encryptedKey || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$u);
    const asn1 = compareSchema(schema, schema, _RecipientEncryptedKey.schema({
      names: {
        rid: {
          names: {
            blockName: RID
          }
        },
        encryptedKey: ENCRYPTED_KEY$2
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.rid = new KeyAgreeRecipientIdentifier({
      schema: asn1.result.rid
    });
    this.encryptedKey = asn1.result.encryptedKey;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.rid.toSchema(),
        this.encryptedKey
      ]
    });
  }
  toJSON() {
    return {
      rid: this.rid.toJSON(),
      encryptedKey: this.encryptedKey.toJSON()
    };
  }
};
RecipientEncryptedKey.CLASS_NAME = "RecipientEncryptedKey";
var ENCRYPTED_KEYS = "encryptedKeys";
var RECIPIENT_ENCRYPTED_KEYS = "RecipientEncryptedKeys";
var CLEAR_PROPS$t = [
  RECIPIENT_ENCRYPTED_KEYS
];
var RecipientEncryptedKeys = class _RecipientEncryptedKeys extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.encryptedKeys = getParametersValue(parameters, ENCRYPTED_KEYS, _RecipientEncryptedKeys.defaultValues(ENCRYPTED_KEYS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ENCRYPTED_KEYS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ENCRYPTED_KEYS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.RecipientEncryptedKeys || EMPTY_STRING2,
          value: RecipientEncryptedKey.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$t);
    const asn1 = compareSchema(schema, schema, _RecipientEncryptedKeys.schema({
      names: {
        RecipientEncryptedKeys: RECIPIENT_ENCRYPTED_KEYS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, (element) => new RecipientEncryptedKey({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.encryptedKeys, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      encryptedKeys: Array.from(this.encryptedKeys, (o2) => o2.toJSON())
    };
  }
};
RecipientEncryptedKeys.CLASS_NAME = "RecipientEncryptedKeys";
var VERSION$b = "version";
var ORIGINATOR = "originator";
var UKM = "ukm";
var KEY_ENCRYPTION_ALGORITHM$2 = "keyEncryptionAlgorithm";
var RECIPIENT_ENCRYPTED_KEY = "recipientEncryptedKeys";
var RECIPIENT_CERTIFICATE = "recipientCertificate";
var RECIPIENT_PUBLIC_KEY = "recipientPublicKey";
var CLEAR_PROPS$s = [
  VERSION$b,
  ORIGINATOR,
  UKM,
  KEY_ENCRYPTION_ALGORITHM$2,
  RECIPIENT_ENCRYPTED_KEY
];
var KeyAgreeRecipientInfo = class _KeyAgreeRecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$b, _KeyAgreeRecipientInfo.defaultValues(VERSION$b));
    this.originator = getParametersValue(parameters, ORIGINATOR, _KeyAgreeRecipientInfo.defaultValues(ORIGINATOR));
    if (UKM in parameters) {
      this.ukm = getParametersValue(parameters, UKM, _KeyAgreeRecipientInfo.defaultValues(UKM));
    }
    this.keyEncryptionAlgorithm = getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$2, _KeyAgreeRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$2));
    this.recipientEncryptedKeys = getParametersValue(parameters, RECIPIENT_ENCRYPTED_KEY, _KeyAgreeRecipientInfo.defaultValues(RECIPIENT_ENCRYPTED_KEY));
    this.recipientCertificate = getParametersValue(parameters, RECIPIENT_CERTIFICATE, _KeyAgreeRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE));
    this.recipientPublicKey = getParametersValue(parameters, RECIPIENT_PUBLIC_KEY, _KeyAgreeRecipientInfo.defaultValues(RECIPIENT_PUBLIC_KEY));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$b:
        return 0;
      case ORIGINATOR:
        return new OriginatorIdentifierOrKey();
      case UKM:
        return new OctetString();
      case KEY_ENCRYPTION_ALGORITHM$2:
        return new AlgorithmIdentifier();
      case RECIPIENT_ENCRYPTED_KEY:
        return new RecipientEncryptedKeys();
      case RECIPIENT_CERTIFICATE:
        return new Certificate();
      case RECIPIENT_PUBLIC_KEY:
        return null;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$b:
        return memberValue === 0;
      case ORIGINATOR:
        return memberValue.variant === -1 && "value" in memberValue === false;
      case UKM:
        return memberValue.isEqual(_KeyAgreeRecipientInfo.defaultValues(UKM));
      case KEY_ENCRYPTION_ALGORITHM$2:
        return memberValue.algorithmId === EMPTY_STRING2 && "algorithmParams" in memberValue === false;
      case RECIPIENT_ENCRYPTED_KEY:
        return memberValue.encryptedKeys.length === 0;
      case RECIPIENT_CERTIFICATE:
        return false;
      case RECIPIENT_PUBLIC_KEY:
        return false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            OriginatorIdentifierOrKey.schema(names.originator || {})
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new OctetString({
              name: names.ukm || EMPTY_STRING2
            })
          ]
        }),
        AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),
        RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$s);
    const asn1 = compareSchema(schema, schema, _KeyAgreeRecipientInfo.schema({
      names: {
        version: VERSION$b,
        originator: {
          names: {
            blockName: ORIGINATOR
          }
        },
        ukm: UKM,
        keyEncryptionAlgorithm: {
          names: {
            blockName: KEY_ENCRYPTION_ALGORITHM$2
          }
        },
        recipientEncryptedKeys: {
          names: {
            blockName: RECIPIENT_ENCRYPTED_KEY
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.originator = new OriginatorIdentifierOrKey({
      schema: asn1.result.originator
    });
    if (UKM in asn1.result) this.ukm = asn1.result.ukm;
    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.keyEncryptionAlgorithm
    });
    this.recipientEncryptedKeys = new RecipientEncryptedKeys({
      schema: asn1.result.recipientEncryptedKeys
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.version
    }));
    outputArray.push(new Constructed({
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      value: [
        this.originator.toSchema()
      ]
    }));
    if (this.ukm) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [
          this.ukm
        ]
      }));
    }
    outputArray.push(this.keyEncryptionAlgorithm.toSchema());
    outputArray.push(this.recipientEncryptedKeys.toSchema());
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      originator: this.originator.toJSON(),
      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
      recipientEncryptedKeys: this.recipientEncryptedKeys.toJSON()
    };
    if (this.ukm) {
      res.ukm = this.ukm.toJSON();
    }
    return res;
  }
};
KeyAgreeRecipientInfo.CLASS_NAME = "KeyAgreeRecipientInfo";
var KEY_IDENTIFIER = "keyIdentifier";
var DATE2 = "date";
var OTHER = "other";
var CLEAR_PROPS$r = [
  KEY_IDENTIFIER,
  DATE2,
  OTHER
];
var KEKIdentifier = class _KEKIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyIdentifier = getParametersValue(parameters, KEY_IDENTIFIER, _KEKIdentifier.defaultValues(KEY_IDENTIFIER));
    if (DATE2 in parameters) {
      this.date = getParametersValue(parameters, DATE2, _KEKIdentifier.defaultValues(DATE2));
    }
    if (OTHER in parameters) {
      this.other = getParametersValue(parameters, OTHER, _KEKIdentifier.defaultValues(OTHER));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_IDENTIFIER:
        return new OctetString();
      case DATE2:
        return new GeneralizedTime();
      case OTHER:
        return new OtherKeyAttribute();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case KEY_IDENTIFIER:
        return memberValue.isEqual(_KEKIdentifier.defaultValues(KEY_IDENTIFIER));
      case DATE2:
        return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;
      case OTHER:
        return memberValue.compareWithDefault("keyAttrId", memberValue.keyAttrId) && "keyAttr" in memberValue === false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new OctetString({
          name: names.keyIdentifier || EMPTY_STRING2
        }),
        new GeneralizedTime({
          optional: true,
          name: names.date || EMPTY_STRING2
        }),
        OtherKeyAttribute.schema(names.other || {})
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$r);
    const asn1 = compareSchema(schema, schema, _KEKIdentifier.schema({
      names: {
        keyIdentifier: KEY_IDENTIFIER,
        date: DATE2,
        other: {
          names: {
            blockName: OTHER
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyIdentifier = asn1.result.keyIdentifier;
    if (DATE2 in asn1.result) this.date = asn1.result.date;
    if (OTHER in asn1.result) this.other = new OtherKeyAttribute({
      schema: asn1.result.other
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.keyIdentifier);
    if (this.date) {
      outputArray.push(this.date);
    }
    if (this.other) {
      outputArray.push(this.other.toSchema());
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      keyIdentifier: this.keyIdentifier.toJSON()
    };
    if (this.date) {
      res.date = this.date;
    }
    if (this.other) {
      res.other = this.other.toJSON();
    }
    return res;
  }
};
KEKIdentifier.CLASS_NAME = "KEKIdentifier";
var VERSION$a = "version";
var KEK_ID = "kekid";
var KEY_ENCRYPTION_ALGORITHM$1 = "keyEncryptionAlgorithm";
var ENCRYPTED_KEY$1 = "encryptedKey";
var PER_DEFINED_KEK = "preDefinedKEK";
var CLEAR_PROPS$q = [
  VERSION$a,
  KEK_ID,
  KEY_ENCRYPTION_ALGORITHM$1,
  ENCRYPTED_KEY$1
];
var KEKRecipientInfo = class _KEKRecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$a, _KEKRecipientInfo.defaultValues(VERSION$a));
    this.kekid = getParametersValue(parameters, KEK_ID, _KEKRecipientInfo.defaultValues(KEK_ID));
    this.keyEncryptionAlgorithm = getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$1, _KEKRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$1));
    this.encryptedKey = getParametersValue(parameters, ENCRYPTED_KEY$1, _KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));
    this.preDefinedKEK = getParametersValue(parameters, PER_DEFINED_KEK, _KEKRecipientInfo.defaultValues(PER_DEFINED_KEK));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$a:
        return 0;
      case KEK_ID:
        return new KEKIdentifier();
      case KEY_ENCRYPTION_ALGORITHM$1:
        return new AlgorithmIdentifier();
      case ENCRYPTED_KEY$1:
        return new OctetString();
      case PER_DEFINED_KEK:
        return EMPTY_BUFFER2;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case "KEKRecipientInfo":
        return memberValue === _KEKRecipientInfo.defaultValues(VERSION$a);
      case KEK_ID:
        return memberValue.compareWithDefault("keyIdentifier", memberValue.keyIdentifier) && "date" in memberValue === false && "other" in memberValue === false;
      case KEY_ENCRYPTION_ALGORITHM$1:
        return memberValue.algorithmId === EMPTY_STRING2 && "algorithmParams" in memberValue === false;
      case ENCRYPTED_KEY$1:
        return memberValue.isEqual(_KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));
      case PER_DEFINED_KEK:
        return memberValue.byteLength === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        KEKIdentifier.schema(names.kekid || {}),
        AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),
        new OctetString({
          name: names.encryptedKey || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$q);
    const asn1 = compareSchema(schema, schema, _KEKRecipientInfo.schema({
      names: {
        version: VERSION$a,
        kekid: {
          names: {
            blockName: KEK_ID
          }
        },
        keyEncryptionAlgorithm: {
          names: {
            blockName: KEY_ENCRYPTION_ALGORITHM$1
          }
        },
        encryptedKey: ENCRYPTED_KEY$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.kekid = new KEKIdentifier({
      schema: asn1.result.kekid
    });
    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.keyEncryptionAlgorithm
    });
    this.encryptedKey = asn1.result.encryptedKey;
  }
  toSchema() {
    return new Sequence({
      value: [
        new Integer({
          value: this.version
        }),
        this.kekid.toSchema(),
        this.keyEncryptionAlgorithm.toSchema(),
        this.encryptedKey
      ]
    });
  }
  toJSON() {
    return {
      version: this.version,
      kekid: this.kekid.toJSON(),
      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
      encryptedKey: this.encryptedKey.toJSON()
    };
  }
};
KEKRecipientInfo.CLASS_NAME = "KEKRecipientInfo";
var VERSION$9 = "version";
var KEY_DERIVATION_ALGORITHM = "keyDerivationAlgorithm";
var KEY_ENCRYPTION_ALGORITHM = "keyEncryptionAlgorithm";
var ENCRYPTED_KEY = "encryptedKey";
var PASSWORD = "password";
var CLEAR_PROPS$p = [
  VERSION$9,
  KEY_DERIVATION_ALGORITHM,
  KEY_ENCRYPTION_ALGORITHM,
  ENCRYPTED_KEY
];
var PasswordRecipientinfo = class _PasswordRecipientinfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$9, _PasswordRecipientinfo.defaultValues(VERSION$9));
    if (KEY_DERIVATION_ALGORITHM in parameters) {
      this.keyDerivationAlgorithm = getParametersValue(parameters, KEY_DERIVATION_ALGORITHM, _PasswordRecipientinfo.defaultValues(KEY_DERIVATION_ALGORITHM));
    }
    this.keyEncryptionAlgorithm = getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM, _PasswordRecipientinfo.defaultValues(KEY_ENCRYPTION_ALGORITHM));
    this.encryptedKey = getParametersValue(parameters, ENCRYPTED_KEY, _PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));
    this.password = getParametersValue(parameters, PASSWORD, _PasswordRecipientinfo.defaultValues(PASSWORD));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$9:
        return -1;
      case KEY_DERIVATION_ALGORITHM:
        return new AlgorithmIdentifier();
      case KEY_ENCRYPTION_ALGORITHM:
        return new AlgorithmIdentifier();
      case ENCRYPTED_KEY:
        return new OctetString();
      case PASSWORD:
        return EMPTY_BUFFER2;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$9:
        return memberValue === -1;
      case KEY_DERIVATION_ALGORITHM:
      case KEY_ENCRYPTION_ALGORITHM:
        return memberValue.algorithmId === EMPTY_STRING2 && "algorithmParams" in memberValue === false;
      case ENCRYPTED_KEY:
        return memberValue.isEqual(_PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));
      case PASSWORD:
        return memberValue.byteLength === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        new Constructed({
          name: names.keyDerivationAlgorithm || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: AlgorithmIdentifier.schema().valueBlock.value
        }),
        AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),
        new OctetString({
          name: names.encryptedKey || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$p);
    const asn1 = compareSchema(schema, schema, _PasswordRecipientinfo.schema({
      names: {
        version: VERSION$9,
        keyDerivationAlgorithm: KEY_DERIVATION_ALGORITHM,
        keyEncryptionAlgorithm: {
          names: {
            blockName: KEY_ENCRYPTION_ALGORITHM
          }
        },
        encryptedKey: ENCRYPTED_KEY
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    if (KEY_DERIVATION_ALGORITHM in asn1.result) {
      this.keyDerivationAlgorithm = new AlgorithmIdentifier({
        schema: new Sequence({
          value: asn1.result.keyDerivationAlgorithm.valueBlock.value
        })
      });
    }
    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.keyEncryptionAlgorithm
    });
    this.encryptedKey = asn1.result.encryptedKey;
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.version
    }));
    if (this.keyDerivationAlgorithm) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.keyDerivationAlgorithm.toSchema().valueBlock.value
      }));
    }
    outputArray.push(this.keyEncryptionAlgorithm.toSchema());
    outputArray.push(this.encryptedKey);
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
      encryptedKey: this.encryptedKey.toJSON()
    };
    if (this.keyDerivationAlgorithm) {
      res.keyDerivationAlgorithm = this.keyDerivationAlgorithm.toJSON();
    }
    return res;
  }
};
PasswordRecipientinfo.CLASS_NAME = "PasswordRecipientInfo";
var ORI_TYPE = "oriType";
var ORI_VALUE = "oriValue";
var CLEAR_PROPS$o = [
  ORI_TYPE,
  ORI_VALUE
];
var OtherRecipientInfo = class _OtherRecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.oriType = getParametersValue(parameters, ORI_TYPE, _OtherRecipientInfo.defaultValues(ORI_TYPE));
    this.oriValue = getParametersValue(parameters, ORI_VALUE, _OtherRecipientInfo.defaultValues(ORI_VALUE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ORI_TYPE:
        return EMPTY_STRING2;
      case ORI_VALUE:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ORI_TYPE:
        return memberValue === EMPTY_STRING2;
      case ORI_VALUE:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.oriType || EMPTY_STRING2
        }),
        new Any({
          name: names.oriValue || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$o);
    const asn1 = compareSchema(schema, schema, _OtherRecipientInfo.schema({
      names: {
        oriType: ORI_TYPE,
        oriValue: ORI_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.oriType = asn1.result.oriType.valueBlock.toString();
    this.oriValue = asn1.result.oriValue;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.oriType
        }),
        this.oriValue
      ]
    });
  }
  toJSON() {
    const res = {
      oriType: this.oriType
    };
    if (!_OtherRecipientInfo.compareWithDefault(ORI_VALUE, this.oriValue)) {
      res.oriValue = this.oriValue.toJSON();
    }
    return res;
  }
};
OtherRecipientInfo.CLASS_NAME = "OtherRecipientInfo";
var VARIANT = "variant";
var VALUE = "value";
var CLEAR_PROPS$n = [
  "blockName"
];
var RecipientInfo = class _RecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.variant = getParametersValue(parameters, VARIANT, _RecipientInfo.defaultValues(VARIANT));
    if (VALUE in parameters) {
      this.value = getParametersValue(parameters, VALUE, _RecipientInfo.defaultValues(VALUE));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VARIANT:
        return -1;
      case VALUE:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VARIANT:
        return memberValue === _RecipientInfo.defaultValues(memberName);
      case VALUE:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Choice({
      value: [
        KeyTransRecipientInfo.schema({
          names: {
            blockName: names.blockName || EMPTY_STRING2
          }
        }),
        new Constructed({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: KeyAgreeRecipientInfo.schema().valueBlock.value
        }),
        new Constructed({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: KEKRecipientInfo.schema().valueBlock.value
        }),
        new Constructed({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 3
          },
          value: PasswordRecipientinfo.schema().valueBlock.value
        }),
        new Constructed({
          name: names.blockName || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 4
          },
          value: OtherRecipientInfo.schema().valueBlock.value
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$n);
    const asn1 = compareSchema(schema, schema, _RecipientInfo.schema({
      names: {
        blockName: "blockName"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.blockName.idBlock.tagClass === 1) {
      this.variant = 1;
      this.value = new KeyTransRecipientInfo({
        schema: asn1.result.blockName
      });
    } else {
      const blockSequence = new Sequence({
        value: asn1.result.blockName.valueBlock.value
      });
      switch (asn1.result.blockName.idBlock.tagNumber) {
        case 1:
          this.variant = 2;
          this.value = new KeyAgreeRecipientInfo({
            schema: blockSequence
          });
          break;
        case 2:
          this.variant = 3;
          this.value = new KEKRecipientInfo({
            schema: blockSequence
          });
          break;
        case 3:
          this.variant = 4;
          this.value = new PasswordRecipientinfo({
            schema: blockSequence
          });
          break;
        case 4:
          this.variant = 5;
          this.value = new OtherRecipientInfo({
            schema: blockSequence
          });
          break;
        default:
          throw new Error("Incorrect structure of RecipientInfo block");
      }
    }
  }
  toSchema() {
    ParameterError.assertEmpty(this.value, "value", "RecipientInfo");
    const _schema = this.value.toSchema();
    switch (this.variant) {
      case 1:
        return _schema;
      case 2:
      case 3:
      case 4:
        _schema.idBlock.tagClass = 3;
        _schema.idBlock.tagNumber = this.variant - 1;
        return _schema;
      default:
        return new Any();
    }
  }
  toJSON() {
    const res = {
      variant: this.variant
    };
    if (this.value && this.variant >= 1 && this.variant <= 4) {
      res.value = this.value.toJSON();
    }
    return res;
  }
};
RecipientInfo.CLASS_NAME = "RecipientInfo";
var HASH_ALGORITHM$2 = "hashAlgorithm";
var MASK_GEN_ALGORITHM = "maskGenAlgorithm";
var P_SOURCE_ALGORITHM = "pSourceAlgorithm";
var CLEAR_PROPS$m = [
  HASH_ALGORITHM$2,
  MASK_GEN_ALGORITHM,
  P_SOURCE_ALGORITHM
];
var RSAESOAEPParams = class _RSAESOAEPParams extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM$2, _RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2));
    this.maskGenAlgorithm = getParametersValue(parameters, MASK_GEN_ALGORITHM, _RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM));
    this.pSourceAlgorithm = getParametersValue(parameters, P_SOURCE_ALGORITHM, _RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case HASH_ALGORITHM$2:
        return new AlgorithmIdentifier({
          algorithmId: "1.3.14.3.2.26",
          algorithmParams: new Null()
        });
      case MASK_GEN_ALGORITHM:
        return new AlgorithmIdentifier({
          algorithmId: "1.2.840.113549.1.1.8",
          algorithmParams: new AlgorithmIdentifier({
            algorithmId: "1.3.14.3.2.26",
            algorithmParams: new Null()
          }).toSchema()
        });
      case P_SOURCE_ALGORITHM:
        return new AlgorithmIdentifier({
          algorithmId: "1.2.840.113549.1.1.9",
          algorithmParams: new OctetString({
            valueHex: new Uint8Array([
              218,
              57,
              163,
              238,
              94,
              107,
              75,
              13,
              50,
              85,
              191,
              239,
              149,
              96,
              24,
              144,
              175,
              216,
              7,
              9
            ]).buffer
          })
        });
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          optional: true,
          value: [
            AlgorithmIdentifier.schema(names.hashAlgorithm || {})
          ]
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          optional: true,
          value: [
            AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})
          ]
        }),
        new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          optional: true,
          value: [
            AlgorithmIdentifier.schema(names.pSourceAlgorithm || {})
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$m);
    const asn1 = compareSchema(schema, schema, _RSAESOAEPParams.schema({
      names: {
        hashAlgorithm: {
          names: {
            blockName: HASH_ALGORITHM$2
          }
        },
        maskGenAlgorithm: {
          names: {
            blockName: MASK_GEN_ALGORITHM
          }
        },
        pSourceAlgorithm: {
          names: {
            blockName: P_SOURCE_ALGORITHM
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (HASH_ALGORITHM$2 in asn1.result) this.hashAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.hashAlgorithm
    });
    if (MASK_GEN_ALGORITHM in asn1.result) this.maskGenAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.maskGenAlgorithm
    });
    if (P_SOURCE_ALGORITHM in asn1.result) this.pSourceAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.pSourceAlgorithm
    });
  }
  toSchema() {
    const outputArray = [];
    if (!this.hashAlgorithm.isEqual(_RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          this.hashAlgorithm.toSchema()
        ]
      }));
    }
    if (!this.maskGenAlgorithm.isEqual(_RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [
          this.maskGenAlgorithm.toSchema()
        ]
      }));
    }
    if (!this.pSourceAlgorithm.isEqual(_RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: [
          this.pSourceAlgorithm.toSchema()
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {};
    if (!this.hashAlgorithm.isEqual(_RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {
      res.hashAlgorithm = this.hashAlgorithm.toJSON();
    }
    if (!this.maskGenAlgorithm.isEqual(_RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {
      res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();
    }
    if (!this.pSourceAlgorithm.isEqual(_RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {
      res.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();
    }
    return res;
  }
};
RSAESOAEPParams.CLASS_NAME = "RSAESOAEPParams";
var KEY_INFO = "keyInfo";
var ENTITY_U_INFO = "entityUInfo";
var SUPP_PUB_INFO = "suppPubInfo";
var CLEAR_PROPS$l = [
  KEY_INFO,
  ENTITY_U_INFO,
  SUPP_PUB_INFO
];
var ECCCMSSharedInfo = class _ECCCMSSharedInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyInfo = getParametersValue(parameters, KEY_INFO, _ECCCMSSharedInfo.defaultValues(KEY_INFO));
    if (ENTITY_U_INFO in parameters) {
      this.entityUInfo = getParametersValue(parameters, ENTITY_U_INFO, _ECCCMSSharedInfo.defaultValues(ENTITY_U_INFO));
    }
    this.suppPubInfo = getParametersValue(parameters, SUPP_PUB_INFO, _ECCCMSSharedInfo.defaultValues(SUPP_PUB_INFO));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_INFO:
        return new AlgorithmIdentifier();
      case ENTITY_U_INFO:
        return new OctetString();
      case SUPP_PUB_INFO:
        return new OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case KEY_INFO:
      case ENTITY_U_INFO:
      case SUPP_PUB_INFO:
        return memberValue.isEqual(_ECCCMSSharedInfo.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.keyInfo || {}),
        new Constructed({
          name: names.entityUInfo || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          optional: true,
          value: [
            new OctetString()
          ]
        }),
        new Constructed({
          name: names.suppPubInfo || EMPTY_STRING2,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: [
            new OctetString()
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$l);
    const asn1 = compareSchema(schema, schema, _ECCCMSSharedInfo.schema({
      names: {
        keyInfo: {
          names: {
            blockName: KEY_INFO
          }
        },
        entityUInfo: ENTITY_U_INFO,
        suppPubInfo: SUPP_PUB_INFO
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyInfo = new AlgorithmIdentifier({
      schema: asn1.result.keyInfo
    });
    if (ENTITY_U_INFO in asn1.result) this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];
    this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.keyInfo.toSchema());
    if (this.entityUInfo) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          this.entityUInfo
        ]
      }));
    }
    outputArray.push(new Constructed({
      idBlock: {
        tagClass: 3,
        tagNumber: 2
      },
      value: [
        this.suppPubInfo
      ]
    }));
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      keyInfo: this.keyInfo.toJSON(),
      suppPubInfo: this.suppPubInfo.toJSON()
    };
    if (this.entityUInfo) {
      res.entityUInfo = this.entityUInfo.toJSON();
    }
    return res;
  }
};
ECCCMSSharedInfo.CLASS_NAME = "ECCCMSSharedInfo";
var VERSION$8 = "version";
var ORIGINATOR_INFO = "originatorInfo";
var RECIPIENT_INFOS = "recipientInfos";
var ENCRYPTED_CONTENT_INFO = "encryptedContentInfo";
var UNPROTECTED_ATTRS = "unprotectedAttrs";
var CLEAR_PROPS$k = [
  VERSION$8,
  ORIGINATOR_INFO,
  RECIPIENT_INFOS,
  ENCRYPTED_CONTENT_INFO,
  UNPROTECTED_ATTRS
];
var defaultEncryptionParams = {
  kdfAlgorithm: "SHA-512",
  kekEncryptionLength: 256
};
var curveLengthByName = {
  "P-256": 256,
  "P-384": 384,
  "P-521": 528
};
var EnvelopedData = class _EnvelopedData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$8, _EnvelopedData.defaultValues(VERSION$8));
    if (ORIGINATOR_INFO in parameters) {
      this.originatorInfo = getParametersValue(parameters, ORIGINATOR_INFO, _EnvelopedData.defaultValues(ORIGINATOR_INFO));
    }
    this.recipientInfos = getParametersValue(parameters, RECIPIENT_INFOS, _EnvelopedData.defaultValues(RECIPIENT_INFOS));
    this.encryptedContentInfo = getParametersValue(parameters, ENCRYPTED_CONTENT_INFO, _EnvelopedData.defaultValues(ENCRYPTED_CONTENT_INFO));
    if (UNPROTECTED_ATTRS in parameters) {
      this.unprotectedAttrs = getParametersValue(parameters, UNPROTECTED_ATTRS, _EnvelopedData.defaultValues(UNPROTECTED_ATTRS));
    }
    this.policy = {
      disableSplit: !!parameters.disableSplit
    };
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$8:
        return 0;
      case ORIGINATOR_INFO:
        return new OriginatorInfo();
      case RECIPIENT_INFOS:
        return [];
      case ENCRYPTED_CONTENT_INFO:
        return new EncryptedContentInfo();
      case UNPROTECTED_ATTRS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$8:
        return memberValue === _EnvelopedData.defaultValues(memberName);
      case ORIGINATOR_INFO:
        return memberValue.certs.certificates.length === 0 && memberValue.crls.crls.length === 0;
      case RECIPIENT_INFOS:
      case UNPROTECTED_ATTRS:
        return memberValue.length === 0;
      case ENCRYPTED_CONTENT_INFO:
        return EncryptedContentInfo.compareWithDefault("contentType", memberValue.contentType) && (EncryptedContentInfo.compareWithDefault("contentEncryptionAlgorithm", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault("encryptedContent", memberValue.encryptedContent));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || EMPTY_STRING2
        }),
        new Constructed({
          name: names.originatorInfo || EMPTY_STRING2,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: OriginatorInfo.schema().valueBlock.value
        }),
        new Set2({
          value: [
            new Repeated({
              name: names.recipientInfos || EMPTY_STRING2,
              value: RecipientInfo.schema()
            })
          ]
        }),
        EncryptedContentInfo.schema(names.encryptedContentInfo || {}),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new Repeated({
              name: names.unprotectedAttrs || EMPTY_STRING2,
              value: Attribute.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$k);
    const asn1 = compareSchema(schema, schema, _EnvelopedData.schema({
      names: {
        version: VERSION$8,
        originatorInfo: ORIGINATOR_INFO,
        recipientInfos: RECIPIENT_INFOS,
        encryptedContentInfo: {
          names: {
            blockName: ENCRYPTED_CONTENT_INFO
          }
        },
        unprotectedAttrs: UNPROTECTED_ATTRS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    if (ORIGINATOR_INFO in asn1.result) {
      this.originatorInfo = new OriginatorInfo({
        schema: new Sequence({
          value: asn1.result.originatorInfo.valueBlock.value
        })
      });
    }
    this.recipientInfos = Array.from(asn1.result.recipientInfos, (o2) => new RecipientInfo({
      schema: o2
    }));
    this.encryptedContentInfo = new EncryptedContentInfo({
      schema: asn1.result.encryptedContentInfo
    });
    if (UNPROTECTED_ATTRS in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, (o2) => new Attribute({
      schema: o2
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.version
    }));
    if (this.originatorInfo) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.originatorInfo.toSchema().valueBlock.value
      }));
    }
    outputArray.push(new Set2({
      value: Array.from(this.recipientInfos, (o2) => o2.toSchema())
    }));
    outputArray.push(this.encryptedContentInfo.toSchema());
    if (this.unprotectedAttrs) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.unprotectedAttrs, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      recipientInfos: Array.from(this.recipientInfos, (o2) => o2.toJSON()),
      encryptedContentInfo: this.encryptedContentInfo.toJSON()
    };
    if (this.originatorInfo) res.originatorInfo = this.originatorInfo.toJSON();
    if (this.unprotectedAttrs) res.unprotectedAttrs = Array.from(this.unprotectedAttrs, (o2) => o2.toJSON());
    return res;
  }
  addRecipientByCertificate(certificate, parameters, variant, crypto2 = getCrypto(true)) {
    const encryptionParameters = Object.assign({
      useOAEP: true,
      oaepHashAlgorithm: "SHA-512"
    }, defaultEncryptionParams, parameters || {});
    if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf("1.2.840.113549") !== -1) variant = 1;
    else {
      if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf("1.2.840.10045") !== -1) variant = 2;
      else throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);
    }
    switch (variant) {
      case 1:
        {
          let algorithmId;
          let algorithmParams;
          if (encryptionParameters.useOAEP === true) {
            algorithmId = crypto2.getOIDByAlgorithm({
              name: "RSA-OAEP"
            }, true, "keyEncryptionAlgorithm");
            const hashOID = crypto2.getOIDByAlgorithm({
              name: encryptionParameters.oaepHashAlgorithm
            }, true, "RSAES-OAEP-params");
            const hashAlgorithm = new AlgorithmIdentifier({
              algorithmId: hashOID,
              algorithmParams: new Null()
            });
            const rsaOAEPParams = new RSAESOAEPParams({
              hashAlgorithm,
              maskGenAlgorithm: new AlgorithmIdentifier({
                algorithmId: "1.2.840.113549.1.1.8",
                algorithmParams: hashAlgorithm.toSchema()
              })
            });
            algorithmParams = rsaOAEPParams.toSchema();
          } else {
            algorithmId = crypto2.getOIDByAlgorithm({
              name: "RSAES-PKCS1-v1_5"
            });
            if (algorithmId === EMPTY_STRING2) throw new Error("Can not find OID for RSAES-PKCS1-v1_5");
            algorithmParams = new Null();
          }
          const keyInfo = new KeyTransRecipientInfo({
            version: 0,
            rid: new IssuerAndSerialNumber({
              issuer: certificate.issuer,
              serialNumber: certificate.serialNumber
            }),
            keyEncryptionAlgorithm: new AlgorithmIdentifier({
              algorithmId,
              algorithmParams
            }),
            recipientCertificate: certificate
          });
          this.recipientInfos.push(new RecipientInfo({
            variant: 1,
            value: keyInfo
          }));
        }
        break;
      case 2:
        {
          const recipientIdentifier = new KeyAgreeRecipientIdentifier({
            variant: 1,
            value: new IssuerAndSerialNumber({
              issuer: certificate.issuer,
              serialNumber: certificate.serialNumber
            })
          });
          this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, {
            recipientCertificate: certificate
          }, crypto2);
        }
        break;
      default:
        throw new Error(`Unknown "variant" value: ${variant}`);
    }
    return true;
  }
  addRecipientByPreDefinedData(preDefinedData, parameters = {}, variant, crypto2 = getCrypto(true)) {
    ArgumentError.assert(preDefinedData, "preDefinedData", "ArrayBuffer");
    if (!preDefinedData.byteLength) {
      throw new Error("Pre-defined data could have zero length");
    }
    if (!parameters.keyIdentifier) {
      const keyIdentifierBuffer = new ArrayBuffer(16);
      const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);
      crypto2.getRandomValues(keyIdentifierView);
      parameters.keyIdentifier = keyIdentifierBuffer;
    }
    if (!parameters.hmacHashAlgorithm) parameters.hmacHashAlgorithm = "SHA-512";
    if (parameters.iterationCount === void 0) {
      parameters.iterationCount = 2048;
    }
    if (!parameters.keyEncryptionAlgorithm) {
      parameters.keyEncryptionAlgorithm = {
        name: "AES-KW",
        length: 256
      };
    }
    if (!parameters.keyEncryptionAlgorithmParams) parameters.keyEncryptionAlgorithmParams = new Null();
    switch (variant) {
      case 1:
        {
          const kekOID = crypto2.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, "keyEncryptionAlgorithm");
          const keyInfo = new KEKRecipientInfo({
            version: 4,
            kekid: new KEKIdentifier({
              keyIdentifier: new OctetString({
                valueHex: parameters.keyIdentifier
              })
            }),
            keyEncryptionAlgorithm: new AlgorithmIdentifier({
              algorithmId: kekOID,
              algorithmParams: parameters.keyEncryptionAlgorithmParams
            }),
            preDefinedKEK: preDefinedData
          });
          this.recipientInfos.push(new RecipientInfo({
            variant: 3,
            value: keyInfo
          }));
        }
        break;
      case 2:
        {
          const pbkdf2OID = crypto2.getOIDByAlgorithm({
            name: "PBKDF2"
          }, true, "keyDerivationAlgorithm");
          const saltBuffer = new ArrayBuffer(64);
          const saltView = new Uint8Array(saltBuffer);
          crypto2.getRandomValues(saltView);
          const hmacOID = crypto2.getOIDByAlgorithm({
            name: "HMAC",
            hash: {
              name: parameters.hmacHashAlgorithm
            }
          }, true, "hmacHashAlgorithm");
          const pbkdf2Params = new PBKDF2Params({
            salt: new OctetString({
              valueHex: saltBuffer
            }),
            iterationCount: parameters.iterationCount,
            prf: new AlgorithmIdentifier({
              algorithmId: hmacOID,
              algorithmParams: new Null()
            })
          });
          const kekOID = crypto2.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, "keyEncryptionAlgorithm");
          const keyInfo = new PasswordRecipientinfo({
            version: 0,
            keyDerivationAlgorithm: new AlgorithmIdentifier({
              algorithmId: pbkdf2OID,
              algorithmParams: pbkdf2Params.toSchema()
            }),
            keyEncryptionAlgorithm: new AlgorithmIdentifier({
              algorithmId: kekOID,
              algorithmParams: parameters.keyEncryptionAlgorithmParams
            }),
            password: preDefinedData
          });
          this.recipientInfos.push(new RecipientInfo({
            variant: 4,
            value: keyInfo
          }));
        }
        break;
      default:
        throw new Error(`Unknown value for "variant": ${variant}`);
    }
  }
  addRecipientByKeyIdentifier(key, keyId, parameters, crypto2 = getCrypto(true)) {
    const encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});
    const recipientIdentifier = new KeyAgreeRecipientIdentifier({
      variant: 2,
      value: new RecipientKeyIdentifier({
        subjectKeyIdentifier: new OctetString({
          valueHex: keyId
        })
      })
    });
    this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, {
      recipientPublicKey: key
    }, crypto2);
  }
  _addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams, crypto2 = getCrypto(true)) {
    const encryptedKey = new RecipientEncryptedKey({
      rid: recipientIdentifier
    });
    const aesKWoid = crypto2.getOIDByAlgorithm({
      name: "AES-KW",
      length: encryptionParameters.kekEncryptionLength
    }, true, "keyEncryptionAlgorithm");
    const aesKW = new AlgorithmIdentifier({
      algorithmId: aesKWoid
    });
    const ecdhOID = crypto2.getOIDByAlgorithm({
      name: "ECDH",
      kdf: encryptionParameters.kdfAlgorithm
    }, true, "KeyAgreeRecipientInfo");
    const ukmBuffer = new ArrayBuffer(64);
    const ukmView = new Uint8Array(ukmBuffer);
    crypto2.getRandomValues(ukmView);
    const recipientInfoParams = {
      version: 3,
      ukm: new OctetString({
        valueHex: ukmBuffer
      }),
      keyEncryptionAlgorithm: new AlgorithmIdentifier({
        algorithmId: ecdhOID,
        algorithmParams: aesKW.toSchema()
      }),
      recipientEncryptedKeys: new RecipientEncryptedKeys({
        encryptedKeys: [
          encryptedKey
        ]
      })
    };
    const keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));
    this.recipientInfos.push(new RecipientInfo({
      variant: 2,
      value: keyInfo
    }));
  }
  async encrypt(contentEncryptionAlgorithm, contentToEncrypt, crypto2 = getCrypto(true)) {
    const ivBuffer = new ArrayBuffer(16);
    const ivView = new Uint8Array(ivBuffer);
    crypto2.getRandomValues(ivView);
    const contentView = new Uint8Array(contentToEncrypt);
    const contentEncryptionOID = crypto2.getOIDByAlgorithm(contentEncryptionAlgorithm, true, "contentEncryptionAlgorithm");
    const sessionKey = await crypto2.generateKey(contentEncryptionAlgorithm, true, [
      "encrypt"
    ]);
    const encryptedContent = await crypto2.encrypt({
      name: contentEncryptionAlgorithm.name,
      iv: ivView
    }, sessionKey, contentView);
    const exportedSessionKey = await crypto2.exportKey("raw", sessionKey);
    this.version = 2;
    this.encryptedContentInfo = new EncryptedContentInfo({
      disableSplit: this.policy.disableSplit,
      contentType: "1.2.840.113549.1.7.1",
      contentEncryptionAlgorithm: new AlgorithmIdentifier({
        algorithmId: contentEncryptionOID,
        algorithmParams: new OctetString({
          valueHex: ivBuffer
        })
      }),
      encryptedContent: new OctetString({
        valueHex: encryptedContent
      })
    });
    const SubKeyAgreeRecipientInfo = async (index) => {
      const recipientInfo = this.recipientInfos[index].value;
      let recipientCurve;
      let recipientPublicKey;
      if (recipientInfo.recipientPublicKey) {
        recipientCurve = recipientInfo.recipientPublicKey.algorithm.namedCurve;
        recipientPublicKey = recipientInfo.recipientPublicKey;
      } else if (recipientInfo.recipientCertificate) {
        const curveObject = recipientInfo.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;
        if (curveObject.constructor.blockName() !== ObjectIdentifier.blockName()) throw new Error(`Incorrect "recipientCertificate" for index ${index}`);
        const curveOID = curveObject.valueBlock.toString();
        switch (curveOID) {
          case "1.2.840.10045.3.1.7":
            recipientCurve = "P-256";
            break;
          case "1.3.132.0.34":
            recipientCurve = "P-384";
            break;
          case "1.3.132.0.35":
            recipientCurve = "P-521";
            break;
          default:
            throw new Error(`Incorrect curve OID for index ${index}`);
        }
        recipientPublicKey = await recipientInfo.recipientCertificate.getPublicKey({
          algorithm: {
            algorithm: {
              name: "ECDH",
              namedCurve: recipientCurve
            },
            usages: []
          }
        }, crypto2);
      } else {
        throw new Error("Unsupported RecipientInfo");
      }
      const recipientCurveLength = curveLengthByName[recipientCurve];
      const ecdhKeys = await crypto2.generateKey({
        name: "ECDH",
        namedCurve: recipientCurve
      }, true, [
        "deriveBits"
      ]);
      const exportedECDHPublicKey = await crypto2.exportKey("spki", ecdhKeys.publicKey);
      const derivedBits = await crypto2.deriveBits({
        name: "ECDH",
        public: recipientPublicKey
      }, ecdhKeys.privateKey, recipientCurveLength);
      const aesKWAlgorithm = new AlgorithmIdentifier({
        schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams
      });
      const kwAlgorithm = crypto2.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, "aesKWAlgorithm");
      let kwLength = kwAlgorithm.length;
      const kwLengthBuffer = new ArrayBuffer(4);
      const kwLengthView = new Uint8Array(kwLengthBuffer);
      for (let j = 3; j >= 0; j--) {
        kwLengthView[j] = kwLength;
        kwLength >>= 8;
      }
      const eccInfo = new ECCCMSSharedInfo({
        keyInfo: new AlgorithmIdentifier({
          algorithmId: aesKWAlgorithm.algorithmId
        }),
        entityUInfo: recipientInfo.ukm,
        suppPubInfo: new OctetString({
          valueHex: kwLengthBuffer
        })
      });
      const encodedInfo = eccInfo.toSchema().toBER(false);
      const ecdhAlgorithm = crypto2.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "ecdhAlgorithm");
      const derivedKeyRaw = await kdf(ecdhAlgorithm.kdf, derivedBits, kwAlgorithm.length, encodedInfo, crypto2);
      const awsKW = await crypto2.importKey("raw", derivedKeyRaw, {
        name: "AES-KW"
      }, true, [
        "wrapKey"
      ]);
      const wrappedKey = await crypto2.wrapKey("raw", sessionKey, awsKW, {
        name: "AES-KW"
      });
      const originator = new OriginatorIdentifierOrKey();
      originator.variant = 3;
      originator.value = OriginatorPublicKey.fromBER(exportedECDHPublicKey);
      recipientInfo.originator = originator;
      recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new OctetString({
        valueHex: wrappedKey
      });
      return {
        ecdhPrivateKey: ecdhKeys.privateKey
      };
    };
    const SubKeyTransRecipientInfo = async (index) => {
      const recipientInfo = this.recipientInfos[index].value;
      const algorithmParameters = crypto2.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
      if (algorithmParameters.name === "RSA-OAEP") {
        const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;
        const rsaOAEPParams = new RSAESOAEPParams({
          schema
        });
        algorithmParameters.hash = crypto2.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);
        if ("name" in algorithmParameters.hash === false) throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);
      }
      try {
        const publicKey = await recipientInfo.recipientCertificate.getPublicKey({
          algorithm: {
            algorithm: algorithmParameters,
            usages: [
              "encrypt",
              "wrapKey"
            ]
          }
        }, crypto2);
        const encryptedKey = await crypto2.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);
        recipientInfo.encryptedKey = new OctetString({
          valueHex: encryptedKey
        });
      } catch {
      }
    };
    const SubKEKRecipientInfo = async (index) => {
      const recipientInfo = this.recipientInfos[index].value;
      const kekAlgorithm = crypto2.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
      const kekKey = await crypto2.importKey("raw", new Uint8Array(recipientInfo.preDefinedKEK), kekAlgorithm, true, [
        "wrapKey"
      ]);
      const wrappedKey = await crypto2.wrapKey("raw", sessionKey, kekKey, kekAlgorithm);
      recipientInfo.encryptedKey = new OctetString({
        valueHex: wrappedKey
      });
    };
    const SubPasswordRecipientinfo = async (index) => {
      const recipientInfo = this.recipientInfos[index].value;
      let pbkdf2Params;
      if (!recipientInfo.keyDerivationAlgorithm) throw new Error('Please append encoded "keyDerivationAlgorithm"');
      if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) throw new Error('Incorrectly encoded "keyDerivationAlgorithm"');
      try {
        pbkdf2Params = new PBKDF2Params({
          schema: recipientInfo.keyDerivationAlgorithm.algorithmParams
        });
      } catch (ex) {
        throw new Error('Incorrectly encoded "keyDerivationAlgorithm"');
      }
      const passwordView = new Uint8Array(recipientInfo.password);
      const derivationKey = await crypto2.importKey("raw", passwordView, "PBKDF2", false, [
        "deriveKey"
      ]);
      const kekAlgorithm = crypto2.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
      let hmacHashAlgorithm = "SHA-1";
      if (pbkdf2Params.prf) {
        const prfAlgorithm = crypto2.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, "prfAlgorithm");
        hmacHashAlgorithm = prfAlgorithm.hash.name;
      }
      const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);
      const iterations = pbkdf2Params.iterationCount;
      const derivedKey = await crypto2.deriveKey({
        name: "PBKDF2",
        hash: {
          name: hmacHashAlgorithm
        },
        salt: saltView,
        iterations
      }, derivationKey, kekAlgorithm, true, [
        "wrapKey"
      ]);
      const wrappedKey = await crypto2.wrapKey("raw", sessionKey, derivedKey, kekAlgorithm);
      recipientInfo.encryptedKey = new OctetString({
        valueHex: wrappedKey
      });
    };
    const res = [];
    for (let i2 = 0; i2 < this.recipientInfos.length; i2++) {
      switch (this.recipientInfos[i2].variant) {
        case 1:
          res.push(await SubKeyTransRecipientInfo(i2));
          break;
        case 2:
          res.push(await SubKeyAgreeRecipientInfo(i2));
          break;
        case 3:
          res.push(await SubKEKRecipientInfo(i2));
          break;
        case 4:
          res.push(await SubPasswordRecipientinfo(i2));
          break;
        default:
          throw new Error(`Unknown recipient type in array with index ${i2}`);
      }
    }
    return res;
  }
  async decrypt(recipientIndex, parameters, crypto2 = getCrypto(true)) {
    const decryptionParameters = parameters || {};
    if (recipientIndex + 1 > this.recipientInfos.length) {
      throw new Error(`Maximum value for "index" is: ${this.recipientInfos.length - 1}`);
    }
    const SubKeyAgreeRecipientInfo = async (index) => {
      const recipientInfo = this.recipientInfos[index].value;
      let curveOID;
      let recipientCurve;
      let recipientCurveLength;
      const originator = recipientInfo.originator;
      if (decryptionParameters.recipientCertificate) {
        const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;
        if (curveObject.constructor.blockName() !== ObjectIdentifier.blockName()) {
          throw new Error(`Incorrect "recipientCertificate" for index ${index}`);
        }
        curveOID = curveObject.valueBlock.toString();
      } else if (originator.value.algorithm.algorithmParams) {
        const curveObject = originator.value.algorithm.algorithmParams;
        if (curveObject.constructor.blockName() !== ObjectIdentifier.blockName()) {
          throw new Error(`Incorrect originator for index ${index}`);
        }
        curveOID = curveObject.valueBlock.toString();
      } else {
        throw new Error('Parameter "recipientCertificate" is mandatory for "KeyAgreeRecipientInfo" if algorithm params are missing from originator');
      }
      if (!decryptionParameters.recipientPrivateKey) throw new Error('Parameter "recipientPrivateKey" is mandatory for "KeyAgreeRecipientInfo"');
      switch (curveOID) {
        case "1.2.840.10045.3.1.7":
          recipientCurve = "P-256";
          recipientCurveLength = 256;
          break;
        case "1.3.132.0.34":
          recipientCurve = "P-384";
          recipientCurveLength = 384;
          break;
        case "1.3.132.0.35":
          recipientCurve = "P-521";
          recipientCurveLength = 528;
          break;
        default:
          throw new Error(`Incorrect curve OID for index ${index}`);
      }
      let ecdhPrivateKey;
      let keyCrypto = crypto2;
      if (BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {
        ecdhPrivateKey = await crypto2.importKey("pkcs8", decryptionParameters.recipientPrivateKey, {
          name: "ECDH",
          namedCurve: recipientCurve
        }, true, [
          "deriveBits"
        ]);
      } else {
        ecdhPrivateKey = decryptionParameters.recipientPrivateKey;
        if ("crypto" in decryptionParameters && decryptionParameters.crypto) {
          keyCrypto = decryptionParameters.crypto.subtle;
        }
      }
      if ("algorithmParams" in originator.value.algorithm === false) originator.value.algorithm.algorithmParams = new ObjectIdentifier({
        value: curveOID
      });
      const buffer = originator.value.toSchema().toBER(false);
      const ecdhPublicKey = await crypto2.importKey("spki", buffer, {
        name: "ECDH",
        namedCurve: recipientCurve
      }, true, []);
      const sharedSecret = await keyCrypto.deriveBits({
        name: "ECDH",
        public: ecdhPublicKey
      }, ecdhPrivateKey, recipientCurveLength);
      async function applyKDF(includeAlgorithmParams) {
        includeAlgorithmParams = includeAlgorithmParams || false;
        const aesKWAlgorithm = new AlgorithmIdentifier({
          schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams
        });
        const kwAlgorithm = crypto2.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, "kwAlgorithm");
        let kwLength = kwAlgorithm.length;
        const kwLengthBuffer = new ArrayBuffer(4);
        const kwLengthView = new Uint8Array(kwLengthBuffer);
        for (let j = 3; j >= 0; j--) {
          kwLengthView[j] = kwLength;
          kwLength >>= 8;
        }
        const keyInfoAlgorithm = {
          algorithmId: aesKWAlgorithm.algorithmId
        };
        if (includeAlgorithmParams) {
          keyInfoAlgorithm.algorithmParams = new Null();
        }
        const eccInfo = new ECCCMSSharedInfo({
          keyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),
          entityUInfo: recipientInfo.ukm,
          suppPubInfo: new OctetString({
            valueHex: kwLengthBuffer
          })
        });
        const encodedInfo = eccInfo.toSchema().toBER(false);
        const ecdhAlgorithm = crypto2.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "ecdhAlgorithm");
        if (!ecdhAlgorithm.name) {
          throw new Error(`Incorrect OID for key encryption algorithm: ${recipientInfo.keyEncryptionAlgorithm.algorithmId}`);
        }
        return kdf(ecdhAlgorithm.kdf, sharedSecret, kwAlgorithm.length, encodedInfo, crypto2);
      }
      const kdfResult = await applyKDF();
      const importAesKwKey = async (kdfResult2) => {
        return crypto2.importKey("raw", kdfResult2, {
          name: "AES-KW"
        }, true, [
          "unwrapKey"
        ]);
      };
      const aesKwKey = await importAesKwKey(kdfResult);
      const unwrapSessionKey = async (aesKwKey2) => {
        const algorithmId2 = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
        const contentEncryptionAlgorithm2 = crypto2.getAlgorithmByOID(algorithmId2, true, "contentEncryptionAlgorithm");
        return crypto2.unwrapKey("raw", recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHexView, aesKwKey2, {
          name: "AES-KW"
        }, contentEncryptionAlgorithm2, true, [
          "decrypt"
        ]);
      };
      try {
        return await unwrapSessionKey(aesKwKey);
      } catch {
        const kdfResult2 = await applyKDF(true);
        const aesKwKey2 = await importAesKwKey(kdfResult2);
        return unwrapSessionKey(aesKwKey2);
      }
    };
    const SubKeyTransRecipientInfo = async (index) => {
      const recipientInfo = this.recipientInfos[index].value;
      if (!decryptionParameters.recipientPrivateKey) {
        throw new Error('Parameter "recipientPrivateKey" is mandatory for "KeyTransRecipientInfo"');
      }
      const algorithmParameters = crypto2.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
      if (algorithmParameters.name === "RSA-OAEP") {
        const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;
        const rsaOAEPParams = new RSAESOAEPParams({
          schema
        });
        algorithmParameters.hash = crypto2.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);
        if ("name" in algorithmParameters.hash === false) throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);
      }
      let privateKey;
      let keyCrypto = crypto2;
      if (BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {
        privateKey = await crypto2.importKey("pkcs8", decryptionParameters.recipientPrivateKey, algorithmParameters, true, [
          "decrypt"
        ]);
      } else {
        privateKey = decryptionParameters.recipientPrivateKey;
        if ("crypto" in decryptionParameters && decryptionParameters.crypto) {
          keyCrypto = decryptionParameters.crypto.subtle;
        }
      }
      const sessionKey = await keyCrypto.decrypt(privateKey.algorithm, privateKey, recipientInfo.encryptedKey.valueBlock.valueHexView);
      const algorithmId2 = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
      const contentEncryptionAlgorithm2 = crypto2.getAlgorithmByOID(algorithmId2, true, "contentEncryptionAlgorithm");
      if ("name" in contentEncryptionAlgorithm2 === false) throw new Error(`Incorrect "contentEncryptionAlgorithm": ${algorithmId2}`);
      return crypto2.importKey("raw", sessionKey, contentEncryptionAlgorithm2, true, [
        "decrypt"
      ]);
    };
    const SubKEKRecipientInfo = async (index) => {
      const recipientInfo = this.recipientInfos[index].value;
      if (!decryptionParameters.preDefinedData) throw new Error('Parameter "preDefinedData" is mandatory for "KEKRecipientInfo"');
      const kekAlgorithm = crypto2.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
      const importedKey = await crypto2.importKey("raw", decryptionParameters.preDefinedData, kekAlgorithm, true, [
        "unwrapKey"
      ]);
      const algorithmId2 = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
      const contentEncryptionAlgorithm2 = crypto2.getAlgorithmByOID(algorithmId2, true, "contentEncryptionAlgorithm");
      if (!contentEncryptionAlgorithm2.name) {
        throw new Error(`Incorrect "contentEncryptionAlgorithm": ${algorithmId2}`);
      }
      return crypto2.unwrapKey("raw", recipientInfo.encryptedKey.valueBlock.valueHexView, importedKey, kekAlgorithm, contentEncryptionAlgorithm2, true, [
        "decrypt"
      ]);
    };
    const SubPasswordRecipientinfo = async (index) => {
      const recipientInfo = this.recipientInfos[index].value;
      let pbkdf2Params;
      if (!decryptionParameters.preDefinedData) {
        throw new Error('Parameter "preDefinedData" is mandatory for "KEKRecipientInfo"');
      }
      if (!recipientInfo.keyDerivationAlgorithm) {
        throw new Error('Please append encoded "keyDerivationAlgorithm"');
      }
      if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) {
        throw new Error('Incorrectly encoded "keyDerivationAlgorithm"');
      }
      try {
        pbkdf2Params = new PBKDF2Params({
          schema: recipientInfo.keyDerivationAlgorithm.algorithmParams
        });
      } catch (ex) {
        throw new Error('Incorrectly encoded "keyDerivationAlgorithm"');
      }
      const pbkdf2Key = await crypto2.importKey("raw", decryptionParameters.preDefinedData, "PBKDF2", false, [
        "deriveKey"
      ]);
      const kekAlgorithm = crypto2.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
      const hmacHashAlgorithm = pbkdf2Params.prf ? crypto2.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, "prfAlgorithm").hash.name : "SHA-1";
      const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);
      const iterations = pbkdf2Params.iterationCount;
      const kekKey = await crypto2.deriveKey({
        name: "PBKDF2",
        hash: {
          name: hmacHashAlgorithm
        },
        salt: saltView,
        iterations
      }, pbkdf2Key, kekAlgorithm, true, [
        "unwrapKey"
      ]);
      const algorithmId2 = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
      const contentEncryptionAlgorithm2 = crypto2.getAlgorithmByOID(algorithmId2, true, "contentEncryptionAlgorithm");
      return crypto2.unwrapKey("raw", recipientInfo.encryptedKey.valueBlock.valueHexView, kekKey, kekAlgorithm, contentEncryptionAlgorithm2, true, [
        "decrypt"
      ]);
    };
    let unwrappedKey;
    switch (this.recipientInfos[recipientIndex].variant) {
      case 1:
        unwrappedKey = await SubKeyTransRecipientInfo(recipientIndex);
        break;
      case 2:
        unwrappedKey = await SubKeyAgreeRecipientInfo(recipientIndex);
        break;
      case 3:
        unwrappedKey = await SubKEKRecipientInfo(recipientIndex);
        break;
      case 4:
        unwrappedKey = await SubPasswordRecipientinfo(recipientIndex);
        break;
      default:
        throw new Error(`Unknown recipient type in array with index ${recipientIndex}`);
    }
    const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
    const contentEncryptionAlgorithm = crypto2.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
    const ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;
    const ivView = new Uint8Array(ivBuffer);
    if (!this.encryptedContentInfo.encryptedContent) {
      throw new Error("Required property `encryptedContent` is empty");
    }
    const dataBuffer = this.encryptedContentInfo.getEncryptedContent();
    return crypto2.decrypt({
      name: contentEncryptionAlgorithm.name,
      iv: ivView
    }, unwrappedKey, dataBuffer);
  }
};
EnvelopedData.CLASS_NAME = "EnvelopedData";
var SAFE_CONTENTS = "safeContents";
var PARSED_VALUE$1 = "parsedValue";
var CONTENT_INFOS = "contentInfos";
var AuthenticatedSafe = class _AuthenticatedSafe extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.safeContents = getParametersValue(parameters, SAFE_CONTENTS, _AuthenticatedSafe.defaultValues(SAFE_CONTENTS));
    if (PARSED_VALUE$1 in parameters) {
      this.parsedValue = getParametersValue(parameters, PARSED_VALUE$1, _AuthenticatedSafe.defaultValues(PARSED_VALUE$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SAFE_CONTENTS:
        return [];
      case PARSED_VALUE$1:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SAFE_CONTENTS:
        return memberValue.length === 0;
      case PARSED_VALUE$1:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Repeated({
          name: names.contentInfos || EMPTY_STRING2,
          value: ContentInfo.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      CONTENT_INFOS
    ]);
    const asn1 = compareSchema(schema, schema, _AuthenticatedSafe.schema({
      names: {
        contentInfos: CONTENT_INFOS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.safeContents = Array.from(asn1.result.contentInfos, (element) => new ContentInfo({
      schema: element
    }));
  }
  toSchema() {
    return new Sequence({
      value: Array.from(this.safeContents, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    return {
      safeContents: Array.from(this.safeContents, (o2) => o2.toJSON())
    };
  }
  async parseInternalValues(parameters, crypto2 = getCrypto(true)) {
    ParameterError.assert(parameters, SAFE_CONTENTS);
    ArgumentError.assert(parameters.safeContents, SAFE_CONTENTS, "Array");
    if (parameters.safeContents.length !== this.safeContents.length) {
      throw new ArgumentError('Length of "parameters.safeContents" must be equal to "this.safeContents.length"');
    }
    this.parsedValue = {
      safeContents: []
    };
    for (const [index, content] of this.safeContents.entries()) {
      const safeContent = parameters.safeContents[index];
      const errorTarget = `parameters.safeContents[${index}]`;
      switch (content.contentType) {
        case id_ContentType_Data:
          {
            ArgumentError.assert(content.content, "this.safeContents[j].content", OctetString);
            const authSafeContent = content.content.getValue();
            this.parsedValue.safeContents.push({
              privacyMode: 0,
              value: SafeContents.fromBER(authSafeContent)
            });
          }
          break;
        case id_ContentType_EnvelopedData:
          {
            const cmsEnveloped = new EnvelopedData({
              schema: content.content
            });
            ParameterError.assert(errorTarget, safeContent, "recipientCertificate", "recipientKey");
            const envelopedData = safeContent;
            const recipientCertificate = envelopedData.recipientCertificate;
            const recipientKey = envelopedData.recipientKey;
            const decrypted = await cmsEnveloped.decrypt(0, {
              recipientCertificate,
              recipientPrivateKey: recipientKey
            }, crypto2);
            this.parsedValue.safeContents.push({
              privacyMode: 2,
              value: SafeContents.fromBER(decrypted)
            });
          }
          break;
        case id_ContentType_EncryptedData:
          {
            const cmsEncrypted = new EncryptedData({
              schema: content.content
            });
            ParameterError.assert(errorTarget, safeContent, "password");
            const password = safeContent.password;
            const decrypted = await cmsEncrypted.decrypt({
              password
            }, crypto2);
            this.parsedValue.safeContents.push({
              privacyMode: 1,
              value: SafeContents.fromBER(decrypted)
            });
          }
          break;
        default:
          throw new Error(`Unknown "contentType" for AuthenticatedSafe: " ${content.contentType}`);
      }
    }
  }
  async makeInternalValues(parameters, crypto2 = getCrypto(true)) {
    if (!this.parsedValue) {
      throw new Error('Please run "parseValues" first or add "parsedValue" manually');
    }
    ArgumentError.assert(this.parsedValue, "this.parsedValue", "object");
    ArgumentError.assert(this.parsedValue.safeContents, "this.parsedValue.safeContents", "Array");
    ArgumentError.assert(parameters, "parameters", "object");
    ParameterError.assert(parameters, "safeContents");
    ArgumentError.assert(parameters.safeContents, "parameters.safeContents", "Array");
    if (parameters.safeContents.length !== this.parsedValue.safeContents.length) {
      throw new ArgumentError('Length of "parameters.safeContents" must be equal to "this.parsedValue.safeContents"');
    }
    this.safeContents = [];
    for (const [index, content] of this.parsedValue.safeContents.entries()) {
      ParameterError.assert("content", content, "privacyMode", "value");
      ArgumentError.assert(content.value, "content.value", SafeContents);
      switch (content.privacyMode) {
        case 0:
          {
            const contentBuffer = content.value.toSchema().toBER(false);
            this.safeContents.push(new ContentInfo({
              contentType: "1.2.840.113549.1.7.1",
              content: new OctetString({
                valueHex: contentBuffer
              })
            }));
          }
          break;
        case 1:
          {
            const cmsEncrypted = new EncryptedData();
            const currentParameters = parameters.safeContents[index];
            currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);
            await cmsEncrypted.encrypt(currentParameters, crypto2);
            this.safeContents.push(new ContentInfo({
              contentType: "1.2.840.113549.1.7.6",
              content: cmsEncrypted.toSchema()
            }));
          }
          break;
        case 2:
          {
            const cmsEnveloped = new EnvelopedData();
            const contentToEncrypt = content.value.toSchema().toBER(false);
            const safeContent = parameters.safeContents[index];
            ParameterError.assert(`parameters.safeContents[${index}]`, safeContent, "encryptingCertificate", "encryptionAlgorithm");
            switch (true) {
              case safeContent.encryptionAlgorithm.name.toLowerCase() === "aes-cbc":
              case safeContent.encryptionAlgorithm.name.toLowerCase() === "aes-gcm":
                break;
              default:
                throw new Error(`Incorrect parameter "encryptionAlgorithm" in "parameters.safeContents[i]": ${safeContent.encryptionAlgorithm}`);
            }
            switch (true) {
              case safeContent.encryptionAlgorithm.length === 128:
              case safeContent.encryptionAlgorithm.length === 192:
              case safeContent.encryptionAlgorithm.length === 256:
                break;
              default:
                throw new Error(`Incorrect parameter "encryptionAlgorithm.length" in "parameters.safeContents[i]": ${safeContent.encryptionAlgorithm.length}`);
            }
            const encryptionAlgorithm = safeContent.encryptionAlgorithm;
            cmsEnveloped.addRecipientByCertificate(safeContent.encryptingCertificate, {}, void 0, crypto2);
            await cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt, crypto2);
            this.safeContents.push(new ContentInfo({
              contentType: "1.2.840.113549.1.7.3",
              content: cmsEnveloped.toSchema()
            }));
          }
          break;
        default:
          throw new Error(`Incorrect value for "content.privacyMode": ${content.privacyMode}`);
      }
    }
    return this;
  }
};
AuthenticatedSafe.CLASS_NAME = "AuthenticatedSafe";
var HASH_ALGORITHM$1 = "hashAlgorithm";
var ISSUER_NAME_HASH = "issuerNameHash";
var ISSUER_KEY_HASH = "issuerKeyHash";
var SERIAL_NUMBER$1 = "serialNumber";
var CLEAR_PROPS$j = [
  HASH_ALGORITHM$1,
  ISSUER_NAME_HASH,
  ISSUER_KEY_HASH,
  SERIAL_NUMBER$1
];
var CertID = class _CertID extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM$1, _CertID.defaultValues(HASH_ALGORITHM$1));
    this.issuerNameHash = getParametersValue(parameters, ISSUER_NAME_HASH, _CertID.defaultValues(ISSUER_NAME_HASH));
    this.issuerKeyHash = getParametersValue(parameters, ISSUER_KEY_HASH, _CertID.defaultValues(ISSUER_KEY_HASH));
    this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$1, _CertID.defaultValues(SERIAL_NUMBER$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static async create(certificate, parameters, crypto2 = getCrypto(true)) {
    const certID = new _CertID();
    await certID.createForCertificate(certificate, parameters, crypto2);
    return certID;
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case HASH_ALGORITHM$1:
        return new AlgorithmIdentifier();
      case ISSUER_NAME_HASH:
      case ISSUER_KEY_HASH:
        return new OctetString();
      case SERIAL_NUMBER$1:
        return new Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case HASH_ALGORITHM$1:
        return memberValue.algorithmId === EMPTY_STRING2 && "algorithmParams" in memberValue === false;
      case ISSUER_NAME_HASH:
      case ISSUER_KEY_HASH:
      case SERIAL_NUMBER$1:
        return memberValue.isEqual(_CertID.defaultValues(SERIAL_NUMBER$1));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.hashAlgorithmObject || {
          names: {
            blockName: names.hashAlgorithm || EMPTY_STRING2
          }
        }),
        new OctetString({
          name: names.issuerNameHash || EMPTY_STRING2
        }),
        new OctetString({
          name: names.issuerKeyHash || EMPTY_STRING2
        }),
        new Integer({
          name: names.serialNumber || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$j);
    const asn1 = compareSchema(schema, schema, _CertID.schema({
      names: {
        hashAlgorithm: HASH_ALGORITHM$1,
        issuerNameHash: ISSUER_NAME_HASH,
        issuerKeyHash: ISSUER_KEY_HASH,
        serialNumber: SERIAL_NUMBER$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.hashAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.hashAlgorithm
    });
    this.issuerNameHash = asn1.result.issuerNameHash;
    this.issuerKeyHash = asn1.result.issuerKeyHash;
    this.serialNumber = asn1.result.serialNumber;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.hashAlgorithm.toSchema(),
        this.issuerNameHash,
        this.issuerKeyHash,
        this.serialNumber
      ]
    });
  }
  toJSON() {
    return {
      hashAlgorithm: this.hashAlgorithm.toJSON(),
      issuerNameHash: this.issuerNameHash.toJSON(),
      issuerKeyHash: this.issuerKeyHash.toJSON(),
      serialNumber: this.serialNumber.toJSON()
    };
  }
  isEqual(certificateID) {
    if (this.hashAlgorithm.algorithmId !== certificateID.hashAlgorithm.algorithmId) {
      return false;
    }
    if (!BufferSourceConverter.isEqual(this.issuerNameHash.valueBlock.valueHexView, certificateID.issuerNameHash.valueBlock.valueHexView)) {
      return false;
    }
    if (!BufferSourceConverter.isEqual(this.issuerKeyHash.valueBlock.valueHexView, certificateID.issuerKeyHash.valueBlock.valueHexView)) {
      return false;
    }
    if (!this.serialNumber.isEqual(certificateID.serialNumber)) {
      return false;
    }
    return true;
  }
  async createForCertificate(certificate, parameters, crypto2 = getCrypto(true)) {
    ParameterError.assert(parameters, HASH_ALGORITHM$1, "issuerCertificate");
    const hashOID = crypto2.getOIDByAlgorithm({
      name: parameters.hashAlgorithm
    }, true, "hashAlgorithm");
    this.hashAlgorithm = new AlgorithmIdentifier({
      algorithmId: hashOID,
      algorithmParams: new Null()
    });
    const issuerCertificate = parameters.issuerCertificate;
    this.serialNumber = certificate.serialNumber;
    const hashIssuerName = await crypto2.digest({
      name: parameters.hashAlgorithm
    }, issuerCertificate.subject.toSchema().toBER(false));
    this.issuerNameHash = new OctetString({
      valueHex: hashIssuerName
    });
    const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;
    const hashIssuerKey = await crypto2.digest({
      name: parameters.hashAlgorithm
    }, issuerKeyBuffer);
    this.issuerKeyHash = new OctetString({
      valueHex: hashIssuerKey
    });
  }
};
CertID.CLASS_NAME = "CertID";
var CERT_ID = "certID";
var CERT_STATUS = "certStatus";
var THIS_UPDATE = "thisUpdate";
var NEXT_UPDATE = "nextUpdate";
var SINGLE_EXTENSIONS = "singleExtensions";
var CLEAR_PROPS$i = [
  CERT_ID,
  CERT_STATUS,
  THIS_UPDATE,
  NEXT_UPDATE,
  SINGLE_EXTENSIONS
];
var SingleResponse = class _SingleResponse extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certID = getParametersValue(parameters, CERT_ID, _SingleResponse.defaultValues(CERT_ID));
    this.certStatus = getParametersValue(parameters, CERT_STATUS, _SingleResponse.defaultValues(CERT_STATUS));
    this.thisUpdate = getParametersValue(parameters, THIS_UPDATE, _SingleResponse.defaultValues(THIS_UPDATE));
    if (NEXT_UPDATE in parameters) {
      this.nextUpdate = getParametersValue(parameters, NEXT_UPDATE, _SingleResponse.defaultValues(NEXT_UPDATE));
    }
    if (SINGLE_EXTENSIONS in parameters) {
      this.singleExtensions = getParametersValue(parameters, SINGLE_EXTENSIONS, _SingleResponse.defaultValues(SINGLE_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERT_ID:
        return new CertID();
      case CERT_STATUS:
        return {};
      case THIS_UPDATE:
      case NEXT_UPDATE:
        return new Date(0, 0, 0);
      case SINGLE_EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CERT_ID:
        return CertID.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && CertID.compareWithDefault("issuerNameHash", memberValue.issuerNameHash) && CertID.compareWithDefault("issuerKeyHash", memberValue.issuerKeyHash) && CertID.compareWithDefault("serialNumber", memberValue.serialNumber);
      case CERT_STATUS:
        return Object.keys(memberValue).length === 0;
      case THIS_UPDATE:
      case NEXT_UPDATE:
        return memberValue === _SingleResponse.defaultValues(memberName);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        CertID.schema(names.certID || {}),
        new Choice({
          value: [
            new Primitive({
              name: names.certStatus || EMPTY_STRING2,
              idBlock: {
                tagClass: 3,
                tagNumber: 0
              }
            }),
            new Constructed({
              name: names.certStatus || EMPTY_STRING2,
              idBlock: {
                tagClass: 3,
                tagNumber: 1
              },
              value: [
                new GeneralizedTime(),
                new Constructed({
                  optional: true,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                  },
                  value: [
                    new Enumerated()
                  ]
                })
              ]
            }),
            new Primitive({
              name: names.certStatus || EMPTY_STRING2,
              idBlock: {
                tagClass: 3,
                tagNumber: 2
              },
              lenBlock: {
                length: 1
              }
            })
          ]
        }),
        new GeneralizedTime({
          name: names.thisUpdate || EMPTY_STRING2
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new GeneralizedTime({
              name: names.nextUpdate || EMPTY_STRING2
            })
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            Extensions.schema(names.singleExtensions || {})
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$i);
    const asn1 = compareSchema(schema, schema, _SingleResponse.schema({
      names: {
        certID: {
          names: {
            blockName: CERT_ID
          }
        },
        certStatus: CERT_STATUS,
        thisUpdate: THIS_UPDATE,
        nextUpdate: NEXT_UPDATE,
        singleExtensions: {
          names: {
            blockName: SINGLE_EXTENSIONS
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.certID = new CertID({
      schema: asn1.result.certID
    });
    this.certStatus = asn1.result.certStatus;
    this.thisUpdate = asn1.result.thisUpdate.toDate();
    if (NEXT_UPDATE in asn1.result) this.nextUpdate = asn1.result.nextUpdate.toDate();
    if (SINGLE_EXTENSIONS in asn1.result) this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, (element) => new Extension({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.certID.toSchema());
    outputArray.push(this.certStatus);
    outputArray.push(new GeneralizedTime({
      valueDate: this.thisUpdate
    }));
    if (this.nextUpdate) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          new GeneralizedTime({
            valueDate: this.nextUpdate
          })
        ]
      }));
    }
    if (this.singleExtensions) {
      outputArray.push(new Sequence({
        value: Array.from(this.singleExtensions, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      certID: this.certID.toJSON(),
      certStatus: this.certStatus.toJSON(),
      thisUpdate: this.thisUpdate
    };
    if (this.nextUpdate) {
      res.nextUpdate = this.nextUpdate;
    }
    if (this.singleExtensions) {
      res.singleExtensions = Array.from(this.singleExtensions, (o2) => o2.toJSON());
    }
    return res;
  }
};
SingleResponse.CLASS_NAME = "SingleResponse";
var TBS$2 = "tbs";
var VERSION$7 = "version";
var RESPONDER_ID = "responderID";
var PRODUCED_AT = "producedAt";
var RESPONSES = "responses";
var RESPONSE_EXTENSIONS = "responseExtensions";
var RESPONSE_DATA = "ResponseData";
var RESPONSE_DATA_VERSION = `${RESPONSE_DATA}.${VERSION$7}`;
var RESPONSE_DATA_RESPONDER_ID = `${RESPONSE_DATA}.${RESPONDER_ID}`;
var RESPONSE_DATA_PRODUCED_AT = `${RESPONSE_DATA}.${PRODUCED_AT}`;
var RESPONSE_DATA_RESPONSES = `${RESPONSE_DATA}.${RESPONSES}`;
var RESPONSE_DATA_RESPONSE_EXTENSIONS = `${RESPONSE_DATA}.${RESPONSE_EXTENSIONS}`;
var CLEAR_PROPS$h = [
  RESPONSE_DATA,
  RESPONSE_DATA_VERSION,
  RESPONSE_DATA_RESPONDER_ID,
  RESPONSE_DATA_PRODUCED_AT,
  RESPONSE_DATA_RESPONSES,
  RESPONSE_DATA_RESPONSE_EXTENSIONS
];
var ResponseData = class _ResponseData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(getParametersValue(parameters, TBS$2, _ResponseData.defaultValues(TBS$2)));
    if (VERSION$7 in parameters) {
      this.version = getParametersValue(parameters, VERSION$7, _ResponseData.defaultValues(VERSION$7));
    }
    this.responderID = getParametersValue(parameters, RESPONDER_ID, _ResponseData.defaultValues(RESPONDER_ID));
    this.producedAt = getParametersValue(parameters, PRODUCED_AT, _ResponseData.defaultValues(PRODUCED_AT));
    this.responses = getParametersValue(parameters, RESPONSES, _ResponseData.defaultValues(RESPONSES));
    if (RESPONSE_EXTENSIONS in parameters) {
      this.responseExtensions = getParametersValue(parameters, RESPONSE_EXTENSIONS, _ResponseData.defaultValues(RESPONSE_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  get tbs() {
    return BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$7:
        return 0;
      case TBS$2:
        return EMPTY_BUFFER2;
      case RESPONDER_ID:
        return {};
      case PRODUCED_AT:
        return new Date(0, 0, 0);
      case RESPONSES:
      case RESPONSE_EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TBS$2:
        return memberValue.byteLength === 0;
      case RESPONDER_ID:
        return Object.keys(memberValue).length === 0;
      case PRODUCED_AT:
        return memberValue === _ResponseData.defaultValues(memberName);
      case RESPONSES:
      case RESPONSE_EXTENSIONS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || RESPONSE_DATA,
      value: [
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Integer({
              name: names.version || RESPONSE_DATA_VERSION
            })
          ]
        }),
        new Choice({
          value: [
            new Constructed({
              name: names.responderID || RESPONSE_DATA_RESPONDER_ID,
              idBlock: {
                tagClass: 3,
                tagNumber: 1
              },
              value: [
                RelativeDistinguishedNames.schema(names.ResponseDataByName || {
                  names: {
                    blockName: "ResponseData.byName"
                  }
                })
              ]
            }),
            new Constructed({
              name: names.responderID || RESPONSE_DATA_RESPONDER_ID,
              idBlock: {
                tagClass: 3,
                tagNumber: 2
              },
              value: [
                new OctetString({
                  name: names.ResponseDataByKey || "ResponseData.byKey"
                })
              ]
            })
          ]
        }),
        new GeneralizedTime({
          name: names.producedAt || RESPONSE_DATA_PRODUCED_AT
        }),
        new Sequence({
          value: [
            new Repeated({
              name: RESPONSE_DATA_RESPONSES,
              value: SingleResponse.schema(names.response || {})
            })
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            Extensions.schema(names.extensions || {
              names: {
                blockName: RESPONSE_DATA_RESPONSE_EXTENSIONS
              }
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$h);
    const asn1 = compareSchema(schema, schema, _ResponseData.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.ResponseData.valueBeforeDecodeView;
    if (RESPONSE_DATA_VERSION in asn1.result) this.version = asn1.result[RESPONSE_DATA_VERSION].valueBlock.valueDec;
    if (asn1.result[RESPONSE_DATA_RESPONDER_ID].idBlock.tagNumber === 1) this.responderID = new RelativeDistinguishedNames({
      schema: asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0]
    });
    else this.responderID = asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0];
    this.producedAt = asn1.result[RESPONSE_DATA_PRODUCED_AT].toDate();
    this.responses = Array.from(asn1.result[RESPONSE_DATA_RESPONSES], (element) => new SingleResponse({
      schema: element
    }));
    if (RESPONSE_DATA_RESPONSE_EXTENSIONS in asn1.result) this.responseExtensions = Array.from(asn1.result[RESPONSE_DATA_RESPONSE_EXTENSIONS].valueBlock.value, (element) => new Extension({
      schema: element
    }));
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (encodeFlag === false) {
      if (!this.tbsView.byteLength) {
        return _ResponseData.schema();
      }
      const asn1 = fromBER(this.tbsView);
      AsnError.assert(asn1, "TBS Response Data");
      tbsSchema = asn1.result;
    } else {
      const outputArray = [];
      if (VERSION$7 in this) {
        outputArray.push(new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Integer({
              value: this.version
            })
          ]
        }));
      }
      if (this.responderID instanceof RelativeDistinguishedNames) {
        outputArray.push(new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            this.responderID.toSchema()
          ]
        }));
      } else {
        outputArray.push(new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: [
            this.responderID
          ]
        }));
      }
      outputArray.push(new GeneralizedTime({
        valueDate: this.producedAt
      }));
      outputArray.push(new Sequence({
        value: Array.from(this.responses, (o2) => o2.toSchema())
      }));
      if (this.responseExtensions) {
        outputArray.push(new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new Sequence({
              value: Array.from(this.responseExtensions, (o2) => o2.toSchema())
            })
          ]
        }));
      }
      tbsSchema = new Sequence({
        value: outputArray
      });
    }
    return tbsSchema;
  }
  toJSON() {
    const res = {};
    if (VERSION$7 in this) {
      res.version = this.version;
    }
    if (this.responderID) {
      res.responderID = this.responderID;
    }
    if (this.producedAt) {
      res.producedAt = this.producedAt;
    }
    if (this.responses) {
      res.responses = Array.from(this.responses, (o2) => o2.toJSON());
    }
    if (this.responseExtensions) {
      res.responseExtensions = Array.from(this.responseExtensions, (o2) => o2.toJSON());
    }
    return res;
  }
};
ResponseData.CLASS_NAME = "ResponseData";
var TRUSTED_CERTS = "trustedCerts";
var CERTS$2 = "certs";
var CRLS$1 = "crls";
var OCSPS$1 = "ocsps";
var CHECK_DATE = "checkDate";
var FIND_ORIGIN = "findOrigin";
var FIND_ISSUER = "findIssuer";
var ChainValidationCode;
(function(ChainValidationCode2) {
  ChainValidationCode2[ChainValidationCode2["unknown"] = -1] = "unknown";
  ChainValidationCode2[ChainValidationCode2["success"] = 0] = "success";
  ChainValidationCode2[ChainValidationCode2["noRevocation"] = 11] = "noRevocation";
  ChainValidationCode2[ChainValidationCode2["noPath"] = 60] = "noPath";
  ChainValidationCode2[ChainValidationCode2["noValidPath"] = 97] = "noValidPath";
})(ChainValidationCode || (ChainValidationCode = {}));
var ChainValidationError = class _ChainValidationError extends Error {
  constructor(code, message2) {
    super(message2);
    this.name = _ChainValidationError.NAME;
    this.code = code;
    this.message = message2;
  }
};
ChainValidationError.NAME = "ChainValidationError";
function isTrusted(cert, trustedList) {
  for (let i2 = 0; i2 < trustedList.length; i2++) {
    if (BufferSourceConverter.isEqual(cert.tbsView, trustedList[i2].tbsView)) {
      return true;
    }
  }
  return false;
}
var CertificateChainValidationEngine = class _CertificateChainValidationEngine {
  constructor(parameters = {}) {
    this.trustedCerts = getParametersValue(parameters, TRUSTED_CERTS, this.defaultValues(TRUSTED_CERTS));
    this.certs = getParametersValue(parameters, CERTS$2, this.defaultValues(CERTS$2));
    this.crls = getParametersValue(parameters, CRLS$1, this.defaultValues(CRLS$1));
    this.ocsps = getParametersValue(parameters, OCSPS$1, this.defaultValues(OCSPS$1));
    this.checkDate = getParametersValue(parameters, CHECK_DATE, this.defaultValues(CHECK_DATE));
    this.findOrigin = getParametersValue(parameters, FIND_ORIGIN, this.defaultValues(FIND_ORIGIN));
    this.findIssuer = getParametersValue(parameters, FIND_ISSUER, this.defaultValues(FIND_ISSUER));
  }
  static defaultFindOrigin(certificate, validationEngine) {
    if (certificate.tbsView.byteLength === 0) {
      certificate.tbsView = new Uint8Array(certificate.encodeTBS().toBER());
    }
    for (const localCert of validationEngine.certs) {
      if (localCert.tbsView.byteLength === 0) {
        localCert.tbsView = new Uint8Array(localCert.encodeTBS().toBER());
      }
      if (BufferSourceConverter.isEqual(certificate.tbsView, localCert.tbsView)) return "Intermediate Certificates";
    }
    for (const trustedCert of validationEngine.trustedCerts) {
      if (trustedCert.tbsView.byteLength === 0) trustedCert.tbsView = new Uint8Array(trustedCert.encodeTBS().toBER());
      if (BufferSourceConverter.isEqual(certificate.tbsView, trustedCert.tbsView)) return "Trusted Certificates";
    }
    return "Unknown";
  }
  async defaultFindIssuer(certificate, validationEngine, crypto2 = getCrypto(true)) {
    const result = [];
    let keyIdentifier = null;
    let authorityCertIssuer = null;
    let authorityCertSerialNumber = null;
    if (certificate.subject.isEqual(certificate.issuer)) {
      try {
        const verificationResult = await certificate.verify(void 0, crypto2);
        if (verificationResult) {
          return [
            certificate
          ];
        }
      } catch (ex) {
      }
    }
    if (certificate.extensions) {
      for (const extension of certificate.extensions) {
        if (extension.extnID === id_AuthorityKeyIdentifier && extension.parsedValue instanceof AuthorityKeyIdentifier) {
          if (extension.parsedValue.keyIdentifier) {
            keyIdentifier = extension.parsedValue.keyIdentifier;
          } else {
            if (extension.parsedValue.authorityCertIssuer) {
              authorityCertIssuer = extension.parsedValue.authorityCertIssuer;
            }
            if (extension.parsedValue.authorityCertSerialNumber) {
              authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;
            }
          }
          break;
        }
      }
    }
    function checkCertificate(possibleIssuer) {
      if (keyIdentifier !== null) {
        if (possibleIssuer.extensions) {
          let extensionFound = false;
          for (const extension of possibleIssuer.extensions) {
            if (extension.extnID === id_SubjectKeyIdentifier && extension.parsedValue) {
              extensionFound = true;
              if (BufferSourceConverter.isEqual(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHexView)) {
                result.push(possibleIssuer);
              }
              break;
            }
          }
          if (extensionFound) {
            return;
          }
        }
      }
      let authorityCertSerialNumberEqual = false;
      if (authorityCertSerialNumber !== null) authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);
      if (authorityCertIssuer !== null) {
        if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {
          if (authorityCertSerialNumberEqual) result.push(possibleIssuer);
        }
      } else {
        if (certificate.issuer.isEqual(possibleIssuer.subject)) result.push(possibleIssuer);
      }
    }
    for (const trustedCert of validationEngine.trustedCerts) {
      checkCertificate(trustedCert);
    }
    for (const intermediateCert of validationEngine.certs) {
      checkCertificate(intermediateCert);
    }
    for (let i2 = 0; i2 < result.length; i2++) {
      try {
        const verificationResult = await certificate.verify(result[i2], crypto2);
        if (verificationResult === false) result.splice(i2, 1);
      } catch (ex) {
        result.splice(i2, 1);
      }
    }
    return result;
  }
  defaultValues(memberName) {
    switch (memberName) {
      case TRUSTED_CERTS:
        return [];
      case CERTS$2:
        return [];
      case CRLS$1:
        return [];
      case OCSPS$1:
        return [];
      case CHECK_DATE:
        return /* @__PURE__ */ new Date();
      case FIND_ORIGIN:
        return _CertificateChainValidationEngine.defaultFindOrigin;
      case FIND_ISSUER:
        return this.defaultFindIssuer;
      default:
        throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);
    }
  }
  async sort(passedWhenNotRevValues = false, crypto2 = getCrypto(true)) {
    const localCerts = [];
    const buildPath = async (certificate, crypto3) => {
      const result2 = [];
      function checkUnique(array) {
        let unique = true;
        for (let i2 = 0; i2 < array.length; i2++) {
          for (let j = 0; j < array.length; j++) {
            if (j === i2) continue;
            if (array[i2] === array[j]) {
              unique = false;
              break;
            }
          }
          if (!unique) break;
        }
        return unique;
      }
      if (isTrusted(certificate, this.trustedCerts)) {
        return [
          [
            certificate
          ]
        ];
      }
      const findIssuerResult = await this.findIssuer(certificate, this, crypto3);
      if (findIssuerResult.length === 0) {
        throw new Error("No valid certificate paths found");
      }
      for (let i2 = 0; i2 < findIssuerResult.length; i2++) {
        if (BufferSourceConverter.isEqual(findIssuerResult[i2].tbsView, certificate.tbsView)) {
          result2.push([
            findIssuerResult[i2]
          ]);
          continue;
        }
        const buildPathResult = await buildPath(findIssuerResult[i2], crypto3);
        for (let j = 0; j < buildPathResult.length; j++) {
          const copy = buildPathResult[j].slice();
          copy.splice(0, 0, findIssuerResult[i2]);
          if (checkUnique(copy)) result2.push(copy);
          else result2.push(buildPathResult[j]);
        }
      }
      return result2;
    };
    const findCRL = async (certificate) => {
      const issuerCertificates = [];
      const crls = [];
      const crlsAndCertificates = [];
      issuerCertificates.push(...localCerts.filter((element) => certificate.issuer.isEqual(element.subject)));
      if (issuerCertificates.length === 0) {
        return {
          status: 1,
          statusMessage: "No certificate's issuers"
        };
      }
      crls.push(...this.crls.filter((o2) => o2.issuer.isEqual(certificate.issuer)));
      if (crls.length === 0) {
        return {
          status: 2,
          statusMessage: "No CRLs for specific certificate issuer"
        };
      }
      for (let i2 = 0; i2 < crls.length; i2++) {
        const crl = crls[i2];
        if (crl.nextUpdate && crl.nextUpdate.value < this.checkDate) {
          continue;
        }
        for (let j = 0; j < issuerCertificates.length; j++) {
          try {
            const result2 = await crls[i2].verify({
              issuerCertificate: issuerCertificates[j]
            }, crypto2);
            if (result2) {
              crlsAndCertificates.push({
                crl: crls[i2],
                certificate: issuerCertificates[j]
              });
              break;
            }
          } catch (ex) {
          }
        }
      }
      if (crlsAndCertificates.length) {
        return {
          status: 0,
          statusMessage: EMPTY_STRING2,
          result: crlsAndCertificates
        };
      }
      return {
        status: 3,
        statusMessage: "No valid CRLs found"
      };
    };
    const findOCSP = async (certificate, issuerCertificate) => {
      const hashAlgorithm = crypto2.getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);
      if (!hashAlgorithm.name) {
        return 1;
      }
      if (!hashAlgorithm.hash) {
        return 1;
      }
      for (let i2 = 0; i2 < this.ocsps.length; i2++) {
        const ocsp = this.ocsps[i2];
        const result2 = await ocsp.getCertificateStatus(certificate, issuerCertificate, crypto2);
        if (result2.isForCertificate) {
          if (result2.status === 0) return 0;
          return 1;
        }
      }
      return 2;
    };
    async function checkForCA(certificate, needToCheckCRL = false) {
      let isCA = false;
      let mustBeCA = false;
      let keyUsagePresent = false;
      let cRLSign = false;
      if (certificate.extensions) {
        for (let j = 0; j < certificate.extensions.length; j++) {
          const extension = certificate.extensions[j];
          if (extension.critical && !extension.parsedValue) {
            return {
              result: false,
              resultCode: 6,
              resultMessage: `Unable to parse critical certificate extension: ${extension.extnID}`
            };
          }
          if (extension.extnID === id_KeyUsage) {
            keyUsagePresent = true;
            const view = new Uint8Array(extension.parsedValue.valueBlock.valueHex);
            if ((view[0] & 4) === 4) mustBeCA = true;
            if ((view[0] & 2) === 2) cRLSign = true;
          }
          if (extension.extnID === id_BasicConstraints) {
            if ("cA" in extension.parsedValue) {
              if (extension.parsedValue.cA === true) isCA = true;
            }
          }
        }
        if (mustBeCA === true && isCA === false) {
          return {
            result: false,
            resultCode: 3,
            resultMessage: 'Unable to build certificate chain - using "keyCertSign" flag set without BasicConstraints'
          };
        }
        if (keyUsagePresent === true && isCA === true && mustBeCA === false) {
          return {
            result: false,
            resultCode: 4,
            resultMessage: 'Unable to build certificate chain - "keyCertSign" flag was not set'
          };
        }
        if (isCA === true && keyUsagePresent === true && (needToCheckCRL && cRLSign === false)) {
          return {
            result: false,
            resultCode: 5,
            resultMessage: 'Unable to build certificate chain - intermediate certificate must have "cRLSign" key usage flag'
          };
        }
      }
      if (isCA === false) {
        return {
          result: false,
          resultCode: 7,
          resultMessage: "Unable to build certificate chain - more than one possible end-user certificate"
        };
      }
      return {
        result: true,
        resultCode: 0,
        resultMessage: EMPTY_STRING2
      };
    }
    const basicCheck = async (path, checkDate) => {
      for (let i2 = 0; i2 < path.length; i2++) {
        if (path[i2].notBefore.value > checkDate || path[i2].notAfter.value < checkDate) {
          return {
            result: false,
            resultCode: 8,
            resultMessage: "The certificate is either not yet valid or expired"
          };
        }
      }
      if (path.length < 2) {
        return {
          result: false,
          resultCode: 9,
          resultMessage: "Too short certificate path"
        };
      }
      for (let i2 = path.length - 2; i2 >= 0; i2--) {
        if (path[i2].issuer.isEqual(path[i2].subject) === false) {
          if (path[i2].issuer.isEqual(path[i2 + 1].subject) === false) {
            return {
              result: false,
              resultCode: 10,
              resultMessage: "Incorrect name chaining"
            };
          }
        }
      }
      if (this.crls.length !== 0 || this.ocsps.length !== 0) {
        for (let i2 = 0; i2 < path.length - 1; i2++) {
          let ocspResult = 2;
          let crlResult = {
            status: 0,
            statusMessage: EMPTY_STRING2
          };
          if (this.ocsps.length !== 0) {
            ocspResult = await findOCSP(path[i2], path[i2 + 1]);
            switch (ocspResult) {
              case 0:
                continue;
              case 1:
                return {
                  result: false,
                  resultCode: 12,
                  resultMessage: "One of certificates was revoked via OCSP response"
                };
            }
          }
          if (this.crls.length !== 0) {
            crlResult = await findCRL(path[i2]);
            if (crlResult.status === 0 && crlResult.result) {
              for (let j = 0; j < crlResult.result.length; j++) {
                const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i2]);
                if (isCertificateRevoked) {
                  return {
                    result: false,
                    resultCode: 12,
                    resultMessage: "One of certificates had been revoked"
                  };
                }
                const isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);
                if (isCertificateCA.result === false) {
                  return {
                    result: false,
                    resultCode: 13,
                    resultMessage: "CRL issuer certificate is not a CA certificate or does not have crlSign flag"
                  };
                }
              }
            } else {
              if (passedWhenNotRevValues === false) {
                throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);
              }
            }
          } else {
            if (ocspResult === 2) {
              return {
                result: false,
                resultCode: 11,
                resultMessage: "No revocation values found for one of certificates"
              };
            }
          }
          if (ocspResult === 2 && crlResult.status === 2 && passedWhenNotRevValues) {
            const issuerCertificate = path[i2 + 1];
            let extensionFound = false;
            if (issuerCertificate.extensions) {
              for (const extension of issuerCertificate.extensions) {
                switch (extension.extnID) {
                  case id_CRLDistributionPoints:
                  case id_FreshestCRL:
                  case id_AuthorityInfoAccess:
                    extensionFound = true;
                    break;
                }
              }
            }
            if (extensionFound) {
              throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);
            }
          }
        }
      }
      for (const [i2, cert] of path.entries()) {
        if (!i2) {
          continue;
        }
        const result2 = await checkForCA(cert);
        if (!result2.result) {
          return {
            result: false,
            resultCode: 14,
            resultMessage: "One of intermediate certificates is not a CA certificate"
          };
        }
      }
      return {
        result: true
      };
    };
    localCerts.push(...this.trustedCerts);
    localCerts.push(...this.certs);
    for (let i2 = 0; i2 < localCerts.length; i2++) {
      for (let j = 0; j < localCerts.length; j++) {
        if (i2 === j) continue;
        if (BufferSourceConverter.isEqual(localCerts[i2].tbsView, localCerts[j].tbsView)) {
          localCerts.splice(j, 1);
          i2 = 0;
          break;
        }
      }
    }
    const leafCert = localCerts[localCerts.length - 1];
    let result;
    const certificatePath = [
      leafCert
    ];
    result = await buildPath(leafCert, crypto2);
    if (result.length === 0) {
      throw new ChainValidationError(ChainValidationCode.noPath, "Unable to find certificate path");
    }
    for (let i2 = 0; i2 < result.length; i2++) {
      let found = false;
      for (let j = 0; j < result[i2].length; j++) {
        const certificate = result[i2][j];
        for (let k = 0; k < this.trustedCerts.length; k++) {
          if (BufferSourceConverter.isEqual(certificate.tbsView, this.trustedCerts[k].tbsView)) {
            found = true;
            break;
          }
        }
        if (found) break;
      }
      if (!found) {
        result.splice(i2, 1);
        i2 = 0;
      }
    }
    if (result.length === 0) {
      throw new ChainValidationError(ChainValidationCode.noValidPath, "No valid certificate paths found");
    }
    let shortestLength = result[0].length;
    let shortestIndex = 0;
    for (let i2 = 0; i2 < result.length; i2++) {
      if (result[i2].length < shortestLength) {
        shortestLength = result[i2].length;
        shortestIndex = i2;
      }
    }
    for (let i2 = 0; i2 < result[shortestIndex].length; i2++) certificatePath.push(result[shortestIndex][i2]);
    result = await basicCheck(certificatePath, this.checkDate);
    if (result.result === false) throw result;
    return certificatePath;
  }
  async verify(parameters = {}, crypto2 = getCrypto(true)) {
    function compareDNSName(name, constraint) {
      const namePrepared = stringPrep(name);
      const constraintPrepared = stringPrep(constraint);
      const nameSplitted = namePrepared.split(".");
      const constraintSplitted = constraintPrepared.split(".");
      const nameLen = nameSplitted.length;
      const constrLen = constraintSplitted.length;
      if (nameLen === 0 || constrLen === 0 || nameLen < constrLen) {
        return false;
      }
      for (let i2 = 0; i2 < nameLen; i2++) {
        if (nameSplitted[i2].length === 0) {
          return false;
        }
      }
      for (let i2 = 0; i2 < constrLen; i2++) {
        if (constraintSplitted[i2].length === 0) {
          if (i2 === 0) {
            if (constrLen === 1) {
              return false;
            }
            continue;
          }
          return false;
        }
      }
      for (let i2 = 0; i2 < constrLen; i2++) {
        if (constraintSplitted[constrLen - 1 - i2].length === 0) {
          continue;
        }
        if (nameSplitted[nameLen - 1 - i2].localeCompare(constraintSplitted[constrLen - 1 - i2]) !== 0) {
          return false;
        }
      }
      return true;
    }
    function compareRFC822Name(name, constraint) {
      const namePrepared = stringPrep(name);
      const constraintPrepared = stringPrep(constraint);
      const nameSplitted = namePrepared.split("@");
      const constraintSplitted = constraintPrepared.split("@");
      if (nameSplitted.length === 0 || constraintSplitted.length === 0 || nameSplitted.length < constraintSplitted.length) return false;
      if (constraintSplitted.length === 1) {
        const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);
        if (result) {
          const ns = nameSplitted[1].split(".");
          const cs = constraintSplitted[0].split(".");
          if (cs[0].length === 0) return true;
          return ns.length === cs.length;
        }
        return false;
      }
      return namePrepared.localeCompare(constraintPrepared) === 0;
    }
    function compareUniformResourceIdentifier(name, constraint) {
      let namePrepared = stringPrep(name);
      const constraintPrepared = stringPrep(constraint);
      const ns = namePrepared.split("/");
      const cs = constraintPrepared.split("/");
      if (cs.length > 1) return false;
      if (ns.length > 1) {
        for (let i2 = 0; i2 < ns.length; i2++) {
          if (ns[i2].length > 0 && ns[i2].charAt(ns[i2].length - 1) !== ":") {
            const nsPort = ns[i2].split(":");
            namePrepared = nsPort[0];
            break;
          }
        }
      }
      const result = compareDNSName(namePrepared, constraintPrepared);
      if (result) {
        const nameSplitted = namePrepared.split(".");
        const constraintSplitted = constraintPrepared.split(".");
        if (constraintSplitted[0].length === 0) return true;
        return nameSplitted.length === constraintSplitted.length;
      }
      return false;
    }
    function compareIPAddress(name, constraint) {
      const nameView = name.valueBlock.valueHexView;
      const constraintView = constraint.valueBlock.valueHexView;
      if (nameView.length === 4 && constraintView.length === 8) {
        for (let i2 = 0; i2 < 4; i2++) {
          if ((nameView[i2] ^ constraintView[i2]) & constraintView[i2 + 4]) return false;
        }
        return true;
      }
      if (nameView.length === 16 && constraintView.length === 32) {
        for (let i2 = 0; i2 < 16; i2++) {
          if ((nameView[i2] ^ constraintView[i2]) & constraintView[i2 + 16]) return false;
        }
        return true;
      }
      return false;
    }
    function compareDirectoryName(name, constraint) {
      if (name.typesAndValues.length === 0 || constraint.typesAndValues.length === 0) return true;
      if (name.typesAndValues.length < constraint.typesAndValues.length) return false;
      let result = true;
      let nameStart = 0;
      for (let i2 = 0; i2 < constraint.typesAndValues.length; i2++) {
        let localResult = false;
        for (let j = nameStart; j < name.typesAndValues.length; j++) {
          localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i2]);
          if (name.typesAndValues[j].type === constraint.typesAndValues[i2].type) result = result && localResult;
          if (localResult === true) {
            if (nameStart === 0 || nameStart === j) {
              nameStart = j + 1;
              break;
            } else return false;
          }
        }
        if (localResult === false) return false;
      }
      return nameStart === 0 ? false : result;
    }
    try {
      if (this.certs.length === 0) throw new Error("Empty certificate array");
      const passedWhenNotRevValues = parameters.passedWhenNotRevValues || false;
      const initialPolicySet = parameters.initialPolicySet || [
        id_AnyPolicy
      ];
      const initialExplicitPolicy = parameters.initialExplicitPolicy || false;
      const initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit || false;
      const initialInhibitPolicy = parameters.initialInhibitPolicy || false;
      const initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet || [];
      const initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet || [];
      const initialRequiredNameForms = parameters.initialRequiredNameForms || [];
      let explicitPolicyIndicator = initialExplicitPolicy;
      let policyMappingInhibitIndicator = initialPolicyMappingInhibit;
      let inhibitAnyPolicyIndicator = initialInhibitPolicy;
      const pendingConstraints = [
        false,
        false,
        false
      ];
      let explicitPolicyPending = 0;
      let policyMappingInhibitPending = 0;
      let inhibitAnyPolicyPending = 0;
      let permittedSubtrees = initialPermittedSubtreesSet;
      let excludedSubtrees = initialExcludedSubtreesSet;
      const requiredNameForms = initialRequiredNameForms;
      let pathDepth = 1;
      this.certs = await this.sort(passedWhenNotRevValues, crypto2);
      const allPolicies = [];
      allPolicies.push(id_AnyPolicy);
      const policiesAndCerts = [];
      const anyPolicyArray = new Array(this.certs.length - 1);
      for (let ii = 0; ii < this.certs.length - 1; ii++) anyPolicyArray[ii] = true;
      policiesAndCerts.push(anyPolicyArray);
      const policyMappings = new Array(this.certs.length - 1);
      const certPolicies = new Array(this.certs.length - 1);
      let explicitPolicyStart = explicitPolicyIndicator ? this.certs.length - 1 : -1;
      for (let i2 = this.certs.length - 2; i2 >= 0; i2--, pathDepth++) {
        const cert = this.certs[i2];
        if (cert.extensions) {
          for (let j = 0; j < cert.extensions.length; j++) {
            const extension = cert.extensions[j];
            if (extension.extnID === id_CertificatePolicies) {
              certPolicies[i2] = extension.parsedValue;
              for (let s2 = 0; s2 < allPolicies.length; s2++) {
                if (allPolicies[s2] === id_AnyPolicy) {
                  delete policiesAndCerts[s2][i2];
                  break;
                }
              }
              for (let k = 0; k < extension.parsedValue.certificatePolicies.length; k++) {
                let policyIndex = -1;
                const policyId = extension.parsedValue.certificatePolicies[k].policyIdentifier;
                for (let s2 = 0; s2 < allPolicies.length; s2++) {
                  if (policyId === allPolicies[s2]) {
                    policyIndex = s2;
                    break;
                  }
                }
                if (policyIndex === -1) {
                  allPolicies.push(policyId);
                  const certArray = new Array(this.certs.length - 1);
                  certArray[i2] = true;
                  policiesAndCerts.push(certArray);
                } else policiesAndCerts[policyIndex][i2] = true;
              }
            }
            if (extension.extnID === id_PolicyMappings) {
              if (policyMappingInhibitIndicator) {
                return {
                  result: false,
                  resultCode: 98,
                  resultMessage: "Policy mapping prohibited"
                };
              }
              policyMappings[i2] = extension.parsedValue;
            }
            if (extension.extnID === id_PolicyConstraints) {
              if (explicitPolicyIndicator === false) {
                if (extension.parsedValue.requireExplicitPolicy === 0) {
                  explicitPolicyIndicator = true;
                  explicitPolicyStart = i2;
                } else {
                  if (pendingConstraints[0] === false) {
                    pendingConstraints[0] = true;
                    explicitPolicyPending = extension.parsedValue.requireExplicitPolicy;
                  } else explicitPolicyPending = explicitPolicyPending > extension.parsedValue.requireExplicitPolicy ? extension.parsedValue.requireExplicitPolicy : explicitPolicyPending;
                }
                if (extension.parsedValue.inhibitPolicyMapping === 0) policyMappingInhibitIndicator = true;
                else {
                  if (pendingConstraints[1] === false) {
                    pendingConstraints[1] = true;
                    policyMappingInhibitPending = extension.parsedValue.inhibitPolicyMapping + 1;
                  } else policyMappingInhibitPending = policyMappingInhibitPending > extension.parsedValue.inhibitPolicyMapping + 1 ? extension.parsedValue.inhibitPolicyMapping + 1 : policyMappingInhibitPending;
                }
              }
            }
            if (extension.extnID === id_InhibitAnyPolicy) {
              if (inhibitAnyPolicyIndicator === false) {
                if (extension.parsedValue.valueBlock.valueDec === 0) inhibitAnyPolicyIndicator = true;
                else {
                  if (pendingConstraints[2] === false) {
                    pendingConstraints[2] = true;
                    inhibitAnyPolicyPending = extension.parsedValue.valueBlock.valueDec;
                  } else inhibitAnyPolicyPending = inhibitAnyPolicyPending > extension.parsedValue.valueBlock.valueDec ? extension.parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;
                }
              }
            }
          }
          if (inhibitAnyPolicyIndicator === true) {
            let policyIndex = -1;
            for (let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {
              if (allPolicies[searchAnyPolicy] === id_AnyPolicy) {
                policyIndex = searchAnyPolicy;
                break;
              }
            }
            if (policyIndex !== -1) delete policiesAndCerts[0][i2];
          }
          if (explicitPolicyIndicator === false) {
            if (pendingConstraints[0] === true) {
              explicitPolicyPending--;
              if (explicitPolicyPending === 0) {
                explicitPolicyIndicator = true;
                explicitPolicyStart = i2;
                pendingConstraints[0] = false;
              }
            }
          }
          if (policyMappingInhibitIndicator === false) {
            if (pendingConstraints[1] === true) {
              policyMappingInhibitPending--;
              if (policyMappingInhibitPending === 0) {
                policyMappingInhibitIndicator = true;
                pendingConstraints[1] = false;
              }
            }
          }
          if (inhibitAnyPolicyIndicator === false) {
            if (pendingConstraints[2] === true) {
              inhibitAnyPolicyPending--;
              if (inhibitAnyPolicyPending === 0) {
                inhibitAnyPolicyIndicator = true;
                pendingConstraints[2] = false;
              }
            }
          }
        }
      }
      for (let i2 = 0; i2 < this.certs.length - 1; i2++) {
        if (i2 < this.certs.length - 2 && typeof policyMappings[i2 + 1] !== "undefined") {
          for (let k = 0; k < policyMappings[i2 + 1].mappings.length; k++) {
            if (policyMappings[i2 + 1].mappings[k].issuerDomainPolicy === id_AnyPolicy || policyMappings[i2 + 1].mappings[k].subjectDomainPolicy === id_AnyPolicy) {
              return {
                result: false,
                resultCode: 99,
                resultMessage: 'The "anyPolicy" should not be a part of policy mapping scheme'
              };
            }
            let issuerDomainPolicyIndex = -1;
            let subjectDomainPolicyIndex = -1;
            for (let n2 = 0; n2 < allPolicies.length; n2++) {
              if (allPolicies[n2] === policyMappings[i2 + 1].mappings[k].issuerDomainPolicy) issuerDomainPolicyIndex = n2;
              if (allPolicies[n2] === policyMappings[i2 + 1].mappings[k].subjectDomainPolicy) subjectDomainPolicyIndex = n2;
            }
            if (typeof policiesAndCerts[issuerDomainPolicyIndex][i2] !== "undefined") delete policiesAndCerts[issuerDomainPolicyIndex][i2];
            for (let j = 0; j < certPolicies[i2].certificatePolicies.length; j++) {
              if (policyMappings[i2 + 1].mappings[k].subjectDomainPolicy === certPolicies[i2].certificatePolicies[j].policyIdentifier) {
                if (issuerDomainPolicyIndex !== -1 && subjectDomainPolicyIndex !== -1) {
                  for (let m2 = 0; m2 <= i2; m2++) {
                    if (typeof policiesAndCerts[subjectDomainPolicyIndex][m2] !== "undefined") {
                      policiesAndCerts[issuerDomainPolicyIndex][m2] = true;
                      delete policiesAndCerts[subjectDomainPolicyIndex][m2];
                    }
                  }
                }
              }
            }
          }
        }
      }
      for (let i2 = 0; i2 < allPolicies.length; i2++) {
        if (allPolicies[i2] === id_AnyPolicy) {
          for (let j = 0; j < explicitPolicyStart; j++) delete policiesAndCerts[i2][j];
        }
      }
      const authConstrPolicies = [];
      for (let i2 = 0; i2 < policiesAndCerts.length; i2++) {
        let found = true;
        for (let j = 0; j < this.certs.length - 1; j++) {
          let anyPolicyFound = false;
          if (j < explicitPolicyStart && allPolicies[i2] === id_AnyPolicy && allPolicies.length > 1) {
            found = false;
            break;
          }
          if (typeof policiesAndCerts[i2][j] === "undefined") {
            if (j >= explicitPolicyStart) {
              for (let k = 0; k < allPolicies.length; k++) {
                if (allPolicies[k] === id_AnyPolicy) {
                  if (policiesAndCerts[k][j] === true) anyPolicyFound = true;
                  break;
                }
              }
            }
            if (!anyPolicyFound) {
              found = false;
              break;
            }
          }
        }
        if (found === true) authConstrPolicies.push(allPolicies[i2]);
      }
      let userConstrPolicies = [];
      if (initialPolicySet.length === 1 && initialPolicySet[0] === id_AnyPolicy && explicitPolicyIndicator === false) userConstrPolicies = initialPolicySet;
      else {
        if (authConstrPolicies.length === 1 && authConstrPolicies[0] === id_AnyPolicy) userConstrPolicies = initialPolicySet;
        else {
          for (let i2 = 0; i2 < authConstrPolicies.length; i2++) {
            for (let j = 0; j < initialPolicySet.length; j++) {
              if (initialPolicySet[j] === authConstrPolicies[i2] || initialPolicySet[j] === id_AnyPolicy) {
                userConstrPolicies.push(authConstrPolicies[i2]);
                break;
              }
            }
          }
        }
      }
      const policyResult = {
        result: userConstrPolicies.length > 0,
        resultCode: 0,
        resultMessage: userConstrPolicies.length > 0 ? EMPTY_STRING2 : 'Zero "userConstrPolicies" array, no intersections with "authConstrPolicies"',
        authConstrPolicies,
        userConstrPolicies,
        explicitPolicyIndicator,
        policyMappings,
        certificatePath: this.certs
      };
      if (userConstrPolicies.length === 0) return policyResult;
      if (policyResult.result === false) return policyResult;
      pathDepth = 1;
      for (let i2 = this.certs.length - 2; i2 >= 0; i2--, pathDepth++) {
        const cert = this.certs[i2];
        let subjectAltNames = [];
        let certPermittedSubtrees = [];
        let certExcludedSubtrees = [];
        if (cert.extensions) {
          for (let j = 0; j < cert.extensions.length; j++) {
            const extension = cert.extensions[j];
            if (extension.extnID === id_NameConstraints) {
              if ("permittedSubtrees" in extension.parsedValue) certPermittedSubtrees = certPermittedSubtrees.concat(extension.parsedValue.permittedSubtrees);
              if ("excludedSubtrees" in extension.parsedValue) certExcludedSubtrees = certExcludedSubtrees.concat(extension.parsedValue.excludedSubtrees);
            }
            if (extension.extnID === id_SubjectAltName) subjectAltNames = subjectAltNames.concat(extension.parsedValue.altNames);
          }
        }
        let formFound = requiredNameForms.length <= 0;
        for (let j = 0; j < requiredNameForms.length; j++) {
          switch (requiredNameForms[j].base.type) {
            case 4:
              {
                if (requiredNameForms[j].base.value.typesAndValues.length !== cert.subject.typesAndValues.length) continue;
                formFound = true;
                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {
                  if (cert.subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {
                    formFound = false;
                    break;
                  }
                }
                if (formFound === true) break;
              }
              break;
            default:
          }
        }
        if (formFound === false) {
          policyResult.result = false;
          policyResult.resultCode = 21;
          policyResult.resultMessage = "No necessary name form found";
          throw policyResult;
        }
        const constrGroups = [
          [],
          [],
          [],
          [],
          []
        ];
        for (let j = 0; j < permittedSubtrees.length; j++) {
          switch (permittedSubtrees[j].base.type) {
            case 1:
              constrGroups[0].push(permittedSubtrees[j]);
              break;
            case 2:
              constrGroups[1].push(permittedSubtrees[j]);
              break;
            case 4:
              constrGroups[2].push(permittedSubtrees[j]);
              break;
            case 6:
              constrGroups[3].push(permittedSubtrees[j]);
              break;
            case 7:
              constrGroups[4].push(permittedSubtrees[j]);
              break;
            default:
          }
        }
        for (let p = 0; p < 5; p++) {
          let groupPermitted = false;
          let valueExists = false;
          const group = constrGroups[p];
          for (let j = 0; j < group.length; j++) {
            switch (p) {
              case 0:
                if (subjectAltNames.length > 0) {
                  for (let k = 0; k < subjectAltNames.length; k++) {
                    if (subjectAltNames[k].type === 1) {
                      valueExists = true;
                      groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);
                    }
                  }
                } else {
                  for (let k = 0; k < cert.subject.typesAndValues.length; k++) {
                    if (cert.subject.typesAndValues[k].type === "1.2.840.113549.1.9.1" || cert.subject.typesAndValues[k].type === "0.9.2342.19200300.100.1.3") {
                      valueExists = true;
                      groupPermitted = groupPermitted || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);
                    }
                  }
                }
                break;
              case 1:
                if (subjectAltNames.length > 0) {
                  for (let k = 0; k < subjectAltNames.length; k++) {
                    if (subjectAltNames[k].type === 2) {
                      valueExists = true;
                      groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);
                    }
                  }
                }
                break;
              case 2:
                valueExists = true;
                groupPermitted = compareDirectoryName(cert.subject, group[j].base.value);
                break;
              case 3:
                if (subjectAltNames.length > 0) {
                  for (let k = 0; k < subjectAltNames.length; k++) {
                    if (subjectAltNames[k].type === 6) {
                      valueExists = true;
                      groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);
                    }
                  }
                }
                break;
              case 4:
                if (subjectAltNames.length > 0) {
                  for (let k = 0; k < subjectAltNames.length; k++) {
                    if (subjectAltNames[k].type === 7) {
                      valueExists = true;
                      groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);
                    }
                  }
                }
                break;
              default:
            }
            if (groupPermitted) break;
          }
          if (groupPermitted === false && group.length > 0 && valueExists) {
            policyResult.result = false;
            policyResult.resultCode = 41;
            policyResult.resultMessage = 'Failed to meet "permitted sub-trees" name constraint';
            throw policyResult;
          }
        }
        let excluded = false;
        for (let j = 0; j < excludedSubtrees.length; j++) {
          switch (excludedSubtrees[j].base.type) {
            case 1:
              if (subjectAltNames.length >= 0) {
                for (let k = 0; k < subjectAltNames.length; k++) {
                  if (subjectAltNames[k].type === 1) excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);
                }
              } else {
                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {
                  if (cert.subject.typesAndValues[k].type === "1.2.840.113549.1.9.1" || cert.subject.typesAndValues[k].type === "0.9.2342.19200300.100.1.3") excluded = excluded || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);
                }
              }
              break;
            case 2:
              if (subjectAltNames.length > 0) {
                for (let k = 0; k < subjectAltNames.length; k++) {
                  if (subjectAltNames[k].type === 2) excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);
                }
              }
              break;
            case 4:
              excluded = excluded || compareDirectoryName(cert.subject, excludedSubtrees[j].base.value);
              break;
            case 6:
              if (subjectAltNames.length > 0) {
                for (let k = 0; k < subjectAltNames.length; k++) {
                  if (subjectAltNames[k].type === 6) excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);
                }
              }
              break;
            case 7:
              if (subjectAltNames.length > 0) {
                for (let k = 0; k < subjectAltNames.length; k++) {
                  if (subjectAltNames[k].type === 7) excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);
                }
              }
              break;
            default:
          }
          if (excluded) break;
        }
        if (excluded === true) {
          policyResult.result = false;
          policyResult.resultCode = 42;
          policyResult.resultMessage = 'Failed to meet "excluded sub-trees" name constraint';
          throw policyResult;
        }
        permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);
        excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);
      }
      return policyResult;
    } catch (error2) {
      if (error2 instanceof Error) {
        if (error2 instanceof ChainValidationError) {
          return {
            result: false,
            resultCode: error2.code,
            resultMessage: error2.message,
            error: error2
          };
        }
        return {
          result: false,
          resultCode: ChainValidationCode.unknown,
          resultMessage: error2.message,
          error: error2
        };
      }
      if (error2 && typeof error2 === "object" && "resultMessage" in error2) {
        return error2;
      }
      return {
        result: false,
        resultCode: -1,
        resultMessage: `${error2}`
      };
    }
  }
};
var TBS_RESPONSE_DATA = "tbsResponseData";
var SIGNATURE_ALGORITHM$3 = "signatureAlgorithm";
var SIGNATURE$2 = "signature";
var CERTS$1 = "certs";
var BASIC_OCSP_RESPONSE = "BasicOCSPResponse";
var BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA = `${BASIC_OCSP_RESPONSE}.${TBS_RESPONSE_DATA}`;
var BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM = `${BASIC_OCSP_RESPONSE}.${SIGNATURE_ALGORITHM$3}`;
var BASIC_OCSP_RESPONSE_SIGNATURE = `${BASIC_OCSP_RESPONSE}.${SIGNATURE$2}`;
var BASIC_OCSP_RESPONSE_CERTS = `${BASIC_OCSP_RESPONSE}.${CERTS$1}`;
var CLEAR_PROPS$g = [
  BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA,
  BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM,
  BASIC_OCSP_RESPONSE_SIGNATURE,
  BASIC_OCSP_RESPONSE_CERTS
];
var BasicOCSPResponse = class _BasicOCSPResponse extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsResponseData = getParametersValue(parameters, TBS_RESPONSE_DATA, _BasicOCSPResponse.defaultValues(TBS_RESPONSE_DATA));
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$3, _BasicOCSPResponse.defaultValues(SIGNATURE_ALGORITHM$3));
    this.signature = getParametersValue(parameters, SIGNATURE$2, _BasicOCSPResponse.defaultValues(SIGNATURE$2));
    if (CERTS$1 in parameters) {
      this.certs = getParametersValue(parameters, CERTS$1, _BasicOCSPResponse.defaultValues(CERTS$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS_RESPONSE_DATA:
        return new ResponseData();
      case SIGNATURE_ALGORITHM$3:
        return new AlgorithmIdentifier();
      case SIGNATURE$2:
        return new BitString();
      case CERTS$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case "type": {
        let comparisonResult = ResponseData.compareWithDefault("tbs", memberValue.tbs) && ResponseData.compareWithDefault("responderID", memberValue.responderID) && ResponseData.compareWithDefault("producedAt", memberValue.producedAt) && ResponseData.compareWithDefault("responses", memberValue.responses);
        if ("responseExtensions" in memberValue) comparisonResult = comparisonResult && ResponseData.compareWithDefault("responseExtensions", memberValue.responseExtensions);
        return comparisonResult;
      }
      case SIGNATURE_ALGORITHM$3:
        return memberValue.algorithmId === EMPTY_STRING2 && "algorithmParams" in memberValue === false;
      case SIGNATURE$2:
        return memberValue.isEqual(_BasicOCSPResponse.defaultValues(memberName));
      case CERTS$1:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || BASIC_OCSP_RESPONSE,
      value: [
        ResponseData.schema(names.tbsResponseData || {
          names: {
            blockName: BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA
          }
        }),
        AlgorithmIdentifier.schema(names.signatureAlgorithm || {
          names: {
            blockName: BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM
          }
        }),
        new BitString({
          name: names.signature || BASIC_OCSP_RESPONSE_SIGNATURE
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Sequence({
              value: [
                new Repeated({
                  name: BASIC_OCSP_RESPONSE_CERTS,
                  value: Certificate.schema(names.certs || {})
                })
              ]
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$g);
    const asn1 = compareSchema(schema, schema, _BasicOCSPResponse.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsResponseData = new ResponseData({
      schema: asn1.result[BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA]
    });
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM]
    });
    this.signature = asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE];
    if (BASIC_OCSP_RESPONSE_CERTS in asn1.result) {
      this.certs = Array.from(asn1.result[BASIC_OCSP_RESPONSE_CERTS], (element) => new Certificate({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.tbsResponseData.toSchema());
    outputArray.push(this.signatureAlgorithm.toSchema());
    outputArray.push(this.signature);
    if (this.certs) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          new Sequence({
            value: Array.from(this.certs, (o2) => o2.toSchema())
          })
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      tbsResponseData: this.tbsResponseData.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signature: this.signature.toJSON()
    };
    if (this.certs) {
      res.certs = Array.from(this.certs, (o2) => o2.toJSON());
    }
    return res;
  }
  async getCertificateStatus(certificate, issuerCertificate, crypto2 = getCrypto(true)) {
    const result = {
      isForCertificate: false,
      status: 2
    };
    const hashesObject = {};
    const certIDs = [];
    for (const response of this.tbsResponseData.responses) {
      const hashAlgorithm = crypto2.getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId, true, "CertID.hashAlgorithm");
      if (!hashesObject[hashAlgorithm.name]) {
        hashesObject[hashAlgorithm.name] = 1;
        const certID = new CertID();
        certIDs.push(certID);
        await certID.createForCertificate(certificate, {
          hashAlgorithm: hashAlgorithm.name,
          issuerCertificate
        }, crypto2);
      }
    }
    for (const response of this.tbsResponseData.responses) {
      for (const id of certIDs) {
        if (response.certID.isEqual(id)) {
          result.isForCertificate = true;
          try {
            switch (response.certStatus.idBlock.isConstructed) {
              case true:
                if (response.certStatus.idBlock.tagNumber === 1) result.status = 1;
                break;
              case false:
                switch (response.certStatus.idBlock.tagNumber) {
                  case 0:
                    result.status = 0;
                    break;
                  case 2:
                    result.status = 2;
                    break;
                  default:
                }
                break;
              default:
            }
          } catch (ex) {
          }
          return result;
        }
      }
    }
    return result;
  }
  async sign(privateKey, hashAlgorithm = "SHA-1", crypto2 = getCrypto(true)) {
    if (!privateKey) {
      throw new Error("Need to provide a private key for signing");
    }
    const signatureParams = await crypto2.getSignatureParameters(privateKey, hashAlgorithm);
    const algorithm = signatureParams.parameters.algorithm;
    if (!("name" in algorithm)) {
      throw new Error("Empty algorithm");
    }
    this.signatureAlgorithm = signatureParams.signatureAlgorithm;
    this.tbsResponseData.tbsView = new Uint8Array(this.tbsResponseData.toSchema(true).toBER());
    const signature = await crypto2.signWithPrivateKey(this.tbsResponseData.tbsView, privateKey, {
      algorithm
    });
    this.signature = new BitString({
      valueHex: signature
    });
  }
  async verify(params = {}, crypto2 = getCrypto(true)) {
    let signerCert = null;
    let certIndex = -1;
    const trustedCerts = params.trustedCerts || [];
    if (!this.certs) {
      throw new Error("No certificates attached to the BasicOCSPResponse");
    }
    switch (true) {
      case this.tbsResponseData.responderID instanceof RelativeDistinguishedNames:
        for (const [index, certificate] of this.certs.entries()) {
          if (certificate.subject.isEqual(this.tbsResponseData.responderID)) {
            certIndex = index;
            break;
          }
        }
        break;
      case this.tbsResponseData.responderID instanceof OctetString:
        for (const [index, cert] of this.certs.entries()) {
          const hash = await crypto2.digest({
            name: "sha-1"
          }, cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
          if (isEqualBuffer(hash, this.tbsResponseData.responderID.valueBlock.valueHex)) {
            certIndex = index;
            break;
          }
        }
        break;
      default:
        throw new Error("Wrong value for responderID");
    }
    if (certIndex === -1) throw new Error("Correct certificate was not found in OCSP response");
    signerCert = this.certs[certIndex];
    const additionalCerts = [
      signerCert
    ];
    for (const cert of this.certs) {
      const caCert = await checkCA(cert, signerCert);
      if (caCert) {
        additionalCerts.push(caCert);
      }
    }
    const certChain = new CertificateChainValidationEngine({
      certs: additionalCerts,
      trustedCerts
    });
    const verificationResult = await certChain.verify({}, crypto2);
    if (!verificationResult.result) {
      throw new Error("Validation of signer's certificate failed");
    }
    return crypto2.verifyWithPublicKey(this.tbsResponseData.tbsView, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm);
  }
};
BasicOCSPResponse.CLASS_NAME = "BasicOCSPResponse";
var TBS$1 = "tbs";
var VERSION$6 = "version";
var SUBJECT = "subject";
var SPKI = "subjectPublicKeyInfo";
var ATTRIBUTES$1 = "attributes";
var SIGNATURE_ALGORITHM$2 = "signatureAlgorithm";
var SIGNATURE_VALUE = "signatureValue";
var CSR_INFO = "CertificationRequestInfo";
var CSR_INFO_VERSION = `${CSR_INFO}.version`;
var CSR_INFO_SUBJECT = `${CSR_INFO}.subject`;
var CSR_INFO_SPKI = `${CSR_INFO}.subjectPublicKeyInfo`;
var CSR_INFO_ATTRS = `${CSR_INFO}.attributes`;
var CLEAR_PROPS$f = [
  CSR_INFO,
  CSR_INFO_VERSION,
  CSR_INFO_SUBJECT,
  CSR_INFO_SPKI,
  CSR_INFO_ATTRS,
  SIGNATURE_ALGORITHM$2,
  SIGNATURE_VALUE
];
function CertificationRequestInfo(parameters = {}) {
  const names = getParametersValue(parameters, "names", {});
  return new Sequence({
    name: names.CertificationRequestInfo || CSR_INFO,
    value: [
      new Integer({
        name: names.CertificationRequestInfoVersion || CSR_INFO_VERSION
      }),
      RelativeDistinguishedNames.schema(names.subject || {
        names: {
          blockName: CSR_INFO_SUBJECT
        }
      }),
      PublicKeyInfo.schema({
        names: {
          blockName: CSR_INFO_SPKI
        }
      }),
      new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          new Repeated({
            optional: true,
            name: names.CertificationRequestInfoAttributes || CSR_INFO_ATTRS,
            value: Attribute.schema(names.attributes || {})
          })
        ]
      })
    ]
  });
}
var CertificationRequest = class _CertificationRequest extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(getParametersValue(parameters, TBS$1, _CertificationRequest.defaultValues(TBS$1)));
    this.version = getParametersValue(parameters, VERSION$6, _CertificationRequest.defaultValues(VERSION$6));
    this.subject = getParametersValue(parameters, SUBJECT, _CertificationRequest.defaultValues(SUBJECT));
    this.subjectPublicKeyInfo = getParametersValue(parameters, SPKI, _CertificationRequest.defaultValues(SPKI));
    if (ATTRIBUTES$1 in parameters) {
      this.attributes = getParametersValue(parameters, ATTRIBUTES$1, _CertificationRequest.defaultValues(ATTRIBUTES$1));
    }
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$2, _CertificationRequest.defaultValues(SIGNATURE_ALGORITHM$2));
    this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE, _CertificationRequest.defaultValues(SIGNATURE_VALUE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  get tbs() {
    return BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS$1:
        return EMPTY_BUFFER2;
      case VERSION$6:
        return 0;
      case SUBJECT:
        return new RelativeDistinguishedNames();
      case SPKI:
        return new PublicKeyInfo();
      case ATTRIBUTES$1:
        return [];
      case SIGNATURE_ALGORITHM$2:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      value: [
        CertificationRequestInfo(names.certificationRequestInfo || {}),
        new Sequence({
          name: names.signatureAlgorithm || SIGNATURE_ALGORITHM$2,
          value: [
            new ObjectIdentifier(),
            new Any({
              optional: true
            })
          ]
        }),
        new BitString({
          name: names.signatureValue || SIGNATURE_VALUE
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$f);
    const asn1 = compareSchema(schema, schema, _CertificationRequest.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.CertificationRequestInfo.valueBeforeDecodeView;
    this.version = asn1.result[CSR_INFO_VERSION].valueBlock.valueDec;
    this.subject = new RelativeDistinguishedNames({
      schema: asn1.result[CSR_INFO_SUBJECT]
    });
    this.subjectPublicKeyInfo = new PublicKeyInfo({
      schema: asn1.result[CSR_INFO_SPKI]
    });
    if (CSR_INFO_ATTRS in asn1.result) {
      this.attributes = Array.from(asn1.result[CSR_INFO_ATTRS], (element) => new Attribute({
        schema: element
      }));
    }
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  encodeTBS() {
    const outputArray = [
      new Integer({
        value: this.version
      }),
      this.subject.toSchema(),
      this.subjectPublicKeyInfo.toSchema()
    ];
    if (ATTRIBUTES$1 in this) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: Array.from(this.attributes || [], (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (encodeFlag === false) {
      if (this.tbsView.byteLength === 0) {
        return _CertificationRequest.schema();
      }
      const asn1 = fromBER(this.tbsView);
      AsnError.assert(asn1, "PKCS#10 Certificate Request");
      tbsSchema = asn1.result;
    } else {
      tbsSchema = this.encodeTBS();
    }
    return new Sequence({
      value: [
        tbsSchema,
        this.signatureAlgorithm.toSchema(),
        this.signatureValue
      ]
    });
  }
  toJSON() {
    const object = {
      tbs: Convert.ToHex(this.tbsView),
      version: this.version,
      subject: this.subject.toJSON(),
      subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
    if (ATTRIBUTES$1 in this) {
      object.attributes = Array.from(this.attributes || [], (o2) => o2.toJSON());
    }
    return object;
  }
  async sign(privateKey, hashAlgorithm = "SHA-1", crypto2 = getCrypto(true)) {
    if (!privateKey) {
      throw new Error("Need to provide a private key for signing");
    }
    const signatureParams = await crypto2.getSignatureParameters(privateKey, hashAlgorithm);
    const parameters = signatureParams.parameters;
    this.signatureAlgorithm = signatureParams.signatureAlgorithm;
    this.tbsView = new Uint8Array(this.encodeTBS().toBER());
    const signature = await crypto2.signWithPrivateKey(this.tbsView, privateKey, parameters);
    this.signatureValue = new BitString({
      valueHex: signature
    });
  }
  async verify(crypto2 = getCrypto(true)) {
    return crypto2.verifyWithPublicKey(this.tbsView, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);
  }
  async getPublicKey(parameters, crypto2 = getCrypto(true)) {
    return crypto2.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);
  }
};
CertificationRequest.CLASS_NAME = "CertificationRequest";
var DIGEST_ALGORITHM$1 = "digestAlgorithm";
var DIGEST = "digest";
var CLEAR_PROPS$e = [
  DIGEST_ALGORITHM$1,
  DIGEST
];
var DigestInfo = class _DigestInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.digestAlgorithm = getParametersValue(parameters, DIGEST_ALGORITHM$1, _DigestInfo.defaultValues(DIGEST_ALGORITHM$1));
    this.digest = getParametersValue(parameters, DIGEST, _DigestInfo.defaultValues(DIGEST));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DIGEST_ALGORITHM$1:
        return new AlgorithmIdentifier();
      case DIGEST:
        return new OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case DIGEST_ALGORITHM$1:
        return AlgorithmIdentifier.compareWithDefault("algorithmId", memberValue.algorithmId) && "algorithmParams" in memberValue === false;
      case DIGEST:
        return memberValue.isEqual(_DigestInfo.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.digestAlgorithm || {
          names: {
            blockName: DIGEST_ALGORITHM$1
          }
        }),
        new OctetString({
          name: names.digest || DIGEST
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$e);
    const asn1 = compareSchema(schema, schema, _DigestInfo.schema({
      names: {
        digestAlgorithm: {
          names: {
            blockName: DIGEST_ALGORITHM$1
          }
        },
        digest: DIGEST
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.digestAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.digestAlgorithm
    });
    this.digest = asn1.result.digest;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.digestAlgorithm.toSchema(),
        this.digest
      ]
    });
  }
  toJSON() {
    return {
      digestAlgorithm: this.digestAlgorithm.toJSON(),
      digest: this.digest.toJSON()
    };
  }
};
DigestInfo.CLASS_NAME = "DigestInfo";
var E_CONTENT_TYPE = "eContentType";
var E_CONTENT = "eContent";
var CLEAR_PROPS$d = [
  E_CONTENT_TYPE,
  E_CONTENT
];
var EncapsulatedContentInfo = class _EncapsulatedContentInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.eContentType = getParametersValue(parameters, E_CONTENT_TYPE, _EncapsulatedContentInfo.defaultValues(E_CONTENT_TYPE));
    if (E_CONTENT in parameters) {
      this.eContent = getParametersValue(parameters, E_CONTENT, _EncapsulatedContentInfo.defaultValues(E_CONTENT));
      if (this.eContent.idBlock.tagClass === 1 && this.eContent.idBlock.tagNumber === 4) {
        if (this.eContent.idBlock.isConstructed === false) {
          const constrString = new OctetString({
            idBlock: {
              isConstructed: true
            },
            isConstructed: true
          });
          let offset = 0;
          const viewHex = this.eContent.valueBlock.valueHexView.slice().buffer;
          let length = viewHex.byteLength;
          while (length > 0) {
            const pieceView = new Uint8Array(viewHex, offset, offset + 65536 > viewHex.byteLength ? viewHex.byteLength - offset : 65536);
            const _array = new ArrayBuffer(pieceView.length);
            const _view = new Uint8Array(_array);
            for (let i2 = 0; i2 < _view.length; i2++) {
              _view[i2] = pieceView[i2];
            }
            constrString.valueBlock.value.push(new OctetString({
              valueHex: _array
            }));
            length -= pieceView.length;
            offset += pieceView.length;
          }
          this.eContent = constrString;
        }
      }
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case E_CONTENT_TYPE:
        return EMPTY_STRING2;
      case E_CONTENT:
        return new OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case E_CONTENT_TYPE:
        return memberValue === EMPTY_STRING2;
      case E_CONTENT: {
        if (memberValue.idBlock.tagClass === 1 && memberValue.idBlock.tagNumber === 4) return memberValue.isEqual(_EncapsulatedContentInfo.defaultValues(E_CONTENT));
        return false;
      }
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.eContentType || EMPTY_STRING2
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Any({
              name: names.eContent || EMPTY_STRING2
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$d);
    const asn1 = compareSchema(schema, schema, _EncapsulatedContentInfo.schema({
      names: {
        eContentType: E_CONTENT_TYPE,
        eContent: E_CONTENT
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.eContentType = asn1.result.eContentType.valueBlock.toString();
    if (E_CONTENT in asn1.result) this.eContent = asn1.result.eContent;
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new ObjectIdentifier({
      value: this.eContentType
    }));
    if (this.eContent) {
      if (_EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {
        outputArray.push(new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            this.eContent
          ]
        }));
      }
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      eContentType: this.eContentType
    };
    if (this.eContent && _EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {
      res.eContent = this.eContent.toJSON();
    }
    return res;
  }
};
EncapsulatedContentInfo.CLASS_NAME = "EncapsulatedContentInfo";
var MAC = "mac";
var MAC_SALT = "macSalt";
var ITERATIONS = "iterations";
var CLEAR_PROPS$c = [
  MAC,
  MAC_SALT,
  ITERATIONS
];
var MacData = class _MacData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.mac = getParametersValue(parameters, MAC, _MacData.defaultValues(MAC));
    this.macSalt = getParametersValue(parameters, MAC_SALT, _MacData.defaultValues(MAC_SALT));
    if (ITERATIONS in parameters) {
      this.iterations = getParametersValue(parameters, ITERATIONS, _MacData.defaultValues(ITERATIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case MAC:
        return new DigestInfo();
      case MAC_SALT:
        return new OctetString();
      case ITERATIONS:
        return 1;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case MAC:
        return DigestInfo.compareWithDefault("digestAlgorithm", memberValue.digestAlgorithm) && DigestInfo.compareWithDefault("digest", memberValue.digest);
      case MAC_SALT:
        return memberValue.isEqual(_MacData.defaultValues(memberName));
      case ITERATIONS:
        return memberValue === _MacData.defaultValues(memberName);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      optional: names.optional || true,
      value: [
        DigestInfo.schema(names.mac || {
          names: {
            blockName: MAC
          }
        }),
        new OctetString({
          name: names.macSalt || MAC_SALT
        }),
        new Integer({
          optional: true,
          name: names.iterations || ITERATIONS
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$c);
    const asn1 = compareSchema(schema, schema, _MacData.schema({
      names: {
        mac: {
          names: {
            blockName: MAC
          }
        },
        macSalt: MAC_SALT,
        iterations: ITERATIONS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.mac = new DigestInfo({
      schema: asn1.result.mac
    });
    this.macSalt = asn1.result.macSalt;
    if (ITERATIONS in asn1.result) this.iterations = asn1.result.iterations.valueBlock.valueDec;
  }
  toSchema() {
    const outputArray = [
      this.mac.toSchema(),
      this.macSalt
    ];
    if (this.iterations !== void 0) {
      outputArray.push(new Integer({
        value: this.iterations
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      mac: this.mac.toJSON(),
      macSalt: this.macSalt.toJSON()
    };
    if (this.iterations !== void 0) {
      res.iterations = this.iterations;
    }
    return res;
  }
};
MacData.CLASS_NAME = "MacData";
var HASH_ALGORITHM = "hashAlgorithm";
var HASHED_MESSAGE = "hashedMessage";
var CLEAR_PROPS$b = [
  HASH_ALGORITHM,
  HASHED_MESSAGE
];
var MessageImprint = class _MessageImprint extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM, _MessageImprint.defaultValues(HASH_ALGORITHM));
    this.hashedMessage = getParametersValue(parameters, HASHED_MESSAGE, _MessageImprint.defaultValues(HASHED_MESSAGE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static async create(hashAlgorithm, message2, crypto2 = getCrypto(true)) {
    const hashAlgorithmOID = crypto2.getOIDByAlgorithm({
      name: hashAlgorithm
    }, true, "hashAlgorithm");
    const hashedMessage = await crypto2.digest(hashAlgorithm, message2);
    const res = new _MessageImprint({
      hashAlgorithm: new AlgorithmIdentifier({
        algorithmId: hashAlgorithmOID,
        algorithmParams: new Null()
      }),
      hashedMessage: new OctetString({
        valueHex: hashedMessage
      })
    });
    return res;
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case HASH_ALGORITHM:
        return new AlgorithmIdentifier();
      case HASHED_MESSAGE:
        return new OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case HASH_ALGORITHM:
        return memberValue.algorithmId === EMPTY_STRING2 && "algorithmParams" in memberValue === false;
      case HASHED_MESSAGE:
        return memberValue.isEqual(_MessageImprint.defaultValues(memberName)) === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.hashAlgorithm || {}),
        new OctetString({
          name: names.hashedMessage || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$b);
    const asn1 = compareSchema(schema, schema, _MessageImprint.schema({
      names: {
        hashAlgorithm: {
          names: {
            blockName: HASH_ALGORITHM
          }
        },
        hashedMessage: HASHED_MESSAGE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.hashAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.hashAlgorithm
    });
    this.hashedMessage = asn1.result.hashedMessage;
  }
  toSchema() {
    return new Sequence({
      value: [
        this.hashAlgorithm.toSchema(),
        this.hashedMessage
      ]
    });
  }
  toJSON() {
    return {
      hashAlgorithm: this.hashAlgorithm.toJSON(),
      hashedMessage: this.hashedMessage.toJSON()
    };
  }
};
MessageImprint.CLASS_NAME = "MessageImprint";
var REQ_CERT = "reqCert";
var SINGLE_REQUEST_EXTENSIONS = "singleRequestExtensions";
var CLEAR_PROPS$a = [
  REQ_CERT,
  SINGLE_REQUEST_EXTENSIONS
];
var Request = class _Request extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.reqCert = getParametersValue(parameters, REQ_CERT, _Request.defaultValues(REQ_CERT));
    if (SINGLE_REQUEST_EXTENSIONS in parameters) {
      this.singleRequestExtensions = getParametersValue(parameters, SINGLE_REQUEST_EXTENSIONS, _Request.defaultValues(SINGLE_REQUEST_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case REQ_CERT:
        return new CertID();
      case SINGLE_REQUEST_EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case REQ_CERT:
        return memberValue.isEqual(_Request.defaultValues(memberName));
      case SINGLE_REQUEST_EXTENSIONS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        CertID.schema(names.reqCert || {}),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            Extension.schema(names.extensions || {
              names: {
                blockName: names.singleRequestExtensions || EMPTY_STRING2
              }
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$a);
    const asn1 = compareSchema(schema, schema, _Request.schema({
      names: {
        reqCert: {
          names: {
            blockName: REQ_CERT
          }
        },
        extensions: {
          names: {
            blockName: SINGLE_REQUEST_EXTENSIONS
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.reqCert = new CertID({
      schema: asn1.result.reqCert
    });
    if (SINGLE_REQUEST_EXTENSIONS in asn1.result) {
      this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, (element) => new Extension({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.reqCert.toSchema());
    if (this.singleRequestExtensions) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          new Sequence({
            value: Array.from(this.singleRequestExtensions, (o2) => o2.toSchema())
          })
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      reqCert: this.reqCert.toJSON()
    };
    if (this.singleRequestExtensions) {
      res.singleRequestExtensions = Array.from(this.singleRequestExtensions, (o2) => o2.toJSON());
    }
    return res;
  }
};
Request.CLASS_NAME = "Request";
var TBS = "tbs";
var VERSION$5 = "version";
var REQUESTOR_NAME = "requestorName";
var REQUEST_LIST = "requestList";
var REQUEST_EXTENSIONS = "requestExtensions";
var TBS_REQUEST$1 = "TBSRequest";
var TBS_REQUEST_VERSION = `${TBS_REQUEST$1}.${VERSION$5}`;
var TBS_REQUEST_REQUESTOR_NAME = `${TBS_REQUEST$1}.${REQUESTOR_NAME}`;
var TBS_REQUEST_REQUESTS = `${TBS_REQUEST$1}.requests`;
var TBS_REQUEST_REQUEST_EXTENSIONS = `${TBS_REQUEST$1}.${REQUEST_EXTENSIONS}`;
var CLEAR_PROPS$9 = [
  TBS_REQUEST$1,
  TBS_REQUEST_VERSION,
  TBS_REQUEST_REQUESTOR_NAME,
  TBS_REQUEST_REQUESTS,
  TBS_REQUEST_REQUEST_EXTENSIONS
];
var TBSRequest = class _TBSRequest extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(getParametersValue(parameters, TBS, _TBSRequest.defaultValues(TBS)));
    if (VERSION$5 in parameters) {
      this.version = getParametersValue(parameters, VERSION$5, _TBSRequest.defaultValues(VERSION$5));
    }
    if (REQUESTOR_NAME in parameters) {
      this.requestorName = getParametersValue(parameters, REQUESTOR_NAME, _TBSRequest.defaultValues(REQUESTOR_NAME));
    }
    this.requestList = getParametersValue(parameters, REQUEST_LIST, _TBSRequest.defaultValues(REQUEST_LIST));
    if (REQUEST_EXTENSIONS in parameters) {
      this.requestExtensions = getParametersValue(parameters, REQUEST_EXTENSIONS, _TBSRequest.defaultValues(REQUEST_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  get tbs() {
    return BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS:
        return EMPTY_BUFFER2;
      case VERSION$5:
        return 0;
      case REQUESTOR_NAME:
        return new GeneralName();
      case REQUEST_LIST:
      case REQUEST_EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TBS:
        return memberValue.byteLength === 0;
      case VERSION$5:
        return memberValue === _TBSRequest.defaultValues(memberName);
      case REQUESTOR_NAME:
        return memberValue.type === GeneralName.defaultValues("type") && Object.keys(memberValue.value).length === 0;
      case REQUEST_LIST:
      case REQUEST_EXTENSIONS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || TBS_REQUEST$1,
      value: [
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Integer({
              name: names.TBSRequestVersion || TBS_REQUEST_VERSION
            })
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            GeneralName.schema(names.requestorName || {
              names: {
                blockName: TBS_REQUEST_REQUESTOR_NAME
              }
            })
          ]
        }),
        new Sequence({
          name: names.requestList || "TBSRequest.requestList",
          value: [
            new Repeated({
              name: names.requests || TBS_REQUEST_REQUESTS,
              value: Request.schema(names.requestNames || {})
            })
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: [
            Extensions.schema(names.extensions || {
              names: {
                blockName: names.requestExtensions || TBS_REQUEST_REQUEST_EXTENSIONS
              }
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$9);
    const asn1 = compareSchema(schema, schema, _TBSRequest.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.TBSRequest.valueBeforeDecodeView;
    if (TBS_REQUEST_VERSION in asn1.result) this.version = asn1.result[TBS_REQUEST_VERSION].valueBlock.valueDec;
    if (TBS_REQUEST_REQUESTOR_NAME in asn1.result) this.requestorName = new GeneralName({
      schema: asn1.result[TBS_REQUEST_REQUESTOR_NAME]
    });
    this.requestList = Array.from(asn1.result[TBS_REQUEST_REQUESTS], (element) => new Request({
      schema: element
    }));
    if (TBS_REQUEST_REQUEST_EXTENSIONS in asn1.result) this.requestExtensions = Array.from(asn1.result[TBS_REQUEST_REQUEST_EXTENSIONS].valueBlock.value, (element) => new Extension({
      schema: element
    }));
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (encodeFlag === false) {
      if (this.tbsView.byteLength === 0) return _TBSRequest.schema();
      const asn1 = fromBER(this.tbsView);
      AsnError.assert(asn1, "TBS Request");
      if (!(asn1.result instanceof Sequence)) {
        throw new Error("ASN.1 result should be SEQUENCE");
      }
      tbsSchema = asn1.result;
    } else {
      const outputArray = [];
      if (this.version !== void 0) {
        outputArray.push(new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Integer({
              value: this.version
            })
          ]
        }));
      }
      if (this.requestorName) {
        outputArray.push(new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            this.requestorName.toSchema()
          ]
        }));
      }
      outputArray.push(new Sequence({
        value: Array.from(this.requestList, (o2) => o2.toSchema())
      }));
      if (this.requestExtensions) {
        outputArray.push(new Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: [
            new Sequence({
              value: Array.from(this.requestExtensions, (o2) => o2.toSchema())
            })
          ]
        }));
      }
      tbsSchema = new Sequence({
        value: outputArray
      });
    }
    return tbsSchema;
  }
  toJSON() {
    const res = {};
    if (this.version != void 0) res.version = this.version;
    if (this.requestorName) {
      res.requestorName = this.requestorName.toJSON();
    }
    res.requestList = Array.from(this.requestList, (o2) => o2.toJSON());
    if (this.requestExtensions) {
      res.requestExtensions = Array.from(this.requestExtensions, (o2) => o2.toJSON());
    }
    return res;
  }
};
TBSRequest.CLASS_NAME = "TBSRequest";
var SIGNATURE_ALGORITHM$1 = "signatureAlgorithm";
var SIGNATURE$1 = "signature";
var CERTS = "certs";
var Signature = class _Signature extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$1, _Signature.defaultValues(SIGNATURE_ALGORITHM$1));
    this.signature = getParametersValue(parameters, SIGNATURE$1, _Signature.defaultValues(SIGNATURE$1));
    if (CERTS in parameters) {
      this.certs = getParametersValue(parameters, CERTS, _Signature.defaultValues(CERTS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SIGNATURE_ALGORITHM$1:
        return new AlgorithmIdentifier();
      case SIGNATURE$1:
        return new BitString();
      case CERTS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SIGNATURE_ALGORITHM$1:
        return memberValue.algorithmId === EMPTY_STRING2 && "algorithmParams" in memberValue === false;
      case SIGNATURE$1:
        return memberValue.isEqual(_Signature.defaultValues(memberName));
      case CERTS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),
        new BitString({
          name: names.signature || EMPTY_STRING2
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Sequence({
              value: [
                new Repeated({
                  name: names.certs || EMPTY_STRING2,
                  value: Certificate.schema({})
                })
              ]
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      SIGNATURE_ALGORITHM$1,
      SIGNATURE$1,
      CERTS
    ]);
    const asn1 = compareSchema(schema, schema, _Signature.schema({
      names: {
        signatureAlgorithm: {
          names: {
            blockName: SIGNATURE_ALGORITHM$1
          }
        },
        signature: SIGNATURE$1,
        certs: CERTS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signature = asn1.result.signature;
    if (CERTS in asn1.result) this.certs = Array.from(asn1.result.certs, (element) => new Certificate({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.signatureAlgorithm.toSchema());
    outputArray.push(this.signature);
    if (this.certs) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          new Sequence({
            value: Array.from(this.certs, (o2) => o2.toSchema())
          })
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signature: this.signature.toJSON()
    };
    if (this.certs) {
      res.certs = Array.from(this.certs, (o2) => o2.toJSON());
    }
    return res;
  }
};
Signature.CLASS_NAME = "Signature";
var TBS_REQUEST = "tbsRequest";
var OPTIONAL_SIGNATURE = "optionalSignature";
var CLEAR_PROPS$8 = [
  TBS_REQUEST,
  OPTIONAL_SIGNATURE
];
var OCSPRequest = class _OCSPRequest extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsRequest = getParametersValue(parameters, TBS_REQUEST, _OCSPRequest.defaultValues(TBS_REQUEST));
    if (OPTIONAL_SIGNATURE in parameters) {
      this.optionalSignature = getParametersValue(parameters, OPTIONAL_SIGNATURE, _OCSPRequest.defaultValues(OPTIONAL_SIGNATURE));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS_REQUEST:
        return new TBSRequest();
      case OPTIONAL_SIGNATURE:
        return new Signature();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TBS_REQUEST:
        return TBSRequest.compareWithDefault("tbs", memberValue.tbs) && TBSRequest.compareWithDefault("version", memberValue.version) && TBSRequest.compareWithDefault("requestorName", memberValue.requestorName) && TBSRequest.compareWithDefault("requestList", memberValue.requestList) && TBSRequest.compareWithDefault("requestExtensions", memberValue.requestExtensions);
      case OPTIONAL_SIGNATURE:
        return Signature.compareWithDefault("signatureAlgorithm", memberValue.signatureAlgorithm) && Signature.compareWithDefault("signature", memberValue.signature) && Signature.compareWithDefault("certs", memberValue.certs);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || "OCSPRequest",
      value: [
        TBSRequest.schema(names.tbsRequest || {
          names: {
            blockName: TBS_REQUEST
          }
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            Signature.schema(names.optionalSignature || {
              names: {
                blockName: OPTIONAL_SIGNATURE
              }
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$8);
    const asn1 = compareSchema(schema, schema, _OCSPRequest.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsRequest = new TBSRequest({
      schema: asn1.result.tbsRequest
    });
    if (OPTIONAL_SIGNATURE in asn1.result) this.optionalSignature = new Signature({
      schema: asn1.result.optionalSignature
    });
  }
  toSchema(encodeFlag = false) {
    const outputArray = [];
    outputArray.push(this.tbsRequest.toSchema(encodeFlag));
    if (this.optionalSignature) outputArray.push(new Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      value: [
        this.optionalSignature.toSchema()
      ]
    }));
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      tbsRequest: this.tbsRequest.toJSON()
    };
    if (this.optionalSignature) {
      res.optionalSignature = this.optionalSignature.toJSON();
    }
    return res;
  }
  async createForCertificate(certificate, parameters, crypto2 = getCrypto(true)) {
    const certID = new CertID();
    await certID.createForCertificate(certificate, parameters, crypto2);
    this.tbsRequest.requestList.push(new Request({
      reqCert: certID
    }));
  }
  async sign(privateKey, hashAlgorithm = "SHA-1", crypto2 = getCrypto(true)) {
    ParameterError.assertEmpty(privateKey, "privateKey", "OCSPRequest.sign method");
    if (!this.optionalSignature) {
      throw new Error('Need to create "optionalSignature" field before signing');
    }
    const signatureParams = await crypto2.getSignatureParameters(privateKey, hashAlgorithm);
    const parameters = signatureParams.parameters;
    this.optionalSignature.signatureAlgorithm = signatureParams.signatureAlgorithm;
    const tbs = this.tbsRequest.toSchema(true).toBER(false);
    const signature = await crypto2.signWithPrivateKey(tbs, privateKey, parameters);
    this.optionalSignature.signature = new BitString({
      valueHex: signature
    });
  }
  verify() {
  }
};
OCSPRequest.CLASS_NAME = "OCSPRequest";
var RESPONSE_TYPE = "responseType";
var RESPONSE = "response";
var CLEAR_PROPS$7 = [
  RESPONSE_TYPE,
  RESPONSE
];
var ResponseBytes = class _ResponseBytes extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.responseType = getParametersValue(parameters, RESPONSE_TYPE, _ResponseBytes.defaultValues(RESPONSE_TYPE));
    this.response = getParametersValue(parameters, RESPONSE, _ResponseBytes.defaultValues(RESPONSE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case RESPONSE_TYPE:
        return EMPTY_STRING2;
      case RESPONSE:
        return new OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case RESPONSE_TYPE:
        return memberValue === EMPTY_STRING2;
      case RESPONSE:
        return memberValue.isEqual(_ResponseBytes.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new ObjectIdentifier({
          name: names.responseType || EMPTY_STRING2
        }),
        new OctetString({
          name: names.response || EMPTY_STRING2
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$7);
    const asn1 = compareSchema(schema, schema, _ResponseBytes.schema({
      names: {
        responseType: RESPONSE_TYPE,
        response: RESPONSE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.responseType = asn1.result.responseType.valueBlock.toString();
    this.response = asn1.result.response;
  }
  toSchema() {
    return new Sequence({
      value: [
        new ObjectIdentifier({
          value: this.responseType
        }),
        this.response
      ]
    });
  }
  toJSON() {
    return {
      responseType: this.responseType,
      response: this.response.toJSON()
    };
  }
};
ResponseBytes.CLASS_NAME = "ResponseBytes";
var RESPONSE_STATUS = "responseStatus";
var RESPONSE_BYTES = "responseBytes";
var OCSPResponse = class _OCSPResponse extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.responseStatus = getParametersValue(parameters, RESPONSE_STATUS, _OCSPResponse.defaultValues(RESPONSE_STATUS));
    if (RESPONSE_BYTES in parameters) {
      this.responseBytes = getParametersValue(parameters, RESPONSE_BYTES, _OCSPResponse.defaultValues(RESPONSE_BYTES));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case RESPONSE_STATUS:
        return new Enumerated();
      case RESPONSE_BYTES:
        return new ResponseBytes();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case RESPONSE_STATUS:
        return memberValue.isEqual(_OCSPResponse.defaultValues(memberName));
      case RESPONSE_BYTES:
        return ResponseBytes.compareWithDefault("responseType", memberValue.responseType) && ResponseBytes.compareWithDefault("response", memberValue.response);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || "OCSPResponse",
      value: [
        new Enumerated({
          name: names.responseStatus || RESPONSE_STATUS
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            ResponseBytes.schema(names.responseBytes || {
              names: {
                blockName: RESPONSE_BYTES
              }
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, [
      RESPONSE_STATUS,
      RESPONSE_BYTES
    ]);
    const asn1 = compareSchema(schema, schema, _OCSPResponse.schema());
    AsnError.assertSchema(asn1, this.className);
    this.responseStatus = asn1.result.responseStatus;
    if (RESPONSE_BYTES in asn1.result) this.responseBytes = new ResponseBytes({
      schema: asn1.result.responseBytes
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.responseStatus);
    if (this.responseBytes) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          this.responseBytes.toSchema()
        ]
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      responseStatus: this.responseStatus.toJSON()
    };
    if (this.responseBytes) {
      res.responseBytes = this.responseBytes.toJSON();
    }
    return res;
  }
  async getCertificateStatus(certificate, issuerCertificate, crypto2 = getCrypto(true)) {
    let basicResponse;
    const result = {
      isForCertificate: false,
      status: 2
    };
    if (!this.responseBytes) return result;
    if (this.responseBytes.responseType !== id_PKIX_OCSP_Basic) return result;
    try {
      const asn1Basic = fromBER(this.responseBytes.response.valueBlock.valueHexView);
      AsnError.assert(asn1Basic, "Basic OCSP response");
      basicResponse = new BasicOCSPResponse({
        schema: asn1Basic.result
      });
    } catch (ex) {
      return result;
    }
    return basicResponse.getCertificateStatus(certificate, issuerCertificate, crypto2);
  }
  async sign(privateKey, hashAlgorithm, crypto2 = getCrypto(true)) {
    var _a4;
    if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {
      const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);
      return basicResponse.sign(privateKey, hashAlgorithm, crypto2);
    }
    throw new Error(`Unknown ResponseBytes type: ${((_a4 = this.responseBytes) === null || _a4 === void 0 ? void 0 : _a4.responseType) || "Unknown"}`);
  }
  async verify(issuerCertificate = null, crypto2 = getCrypto(true)) {
    var _a4;
    if (RESPONSE_BYTES in this === false) throw new Error("Empty ResponseBytes field");
    if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {
      const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);
      if (issuerCertificate !== null) {
        if (!basicResponse.certs) {
          basicResponse.certs = [];
        }
        basicResponse.certs.push(issuerCertificate);
      }
      return basicResponse.verify({}, crypto2);
    }
    throw new Error(`Unknown ResponseBytes type: ${((_a4 = this.responseBytes) === null || _a4 === void 0 ? void 0 : _a4.responseType) || "Unknown"}`);
  }
};
OCSPResponse.CLASS_NAME = "OCSPResponse";
var TYPE = "type";
var ATTRIBUTES = "attributes";
var ENCODED_VALUE = "encodedValue";
var CLEAR_PROPS$6 = [
  ATTRIBUTES
];
var SignedAndUnsignedAttributes = class _SignedAndUnsignedAttributes extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = getParametersValue(parameters, TYPE, _SignedAndUnsignedAttributes.defaultValues(TYPE));
    this.attributes = getParametersValue(parameters, ATTRIBUTES, _SignedAndUnsignedAttributes.defaultValues(ATTRIBUTES));
    this.encodedValue = getParametersValue(parameters, ENCODED_VALUE, _SignedAndUnsignedAttributes.defaultValues(ENCODED_VALUE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE:
        return -1;
      case ATTRIBUTES:
        return [];
      case ENCODED_VALUE:
        return EMPTY_BUFFER2;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TYPE:
        return memberValue === _SignedAndUnsignedAttributes.defaultValues(TYPE);
      case ATTRIBUTES:
        return memberValue.length === 0;
      case ENCODED_VALUE:
        return memberValue.byteLength === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Constructed({
      name: names.blockName || EMPTY_STRING2,
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: names.tagNumber || 0
      },
      value: [
        new Repeated({
          name: names.attributes || EMPTY_STRING2,
          value: Attribute.schema()
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$6);
    const asn1 = compareSchema(schema, schema, _SignedAndUnsignedAttributes.schema({
      names: {
        tagNumber: this.type,
        attributes: ATTRIBUTES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.type = asn1.result.idBlock.tagNumber;
    this.encodedValue = BufferSourceConverter.toArrayBuffer(asn1.result.valueBeforeDecodeView);
    const encodedView = new Uint8Array(this.encodedValue);
    encodedView[0] = 49;
    if (ATTRIBUTES in asn1.result === false) {
      if (this.type === 0) throw new Error("Wrong structure of SignedUnsignedAttributes");
      else return;
    }
    this.attributes = Array.from(asn1.result.attributes, (element) => new Attribute({
      schema: element
    }));
  }
  toSchema() {
    if (_SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || _SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes)) throw new Error('Incorrectly initialized "SignedAndUnsignedAttributes" class');
    return new Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: this.type
      },
      value: Array.from(this.attributes, (o2) => o2.toSchema())
    });
  }
  toJSON() {
    if (_SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || _SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes)) throw new Error('Incorrectly initialized "SignedAndUnsignedAttributes" class');
    return {
      type: this.type,
      attributes: Array.from(this.attributes, (o2) => o2.toJSON())
    };
  }
};
SignedAndUnsignedAttributes.CLASS_NAME = "SignedAndUnsignedAttributes";
var VERSION$4 = "version";
var SID = "sid";
var DIGEST_ALGORITHM = "digestAlgorithm";
var SIGNED_ATTRS = "signedAttrs";
var SIGNATURE_ALGORITHM = "signatureAlgorithm";
var SIGNATURE = "signature";
var UNSIGNED_ATTRS = "unsignedAttrs";
var SIGNER_INFO = "SignerInfo";
var SIGNER_INFO_VERSION = `${SIGNER_INFO}.${VERSION$4}`;
var SIGNER_INFO_SID = `${SIGNER_INFO}.${SID}`;
var SIGNER_INFO_DIGEST_ALGORITHM = `${SIGNER_INFO}.${DIGEST_ALGORITHM}`;
var SIGNER_INFO_SIGNED_ATTRS = `${SIGNER_INFO}.${SIGNED_ATTRS}`;
var SIGNER_INFO_SIGNATURE_ALGORITHM = `${SIGNER_INFO}.${SIGNATURE_ALGORITHM}`;
var SIGNER_INFO_SIGNATURE = `${SIGNER_INFO}.${SIGNATURE}`;
var SIGNER_INFO_UNSIGNED_ATTRS = `${SIGNER_INFO}.${UNSIGNED_ATTRS}`;
var CLEAR_PROPS$5 = [
  SIGNER_INFO_VERSION,
  SIGNER_INFO_SID,
  SIGNER_INFO_DIGEST_ALGORITHM,
  SIGNER_INFO_SIGNED_ATTRS,
  SIGNER_INFO_SIGNATURE_ALGORITHM,
  SIGNER_INFO_SIGNATURE,
  SIGNER_INFO_UNSIGNED_ATTRS
];
var SignerInfo = class _SignerInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$4, _SignerInfo.defaultValues(VERSION$4));
    this.sid = getParametersValue(parameters, SID, _SignerInfo.defaultValues(SID));
    this.digestAlgorithm = getParametersValue(parameters, DIGEST_ALGORITHM, _SignerInfo.defaultValues(DIGEST_ALGORITHM));
    if (SIGNED_ATTRS in parameters) {
      this.signedAttrs = getParametersValue(parameters, SIGNED_ATTRS, _SignerInfo.defaultValues(SIGNED_ATTRS));
    }
    this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM, _SignerInfo.defaultValues(SIGNATURE_ALGORITHM));
    this.signature = getParametersValue(parameters, SIGNATURE, _SignerInfo.defaultValues(SIGNATURE));
    if (UNSIGNED_ATTRS in parameters) {
      this.unsignedAttrs = getParametersValue(parameters, UNSIGNED_ATTRS, _SignerInfo.defaultValues(UNSIGNED_ATTRS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$4:
        return 0;
      case SID:
        return new Any();
      case DIGEST_ALGORITHM:
        return new AlgorithmIdentifier();
      case SIGNED_ATTRS:
        return new SignedAndUnsignedAttributes({
          type: 0
        });
      case SIGNATURE_ALGORITHM:
        return new AlgorithmIdentifier();
      case SIGNATURE:
        return new OctetString();
      case UNSIGNED_ATTRS:
        return new SignedAndUnsignedAttributes({
          type: 1
        });
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$4:
        return _SignerInfo.defaultValues(VERSION$4) === memberValue;
      case SID:
        return memberValue instanceof Any;
      case DIGEST_ALGORITHM:
        if (memberValue instanceof AlgorithmIdentifier === false) return false;
        return memberValue.isEqual(_SignerInfo.defaultValues(DIGEST_ALGORITHM));
      case SIGNED_ATTRS:
        return SignedAndUnsignedAttributes.compareWithDefault("type", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault("attributes", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault("encodedValue", memberValue.encodedValue);
      case SIGNATURE_ALGORITHM:
        if (memberValue instanceof AlgorithmIdentifier === false) return false;
        return memberValue.isEqual(_SignerInfo.defaultValues(SIGNATURE_ALGORITHM));
      case SIGNATURE:
      case UNSIGNED_ATTRS:
        return SignedAndUnsignedAttributes.compareWithDefault("type", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault("attributes", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault("encodedValue", memberValue.encodedValue);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: SIGNER_INFO,
      value: [
        new Integer({
          name: names.version || SIGNER_INFO_VERSION
        }),
        new Choice({
          value: [
            IssuerAndSerialNumber.schema(names.sidSchema || {
              names: {
                blockName: SIGNER_INFO_SID
              }
            }),
            new Choice({
              value: [
                new Constructed({
                  optional: true,
                  name: names.sid || SIGNER_INFO_SID,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                  },
                  value: [
                    new OctetString()
                  ]
                }),
                new Primitive({
                  optional: true,
                  name: names.sid || SIGNER_INFO_SID,
                  idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                  }
                })
              ]
            })
          ]
        }),
        AlgorithmIdentifier.schema(names.digestAlgorithm || {
          names: {
            blockName: SIGNER_INFO_DIGEST_ALGORITHM
          }
        }),
        SignedAndUnsignedAttributes.schema(names.signedAttrs || {
          names: {
            blockName: SIGNER_INFO_SIGNED_ATTRS,
            tagNumber: 0
          }
        }),
        AlgorithmIdentifier.schema(names.signatureAlgorithm || {
          names: {
            blockName: SIGNER_INFO_SIGNATURE_ALGORITHM
          }
        }),
        new OctetString({
          name: names.signature || SIGNER_INFO_SIGNATURE
        }),
        SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {
          names: {
            blockName: SIGNER_INFO_UNSIGNED_ATTRS,
            tagNumber: 1
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$5);
    const asn1 = compareSchema(schema, schema, _SignerInfo.schema());
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result[SIGNER_INFO_VERSION].valueBlock.valueDec;
    const currentSid = asn1.result[SIGNER_INFO_SID];
    if (currentSid.idBlock.tagClass === 1) this.sid = new IssuerAndSerialNumber({
      schema: currentSid
    });
    else this.sid = currentSid;
    this.digestAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result[SIGNER_INFO_DIGEST_ALGORITHM]
    });
    if (SIGNER_INFO_SIGNED_ATTRS in asn1.result) this.signedAttrs = new SignedAndUnsignedAttributes({
      type: 0,
      schema: asn1.result[SIGNER_INFO_SIGNED_ATTRS]
    });
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result[SIGNER_INFO_SIGNATURE_ALGORITHM]
    });
    this.signature = asn1.result[SIGNER_INFO_SIGNATURE];
    if (SIGNER_INFO_UNSIGNED_ATTRS in asn1.result) this.unsignedAttrs = new SignedAndUnsignedAttributes({
      type: 1,
      schema: asn1.result[SIGNER_INFO_UNSIGNED_ATTRS]
    });
  }
  toSchema() {
    if (_SignerInfo.compareWithDefault(SID, this.sid)) throw new Error('Incorrectly initialized "SignerInfo" class');
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.version
    }));
    if (this.sid instanceof IssuerAndSerialNumber) outputArray.push(this.sid.toSchema());
    else outputArray.push(this.sid);
    outputArray.push(this.digestAlgorithm.toSchema());
    if (this.signedAttrs) {
      if (_SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) outputArray.push(this.signedAttrs.toSchema());
    }
    outputArray.push(this.signatureAlgorithm.toSchema());
    outputArray.push(this.signature);
    if (this.unsignedAttrs) {
      if (_SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) outputArray.push(this.unsignedAttrs.toSchema());
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    if (_SignerInfo.compareWithDefault(SID, this.sid)) {
      throw new Error('Incorrectly initialized "SignerInfo" class');
    }
    const res = {
      version: this.version,
      digestAlgorithm: this.digestAlgorithm.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signature: this.signature.toJSON()
    };
    if (!(this.sid instanceof Any)) res.sid = this.sid.toJSON();
    if (this.signedAttrs && _SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) {
      res.signedAttrs = this.signedAttrs.toJSON();
    }
    if (this.unsignedAttrs && _SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) {
      res.unsignedAttrs = this.unsignedAttrs.toJSON();
    }
    return res;
  }
};
SignerInfo.CLASS_NAME = "SignerInfo";
var VERSION$3 = "version";
var POLICY = "policy";
var MESSAGE_IMPRINT$1 = "messageImprint";
var SERIAL_NUMBER = "serialNumber";
var GEN_TIME = "genTime";
var ORDERING = "ordering";
var NONCE$1 = "nonce";
var ACCURACY = "accuracy";
var TSA = "tsa";
var EXTENSIONS$1 = "extensions";
var TST_INFO = "TSTInfo";
var TST_INFO_VERSION = `${TST_INFO}.${VERSION$3}`;
var TST_INFO_POLICY = `${TST_INFO}.${POLICY}`;
var TST_INFO_MESSAGE_IMPRINT = `${TST_INFO}.${MESSAGE_IMPRINT$1}`;
var TST_INFO_SERIAL_NUMBER = `${TST_INFO}.${SERIAL_NUMBER}`;
var TST_INFO_GEN_TIME = `${TST_INFO}.${GEN_TIME}`;
var TST_INFO_ACCURACY = `${TST_INFO}.${ACCURACY}`;
var TST_INFO_ORDERING = `${TST_INFO}.${ORDERING}`;
var TST_INFO_NONCE = `${TST_INFO}.${NONCE$1}`;
var TST_INFO_TSA = `${TST_INFO}.${TSA}`;
var TST_INFO_EXTENSIONS = `${TST_INFO}.${EXTENSIONS$1}`;
var CLEAR_PROPS$4 = [
  TST_INFO_VERSION,
  TST_INFO_POLICY,
  TST_INFO_MESSAGE_IMPRINT,
  TST_INFO_SERIAL_NUMBER,
  TST_INFO_GEN_TIME,
  TST_INFO_ACCURACY,
  TST_INFO_ORDERING,
  TST_INFO_NONCE,
  TST_INFO_TSA,
  TST_INFO_EXTENSIONS
];
var TSTInfo = class _TSTInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$3, _TSTInfo.defaultValues(VERSION$3));
    this.policy = getParametersValue(parameters, POLICY, _TSTInfo.defaultValues(POLICY));
    this.messageImprint = getParametersValue(parameters, MESSAGE_IMPRINT$1, _TSTInfo.defaultValues(MESSAGE_IMPRINT$1));
    this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER, _TSTInfo.defaultValues(SERIAL_NUMBER));
    this.genTime = getParametersValue(parameters, GEN_TIME, _TSTInfo.defaultValues(GEN_TIME));
    if (ACCURACY in parameters) {
      this.accuracy = getParametersValue(parameters, ACCURACY, _TSTInfo.defaultValues(ACCURACY));
    }
    if (ORDERING in parameters) {
      this.ordering = getParametersValue(parameters, ORDERING, _TSTInfo.defaultValues(ORDERING));
    }
    if (NONCE$1 in parameters) {
      this.nonce = getParametersValue(parameters, NONCE$1, _TSTInfo.defaultValues(NONCE$1));
    }
    if (TSA in parameters) {
      this.tsa = getParametersValue(parameters, TSA, _TSTInfo.defaultValues(TSA));
    }
    if (EXTENSIONS$1 in parameters) {
      this.extensions = getParametersValue(parameters, EXTENSIONS$1, _TSTInfo.defaultValues(EXTENSIONS$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$3:
        return 0;
      case POLICY:
        return EMPTY_STRING2;
      case MESSAGE_IMPRINT$1:
        return new MessageImprint();
      case SERIAL_NUMBER:
        return new Integer();
      case GEN_TIME:
        return new Date(0, 0, 0);
      case ACCURACY:
        return new Accuracy();
      case ORDERING:
        return false;
      case NONCE$1:
        return new Integer();
      case TSA:
        return new GeneralName();
      case EXTENSIONS$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$3:
      case POLICY:
      case GEN_TIME:
      case ORDERING:
        return memberValue === _TSTInfo.defaultValues(ORDERING);
      case MESSAGE_IMPRINT$1:
        return MessageImprint.compareWithDefault(HASH_ALGORITHM, memberValue.hashAlgorithm) && MessageImprint.compareWithDefault(HASHED_MESSAGE, memberValue.hashedMessage);
      case SERIAL_NUMBER:
      case NONCE$1:
        return memberValue.isEqual(_TSTInfo.defaultValues(NONCE$1));
      case ACCURACY:
        return Accuracy.compareWithDefault(SECONDS, memberValue.seconds) && Accuracy.compareWithDefault(MILLIS, memberValue.millis) && Accuracy.compareWithDefault(MICROS, memberValue.micros);
      case TSA:
        return GeneralName.compareWithDefault(TYPE$4, memberValue.type) && GeneralName.compareWithDefault(VALUE$5, memberValue.value);
      case EXTENSIONS$1:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || TST_INFO,
      value: [
        new Integer({
          name: names.version || TST_INFO_VERSION
        }),
        new ObjectIdentifier({
          name: names.policy || TST_INFO_POLICY
        }),
        MessageImprint.schema(names.messageImprint || {
          names: {
            blockName: TST_INFO_MESSAGE_IMPRINT
          }
        }),
        new Integer({
          name: names.serialNumber || TST_INFO_SERIAL_NUMBER
        }),
        new GeneralizedTime({
          name: names.genTime || TST_INFO_GEN_TIME
        }),
        Accuracy.schema(names.accuracy || {
          names: {
            blockName: TST_INFO_ACCURACY
          }
        }),
        new Boolean2({
          name: names.ordering || TST_INFO_ORDERING,
          optional: true
        }),
        new Integer({
          name: names.nonce || TST_INFO_NONCE,
          optional: true
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            GeneralName.schema(names.tsa || {
              names: {
                blockName: TST_INFO_TSA
              }
            })
          ]
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [
            new Repeated({
              name: names.extensions || TST_INFO_EXTENSIONS,
              value: Extension.schema(names.extension || {})
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$4);
    const asn1 = compareSchema(schema, schema, _TSTInfo.schema());
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result[TST_INFO_VERSION].valueBlock.valueDec;
    this.policy = asn1.result[TST_INFO_POLICY].valueBlock.toString();
    this.messageImprint = new MessageImprint({
      schema: asn1.result[TST_INFO_MESSAGE_IMPRINT]
    });
    this.serialNumber = asn1.result[TST_INFO_SERIAL_NUMBER];
    this.genTime = asn1.result[TST_INFO_GEN_TIME].toDate();
    if (TST_INFO_ACCURACY in asn1.result) this.accuracy = new Accuracy({
      schema: asn1.result[TST_INFO_ACCURACY]
    });
    if (TST_INFO_ORDERING in asn1.result) this.ordering = asn1.result[TST_INFO_ORDERING].valueBlock.value;
    if (TST_INFO_NONCE in asn1.result) this.nonce = asn1.result[TST_INFO_NONCE];
    if (TST_INFO_TSA in asn1.result) this.tsa = new GeneralName({
      schema: asn1.result[TST_INFO_TSA]
    });
    if (TST_INFO_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TST_INFO_EXTENSIONS], (element) => new Extension({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.version
    }));
    outputArray.push(new ObjectIdentifier({
      value: this.policy
    }));
    outputArray.push(this.messageImprint.toSchema());
    outputArray.push(this.serialNumber);
    outputArray.push(new GeneralizedTime({
      valueDate: this.genTime
    }));
    if (this.accuracy) outputArray.push(this.accuracy.toSchema());
    if (this.ordering !== void 0) outputArray.push(new Boolean2({
      value: this.ordering
    }));
    if (this.nonce) outputArray.push(this.nonce);
    if (this.tsa) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [
          this.tsa.toSchema()
        ]
      }));
    }
    if (this.extensions) {
      outputArray.push(new Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.extensions, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      policy: this.policy,
      messageImprint: this.messageImprint.toJSON(),
      serialNumber: this.serialNumber.toJSON(),
      genTime: this.genTime
    };
    if (this.accuracy) res.accuracy = this.accuracy.toJSON();
    if (this.ordering !== void 0) res.ordering = this.ordering;
    if (this.nonce) res.nonce = this.nonce.toJSON();
    if (this.tsa) res.tsa = this.tsa.toJSON();
    if (this.extensions) res.extensions = Array.from(this.extensions, (o2) => o2.toJSON());
    return res;
  }
  async verify(params, crypto2 = getCrypto(true)) {
    if (!params.data) {
      throw new Error('"data" is a mandatory attribute for TST_INFO verification');
    }
    const data = params.data;
    if (params.notBefore) {
      if (this.genTime < params.notBefore) throw new Error("Generation time for TSTInfo object is less than notBefore value");
    }
    if (params.notAfter) {
      if (this.genTime > params.notAfter) throw new Error("Generation time for TSTInfo object is more than notAfter value");
    }
    const shaAlgorithm = crypto2.getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId, true, "MessageImprint.hashAlgorithm");
    const hash = await crypto2.digest(shaAlgorithm.name, new Uint8Array(data));
    return BufferSourceConverter.isEqual(hash, this.messageImprint.hashedMessage.valueBlock.valueHexView);
  }
};
TSTInfo.CLASS_NAME = "TSTInfo";
var VERSION$2 = "version";
var DIGEST_ALGORITHMS = "digestAlgorithms";
var ENCAP_CONTENT_INFO = "encapContentInfo";
var CERTIFICATES = "certificates";
var CRLS = "crls";
var SIGNER_INFOS = "signerInfos";
var OCSPS = "ocsps";
var SIGNED_DATA = "SignedData";
var SIGNED_DATA_VERSION = `${SIGNED_DATA}.${VERSION$2}`;
var SIGNED_DATA_DIGEST_ALGORITHMS = `${SIGNED_DATA}.${DIGEST_ALGORITHMS}`;
var SIGNED_DATA_ENCAP_CONTENT_INFO = `${SIGNED_DATA}.${ENCAP_CONTENT_INFO}`;
var SIGNED_DATA_CERTIFICATES = `${SIGNED_DATA}.${CERTIFICATES}`;
var SIGNED_DATA_CRLS = `${SIGNED_DATA}.${CRLS}`;
var SIGNED_DATA_SIGNER_INFOS = `${SIGNED_DATA}.${SIGNER_INFOS}`;
var CLEAR_PROPS$3 = [
  SIGNED_DATA_VERSION,
  SIGNED_DATA_DIGEST_ALGORITHMS,
  SIGNED_DATA_ENCAP_CONTENT_INFO,
  SIGNED_DATA_CERTIFICATES,
  SIGNED_DATA_CRLS,
  SIGNED_DATA_SIGNER_INFOS
];
var SignedDataVerifyError = class extends Error {
  constructor({ message: message2, code = 0, date = /* @__PURE__ */ new Date(), signatureVerified = null, signerCertificate = null, signerCertificateVerified = null, timestampSerial = null, certificatePath = [] }) {
    super(message2);
    this.name = "SignedDataVerifyError";
    this.date = date;
    this.code = code;
    this.timestampSerial = timestampSerial;
    this.signatureVerified = signatureVerified;
    this.signerCertificate = signerCertificate;
    this.signerCertificateVerified = signerCertificateVerified;
    this.certificatePath = certificatePath;
  }
};
var SignedData = class _SignedData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$2, _SignedData.defaultValues(VERSION$2));
    this.digestAlgorithms = getParametersValue(parameters, DIGEST_ALGORITHMS, _SignedData.defaultValues(DIGEST_ALGORITHMS));
    this.encapContentInfo = getParametersValue(parameters, ENCAP_CONTENT_INFO, _SignedData.defaultValues(ENCAP_CONTENT_INFO));
    if (CERTIFICATES in parameters) {
      this.certificates = getParametersValue(parameters, CERTIFICATES, _SignedData.defaultValues(CERTIFICATES));
    }
    if (CRLS in parameters) {
      this.crls = getParametersValue(parameters, CRLS, _SignedData.defaultValues(CRLS));
    }
    if (OCSPS in parameters) {
      this.ocsps = getParametersValue(parameters, OCSPS, _SignedData.defaultValues(OCSPS));
    }
    this.signerInfos = getParametersValue(parameters, SIGNER_INFOS, _SignedData.defaultValues(SIGNER_INFOS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$2:
        return 0;
      case DIGEST_ALGORITHMS:
        return [];
      case ENCAP_CONTENT_INFO:
        return new EncapsulatedContentInfo();
      case CERTIFICATES:
        return [];
      case CRLS:
        return [];
      case OCSPS:
        return [];
      case SIGNER_INFOS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$2:
        return memberValue === _SignedData.defaultValues(VERSION$2);
      case ENCAP_CONTENT_INFO:
        return EncapsulatedContentInfo.compareWithDefault("eContentType", memberValue.eContentType) && EncapsulatedContentInfo.compareWithDefault("eContent", memberValue.eContent);
      case DIGEST_ALGORITHMS:
      case CERTIFICATES:
      case CRLS:
      case OCSPS:
      case SIGNER_INFOS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    if (names.optional === void 0) {
      names.optional = false;
    }
    return new Sequence({
      name: names.blockName || SIGNED_DATA,
      optional: names.optional,
      value: [
        new Integer({
          name: names.version || SIGNED_DATA_VERSION
        }),
        new Set2({
          value: [
            new Repeated({
              name: names.digestAlgorithms || SIGNED_DATA_DIGEST_ALGORITHMS,
              value: AlgorithmIdentifier.schema()
            })
          ]
        }),
        EncapsulatedContentInfo.schema(names.encapContentInfo || {
          names: {
            blockName: SIGNED_DATA_ENCAP_CONTENT_INFO
          }
        }),
        new Constructed({
          name: names.certificates || SIGNED_DATA_CERTIFICATES,
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: CertificateSet.schema().valueBlock.value
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: RevocationInfoChoices.schema(names.crls || {
            names: {
              crls: SIGNED_DATA_CRLS
            }
          }).valueBlock.value
        }),
        new Set2({
          value: [
            new Repeated({
              name: names.signerInfos || SIGNED_DATA_SIGNER_INFOS,
              value: SignerInfo.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$3);
    const asn1 = compareSchema(schema, schema, _SignedData.schema());
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result[SIGNED_DATA_VERSION].valueBlock.valueDec;
    if (SIGNED_DATA_DIGEST_ALGORITHMS in asn1.result) this.digestAlgorithms = Array.from(asn1.result[SIGNED_DATA_DIGEST_ALGORITHMS], (algorithm) => new AlgorithmIdentifier({
      schema: algorithm
    }));
    this.encapContentInfo = new EncapsulatedContentInfo({
      schema: asn1.result[SIGNED_DATA_ENCAP_CONTENT_INFO]
    });
    if (SIGNED_DATA_CERTIFICATES in asn1.result) {
      const certificateSet = new CertificateSet({
        schema: new Set2({
          value: asn1.result[SIGNED_DATA_CERTIFICATES].valueBlock.value
        })
      });
      this.certificates = certificateSet.certificates.slice(0);
    }
    if (SIGNED_DATA_CRLS in asn1.result) {
      this.crls = Array.from(asn1.result[SIGNED_DATA_CRLS], (crl) => {
        if (crl.idBlock.tagClass === 1) return new CertificateRevocationList({
          schema: crl
        });
        crl.idBlock.tagClass = 1;
        crl.idBlock.tagNumber = 16;
        return new OtherRevocationInfoFormat({
          schema: crl
        });
      });
    }
    if (SIGNED_DATA_SIGNER_INFOS in asn1.result) this.signerInfos = Array.from(asn1.result[SIGNED_DATA_SIGNER_INFOS], (signerInfoSchema) => new SignerInfo({
      schema: signerInfoSchema
    }));
  }
  toSchema(encodeFlag = false) {
    const outputArray = [];
    if (this.certificates && this.certificates.length && this.certificates.some((o2) => o2 instanceof OtherCertificateFormat) || this.crls && this.crls.length && this.crls.some((o2) => o2 instanceof OtherRevocationInfoFormat)) {
      this.version = 5;
    } else if (this.certificates && this.certificates.length && this.certificates.some((o2) => o2 instanceof AttributeCertificateV2)) {
      this.version = 4;
    } else if (this.certificates && this.certificates.length && this.certificates.some((o2) => o2 instanceof AttributeCertificateV1) || this.signerInfos.some((o2) => o2.version === 3) || this.encapContentInfo.eContentType !== _SignedData.ID_DATA) {
      this.version = 3;
    } else {
      this.version = 1;
    }
    outputArray.push(new Integer({
      value: this.version
    }));
    outputArray.push(new Set2({
      value: Array.from(this.digestAlgorithms, (algorithm) => algorithm.toSchema())
    }));
    outputArray.push(this.encapContentInfo.toSchema());
    if (this.certificates) {
      const certificateSet = new CertificateSet({
        certificates: this.certificates
      });
      const certificateSetSchema = certificateSet.toSchema();
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: certificateSetSchema.valueBlock.value
      }));
    }
    if (this.crls) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.crls, (crl) => {
          if (crl instanceof OtherRevocationInfoFormat) {
            const crlSchema = crl.toSchema();
            crlSchema.idBlock.tagClass = 3;
            crlSchema.idBlock.tagNumber = 1;
            return crlSchema;
          }
          return crl.toSchema(encodeFlag);
        })
      }));
    }
    outputArray.push(new Set2({
      value: Array.from(this.signerInfos, (signerInfo) => signerInfo.toSchema())
    }));
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      digestAlgorithms: Array.from(this.digestAlgorithms, (algorithm) => algorithm.toJSON()),
      encapContentInfo: this.encapContentInfo.toJSON(),
      signerInfos: Array.from(this.signerInfos, (signerInfo) => signerInfo.toJSON())
    };
    if (this.certificates) {
      res.certificates = Array.from(this.certificates, (certificate) => certificate.toJSON());
    }
    if (this.crls) {
      res.crls = Array.from(this.crls, (crl) => crl.toJSON());
    }
    return res;
  }
  async verify({ signer = -1, data = EMPTY_BUFFER2, trustedCerts = [], checkDate = /* @__PURE__ */ new Date(), checkChain = false, passedWhenNotRevValues = false, extendedMode = false, findOrigin = null, findIssuer = null } = {}, crypto2 = getCrypto(true)) {
    let signerCert = null;
    let timestampSerial = null;
    try {
      let messageDigestValue = EMPTY_BUFFER2;
      let shaAlgorithm = EMPTY_STRING2;
      let certificatePath = [];
      const signerInfo = this.signerInfos[signer];
      if (!signerInfo) {
        throw new SignedDataVerifyError({
          date: checkDate,
          code: 1,
          message: "Unable to get signer by supplied index"
        });
      }
      if (!this.certificates) {
        throw new SignedDataVerifyError({
          date: checkDate,
          code: 2,
          message: "No certificates attached to this signed data"
        });
      }
      if (signerInfo.sid instanceof IssuerAndSerialNumber) {
        for (const certificate of this.certificates) {
          if (!(certificate instanceof Certificate)) continue;
          if (certificate.issuer.isEqual(signerInfo.sid.issuer) && certificate.serialNumber.isEqual(signerInfo.sid.serialNumber)) {
            signerCert = certificate;
            break;
          }
        }
      } else {
        const sid = signerInfo.sid;
        const keyId = sid.idBlock.isConstructed ? sid.valueBlock.value[0].valueBlock.valueHex : sid.valueBlock.valueHex;
        for (const certificate of this.certificates) {
          if (!(certificate instanceof Certificate)) {
            continue;
          }
          const digest = await crypto2.digest({
            name: "sha-1"
          }, certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
          if (isEqualBuffer(digest, keyId)) {
            signerCert = certificate;
            break;
          }
        }
      }
      if (!signerCert) {
        throw new SignedDataVerifyError({
          date: checkDate,
          code: 3,
          message: "Unable to find signer certificate"
        });
      }
      if (this.encapContentInfo.eContentType === id_eContentType_TSTInfo) {
        if (!this.encapContentInfo.eContent) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 15,
            message: "Error during verification: TSTInfo eContent is empty",
            signatureVerified: null,
            signerCertificate: signerCert,
            timestampSerial,
            signerCertificateVerified: true
          });
        }
        let tstInfo;
        try {
          tstInfo = TSTInfo.fromBER(this.encapContentInfo.eContent.valueBlock.valueHexView);
        } catch (ex) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 15,
            message: "Error during verification: TSTInfo wrong ASN.1 schema ",
            signatureVerified: null,
            signerCertificate: signerCert,
            timestampSerial,
            signerCertificateVerified: true
          });
        }
        checkDate = tstInfo.genTime;
        timestampSerial = tstInfo.serialNumber.valueBlock.valueHexView.slice();
        if (data.byteLength === 0) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 4,
            message: "Missed detached data input array"
          });
        }
        if (!await tstInfo.verify({
          data
        }, crypto2)) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 15,
            message: "Error during verification: TSTInfo verification is failed",
            signatureVerified: false,
            signerCertificate: signerCert,
            timestampSerial,
            signerCertificateVerified: true
          });
        }
      }
      if (checkChain) {
        const certs = this.certificates.filter((certificate) => certificate instanceof Certificate && !!checkCA(certificate, signerCert));
        const chainParams = {
          checkDate,
          certs,
          trustedCerts
        };
        if (findIssuer) {
          chainParams.findIssuer = findIssuer;
        }
        if (findOrigin) {
          chainParams.findOrigin = findOrigin;
        }
        const chainEngine = new CertificateChainValidationEngine(chainParams);
        chainEngine.certs.push(signerCert);
        if (this.crls) {
          for (const crl of this.crls) {
            if ("thisUpdate" in crl) chainEngine.crls.push(crl);
            else {
              if (crl.otherRevInfoFormat === id_PKIX_OCSP_Basic) chainEngine.ocsps.push(new BasicOCSPResponse({
                schema: crl.otherRevInfo
              }));
            }
          }
        }
        if (this.ocsps) {
          chainEngine.ocsps.push(...this.ocsps);
        }
        const verificationResult = await chainEngine.verify({
          passedWhenNotRevValues
        }, crypto2).catch((e2) => {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 5,
            message: `Validation of signer's certificate failed with error: ${e2 instanceof Object ? e2.resultMessage : e2}`,
            signerCertificate: signerCert,
            signerCertificateVerified: false
          });
        });
        if (verificationResult.certificatePath) {
          certificatePath = verificationResult.certificatePath;
        }
        if (!verificationResult.result) throw new SignedDataVerifyError({
          date: checkDate,
          code: 5,
          message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,
          signerCertificate: signerCert,
          signerCertificateVerified: false
        });
      }
      const signerInfoHashAlgorithm = crypto2.getAlgorithmByOID(signerInfo.digestAlgorithm.algorithmId);
      if (!("name" in signerInfoHashAlgorithm)) {
        throw new SignedDataVerifyError({
          date: checkDate,
          code: 7,
          message: `Unsupported signature algorithm: ${signerInfo.digestAlgorithm.algorithmId}`,
          signerCertificate: signerCert,
          signerCertificateVerified: true
        });
      }
      shaAlgorithm = signerInfoHashAlgorithm.name;
      const eContent = this.encapContentInfo.eContent;
      if (eContent) {
        if (eContent.idBlock.tagClass === 1 && eContent.idBlock.tagNumber === 4) {
          data = eContent.getValue();
        } else data = eContent.valueBlock.valueBeforeDecodeView;
      } else {
        if (data.byteLength === 0) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 8,
            message: "Missed detached data input array",
            signerCertificate: signerCert,
            signerCertificateVerified: true
          });
        }
      }
      if (signerInfo.signedAttrs) {
        let foundContentType = false;
        let foundMessageDigest = false;
        for (const attribute of signerInfo.signedAttrs.attributes) {
          if (attribute.type === "1.2.840.113549.1.9.3") foundContentType = true;
          if (attribute.type === "1.2.840.113549.1.9.4") {
            foundMessageDigest = true;
            messageDigestValue = attribute.values[0].valueBlock.valueHex;
          }
          if (foundContentType && foundMessageDigest) break;
        }
        if (foundContentType === false) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 9,
            message: 'Attribute "content-type" is a mandatory attribute for "signed attributes"',
            signerCertificate: signerCert,
            signerCertificateVerified: true
          });
        }
        if (foundMessageDigest === false) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 10,
            message: 'Attribute "message-digest" is a mandatory attribute for "signed attributes"',
            signatureVerified: null,
            signerCertificate: signerCert,
            signerCertificateVerified: true
          });
        }
      }
      if (signerInfo.signedAttrs) {
        const messageDigest = await crypto2.digest(shaAlgorithm, new Uint8Array(data));
        if (!isEqualBuffer(messageDigest, messageDigestValue)) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 15,
            message: "Error during verification: Message digest doesn't match",
            signatureVerified: null,
            signerCertificate: signerCert,
            timestampSerial,
            signerCertificateVerified: true
          });
        }
        data = signerInfo.signedAttrs.encodedValue;
      }
      const verifyResult = await crypto2.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerCert.signatureAlgorithm, shaAlgorithm);
      if (extendedMode) {
        return {
          date: checkDate,
          code: 14,
          message: EMPTY_STRING2,
          signatureVerified: verifyResult,
          signerCertificate: signerCert,
          timestampSerial,
          signerCertificateVerified: true,
          certificatePath
        };
      } else {
        return verifyResult;
      }
    } catch (e2) {
      if (e2 instanceof SignedDataVerifyError) {
        throw e2;
      }
      throw new SignedDataVerifyError({
        date: checkDate,
        code: 15,
        message: `Error during verification: ${e2 instanceof Error ? e2.message : e2}`,
        signatureVerified: null,
        signerCertificate: signerCert,
        timestampSerial,
        signerCertificateVerified: true
      });
    }
  }
  async sign(privateKey, signerIndex, hashAlgorithm = "SHA-1", data = EMPTY_BUFFER2, crypto2 = getCrypto(true)) {
    if (!privateKey) throw new Error("Need to provide a private key for signing");
    const hashAlgorithmOID = crypto2.getOIDByAlgorithm({
      name: hashAlgorithm
    }, true, "hashAlgorithm");
    if (this.digestAlgorithms.filter((algorithm) => algorithm.algorithmId === hashAlgorithmOID).length === 0) {
      this.digestAlgorithms.push(new AlgorithmIdentifier({
        algorithmId: hashAlgorithmOID,
        algorithmParams: new Null()
      }));
    }
    const signerInfo = this.signerInfos[signerIndex];
    if (!signerInfo) {
      throw new RangeError("SignerInfo index is out of range");
    }
    signerInfo.digestAlgorithm = new AlgorithmIdentifier({
      algorithmId: hashAlgorithmOID,
      algorithmParams: new Null()
    });
    const signatureParams = await crypto2.getSignatureParameters(privateKey, hashAlgorithm);
    const parameters = signatureParams.parameters;
    signerInfo.signatureAlgorithm = signatureParams.signatureAlgorithm;
    if (signerInfo.signedAttrs) {
      if (signerInfo.signedAttrs.encodedValue.byteLength !== 0) data = signerInfo.signedAttrs.encodedValue;
      else {
        data = signerInfo.signedAttrs.toSchema().toBER();
        const view = BufferSourceConverter.toUint8Array(data);
        view[0] = 49;
      }
    } else {
      const eContent = this.encapContentInfo.eContent;
      if (eContent) {
        if (eContent.idBlock.tagClass === 1 && eContent.idBlock.tagNumber === 4) {
          data = eContent.getValue();
        } else data = eContent.valueBlock.valueBeforeDecodeView;
      } else {
        if (data.byteLength === 0) throw new Error("Missed detached data input array");
      }
    }
    const signature = await crypto2.signWithPrivateKey(data, privateKey, parameters);
    signerInfo.signature = new OctetString({
      valueHex: signature
    });
  }
};
SignedData.CLASS_NAME = "SignedData";
SignedData.ID_DATA = id_ContentType_Data;
var VERSION$1 = "version";
var AUTH_SAFE = "authSafe";
var MAC_DATA = "macData";
var PARSED_VALUE = "parsedValue";
var CLERA_PROPS = [
  VERSION$1,
  AUTH_SAFE,
  MAC_DATA
];
var PFX = class _PFX extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION$1, _PFX.defaultValues(VERSION$1));
    this.authSafe = getParametersValue(parameters, AUTH_SAFE, _PFX.defaultValues(AUTH_SAFE));
    if (MAC_DATA in parameters) {
      this.macData = getParametersValue(parameters, MAC_DATA, _PFX.defaultValues(MAC_DATA));
    }
    if (PARSED_VALUE in parameters) {
      this.parsedValue = getParametersValue(parameters, PARSED_VALUE, _PFX.defaultValues(PARSED_VALUE));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$1:
        return 3;
      case AUTH_SAFE:
        return new ContentInfo();
      case MAC_DATA:
        return new MacData();
      case PARSED_VALUE:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$1:
        return memberValue === _PFX.defaultValues(memberName);
      case AUTH_SAFE:
        return ContentInfo.compareWithDefault("contentType", memberValue.contentType) && ContentInfo.compareWithDefault("content", memberValue.content);
      case MAC_DATA:
        return MacData.compareWithDefault("mac", memberValue.mac) && MacData.compareWithDefault("macSalt", memberValue.macSalt) && MacData.compareWithDefault("iterations", memberValue.iterations);
      case PARSED_VALUE:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.version || VERSION$1
        }),
        ContentInfo.schema(names.authSafe || {
          names: {
            blockName: AUTH_SAFE
          }
        }),
        MacData.schema(names.macData || {
          names: {
            blockName: MAC_DATA,
            optional: true
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLERA_PROPS);
    const asn1 = compareSchema(schema, schema, _PFX.schema({
      names: {
        version: VERSION$1,
        authSafe: {
          names: {
            blockName: AUTH_SAFE
          }
        },
        macData: {
          names: {
            blockName: MAC_DATA
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.authSafe = new ContentInfo({
      schema: asn1.result.authSafe
    });
    if (MAC_DATA in asn1.result) this.macData = new MacData({
      schema: asn1.result.macData
    });
  }
  toSchema() {
    const outputArray = [
      new Integer({
        value: this.version
      }),
      this.authSafe.toSchema()
    ];
    if (this.macData) {
      outputArray.push(this.macData.toSchema());
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const output = {
      version: this.version,
      authSafe: this.authSafe.toJSON()
    };
    if (this.macData) {
      output.macData = this.macData.toJSON();
    }
    return output;
  }
  async makeInternalValues(parameters = {}, crypto2 = getCrypto(true)) {
    ArgumentError.assert(parameters, "parameters", "object");
    if (!this.parsedValue) {
      throw new Error('Please call "parseValues" function first in order to make "parsedValue" data');
    }
    ParameterError.assertEmpty(this.parsedValue.integrityMode, "integrityMode", "parsedValue");
    ParameterError.assertEmpty(this.parsedValue.authenticatedSafe, "authenticatedSafe", "parsedValue");
    switch (this.parsedValue.integrityMode) {
      case 0:
        {
          if (!("iterations" in parameters)) throw new ParameterError("iterations");
          ParameterError.assertEmpty(parameters.pbkdf2HashAlgorithm, "pbkdf2HashAlgorithm");
          ParameterError.assertEmpty(parameters.hmacHashAlgorithm, "hmacHashAlgorithm");
          ParameterError.assertEmpty(parameters.password, "password");
          const saltBuffer = new ArrayBuffer(64);
          const saltView = new Uint8Array(saltBuffer);
          crypto2.getRandomValues(saltView);
          const data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);
          this.authSafe = new ContentInfo({
            contentType: ContentInfo.DATA,
            content: new OctetString({
              valueHex: data
            })
          });
          const result = await crypto2.stampDataWithPassword({
            password: parameters.password,
            hashAlgorithm: parameters.hmacHashAlgorithm,
            salt: saltBuffer,
            iterationCount: parameters.iterations,
            contentToStamp: data
          });
          this.macData = new MacData({
            mac: new DigestInfo({
              digestAlgorithm: new AlgorithmIdentifier({
                algorithmId: crypto2.getOIDByAlgorithm({
                  name: parameters.hmacHashAlgorithm
                }, true, "hmacHashAlgorithm")
              }),
              digest: new OctetString({
                valueHex: result
              })
            }),
            macSalt: new OctetString({
              valueHex: saltBuffer
            }),
            iterations: parameters.iterations
          });
        }
        break;
      case 1:
        {
          if (!("signingCertificate" in parameters)) {
            throw new ParameterError("signingCertificate");
          }
          ParameterError.assertEmpty(parameters.privateKey, "privateKey");
          ParameterError.assertEmpty(parameters.hashAlgorithm, "hashAlgorithm");
          const toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);
          const cmsSigned = new SignedData({
            version: 1,
            encapContentInfo: new EncapsulatedContentInfo({
              eContentType: "1.2.840.113549.1.7.1",
              eContent: new OctetString({
                valueHex: toBeSigned
              })
            }),
            certificates: [
              parameters.signingCertificate
            ]
          });
          const result = await crypto2.digest({
            name: parameters.hashAlgorithm
          }, new Uint8Array(toBeSigned));
          const signedAttr = [];
          signedAttr.push(new Attribute({
            type: "1.2.840.113549.1.9.3",
            values: [
              new ObjectIdentifier({
                value: "1.2.840.113549.1.7.1"
              })
            ]
          }));
          signedAttr.push(new Attribute({
            type: "1.2.840.113549.1.9.5",
            values: [
              new UTCTime({
                valueDate: /* @__PURE__ */ new Date()
              })
            ]
          }));
          signedAttr.push(new Attribute({
            type: "1.2.840.113549.1.9.4",
            values: [
              new OctetString({
                valueHex: result
              })
            ]
          }));
          cmsSigned.signerInfos.push(new SignerInfo({
            version: 1,
            sid: new IssuerAndSerialNumber({
              issuer: parameters.signingCertificate.issuer,
              serialNumber: parameters.signingCertificate.serialNumber
            }),
            signedAttrs: new SignedAndUnsignedAttributes({
              type: 0,
              attributes: signedAttr
            })
          }));
          await cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm, void 0, crypto2);
          this.authSafe = new ContentInfo({
            contentType: "1.2.840.113549.1.7.2",
            content: cmsSigned.toSchema(true)
          });
        }
        break;
      default:
        throw new Error(`Parameter "integrityMode" has unknown value: ${this.parsedValue.integrityMode}`);
    }
  }
  async parseInternalValues(parameters, crypto2 = getCrypto(true)) {
    ArgumentError.assert(parameters, "parameters", "object");
    if (parameters.checkIntegrity === void 0) {
      parameters.checkIntegrity = true;
    }
    this.parsedValue = {};
    switch (this.authSafe.contentType) {
      case ContentInfo.DATA:
        {
          ParameterError.assertEmpty(parameters.password, "password");
          this.parsedValue.integrityMode = 0;
          ArgumentError.assert(this.authSafe.content, "authSafe.content", OctetString);
          const authSafeContent = this.authSafe.content.getValue();
          this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(authSafeContent);
          if (parameters.checkIntegrity) {
            if (!this.macData) {
              throw new Error('Absent "macData" value, can not check PKCS#12 data integrity');
            }
            const hashAlgorithm = crypto2.getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId, true, "digestAlgorithm");
            const result = await crypto2.verifyDataStampedWithPassword({
              password: parameters.password,
              hashAlgorithm: hashAlgorithm.name,
              salt: BufferSourceConverter.toArrayBuffer(this.macData.macSalt.valueBlock.valueHexView),
              iterationCount: this.macData.iterations || 1,
              contentToVerify: authSafeContent,
              signatureToVerify: BufferSourceConverter.toArrayBuffer(this.macData.mac.digest.valueBlock.valueHexView)
            });
            if (!result) {
              throw new Error("Integrity for the PKCS#12 data is broken!");
            }
          }
        }
        break;
      case ContentInfo.SIGNED_DATA:
        {
          this.parsedValue.integrityMode = 1;
          const cmsSigned = new SignedData({
            schema: this.authSafe.content
          });
          const eContent = cmsSigned.encapContentInfo.eContent;
          ParameterError.assert(eContent, "eContent", "cmsSigned.encapContentInfo");
          ArgumentError.assert(eContent, "eContent", OctetString);
          const data = eContent.getValue();
          this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(data);
          const ok = await cmsSigned.verify({
            signer: 0,
            checkChain: false
          }, crypto2);
          if (!ok) {
            throw new Error("Integrity for the PKCS#12 data is broken!");
          }
        }
        break;
      default:
        throw new Error(`Incorrect value for "this.authSafe.contentType": ${this.authSafe.contentType}`);
    }
  }
};
PFX.CLASS_NAME = "PFX";
var STATUS$1 = "status";
var STATUS_STRINGS = "statusStrings";
var FAIL_INFO = "failInfo";
var CLEAR_PROPS$2 = [
  STATUS$1,
  STATUS_STRINGS,
  FAIL_INFO
];
var PKIStatus;
(function(PKIStatus2) {
  PKIStatus2[PKIStatus2["granted"] = 0] = "granted";
  PKIStatus2[PKIStatus2["grantedWithMods"] = 1] = "grantedWithMods";
  PKIStatus2[PKIStatus2["rejection"] = 2] = "rejection";
  PKIStatus2[PKIStatus2["waiting"] = 3] = "waiting";
  PKIStatus2[PKIStatus2["revocationWarning"] = 4] = "revocationWarning";
  PKIStatus2[PKIStatus2["revocationNotification"] = 5] = "revocationNotification";
})(PKIStatus || (PKIStatus = {}));
var PKIStatusInfo = class _PKIStatusInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.status = getParametersValue(parameters, STATUS$1, _PKIStatusInfo.defaultValues(STATUS$1));
    if (STATUS_STRINGS in parameters) {
      this.statusStrings = getParametersValue(parameters, STATUS_STRINGS, _PKIStatusInfo.defaultValues(STATUS_STRINGS));
    }
    if (FAIL_INFO in parameters) {
      this.failInfo = getParametersValue(parameters, FAIL_INFO, _PKIStatusInfo.defaultValues(FAIL_INFO));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case STATUS$1:
        return 2;
      case STATUS_STRINGS:
        return [];
      case FAIL_INFO:
        return new BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case STATUS$1:
        return memberValue === _PKIStatusInfo.defaultValues(memberName);
      case STATUS_STRINGS:
        return memberValue.length === 0;
      case FAIL_INFO:
        return memberValue.isEqual(_PKIStatusInfo.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || EMPTY_STRING2,
      value: [
        new Integer({
          name: names.status || EMPTY_STRING2
        }),
        new Sequence({
          optional: true,
          value: [
            new Repeated({
              name: names.statusStrings || EMPTY_STRING2,
              value: new Utf8String()
            })
          ]
        }),
        new BitString({
          name: names.failInfo || EMPTY_STRING2,
          optional: true
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$2);
    const asn1 = compareSchema(schema, schema, _PKIStatusInfo.schema({
      names: {
        status: STATUS$1,
        statusStrings: STATUS_STRINGS,
        failInfo: FAIL_INFO
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    const _status = asn1.result.status;
    if (_status.valueBlock.isHexOnly === true || _status.valueBlock.valueDec < 0 || _status.valueBlock.valueDec > 5) throw new Error('PKIStatusInfo "status" has invalid value');
    this.status = _status.valueBlock.valueDec;
    if (STATUS_STRINGS in asn1.result) this.statusStrings = asn1.result.statusStrings;
    if (FAIL_INFO in asn1.result) this.failInfo = asn1.result.failInfo;
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.status
    }));
    if (this.statusStrings) {
      outputArray.push(new Sequence({
        optional: true,
        value: this.statusStrings
      }));
    }
    if (this.failInfo) {
      outputArray.push(this.failInfo);
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      status: this.status
    };
    if (this.statusStrings) {
      res.statusStrings = Array.from(this.statusStrings, (o2) => o2.toJSON());
    }
    if (this.failInfo) {
      res.failInfo = this.failInfo.toJSON();
    }
    return res;
  }
};
PKIStatusInfo.CLASS_NAME = "PKIStatusInfo";
var VERSION = "version";
var MESSAGE_IMPRINT = "messageImprint";
var REQ_POLICY = "reqPolicy";
var NONCE = "nonce";
var CERT_REQ = "certReq";
var EXTENSIONS = "extensions";
var TIME_STAMP_REQ = "TimeStampReq";
var TIME_STAMP_REQ_VERSION = `${TIME_STAMP_REQ}.${VERSION}`;
var TIME_STAMP_REQ_MESSAGE_IMPRINT = `${TIME_STAMP_REQ}.${MESSAGE_IMPRINT}`;
var TIME_STAMP_REQ_POLICY = `${TIME_STAMP_REQ}.${REQ_POLICY}`;
var TIME_STAMP_REQ_NONCE = `${TIME_STAMP_REQ}.${NONCE}`;
var TIME_STAMP_REQ_CERT_REQ = `${TIME_STAMP_REQ}.${CERT_REQ}`;
var TIME_STAMP_REQ_EXTENSIONS = `${TIME_STAMP_REQ}.${EXTENSIONS}`;
var CLEAR_PROPS$1 = [
  TIME_STAMP_REQ_VERSION,
  TIME_STAMP_REQ_MESSAGE_IMPRINT,
  TIME_STAMP_REQ_POLICY,
  TIME_STAMP_REQ_NONCE,
  TIME_STAMP_REQ_CERT_REQ,
  TIME_STAMP_REQ_EXTENSIONS
];
var TimeStampReq = class _TimeStampReq extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = getParametersValue(parameters, VERSION, _TimeStampReq.defaultValues(VERSION));
    this.messageImprint = getParametersValue(parameters, MESSAGE_IMPRINT, _TimeStampReq.defaultValues(MESSAGE_IMPRINT));
    if (REQ_POLICY in parameters) {
      this.reqPolicy = getParametersValue(parameters, REQ_POLICY, _TimeStampReq.defaultValues(REQ_POLICY));
    }
    if (NONCE in parameters) {
      this.nonce = getParametersValue(parameters, NONCE, _TimeStampReq.defaultValues(NONCE));
    }
    if (CERT_REQ in parameters) {
      this.certReq = getParametersValue(parameters, CERT_REQ, _TimeStampReq.defaultValues(CERT_REQ));
    }
    if (EXTENSIONS in parameters) {
      this.extensions = getParametersValue(parameters, EXTENSIONS, _TimeStampReq.defaultValues(EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION:
        return 0;
      case MESSAGE_IMPRINT:
        return new MessageImprint();
      case REQ_POLICY:
        return EMPTY_STRING2;
      case NONCE:
        return new Integer();
      case CERT_REQ:
        return false;
      case EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION:
      case REQ_POLICY:
      case CERT_REQ:
        return memberValue === _TimeStampReq.defaultValues(memberName);
      case MESSAGE_IMPRINT:
        return MessageImprint.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && MessageImprint.compareWithDefault("hashedMessage", memberValue.hashedMessage);
      case NONCE:
        return memberValue.isEqual(_TimeStampReq.defaultValues(memberName));
      case EXTENSIONS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || TIME_STAMP_REQ,
      value: [
        new Integer({
          name: names.version || TIME_STAMP_REQ_VERSION
        }),
        MessageImprint.schema(names.messageImprint || {
          names: {
            blockName: TIME_STAMP_REQ_MESSAGE_IMPRINT
          }
        }),
        new ObjectIdentifier({
          name: names.reqPolicy || TIME_STAMP_REQ_POLICY,
          optional: true
        }),
        new Integer({
          name: names.nonce || TIME_STAMP_REQ_NONCE,
          optional: true
        }),
        new Boolean2({
          name: names.certReq || TIME_STAMP_REQ_CERT_REQ,
          optional: true
        }),
        new Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [
            new Repeated({
              name: names.extensions || TIME_STAMP_REQ_EXTENSIONS,
              value: Extension.schema()
            })
          ]
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS$1);
    const asn1 = compareSchema(schema, schema, _TimeStampReq.schema());
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result[TIME_STAMP_REQ_VERSION].valueBlock.valueDec;
    this.messageImprint = new MessageImprint({
      schema: asn1.result[TIME_STAMP_REQ_MESSAGE_IMPRINT]
    });
    if (TIME_STAMP_REQ_POLICY in asn1.result) this.reqPolicy = asn1.result[TIME_STAMP_REQ_POLICY].valueBlock.toString();
    if (TIME_STAMP_REQ_NONCE in asn1.result) this.nonce = asn1.result[TIME_STAMP_REQ_NONCE];
    if (TIME_STAMP_REQ_CERT_REQ in asn1.result) this.certReq = asn1.result[TIME_STAMP_REQ_CERT_REQ].valueBlock.value;
    if (TIME_STAMP_REQ_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TIME_STAMP_REQ_EXTENSIONS], (element) => new Extension({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new Integer({
      value: this.version
    }));
    outputArray.push(this.messageImprint.toSchema());
    if (this.reqPolicy) outputArray.push(new ObjectIdentifier({
      value: this.reqPolicy
    }));
    if (this.nonce) outputArray.push(this.nonce);
    if (CERT_REQ in this && _TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false) outputArray.push(new Boolean2({
      value: this.certReq
    }));
    if (this.extensions) {
      outputArray.push(new Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: Array.from(this.extensions, (o2) => o2.toSchema())
      }));
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      messageImprint: this.messageImprint.toJSON()
    };
    if (this.reqPolicy !== void 0) res.reqPolicy = this.reqPolicy;
    if (this.nonce !== void 0) res.nonce = this.nonce.toJSON();
    if (this.certReq !== void 0 && _TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false) res.certReq = this.certReq;
    if (this.extensions) {
      res.extensions = Array.from(this.extensions, (o2) => o2.toJSON());
    }
    return res;
  }
};
TimeStampReq.CLASS_NAME = "TimeStampReq";
var STATUS = "status";
var TIME_STAMP_TOKEN = "timeStampToken";
var TIME_STAMP_RESP = "TimeStampResp";
var TIME_STAMP_RESP_STATUS = `${TIME_STAMP_RESP}.${STATUS}`;
var TIME_STAMP_RESP_TOKEN = `${TIME_STAMP_RESP}.${TIME_STAMP_TOKEN}`;
var CLEAR_PROPS = [
  TIME_STAMP_RESP_STATUS,
  TIME_STAMP_RESP_TOKEN
];
var TimeStampResp = class _TimeStampResp extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.status = getParametersValue(parameters, STATUS, _TimeStampResp.defaultValues(STATUS));
    if (TIME_STAMP_TOKEN in parameters) {
      this.timeStampToken = getParametersValue(parameters, TIME_STAMP_TOKEN, _TimeStampResp.defaultValues(TIME_STAMP_TOKEN));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case STATUS:
        return new PKIStatusInfo();
      case TIME_STAMP_TOKEN:
        return new ContentInfo();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case STATUS:
        return PKIStatusInfo.compareWithDefault(STATUS, memberValue.status) && "statusStrings" in memberValue === false && "failInfo" in memberValue === false;
      case TIME_STAMP_TOKEN:
        return memberValue.contentType === EMPTY_STRING2 && memberValue.content instanceof Any;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
      name: names.blockName || TIME_STAMP_RESP,
      value: [
        PKIStatusInfo.schema(names.status || {
          names: {
            blockName: TIME_STAMP_RESP_STATUS
          }
        }),
        ContentInfo.schema(names.timeStampToken || {
          names: {
            blockName: TIME_STAMP_RESP_TOKEN,
            optional: true
          }
        })
      ]
    });
  }
  fromSchema(schema) {
    clearProps(schema, CLEAR_PROPS);
    const asn1 = compareSchema(schema, schema, _TimeStampResp.schema());
    AsnError.assertSchema(asn1, this.className);
    this.status = new PKIStatusInfo({
      schema: asn1.result[TIME_STAMP_RESP_STATUS]
    });
    if (TIME_STAMP_RESP_TOKEN in asn1.result) this.timeStampToken = new ContentInfo({
      schema: asn1.result[TIME_STAMP_RESP_TOKEN]
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.status.toSchema());
    if (this.timeStampToken) {
      outputArray.push(this.timeStampToken.toSchema());
    }
    return new Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      status: this.status.toJSON()
    };
    if (this.timeStampToken) {
      res.timeStampToken = this.timeStampToken.toJSON();
    }
    return res;
  }
  async sign(privateKey, hashAlgorithm, crypto2 = getCrypto(true)) {
    this.assertContentType();
    const signed = new SignedData({
      schema: this.timeStampToken.content
    });
    return signed.sign(privateKey, 0, hashAlgorithm, void 0, crypto2);
  }
  async verify(verificationParameters = {
    signer: 0,
    trustedCerts: [],
    data: EMPTY_BUFFER2
  }, crypto2 = getCrypto(true)) {
    this.assertContentType();
    const signed = new SignedData({
      schema: this.timeStampToken.content
    });
    return signed.verify(verificationParameters, crypto2);
  }
  assertContentType() {
    if (!this.timeStampToken) {
      throw new Error("timeStampToken is absent in TSP response");
    }
    if (this.timeStampToken.contentType !== id_ContentType_SignedData) {
      throw new Error(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);
    }
  }
};
TimeStampResp.CLASS_NAME = "TimeStampResp";
function initCryptoEngine() {
  if (typeof self !== "undefined") {
    if ("crypto" in self) {
      let engineName = "webcrypto";
      if ("webkitSubtle" in self.crypto) {
        engineName = "safari";
      }
      setEngine(engineName, new CryptoEngine({
        name: engineName,
        crypto
      }));
    }
  } else if (typeof crypto !== "undefined" && "webcrypto" in crypto) {
    const name = "NodeJS ^15";
    const nodeCrypto = crypto.webcrypto;
    setEngine(name, new CryptoEngine({
      name,
      crypto: nodeCrypto
    }));
  }
}
initCryptoEngine();

// deno:https://unpkg.com/asn1js@3.0.5/build/index.es.js?module
function assertBigInt2() {
  if (typeof BigInt === "undefined") {
    throw new Error("BigInt is not defined. Your environment doesn't implement BigInt.");
  }
}
function concat3(buffers) {
  let outputLength = 0;
  let prevLength = 0;
  for (let i2 = 0; i2 < buffers.length; i2++) {
    const buffer = buffers[i2];
    outputLength += buffer.byteLength;
  }
  const retView = new Uint8Array(outputLength);
  for (let i2 = 0; i2 < buffers.length; i2++) {
    const buffer = buffers[i2];
    retView.set(new Uint8Array(buffer), prevLength);
    prevLength += buffer.byteLength;
  }
  return retView.buffer;
}
function checkBufferParams2(baseBlock, inputBuffer, inputOffset, inputLength) {
  if (!(inputBuffer instanceof Uint8Array)) {
    baseBlock.error = "Wrong parameter: inputBuffer must be 'Uint8Array'";
    return false;
  }
  if (!inputBuffer.byteLength) {
    baseBlock.error = "Wrong parameter: inputBuffer has zero length";
    return false;
  }
  if (inputOffset < 0) {
    baseBlock.error = "Wrong parameter: inputOffset less than zero";
    return false;
  }
  if (inputLength < 0) {
    baseBlock.error = "Wrong parameter: inputLength less than zero";
    return false;
  }
  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {
    baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
    return false;
  }
  return true;
}
var ViewWriter2 = class {
  constructor() {
    this.items = [];
  }
  write(buf) {
    this.items.push(buf);
  }
  final() {
    return concat3(this.items);
  }
};
var powers22 = [
  new Uint8Array([
    1
  ])
];
var digitsString2 = "0123456789";
var EMPTY_STRING3 = "";
var EMPTY_BUFFER3 = new ArrayBuffer(0);
var EMPTY_VIEW2 = new Uint8Array(0);
var END_OF_CONTENT_NAME2 = "EndOfContent";
var OCTET_STRING_NAME2 = "OCTET STRING";
var BIT_STRING_NAME2 = "BIT STRING";
function HexBlock2(BaseClass) {
  var _a4;
  return _a4 = class Some extends BaseClass {
    constructor(...args) {
      var _a5;
      super(...args);
      const params = args[0] || {};
      this.isHexOnly = (_a5 = params.isHexOnly) !== null && _a5 !== void 0 ? _a5 : false;
      this.valueHexView = params.valueHex ? BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW2;
    }
    get valueHex() {
      return this.valueHexView.slice().buffer;
    }
    set valueHex(value) {
      this.valueHexView = new Uint8Array(value);
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
      const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
      if (!checkBufferParams2(this, view, inputOffset, inputLength)) {
        return -1;
      }
      const endLength = inputOffset + inputLength;
      this.valueHexView = view.subarray(inputOffset, endLength);
      if (!this.valueHexView.length) {
        this.warnings.push("Zero buffer length");
        return inputOffset;
      }
      this.blockLength = inputLength;
      return endLength;
    }
    toBER(sizeOnly = false) {
      if (!this.isHexOnly) {
        this.error = "Flag 'isHexOnly' is not set, abort";
        return EMPTY_BUFFER3;
      }
      if (sizeOnly) {
        return new ArrayBuffer(this.valueHexView.byteLength);
      }
      return this.valueHexView.byteLength === this.valueHexView.buffer.byteLength ? this.valueHexView.buffer : this.valueHexView.slice().buffer;
    }
    toJSON() {
      return {
        ...super.toJSON(),
        isHexOnly: this.isHexOnly,
        valueHex: Convert.ToHex(this.valueHexView)
      };
    }
  }, _a4.NAME = "hexBlock", _a4;
}
var LocalBaseBlock2 = class {
  constructor({ blockLength = 0, error: error2 = EMPTY_STRING3, warnings = [], valueBeforeDecode = EMPTY_VIEW2 } = {}) {
    this.blockLength = blockLength;
    this.error = error2;
    this.warnings = warnings;
    this.valueBeforeDecodeView = BufferSourceConverter.toUint8Array(valueBeforeDecode);
  }
  static blockName() {
    return this.NAME;
  }
  get valueBeforeDecode() {
    return this.valueBeforeDecodeView.slice().buffer;
  }
  set valueBeforeDecode(value) {
    this.valueBeforeDecodeView = new Uint8Array(value);
  }
  toJSON() {
    return {
      blockName: this.constructor.NAME,
      blockLength: this.blockLength,
      error: this.error,
      warnings: this.warnings,
      valueBeforeDecode: Convert.ToHex(this.valueBeforeDecodeView)
    };
  }
};
LocalBaseBlock2.NAME = "baseBlock";
var ValueBlock2 = class extends LocalBaseBlock2 {
  fromBER(inputBuffer, inputOffset, inputLength) {
    throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
  }
  toBER(sizeOnly, writer) {
    throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
  }
};
ValueBlock2.NAME = "valueBlock";
var LocalIdentificationBlock2 = class extends HexBlock2(LocalBaseBlock2) {
  constructor({ idBlock = {} } = {}) {
    var _a4, _b, _c, _d;
    super();
    if (idBlock) {
      this.isHexOnly = (_a4 = idBlock.isHexOnly) !== null && _a4 !== void 0 ? _a4 : false;
      this.valueHexView = idBlock.valueHex ? BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW2;
      this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;
      this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;
      this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;
    } else {
      this.tagClass = -1;
      this.tagNumber = -1;
      this.isConstructed = false;
    }
  }
  toBER(sizeOnly = false) {
    let firstOctet = 0;
    switch (this.tagClass) {
      case 1:
        firstOctet |= 0;
        break;
      case 2:
        firstOctet |= 64;
        break;
      case 3:
        firstOctet |= 128;
        break;
      case 4:
        firstOctet |= 192;
        break;
      default:
        this.error = "Unknown tag class";
        return EMPTY_BUFFER3;
    }
    if (this.isConstructed) firstOctet |= 32;
    if (this.tagNumber < 31 && !this.isHexOnly) {
      const retView2 = new Uint8Array(1);
      if (!sizeOnly) {
        let number = this.tagNumber;
        number &= 31;
        firstOctet |= number;
        retView2[0] = firstOctet;
      }
      return retView2.buffer;
    }
    if (!this.isHexOnly) {
      const encodedBuf = utilToBase(this.tagNumber, 7);
      const encodedView = new Uint8Array(encodedBuf);
      const size = encodedBuf.byteLength;
      const retView2 = new Uint8Array(size + 1);
      retView2[0] = firstOctet | 31;
      if (!sizeOnly) {
        for (let i2 = 0; i2 < size - 1; i2++) retView2[i2 + 1] = encodedView[i2] | 128;
        retView2[size] = encodedView[size - 1];
      }
      return retView2.buffer;
    }
    const retView = new Uint8Array(this.valueHexView.byteLength + 1);
    retView[0] = firstOctet | 31;
    if (!sizeOnly) {
      const curView = this.valueHexView;
      for (let i2 = 0; i2 < curView.length - 1; i2++) retView[i2 + 1] = curView[i2] | 128;
      retView[this.valueHexView.byteLength] = curView[curView.length - 1];
    }
    return retView.buffer;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams2(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    if (intBuffer.length === 0) {
      this.error = "Zero buffer length";
      return -1;
    }
    const tagClassMask = intBuffer[0] & 192;
    switch (tagClassMask) {
      case 0:
        this.tagClass = 1;
        break;
      case 64:
        this.tagClass = 2;
        break;
      case 128:
        this.tagClass = 3;
        break;
      case 192:
        this.tagClass = 4;
        break;
      default:
        this.error = "Unknown tag class";
        return -1;
    }
    this.isConstructed = (intBuffer[0] & 32) === 32;
    this.isHexOnly = false;
    const tagNumberMask = intBuffer[0] & 31;
    if (tagNumberMask !== 31) {
      this.tagNumber = tagNumberMask;
      this.blockLength = 1;
    } else {
      let count = 1;
      let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);
      let tagNumberBufferMaxLength = 255;
      while (intBuffer[count] & 128) {
        intTagNumberBuffer[count - 1] = intBuffer[count] & 127;
        count++;
        if (count >= intBuffer.length) {
          this.error = "End of input reached before message was fully decoded";
          return -1;
        }
        if (count === tagNumberBufferMaxLength) {
          tagNumberBufferMaxLength += 255;
          const tempBufferView2 = new Uint8Array(tagNumberBufferMaxLength);
          for (let i2 = 0; i2 < intTagNumberBuffer.length; i2++) tempBufferView2[i2] = intTagNumberBuffer[i2];
          intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);
        }
      }
      this.blockLength = count + 1;
      intTagNumberBuffer[count - 1] = intBuffer[count] & 127;
      const tempBufferView = new Uint8Array(count);
      for (let i2 = 0; i2 < count; i2++) tempBufferView[i2] = intTagNumberBuffer[i2];
      intTagNumberBuffer = this.valueHexView = new Uint8Array(count);
      intTagNumberBuffer.set(tempBufferView);
      if (this.blockLength <= 9) this.tagNumber = utilFromBase(intTagNumberBuffer, 7);
      else {
        this.isHexOnly = true;
        this.warnings.push("Tag too long, represented as hex-coded");
      }
    }
    if (this.tagClass === 1 && this.isConstructed) {
      switch (this.tagNumber) {
        case 1:
        case 2:
        case 5:
        case 6:
        case 9:
        case 13:
        case 14:
        case 23:
        case 24:
        case 31:
        case 32:
        case 33:
        case 34:
          this.error = "Constructed encoding used for primitive type";
          return -1;
      }
    }
    return inputOffset + this.blockLength;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      tagClass: this.tagClass,
      tagNumber: this.tagNumber,
      isConstructed: this.isConstructed
    };
  }
};
LocalIdentificationBlock2.NAME = "identificationBlock";
var LocalLengthBlock2 = class extends LocalBaseBlock2 {
  constructor({ lenBlock = {} } = {}) {
    var _a4, _b, _c;
    super();
    this.isIndefiniteForm = (_a4 = lenBlock.isIndefiniteForm) !== null && _a4 !== void 0 ? _a4 : false;
    this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;
    this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const view = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams2(this, view, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);
    if (intBuffer.length === 0) {
      this.error = "Zero buffer length";
      return -1;
    }
    if (intBuffer[0] === 255) {
      this.error = "Length block 0xFF is reserved by standard";
      return -1;
    }
    this.isIndefiniteForm = intBuffer[0] === 128;
    if (this.isIndefiniteForm) {
      this.blockLength = 1;
      return inputOffset + this.blockLength;
    }
    this.longFormUsed = !!(intBuffer[0] & 128);
    if (this.longFormUsed === false) {
      this.length = intBuffer[0];
      this.blockLength = 1;
      return inputOffset + this.blockLength;
    }
    const count = intBuffer[0] & 127;
    if (count > 8) {
      this.error = "Too big integer";
      return -1;
    }
    if (count + 1 > intBuffer.length) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    const lenOffset = inputOffset + 1;
    const lengthBufferView = view.subarray(lenOffset, lenOffset + count);
    if (lengthBufferView[count - 1] === 0) this.warnings.push("Needlessly long encoded length");
    this.length = utilFromBase(lengthBufferView, 8);
    if (this.longFormUsed && this.length <= 127) this.warnings.push("Unnecessary usage of long length form");
    this.blockLength = count + 1;
    return inputOffset + this.blockLength;
  }
  toBER(sizeOnly = false) {
    let retBuf;
    let retView;
    if (this.length > 127) this.longFormUsed = true;
    if (this.isIndefiniteForm) {
      retBuf = new ArrayBuffer(1);
      if (sizeOnly === false) {
        retView = new Uint8Array(retBuf);
        retView[0] = 128;
      }
      return retBuf;
    }
    if (this.longFormUsed) {
      const encodedBuf = utilToBase(this.length, 8);
      if (encodedBuf.byteLength > 127) {
        this.error = "Too big length";
        return EMPTY_BUFFER3;
      }
      retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);
      if (sizeOnly) return retBuf;
      const encodedView = new Uint8Array(encodedBuf);
      retView = new Uint8Array(retBuf);
      retView[0] = encodedBuf.byteLength | 128;
      for (let i2 = 0; i2 < encodedBuf.byteLength; i2++) retView[i2 + 1] = encodedView[i2];
      return retBuf;
    }
    retBuf = new ArrayBuffer(1);
    if (sizeOnly === false) {
      retView = new Uint8Array(retBuf);
      retView[0] = this.length;
    }
    return retBuf;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      isIndefiniteForm: this.isIndefiniteForm,
      longFormUsed: this.longFormUsed,
      length: this.length
    };
  }
};
LocalLengthBlock2.NAME = "lengthBlock";
var typeStore2 = {};
var BaseBlock2 = class extends LocalBaseBlock2 {
  constructor({ name = EMPTY_STRING3, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {
    super(parameters);
    this.name = name;
    this.optional = optional;
    if (primitiveSchema) {
      this.primitiveSchema = primitiveSchema;
    }
    this.idBlock = new LocalIdentificationBlock2(parameters);
    this.lenBlock = new LocalLengthBlock2(parameters);
    this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock2(parameters);
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  toBER(sizeOnly, writer) {
    const _writer = writer || new ViewWriter2();
    if (!writer) {
      prepareIndefiniteForm2(this);
    }
    const idBlockBuf = this.idBlock.toBER(sizeOnly);
    _writer.write(idBlockBuf);
    if (this.lenBlock.isIndefiniteForm) {
      _writer.write(new Uint8Array([
        128
      ]).buffer);
      this.valueBlock.toBER(sizeOnly, _writer);
      _writer.write(new ArrayBuffer(2));
    } else {
      const valueBlockBuf = this.valueBlock.toBER(sizeOnly);
      this.lenBlock.length = valueBlockBuf.byteLength;
      const lenBlockBuf = this.lenBlock.toBER(sizeOnly);
      _writer.write(lenBlockBuf);
      _writer.write(valueBlockBuf);
    }
    if (!writer) {
      return _writer.final();
    }
    return EMPTY_BUFFER3;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      idBlock: this.idBlock.toJSON(),
      lenBlock: this.lenBlock.toJSON(),
      valueBlock: this.valueBlock.toJSON(),
      name: this.name,
      optional: this.optional
    };
    if (this.primitiveSchema) object.primitiveSchema = this.primitiveSchema.toJSON();
    return object;
  }
  toString(encoding = "ascii") {
    if (encoding === "ascii") {
      return this.onAsciiEncoding();
    }
    return Convert.ToHex(this.toBER());
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;
  }
  isEqual(other) {
    if (this === other) {
      return true;
    }
    if (!(other instanceof this.constructor)) {
      return false;
    }
    const thisRaw = this.toBER();
    const otherRaw = other.toBER();
    return isEqualBuffer(thisRaw, otherRaw);
  }
};
BaseBlock2.NAME = "BaseBlock";
function prepareIndefiniteForm2(baseBlock) {
  if (baseBlock instanceof typeStore2.Constructed) {
    for (const value of baseBlock.valueBlock.value) {
      if (prepareIndefiniteForm2(value)) {
        baseBlock.lenBlock.isIndefiniteForm = true;
      }
    }
  }
  return !!baseBlock.lenBlock.isIndefiniteForm;
}
var BaseStringBlock2 = class extends BaseBlock2 {
  constructor({ value = EMPTY_STRING3, ...parameters } = {}, stringValueBlockType) {
    super(parameters, stringValueBlockType);
    if (value) {
      this.fromString(value);
    }
  }
  getValue() {
    return this.valueBlock.value;
  }
  setValue(value) {
    this.valueBlock.value = value;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    this.fromBuffer(this.valueBlock.valueHexView);
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : '${this.valueBlock.value}'`;
  }
};
BaseStringBlock2.NAME = "BaseStringBlock";
var LocalPrimitiveValueBlock2 = class extends HexBlock2(ValueBlock2) {
  constructor({ isHexOnly = true, ...parameters } = {}) {
    super(parameters);
    this.isHexOnly = isHexOnly;
  }
};
LocalPrimitiveValueBlock2.NAME = "PrimitiveValueBlock";
var _a$w2;
var Primitive2 = class extends BaseBlock2 {
  constructor(parameters = {}) {
    super(parameters, LocalPrimitiveValueBlock2);
    this.idBlock.isConstructed = false;
  }
};
_a$w2 = Primitive2;
(() => {
  typeStore2.Primitive = _a$w2;
})();
Primitive2.NAME = "PRIMITIVE";
function localChangeType2(inputObject, newType) {
  if (inputObject instanceof newType) {
    return inputObject;
  }
  const newObject = new newType();
  newObject.idBlock = inputObject.idBlock;
  newObject.lenBlock = inputObject.lenBlock;
  newObject.warnings = inputObject.warnings;
  newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;
  return newObject;
}
function localFromBER2(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {
  const incomingOffset = inputOffset;
  let returnObject = new BaseBlock2({}, ValueBlock2);
  const baseBlock = new LocalBaseBlock2();
  if (!checkBufferParams2(baseBlock, inputBuffer, inputOffset, inputLength)) {
    returnObject.error = baseBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);
  if (!intBuffer.length) {
    returnObject.error = "Zero buffer length";
    return {
      offset: -1,
      result: returnObject
    };
  }
  let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);
  if (returnObject.idBlock.warnings.length) {
    returnObject.warnings.concat(returnObject.idBlock.warnings);
  }
  if (resultOffset === -1) {
    returnObject.error = returnObject.idBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  inputOffset = resultOffset;
  inputLength -= returnObject.idBlock.blockLength;
  resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);
  if (returnObject.lenBlock.warnings.length) {
    returnObject.warnings.concat(returnObject.lenBlock.warnings);
  }
  if (resultOffset === -1) {
    returnObject.error = returnObject.lenBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  inputOffset = resultOffset;
  inputLength -= returnObject.lenBlock.blockLength;
  if (!returnObject.idBlock.isConstructed && returnObject.lenBlock.isIndefiniteForm) {
    returnObject.error = "Indefinite length form used for primitive encoding form";
    return {
      offset: -1,
      result: returnObject
    };
  }
  let newASN1Type = BaseBlock2;
  switch (returnObject.idBlock.tagClass) {
    case 1:
      if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {
        returnObject.error = "UNIVERSAL 37 and upper tags are reserved by ASN.1 standard";
        return {
          offset: -1,
          result: returnObject
        };
      }
      switch (returnObject.idBlock.tagNumber) {
        case 0:
          if (returnObject.idBlock.isConstructed && returnObject.lenBlock.length > 0) {
            returnObject.error = "Type [UNIVERSAL 0] is reserved";
            return {
              offset: -1,
              result: returnObject
            };
          }
          newASN1Type = typeStore2.EndOfContent;
          break;
        case 1:
          newASN1Type = typeStore2.Boolean;
          break;
        case 2:
          newASN1Type = typeStore2.Integer;
          break;
        case 3:
          newASN1Type = typeStore2.BitString;
          break;
        case 4:
          newASN1Type = typeStore2.OctetString;
          break;
        case 5:
          newASN1Type = typeStore2.Null;
          break;
        case 6:
          newASN1Type = typeStore2.ObjectIdentifier;
          break;
        case 10:
          newASN1Type = typeStore2.Enumerated;
          break;
        case 12:
          newASN1Type = typeStore2.Utf8String;
          break;
        case 13:
          newASN1Type = typeStore2.RelativeObjectIdentifier;
          break;
        case 14:
          newASN1Type = typeStore2.TIME;
          break;
        case 15:
          returnObject.error = "[UNIVERSAL 15] is reserved by ASN.1 standard";
          return {
            offset: -1,
            result: returnObject
          };
        case 16:
          newASN1Type = typeStore2.Sequence;
          break;
        case 17:
          newASN1Type = typeStore2.Set;
          break;
        case 18:
          newASN1Type = typeStore2.NumericString;
          break;
        case 19:
          newASN1Type = typeStore2.PrintableString;
          break;
        case 20:
          newASN1Type = typeStore2.TeletexString;
          break;
        case 21:
          newASN1Type = typeStore2.VideotexString;
          break;
        case 22:
          newASN1Type = typeStore2.IA5String;
          break;
        case 23:
          newASN1Type = typeStore2.UTCTime;
          break;
        case 24:
          newASN1Type = typeStore2.GeneralizedTime;
          break;
        case 25:
          newASN1Type = typeStore2.GraphicString;
          break;
        case 26:
          newASN1Type = typeStore2.VisibleString;
          break;
        case 27:
          newASN1Type = typeStore2.GeneralString;
          break;
        case 28:
          newASN1Type = typeStore2.UniversalString;
          break;
        case 29:
          newASN1Type = typeStore2.CharacterString;
          break;
        case 30:
          newASN1Type = typeStore2.BmpString;
          break;
        case 31:
          newASN1Type = typeStore2.DATE;
          break;
        case 32:
          newASN1Type = typeStore2.TimeOfDay;
          break;
        case 33:
          newASN1Type = typeStore2.DateTime;
          break;
        case 34:
          newASN1Type = typeStore2.Duration;
          break;
        default: {
          const newObject = returnObject.idBlock.isConstructed ? new typeStore2.Constructed() : new typeStore2.Primitive();
          newObject.idBlock = returnObject.idBlock;
          newObject.lenBlock = returnObject.lenBlock;
          newObject.warnings = returnObject.warnings;
          returnObject = newObject;
        }
      }
      break;
    case 2:
    case 3:
    case 4:
    default: {
      newASN1Type = returnObject.idBlock.isConstructed ? typeStore2.Constructed : typeStore2.Primitive;
    }
  }
  returnObject = localChangeType2(returnObject, newASN1Type);
  resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);
  returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);
  return {
    offset: resultOffset,
    result: returnObject
  };
}
function fromBER2(inputBuffer) {
  if (!inputBuffer.byteLength) {
    const result = new BaseBlock2({}, ValueBlock2);
    result.error = "Input buffer has zero length";
    return {
      offset: -1,
      result
    };
  }
  return localFromBER2(BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);
}
function checkLen2(indefiniteLength, length) {
  if (indefiniteLength) {
    return 1;
  }
  return length;
}
var LocalConstructedValueBlock2 = class extends ValueBlock2 {
  constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {
    super(parameters);
    this.value = value;
    this.isIndefiniteForm = isIndefiniteForm;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const view = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams2(this, view, inputOffset, inputLength)) {
      return -1;
    }
    this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);
    if (this.valueBeforeDecodeView.length === 0) {
      this.warnings.push("Zero buffer length");
      return inputOffset;
    }
    let currentOffset = inputOffset;
    while (checkLen2(this.isIndefiniteForm, inputLength) > 0) {
      const returnObject = localFromBER2(view, currentOffset, inputLength);
      if (returnObject.offset === -1) {
        this.error = returnObject.result.error;
        this.warnings.concat(returnObject.result.warnings);
        return -1;
      }
      currentOffset = returnObject.offset;
      this.blockLength += returnObject.result.blockLength;
      inputLength -= returnObject.result.blockLength;
      this.value.push(returnObject.result);
      if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME2) {
        break;
      }
    }
    if (this.isIndefiniteForm) {
      if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME2) {
        this.value.pop();
      } else {
        this.warnings.push("No EndOfContent block encoded");
      }
    }
    return currentOffset;
  }
  toBER(sizeOnly, writer) {
    const _writer = writer || new ViewWriter2();
    for (let i2 = 0; i2 < this.value.length; i2++) {
      this.value[i2].toBER(sizeOnly, _writer);
    }
    if (!writer) {
      return _writer.final();
    }
    return EMPTY_BUFFER3;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      isIndefiniteForm: this.isIndefiniteForm,
      value: []
    };
    for (const value of this.value) {
      object.value.push(value.toJSON());
    }
    return object;
  }
};
LocalConstructedValueBlock2.NAME = "ConstructedValueBlock";
var _a$v2;
var Constructed2 = class extends BaseBlock2 {
  constructor(parameters = {}) {
    super(parameters, LocalConstructedValueBlock2);
    this.idBlock.isConstructed = true;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  onAsciiEncoding() {
    const values = [];
    for (const value of this.valueBlock.value) {
      values.push(value.toString("ascii").split("\n").map((o2) => `  ${o2}`).join("\n"));
    }
    const blockName = this.idBlock.tagClass === 3 ? `[${this.idBlock.tagNumber}]` : this.constructor.NAME;
    return values.length ? `${blockName} :
${values.join("\n")}` : `${blockName} :`;
  }
};
_a$v2 = Constructed2;
(() => {
  typeStore2.Constructed = _a$v2;
})();
Constructed2.NAME = "CONSTRUCTED";
var LocalEndOfContentValueBlock2 = class extends ValueBlock2 {
  fromBER(inputBuffer, inputOffset, inputLength) {
    return inputOffset;
  }
  toBER(sizeOnly) {
    return EMPTY_BUFFER3;
  }
};
LocalEndOfContentValueBlock2.override = "EndOfContentValueBlock";
var _a$u2;
var EndOfContent2 = class extends BaseBlock2 {
  constructor(parameters = {}) {
    super(parameters, LocalEndOfContentValueBlock2);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 0;
  }
};
_a$u2 = EndOfContent2;
(() => {
  typeStore2.EndOfContent = _a$u2;
})();
EndOfContent2.NAME = END_OF_CONTENT_NAME2;
var _a$t2;
var Null2 = class extends BaseBlock2 {
  constructor(parameters = {}) {
    super(parameters, ValueBlock2);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 5;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (this.lenBlock.length > 0) this.warnings.push("Non-zero length of value block for Null type");
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    this.blockLength += inputLength;
    if (inputOffset + inputLength > inputBuffer.byteLength) {
      this.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
      return -1;
    }
    return inputOffset + inputLength;
  }
  toBER(sizeOnly, writer) {
    const retBuf = new ArrayBuffer(2);
    if (!sizeOnly) {
      const retView = new Uint8Array(retBuf);
      retView[0] = 5;
      retView[1] = 0;
    }
    if (writer) {
      writer.write(retBuf);
    }
    return retBuf;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME}`;
  }
};
_a$t2 = Null2;
(() => {
  typeStore2.Null = _a$t2;
})();
Null2.NAME = "NULL";
var LocalBooleanValueBlock2 = class extends HexBlock2(ValueBlock2) {
  constructor({ value, ...parameters } = {}) {
    super(parameters);
    if (parameters.valueHex) {
      this.valueHexView = BufferSourceConverter.toUint8Array(parameters.valueHex);
    } else {
      this.valueHexView = new Uint8Array(1);
    }
    if (value) {
      this.value = value;
    }
  }
  get value() {
    for (const octet of this.valueHexView) {
      if (octet > 0) {
        return true;
      }
    }
    return false;
  }
  set value(value) {
    this.valueHexView[0] = value ? 255 : 0;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams2(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);
    if (inputLength > 1) this.warnings.push("Boolean value encoded in more then 1 octet");
    this.isHexOnly = true;
    utilDecodeTC.call(this);
    this.blockLength = inputLength;
    return inputOffset + inputLength;
  }
  toBER() {
    return this.valueHexView.slice();
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.value
    };
  }
};
LocalBooleanValueBlock2.NAME = "BooleanValueBlock";
var _a$s2;
var Boolean3 = class extends BaseBlock2 {
  constructor(parameters = {}) {
    super(parameters, LocalBooleanValueBlock2);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 1;
  }
  getValue() {
    return this.valueBlock.value;
  }
  setValue(value) {
    this.valueBlock.value = value;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.getValue}`;
  }
};
_a$s2 = Boolean3;
(() => {
  typeStore2.Boolean = _a$s2;
})();
Boolean3.NAME = "BOOLEAN";
var LocalOctetStringValueBlock2 = class extends HexBlock2(LocalConstructedValueBlock2) {
  constructor({ isConstructed = false, ...parameters } = {}) {
    super(parameters);
    this.isConstructed = isConstructed;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = 0;
    if (this.isConstructed) {
      this.isHexOnly = false;
      resultOffset = LocalConstructedValueBlock2.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
      if (resultOffset === -1) return resultOffset;
      for (let i2 = 0; i2 < this.value.length; i2++) {
        const currentBlockName = this.value[i2].constructor.NAME;
        if (currentBlockName === END_OF_CONTENT_NAME2) {
          if (this.isIndefiniteForm) break;
          else {
            this.error = "EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only";
            return -1;
          }
        }
        if (currentBlockName !== OCTET_STRING_NAME2) {
          this.error = "OCTET STRING may consists of OCTET STRINGs only";
          return -1;
        }
      }
    } else {
      this.isHexOnly = true;
      resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
      this.blockLength = inputLength;
    }
    return resultOffset;
  }
  toBER(sizeOnly, writer) {
    if (this.isConstructed) return LocalConstructedValueBlock2.prototype.toBER.call(this, sizeOnly, writer);
    return sizeOnly ? new ArrayBuffer(this.valueHexView.byteLength) : this.valueHexView.slice().buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      isConstructed: this.isConstructed
    };
  }
};
LocalOctetStringValueBlock2.NAME = "OctetStringValueBlock";
var _a$r2;
var OctetString2 = class _OctetString extends BaseBlock2 {
  constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {
    var _b, _c;
    (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
    super({
      idBlock: {
        isConstructed: parameters.isConstructed,
        ...idBlock
      },
      lenBlock: {
        ...lenBlock,
        isIndefiniteForm: !!parameters.isIndefiniteForm
      },
      ...parameters
    }, LocalOctetStringValueBlock2);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 4;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isConstructed = this.idBlock.isConstructed;
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    if (inputLength === 0) {
      if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
      if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
      return inputOffset;
    }
    if (!this.valueBlock.isConstructed) {
      const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
      const buf = view.subarray(inputOffset, inputOffset + inputLength);
      try {
        if (buf.byteLength) {
          const asn = localFromBER2(buf, 0, buf.byteLength);
          if (asn.offset !== -1 && asn.offset === inputLength) {
            this.valueBlock.value = [
              asn.result
            ];
          }
        }
      } catch (e2) {
      }
    }
    return super.fromBER(inputBuffer, inputOffset, inputLength);
  }
  onAsciiEncoding() {
    if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
      return Constructed2.prototype.onAsciiEncoding.call(this);
    }
    return `${this.constructor.NAME} : ${Convert.ToHex(this.valueBlock.valueHexView)}`;
  }
  getValue() {
    if (!this.idBlock.isConstructed) {
      return this.valueBlock.valueHexView.slice().buffer;
    }
    const array = [];
    for (const content of this.valueBlock.value) {
      if (content instanceof _OctetString) {
        array.push(content.valueBlock.valueHexView);
      }
    }
    return BufferSourceConverter.concat(array);
  }
};
_a$r2 = OctetString2;
(() => {
  typeStore2.OctetString = _a$r2;
})();
OctetString2.NAME = OCTET_STRING_NAME2;
var LocalBitStringValueBlock2 = class extends HexBlock2(LocalConstructedValueBlock2) {
  constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {
    super(parameters);
    this.unusedBits = unusedBits;
    this.isConstructed = isConstructed;
    this.blockLength = this.valueHexView.byteLength;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (!inputLength) {
      return inputOffset;
    }
    let resultOffset = -1;
    if (this.isConstructed) {
      resultOffset = LocalConstructedValueBlock2.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
      if (resultOffset === -1) return resultOffset;
      for (const value of this.value) {
        const currentBlockName = value.constructor.NAME;
        if (currentBlockName === END_OF_CONTENT_NAME2) {
          if (this.isIndefiniteForm) break;
          else {
            this.error = "EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only";
            return -1;
          }
        }
        if (currentBlockName !== BIT_STRING_NAME2) {
          this.error = "BIT STRING may consists of BIT STRINGs only";
          return -1;
        }
        const valueBlock = value.valueBlock;
        if (this.unusedBits > 0 && valueBlock.unusedBits > 0) {
          this.error = 'Using of "unused bits" inside constructive BIT STRING allowed for least one only';
          return -1;
        }
        this.unusedBits = valueBlock.unusedBits;
      }
      return resultOffset;
    }
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams2(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.unusedBits = intBuffer[0];
    if (this.unusedBits > 7) {
      this.error = "Unused bits for BitString must be in range 0-7";
      return -1;
    }
    if (!this.unusedBits) {
      const buf = intBuffer.subarray(1);
      try {
        if (buf.byteLength) {
          const asn = localFromBER2(buf, 0, buf.byteLength);
          if (asn.offset !== -1 && asn.offset === inputLength - 1) {
            this.value = [
              asn.result
            ];
          }
        }
      } catch (e2) {
      }
    }
    this.valueHexView = intBuffer.subarray(1);
    this.blockLength = intBuffer.length;
    return inputOffset + inputLength;
  }
  toBER(sizeOnly, writer) {
    if (this.isConstructed) {
      return LocalConstructedValueBlock2.prototype.toBER.call(this, sizeOnly, writer);
    }
    if (sizeOnly) {
      return new ArrayBuffer(this.valueHexView.byteLength + 1);
    }
    if (!this.valueHexView.byteLength) {
      return EMPTY_BUFFER3;
    }
    const retView = new Uint8Array(this.valueHexView.length + 1);
    retView[0] = this.unusedBits;
    retView.set(this.valueHexView, 1);
    return retView.buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      unusedBits: this.unusedBits,
      isConstructed: this.isConstructed
    };
  }
};
LocalBitStringValueBlock2.NAME = "BitStringValueBlock";
var _a$q2;
var BitString2 = class extends BaseBlock2 {
  constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {
    var _b, _c;
    (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
    super({
      idBlock: {
        isConstructed: parameters.isConstructed,
        ...idBlock
      },
      lenBlock: {
        ...lenBlock,
        isIndefiniteForm: !!parameters.isIndefiniteForm
      },
      ...parameters
    }, LocalBitStringValueBlock2);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 3;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isConstructed = this.idBlock.isConstructed;
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    return super.fromBER(inputBuffer, inputOffset, inputLength);
  }
  onAsciiEncoding() {
    if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
      return Constructed2.prototype.onAsciiEncoding.call(this);
    } else {
      const bits = [];
      const valueHex = this.valueBlock.valueHexView;
      for (const byte of valueHex) {
        bits.push(byte.toString(2).padStart(8, "0"));
      }
      const bitsStr = bits.join("");
      return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;
    }
  }
};
_a$q2 = BitString2;
(() => {
  typeStore2.BitString = _a$q2;
})();
BitString2.NAME = BIT_STRING_NAME2;
var _a$p2;
function viewAdd2(first, second) {
  const c = new Uint8Array([
    0
  ]);
  const firstView = new Uint8Array(first);
  const secondView = new Uint8Array(second);
  let firstViewCopy = firstView.slice(0);
  const firstViewCopyLength = firstViewCopy.length - 1;
  const secondViewCopy = secondView.slice(0);
  const secondViewCopyLength = secondViewCopy.length - 1;
  let value = 0;
  const max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;
  let counter = 0;
  for (let i2 = max; i2 >= 0; i2--, counter++) {
    switch (true) {
      case counter < secondViewCopy.length:
        value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];
        break;
      default:
        value = firstViewCopy[firstViewCopyLength - counter] + c[0];
    }
    c[0] = value / 10;
    switch (true) {
      case counter >= firstViewCopy.length:
        firstViewCopy = utilConcatView(new Uint8Array([
          value % 10
        ]), firstViewCopy);
        break;
      default:
        firstViewCopy[firstViewCopyLength - counter] = value % 10;
    }
  }
  if (c[0] > 0) firstViewCopy = utilConcatView(c, firstViewCopy);
  return firstViewCopy;
}
function power22(n2) {
  if (n2 >= powers22.length) {
    for (let p = powers22.length; p <= n2; p++) {
      const c = new Uint8Array([
        0
      ]);
      let digits = powers22[p - 1].slice(0);
      for (let i2 = digits.length - 1; i2 >= 0; i2--) {
        const newValue = new Uint8Array([
          (digits[i2] << 1) + c[0]
        ]);
        c[0] = newValue[0] / 10;
        digits[i2] = newValue[0] % 10;
      }
      if (c[0] > 0) digits = utilConcatView(c, digits);
      powers22.push(digits);
    }
  }
  return powers22[n2];
}
function viewSub2(first, second) {
  let b = 0;
  const firstView = new Uint8Array(first);
  const secondView = new Uint8Array(second);
  const firstViewCopy = firstView.slice(0);
  const firstViewCopyLength = firstViewCopy.length - 1;
  const secondViewCopy = secondView.slice(0);
  const secondViewCopyLength = secondViewCopy.length - 1;
  let value;
  let counter = 0;
  for (let i2 = secondViewCopyLength; i2 >= 0; i2--, counter++) {
    value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;
    switch (true) {
      case value < 0:
        b = 1;
        firstViewCopy[firstViewCopyLength - counter] = value + 10;
        break;
      default:
        b = 0;
        firstViewCopy[firstViewCopyLength - counter] = value;
    }
  }
  if (b > 0) {
    for (let i2 = firstViewCopyLength - secondViewCopyLength + 1; i2 >= 0; i2--, counter++) {
      value = firstViewCopy[firstViewCopyLength - counter] - b;
      if (value < 0) {
        b = 1;
        firstViewCopy[firstViewCopyLength - counter] = value + 10;
      } else {
        b = 0;
        firstViewCopy[firstViewCopyLength - counter] = value;
        break;
      }
    }
  }
  return firstViewCopy.slice();
}
var LocalIntegerValueBlock2 = class extends HexBlock2(ValueBlock2) {
  constructor({ value, ...parameters } = {}) {
    super(parameters);
    this._valueDec = 0;
    if (parameters.valueHex) {
      this.setValueHex();
    }
    if (value !== void 0) {
      this.valueDec = value;
    }
  }
  setValueHex() {
    if (this.valueHexView.length >= 4) {
      this.warnings.push("Too big Integer for decoding, hex only");
      this.isHexOnly = true;
      this._valueDec = 0;
    } else {
      this.isHexOnly = false;
      if (this.valueHexView.length > 0) {
        this._valueDec = utilDecodeTC.call(this);
      }
    }
  }
  set valueDec(v) {
    this._valueDec = v;
    this.isHexOnly = false;
    this.valueHexView = new Uint8Array(utilEncodeTC(v));
  }
  get valueDec() {
    return this._valueDec;
  }
  fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {
    const offset = this.fromBER(inputBuffer, inputOffset, inputLength);
    if (offset === -1) return offset;
    const view = this.valueHexView;
    if (view[0] === 0 && (view[1] & 128) !== 0) {
      this.valueHexView = view.subarray(1);
    } else {
      if (expectedLength !== 0) {
        if (view.length < expectedLength) {
          if (expectedLength - view.length > 1) expectedLength = view.length + 1;
          this.valueHexView = view.subarray(expectedLength - view.length);
        }
      }
    }
    return offset;
  }
  toDER(sizeOnly = false) {
    const view = this.valueHexView;
    switch (true) {
      case (view[0] & 128) !== 0:
        {
          const updatedView = new Uint8Array(this.valueHexView.length + 1);
          updatedView[0] = 0;
          updatedView.set(view, 1);
          this.valueHexView = updatedView;
        }
        break;
      case (view[0] === 0 && (view[1] & 128) === 0):
        {
          this.valueHexView = this.valueHexView.subarray(1);
        }
        break;
    }
    return this.toBER(sizeOnly);
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
    if (resultOffset === -1) {
      return resultOffset;
    }
    this.setValueHex();
    return resultOffset;
  }
  toBER(sizeOnly) {
    return sizeOnly ? new ArrayBuffer(this.valueHexView.length) : this.valueHexView.slice().buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec
    };
  }
  toString() {
    const firstBit = this.valueHexView.length * 8 - 1;
    let digits = new Uint8Array(this.valueHexView.length * 8 / 3);
    let bitNumber = 0;
    let currentByte;
    const asn1View = this.valueHexView;
    let result = "";
    let flag = false;
    for (let byteNumber = asn1View.byteLength - 1; byteNumber >= 0; byteNumber--) {
      currentByte = asn1View[byteNumber];
      for (let i2 = 0; i2 < 8; i2++) {
        if ((currentByte & 1) === 1) {
          switch (bitNumber) {
            case firstBit:
              digits = viewSub2(power22(bitNumber), digits);
              result = "-";
              break;
            default:
              digits = viewAdd2(digits, power22(bitNumber));
          }
        }
        bitNumber++;
        currentByte >>= 1;
      }
    }
    for (let i2 = 0; i2 < digits.length; i2++) {
      if (digits[i2]) flag = true;
      if (flag) result += digitsString2.charAt(digits[i2]);
    }
    if (flag === false) result += digitsString2.charAt(0);
    return result;
  }
};
_a$p2 = LocalIntegerValueBlock2;
LocalIntegerValueBlock2.NAME = "IntegerValueBlock";
(() => {
  Object.defineProperty(_a$p2.prototype, "valueHex", {
    set: function(v) {
      this.valueHexView = new Uint8Array(v);
      this.setValueHex();
    },
    get: function() {
      return this.valueHexView.slice().buffer;
    }
  });
})();
var _a$o2;
var Integer2 = class _Integer extends BaseBlock2 {
  constructor(parameters = {}) {
    super(parameters, LocalIntegerValueBlock2);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 2;
  }
  toBigInt() {
    assertBigInt2();
    return BigInt(this.valueBlock.toString());
  }
  static fromBigInt(value) {
    assertBigInt2();
    const bigIntValue = BigInt(value);
    const writer = new ViewWriter2();
    const hex = bigIntValue.toString(16).replace(/^-/, "");
    const view = new Uint8Array(Convert.FromHex(hex));
    if (bigIntValue < 0) {
      const first = new Uint8Array(view.length + (view[0] & 128 ? 1 : 0));
      first[0] |= 128;
      const firstInt = BigInt(`0x${Convert.ToHex(first)}`);
      const secondInt = firstInt + bigIntValue;
      const second = BufferSourceConverter.toUint8Array(Convert.FromHex(secondInt.toString(16)));
      second[0] |= 128;
      writer.write(second);
    } else {
      if (view[0] & 128) {
        writer.write(new Uint8Array([
          0
        ]));
      }
      writer.write(view);
    }
    const res = new _Integer({
      valueHex: writer.final()
    });
    return res;
  }
  convertToDER() {
    const integer = new _Integer({
      valueHex: this.valueBlock.valueHexView
    });
    integer.valueBlock.toDER();
    return integer;
  }
  convertFromDER() {
    return new _Integer({
      valueHex: this.valueBlock.valueHexView[0] === 0 ? this.valueBlock.valueHexView.subarray(1) : this.valueBlock.valueHexView
    });
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;
  }
};
_a$o2 = Integer2;
(() => {
  typeStore2.Integer = _a$o2;
})();
Integer2.NAME = "INTEGER";
var _a$n2;
var Enumerated2 = class extends Integer2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 10;
  }
};
_a$n2 = Enumerated2;
(() => {
  typeStore2.Enumerated = _a$n2;
})();
Enumerated2.NAME = "ENUMERATED";
var LocalSidValueBlock2 = class extends HexBlock2(ValueBlock2) {
  constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {
    super(parameters);
    this.valueDec = valueDec;
    this.isFirstSid = isFirstSid;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (!inputLength) {
      return inputOffset;
    }
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams2(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.valueHexView = new Uint8Array(inputLength);
    for (let i2 = 0; i2 < inputLength; i2++) {
      this.valueHexView[i2] = intBuffer[i2] & 127;
      this.blockLength++;
      if ((intBuffer[i2] & 128) === 0) break;
    }
    const tempView = new Uint8Array(this.blockLength);
    for (let i2 = 0; i2 < this.blockLength; i2++) {
      tempView[i2] = this.valueHexView[i2];
    }
    this.valueHexView = tempView;
    if ((intBuffer[this.blockLength - 1] & 128) !== 0) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    if (this.valueHexView[0] === 0) this.warnings.push("Needlessly long format of SID encoding");
    if (this.blockLength <= 8) this.valueDec = utilFromBase(this.valueHexView, 7);
    else {
      this.isHexOnly = true;
      this.warnings.push("Too big SID for decoding, hex only");
    }
    return inputOffset + this.blockLength;
  }
  set valueBigInt(value) {
    assertBigInt2();
    let bits = BigInt(value).toString(2);
    while (bits.length % 7) {
      bits = "0" + bits;
    }
    const bytes = new Uint8Array(bits.length / 7);
    for (let i2 = 0; i2 < bytes.length; i2++) {
      bytes[i2] = parseInt(bits.slice(i2 * 7, i2 * 7 + 7), 2) + (i2 + 1 < bytes.length ? 128 : 0);
    }
    this.fromBER(bytes.buffer, 0, bytes.length);
  }
  toBER(sizeOnly) {
    if (this.isHexOnly) {
      if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
      const curView = this.valueHexView;
      const retView2 = new Uint8Array(this.blockLength);
      for (let i2 = 0; i2 < this.blockLength - 1; i2++) retView2[i2] = curView[i2] | 128;
      retView2[this.blockLength - 1] = curView[this.blockLength - 1];
      return retView2.buffer;
    }
    const encodedBuf = utilToBase(this.valueDec, 7);
    if (encodedBuf.byteLength === 0) {
      this.error = "Error during encoding SID value";
      return EMPTY_BUFFER3;
    }
    const retView = new Uint8Array(encodedBuf.byteLength);
    if (!sizeOnly) {
      const encodedView = new Uint8Array(encodedBuf);
      const len = encodedBuf.byteLength - 1;
      for (let i2 = 0; i2 < len; i2++) retView[i2] = encodedView[i2] | 128;
      retView[len] = encodedView[len];
    }
    return retView;
  }
  toString() {
    let result = "";
    if (this.isHexOnly) result = Convert.ToHex(this.valueHexView);
    else {
      if (this.isFirstSid) {
        let sidValue = this.valueDec;
        if (this.valueDec <= 39) result = "0.";
        else {
          if (this.valueDec <= 79) {
            result = "1.";
            sidValue -= 40;
          } else {
            result = "2.";
            sidValue -= 80;
          }
        }
        result += sidValue.toString();
      } else result = this.valueDec.toString();
    }
    return result;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec,
      isFirstSid: this.isFirstSid
    };
  }
};
LocalSidValueBlock2.NAME = "sidBlock";
var LocalObjectIdentifierValueBlock2 = class extends ValueBlock2 {
  constructor({ value = EMPTY_STRING3, ...parameters } = {}) {
    super(parameters);
    this.value = [];
    if (value) {
      this.fromString(value);
    }
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = inputOffset;
    while (inputLength > 0) {
      const sidBlock = new LocalSidValueBlock2();
      resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
      if (resultOffset === -1) {
        this.blockLength = 0;
        this.error = sidBlock.error;
        return resultOffset;
      }
      if (this.value.length === 0) sidBlock.isFirstSid = true;
      this.blockLength += sidBlock.blockLength;
      inputLength -= sidBlock.blockLength;
      this.value.push(sidBlock);
    }
    return resultOffset;
  }
  toBER(sizeOnly) {
    const retBuffers = [];
    for (let i2 = 0; i2 < this.value.length; i2++) {
      const valueBuf = this.value[i2].toBER(sizeOnly);
      if (valueBuf.byteLength === 0) {
        this.error = this.value[i2].error;
        return EMPTY_BUFFER3;
      }
      retBuffers.push(valueBuf);
    }
    return concat3(retBuffers);
  }
  fromString(string) {
    this.value = [];
    let pos1 = 0;
    let pos2 = 0;
    let sid = "";
    let flag = false;
    do {
      pos2 = string.indexOf(".", pos1);
      if (pos2 === -1) sid = string.substring(pos1);
      else sid = string.substring(pos1, pos2);
      pos1 = pos2 + 1;
      if (flag) {
        const sidBlock = this.value[0];
        let plus = 0;
        switch (sidBlock.valueDec) {
          case 0:
            break;
          case 1:
            plus = 40;
            break;
          case 2:
            plus = 80;
            break;
          default:
            this.value = [];
            return;
        }
        const parsedSID = parseInt(sid, 10);
        if (isNaN(parsedSID)) return;
        sidBlock.valueDec = parsedSID + plus;
        flag = false;
      } else {
        const sidBlock = new LocalSidValueBlock2();
        if (sid > Number.MAX_SAFE_INTEGER) {
          assertBigInt2();
          const sidValue = BigInt(sid);
          sidBlock.valueBigInt = sidValue;
        } else {
          sidBlock.valueDec = parseInt(sid, 10);
          if (isNaN(sidBlock.valueDec)) return;
        }
        if (!this.value.length) {
          sidBlock.isFirstSid = true;
          flag = true;
        }
        this.value.push(sidBlock);
      }
    } while (pos2 !== -1);
  }
  toString() {
    let result = "";
    let isHexOnly = false;
    for (let i2 = 0; i2 < this.value.length; i2++) {
      isHexOnly = this.value[i2].isHexOnly;
      let sidStr = this.value[i2].toString();
      if (i2 !== 0) result = `${result}.`;
      if (isHexOnly) {
        sidStr = `{${sidStr}}`;
        if (this.value[i2].isFirstSid) result = `2.{${sidStr} - 80}`;
        else result += sidStr;
      } else result += sidStr;
    }
    return result;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      value: this.toString(),
      sidArray: []
    };
    for (let i2 = 0; i2 < this.value.length; i2++) {
      object.sidArray.push(this.value[i2].toJSON());
    }
    return object;
  }
};
LocalObjectIdentifierValueBlock2.NAME = "ObjectIdentifierValueBlock";
var _a$m2;
var ObjectIdentifier2 = class extends BaseBlock2 {
  constructor(parameters = {}) {
    super(parameters, LocalObjectIdentifierValueBlock2);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 6;
  }
  getValue() {
    return this.valueBlock.toString();
  }
  setValue(value) {
    this.valueBlock.fromString(value);
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.getValue()
    };
  }
};
_a$m2 = ObjectIdentifier2;
(() => {
  typeStore2.ObjectIdentifier = _a$m2;
})();
ObjectIdentifier2.NAME = "OBJECT IDENTIFIER";
var LocalRelativeSidValueBlock2 = class extends HexBlock2(LocalBaseBlock2) {
  constructor({ valueDec = 0, ...parameters } = {}) {
    super(parameters);
    this.valueDec = valueDec;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (inputLength === 0) return inputOffset;
    const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams2(this, inputView, inputOffset, inputLength)) return -1;
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.valueHexView = new Uint8Array(inputLength);
    for (let i2 = 0; i2 < inputLength; i2++) {
      this.valueHexView[i2] = intBuffer[i2] & 127;
      this.blockLength++;
      if ((intBuffer[i2] & 128) === 0) break;
    }
    const tempView = new Uint8Array(this.blockLength);
    for (let i2 = 0; i2 < this.blockLength; i2++) tempView[i2] = this.valueHexView[i2];
    this.valueHexView = tempView;
    if ((intBuffer[this.blockLength - 1] & 128) !== 0) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    if (this.valueHexView[0] === 0) this.warnings.push("Needlessly long format of SID encoding");
    if (this.blockLength <= 8) this.valueDec = utilFromBase(this.valueHexView, 7);
    else {
      this.isHexOnly = true;
      this.warnings.push("Too big SID for decoding, hex only");
    }
    return inputOffset + this.blockLength;
  }
  toBER(sizeOnly) {
    if (this.isHexOnly) {
      if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
      const curView = this.valueHexView;
      const retView2 = new Uint8Array(this.blockLength);
      for (let i2 = 0; i2 < this.blockLength - 1; i2++) retView2[i2] = curView[i2] | 128;
      retView2[this.blockLength - 1] = curView[this.blockLength - 1];
      return retView2.buffer;
    }
    const encodedBuf = utilToBase(this.valueDec, 7);
    if (encodedBuf.byteLength === 0) {
      this.error = "Error during encoding SID value";
      return EMPTY_BUFFER3;
    }
    const retView = new Uint8Array(encodedBuf.byteLength);
    if (!sizeOnly) {
      const encodedView = new Uint8Array(encodedBuf);
      const len = encodedBuf.byteLength - 1;
      for (let i2 = 0; i2 < len; i2++) retView[i2] = encodedView[i2] | 128;
      retView[len] = encodedView[len];
    }
    return retView.buffer;
  }
  toString() {
    let result = "";
    if (this.isHexOnly) result = Convert.ToHex(this.valueHexView);
    else {
      result = this.valueDec.toString();
    }
    return result;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec
    };
  }
};
LocalRelativeSidValueBlock2.NAME = "relativeSidBlock";
var LocalRelativeObjectIdentifierValueBlock2 = class extends ValueBlock2 {
  constructor({ value = EMPTY_STRING3, ...parameters } = {}) {
    super(parameters);
    this.value = [];
    if (value) {
      this.fromString(value);
    }
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = inputOffset;
    while (inputLength > 0) {
      const sidBlock = new LocalRelativeSidValueBlock2();
      resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
      if (resultOffset === -1) {
        this.blockLength = 0;
        this.error = sidBlock.error;
        return resultOffset;
      }
      this.blockLength += sidBlock.blockLength;
      inputLength -= sidBlock.blockLength;
      this.value.push(sidBlock);
    }
    return resultOffset;
  }
  toBER(sizeOnly, writer) {
    const retBuffers = [];
    for (let i2 = 0; i2 < this.value.length; i2++) {
      const valueBuf = this.value[i2].toBER(sizeOnly);
      if (valueBuf.byteLength === 0) {
        this.error = this.value[i2].error;
        return EMPTY_BUFFER3;
      }
      retBuffers.push(valueBuf);
    }
    return concat3(retBuffers);
  }
  fromString(string) {
    this.value = [];
    let pos1 = 0;
    let pos2 = 0;
    let sid = "";
    do {
      pos2 = string.indexOf(".", pos1);
      if (pos2 === -1) sid = string.substring(pos1);
      else sid = string.substring(pos1, pos2);
      pos1 = pos2 + 1;
      const sidBlock = new LocalRelativeSidValueBlock2();
      sidBlock.valueDec = parseInt(sid, 10);
      if (isNaN(sidBlock.valueDec)) return true;
      this.value.push(sidBlock);
    } while (pos2 !== -1);
    return true;
  }
  toString() {
    let result = "";
    let isHexOnly = false;
    for (let i2 = 0; i2 < this.value.length; i2++) {
      isHexOnly = this.value[i2].isHexOnly;
      let sidStr = this.value[i2].toString();
      if (i2 !== 0) result = `${result}.`;
      if (isHexOnly) {
        sidStr = `{${sidStr}}`;
        result += sidStr;
      } else result += sidStr;
    }
    return result;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      value: this.toString(),
      sidArray: []
    };
    for (let i2 = 0; i2 < this.value.length; i2++) object.sidArray.push(this.value[i2].toJSON());
    return object;
  }
};
LocalRelativeObjectIdentifierValueBlock2.NAME = "RelativeObjectIdentifierValueBlock";
var _a$l2;
var RelativeObjectIdentifier2 = class extends BaseBlock2 {
  constructor(parameters = {}) {
    super(parameters, LocalRelativeObjectIdentifierValueBlock2);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 13;
  }
  getValue() {
    return this.valueBlock.toString();
  }
  setValue(value) {
    this.valueBlock.fromString(value);
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.getValue()
    };
  }
};
_a$l2 = RelativeObjectIdentifier2;
(() => {
  typeStore2.RelativeObjectIdentifier = _a$l2;
})();
RelativeObjectIdentifier2.NAME = "RelativeObjectIdentifier";
var _a$k2;
var Sequence2 = class extends Constructed2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 16;
  }
};
_a$k2 = Sequence2;
(() => {
  typeStore2.Sequence = _a$k2;
})();
Sequence2.NAME = "SEQUENCE";
var _a$j2;
var Set3 = class extends Constructed2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 17;
  }
};
_a$j2 = Set3;
(() => {
  typeStore2.Set = _a$j2;
})();
Set3.NAME = "SET";
var LocalStringValueBlock2 = class extends HexBlock2(ValueBlock2) {
  constructor({ ...parameters } = {}) {
    super(parameters);
    this.isHexOnly = true;
    this.value = EMPTY_STRING3;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.value
    };
  }
};
LocalStringValueBlock2.NAME = "StringValueBlock";
var LocalSimpleStringValueBlock2 = class extends LocalStringValueBlock2 {
};
LocalSimpleStringValueBlock2.NAME = "SimpleStringValueBlock";
var LocalSimpleStringBlock2 = class extends BaseStringBlock2 {
  constructor({ ...parameters } = {}) {
    super(parameters, LocalSimpleStringValueBlock2);
  }
  fromBuffer(inputBuffer) {
    this.valueBlock.value = String.fromCharCode.apply(null, BufferSourceConverter.toUint8Array(inputBuffer));
  }
  fromString(inputString) {
    const strLen = inputString.length;
    const view = this.valueBlock.valueHexView = new Uint8Array(strLen);
    for (let i2 = 0; i2 < strLen; i2++) view[i2] = inputString.charCodeAt(i2);
    this.valueBlock.value = inputString;
  }
};
LocalSimpleStringBlock2.NAME = "SIMPLE STRING";
var LocalUtf8StringValueBlock2 = class extends LocalSimpleStringBlock2 {
  fromBuffer(inputBuffer) {
    this.valueBlock.valueHexView = BufferSourceConverter.toUint8Array(inputBuffer);
    try {
      this.valueBlock.value = Convert.ToUtf8String(inputBuffer);
    } catch (ex) {
      this.warnings.push(`Error during "decodeURIComponent": ${ex}, using raw string`);
      this.valueBlock.value = Convert.ToBinary(inputBuffer);
    }
  }
  fromString(inputString) {
    this.valueBlock.valueHexView = new Uint8Array(Convert.FromUtf8String(inputString));
    this.valueBlock.value = inputString;
  }
};
LocalUtf8StringValueBlock2.NAME = "Utf8StringValueBlock";
var _a$i2;
var Utf8String2 = class extends LocalUtf8StringValueBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 12;
  }
};
_a$i2 = Utf8String2;
(() => {
  typeStore2.Utf8String = _a$i2;
})();
Utf8String2.NAME = "UTF8String";
var LocalBmpStringValueBlock2 = class extends LocalSimpleStringBlock2 {
  fromBuffer(inputBuffer) {
    this.valueBlock.value = Convert.ToUtf16String(inputBuffer);
    this.valueBlock.valueHexView = BufferSourceConverter.toUint8Array(inputBuffer);
  }
  fromString(inputString) {
    this.valueBlock.value = inputString;
    this.valueBlock.valueHexView = new Uint8Array(Convert.FromUtf16String(inputString));
  }
};
LocalBmpStringValueBlock2.NAME = "BmpStringValueBlock";
var _a$h2;
var BmpString2 = class extends LocalBmpStringValueBlock2 {
  constructor({ ...parameters } = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 30;
  }
};
_a$h2 = BmpString2;
(() => {
  typeStore2.BmpString = _a$h2;
})();
BmpString2.NAME = "BMPString";
var LocalUniversalStringValueBlock2 = class extends LocalSimpleStringBlock2 {
  fromBuffer(inputBuffer) {
    const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);
    const valueView = new Uint8Array(copyBuffer);
    for (let i2 = 0; i2 < valueView.length; i2 += 4) {
      valueView[i2] = valueView[i2 + 3];
      valueView[i2 + 1] = valueView[i2 + 2];
      valueView[i2 + 2] = 0;
      valueView[i2 + 3] = 0;
    }
    this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));
  }
  fromString(inputString) {
    const strLength = inputString.length;
    const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);
    for (let i2 = 0; i2 < strLength; i2++) {
      const codeBuf = utilToBase(inputString.charCodeAt(i2), 8);
      const codeView = new Uint8Array(codeBuf);
      if (codeView.length > 4) continue;
      const dif = 4 - codeView.length;
      for (let j = codeView.length - 1; j >= 0; j--) valueHexView[i2 * 4 + j + dif] = codeView[j];
    }
    this.valueBlock.value = inputString;
  }
};
LocalUniversalStringValueBlock2.NAME = "UniversalStringValueBlock";
var _a$g2;
var UniversalString2 = class extends LocalUniversalStringValueBlock2 {
  constructor({ ...parameters } = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 28;
  }
};
_a$g2 = UniversalString2;
(() => {
  typeStore2.UniversalString = _a$g2;
})();
UniversalString2.NAME = "UniversalString";
var _a$f2;
var NumericString2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 18;
  }
};
_a$f2 = NumericString2;
(() => {
  typeStore2.NumericString = _a$f2;
})();
NumericString2.NAME = "NumericString";
var _a$e2;
var PrintableString2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 19;
  }
};
_a$e2 = PrintableString2;
(() => {
  typeStore2.PrintableString = _a$e2;
})();
PrintableString2.NAME = "PrintableString";
var _a$d2;
var TeletexString2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 20;
  }
};
_a$d2 = TeletexString2;
(() => {
  typeStore2.TeletexString = _a$d2;
})();
TeletexString2.NAME = "TeletexString";
var _a$c2;
var VideotexString2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 21;
  }
};
_a$c2 = VideotexString2;
(() => {
  typeStore2.VideotexString = _a$c2;
})();
VideotexString2.NAME = "VideotexString";
var _a$b2;
var IA5String2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 22;
  }
};
_a$b2 = IA5String2;
(() => {
  typeStore2.IA5String = _a$b2;
})();
IA5String2.NAME = "IA5String";
var _a$a2;
var GraphicString2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 25;
  }
};
_a$a2 = GraphicString2;
(() => {
  typeStore2.GraphicString = _a$a2;
})();
GraphicString2.NAME = "GraphicString";
var _a$92;
var VisibleString2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 26;
  }
};
_a$92 = VisibleString2;
(() => {
  typeStore2.VisibleString = _a$92;
})();
VisibleString2.NAME = "VisibleString";
var _a$82;
var GeneralString2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 27;
  }
};
_a$82 = GeneralString2;
(() => {
  typeStore2.GeneralString = _a$82;
})();
GeneralString2.NAME = "GeneralString";
var _a$72;
var CharacterString2 = class extends LocalSimpleStringBlock2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 29;
  }
};
_a$72 = CharacterString2;
(() => {
  typeStore2.CharacterString = _a$72;
})();
CharacterString2.NAME = "CharacterString";
var _a$62;
var UTCTime2 = class extends VisibleString2 {
  constructor({ value, valueDate, ...parameters } = {}) {
    super(parameters);
    this.year = 0;
    this.month = 0;
    this.day = 0;
    this.hour = 0;
    this.minute = 0;
    this.second = 0;
    if (value) {
      this.fromString(value);
      this.valueBlock.valueHexView = new Uint8Array(value.length);
      for (let i2 = 0; i2 < value.length; i2++) this.valueBlock.valueHexView[i2] = value.charCodeAt(i2);
    }
    if (valueDate) {
      this.fromDate(valueDate);
      this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());
    }
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 23;
  }
  fromBuffer(inputBuffer) {
    this.fromString(String.fromCharCode.apply(null, BufferSourceConverter.toUint8Array(inputBuffer)));
  }
  toBuffer() {
    const str = this.toString();
    const buffer = new ArrayBuffer(str.length);
    const view = new Uint8Array(buffer);
    for (let i2 = 0; i2 < str.length; i2++) view[i2] = str.charCodeAt(i2);
    return buffer;
  }
  fromDate(inputDate) {
    this.year = inputDate.getUTCFullYear();
    this.month = inputDate.getUTCMonth() + 1;
    this.day = inputDate.getUTCDate();
    this.hour = inputDate.getUTCHours();
    this.minute = inputDate.getUTCMinutes();
    this.second = inputDate.getUTCSeconds();
  }
  toDate() {
    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));
  }
  fromString(inputString) {
    const parser = /(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/ig;
    const parserArray = parser.exec(inputString);
    if (parserArray === null) {
      this.error = "Wrong input string for conversion";
      return;
    }
    const year2 = parseInt(parserArray[1], 10);
    if (year2 >= 50) this.year = 1900 + year2;
    else this.year = 2e3 + year2;
    this.month = parseInt(parserArray[2], 10);
    this.day = parseInt(parserArray[3], 10);
    this.hour = parseInt(parserArray[4], 10);
    this.minute = parseInt(parserArray[5], 10);
    this.second = parseInt(parserArray[6], 10);
  }
  toString(encoding = "iso") {
    if (encoding === "iso") {
      const outputArray = new Array(7);
      outputArray[0] = padNumber(this.year < 2e3 ? this.year - 1900 : this.year - 2e3, 2);
      outputArray[1] = padNumber(this.month, 2);
      outputArray[2] = padNumber(this.day, 2);
      outputArray[3] = padNumber(this.hour, 2);
      outputArray[4] = padNumber(this.minute, 2);
      outputArray[5] = padNumber(this.second, 2);
      outputArray[6] = "Z";
      return outputArray.join("");
    }
    return super.toString(encoding);
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      year: this.year,
      month: this.month,
      day: this.day,
      hour: this.hour,
      minute: this.minute,
      second: this.second
    };
  }
};
_a$62 = UTCTime2;
(() => {
  typeStore2.UTCTime = _a$62;
})();
UTCTime2.NAME = "UTCTime";
var _a$52;
var GeneralizedTime2 = class extends UTCTime2 {
  constructor(parameters = {}) {
    var _b;
    super(parameters);
    (_b = this.millisecond) !== null && _b !== void 0 ? _b : this.millisecond = 0;
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 24;
  }
  fromDate(inputDate) {
    super.fromDate(inputDate);
    this.millisecond = inputDate.getUTCMilliseconds();
  }
  toDate() {
    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));
  }
  fromString(inputString) {
    let isUTC = false;
    let timeString = "";
    let dateTimeString = "";
    let fractionPart = 0;
    let parser;
    let hourDifference = 0;
    let minuteDifference = 0;
    if (inputString[inputString.length - 1] === "Z") {
      timeString = inputString.substring(0, inputString.length - 1);
      isUTC = true;
    } else {
      const number = new Number(inputString[inputString.length - 1]);
      if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
      timeString = inputString;
    }
    if (isUTC) {
      if (timeString.indexOf("+") !== -1) throw new Error("Wrong input string for conversion");
      if (timeString.indexOf("-") !== -1) throw new Error("Wrong input string for conversion");
    } else {
      let multiplier = 1;
      let differencePosition = timeString.indexOf("+");
      let differenceString = "";
      if (differencePosition === -1) {
        differencePosition = timeString.indexOf("-");
        multiplier = -1;
      }
      if (differencePosition !== -1) {
        differenceString = timeString.substring(differencePosition + 1);
        timeString = timeString.substring(0, differencePosition);
        if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error("Wrong input string for conversion");
        let number = parseInt(differenceString.substring(0, 2), 10);
        if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
        hourDifference = multiplier * number;
        if (differenceString.length === 4) {
          number = parseInt(differenceString.substring(2, 4), 10);
          if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
          minuteDifference = multiplier * number;
        }
      }
    }
    let fractionPointPosition = timeString.indexOf(".");
    if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(",");
    if (fractionPointPosition !== -1) {
      const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);
      if (isNaN(fractionPartCheck.valueOf())) throw new Error("Wrong input string for conversion");
      fractionPart = fractionPartCheck.valueOf();
      dateTimeString = timeString.substring(0, fractionPointPosition);
    } else dateTimeString = timeString;
    switch (true) {
      case dateTimeString.length === 8:
        parser = /(\d{4})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) throw new Error("Wrong input string for conversion");
        break;
      case dateTimeString.length === 10:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          let fractionResult = 60 * fractionPart;
          this.minute = Math.floor(fractionResult);
          fractionResult = 60 * (fractionResult - this.minute);
          this.second = Math.floor(fractionResult);
          fractionResult = 1e3 * (fractionResult - this.second);
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      case dateTimeString.length === 12:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          let fractionResult = 60 * fractionPart;
          this.second = Math.floor(fractionResult);
          fractionResult = 1e3 * (fractionResult - this.second);
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      case dateTimeString.length === 14:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          const fractionResult = 1e3 * fractionPart;
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      default:
        throw new Error("Wrong input string for conversion");
    }
    const parserArray = parser.exec(dateTimeString);
    if (parserArray === null) throw new Error("Wrong input string for conversion");
    for (let j = 1; j < parserArray.length; j++) {
      switch (j) {
        case 1:
          this.year = parseInt(parserArray[j], 10);
          break;
        case 2:
          this.month = parseInt(parserArray[j], 10);
          break;
        case 3:
          this.day = parseInt(parserArray[j], 10);
          break;
        case 4:
          this.hour = parseInt(parserArray[j], 10) + hourDifference;
          break;
        case 5:
          this.minute = parseInt(parserArray[j], 10) + minuteDifference;
          break;
        case 6:
          this.second = parseInt(parserArray[j], 10);
          break;
        default:
          throw new Error("Wrong input string for conversion");
      }
    }
    if (isUTC === false) {
      const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
      this.year = tempDate.getUTCFullYear();
      this.month = tempDate.getUTCMonth();
      this.day = tempDate.getUTCDay();
      this.hour = tempDate.getUTCHours();
      this.minute = tempDate.getUTCMinutes();
      this.second = tempDate.getUTCSeconds();
      this.millisecond = tempDate.getUTCMilliseconds();
    }
  }
  toString(encoding = "iso") {
    if (encoding === "iso") {
      const outputArray = [];
      outputArray.push(padNumber(this.year, 4));
      outputArray.push(padNumber(this.month, 2));
      outputArray.push(padNumber(this.day, 2));
      outputArray.push(padNumber(this.hour, 2));
      outputArray.push(padNumber(this.minute, 2));
      outputArray.push(padNumber(this.second, 2));
      if (this.millisecond !== 0) {
        outputArray.push(".");
        outputArray.push(padNumber(this.millisecond, 3));
      }
      outputArray.push("Z");
      return outputArray.join("");
    }
    return super.toString(encoding);
  }
  toJSON() {
    return {
      ...super.toJSON(),
      millisecond: this.millisecond
    };
  }
};
_a$52 = GeneralizedTime2;
(() => {
  typeStore2.GeneralizedTime = _a$52;
})();
GeneralizedTime2.NAME = "GeneralizedTime";
var _a$42;
var DATE3 = class extends Utf8String2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 31;
  }
};
_a$42 = DATE3;
(() => {
  typeStore2.DATE = _a$42;
})();
DATE3.NAME = "DATE";
var _a$32;
var TimeOfDay2 = class extends Utf8String2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 32;
  }
};
_a$32 = TimeOfDay2;
(() => {
  typeStore2.TimeOfDay = _a$32;
})();
TimeOfDay2.NAME = "TimeOfDay";
var _a$22;
var DateTime2 = class extends Utf8String2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 33;
  }
};
_a$22 = DateTime2;
(() => {
  typeStore2.DateTime = _a$22;
})();
DateTime2.NAME = "DateTime";
var _a$12;
var Duration2 = class extends Utf8String2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 34;
  }
};
_a$12 = Duration2;
(() => {
  typeStore2.Duration = _a$12;
})();
Duration2.NAME = "Duration";
var _a3;
var TIME2 = class extends Utf8String2 {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 14;
  }
};
_a3 = TIME2;
(() => {
  typeStore2.TIME = _a3;
})();
TIME2.NAME = "TIME";

// deno:https://deno.land/x/cbor@v1.5.8/index.js?module
var cbor_v1_5_exports = {};
__export(cbor_v1_5_exports, {
  ALWAYS: () => ALWAYS,
  DECIMAL_FIT: () => DECIMAL_FIT,
  DECIMAL_ROUND: () => DECIMAL_ROUND,
  Decoder: () => Decoder,
  Encoder: () => Encoder,
  FLOAT32_OPTIONS: () => FLOAT32_OPTIONS,
  NEVER: () => NEVER,
  REUSE_BUFFER_MODE: () => REUSE_BUFFER_MODE,
  Tag: () => Tag,
  addExtension: () => addExtension2,
  clearSource: () => clearSource,
  decode: () => decode4,
  decodeIter: () => decodeIter,
  decodeMultiple: () => decodeMultiple,
  encode: () => encode3,
  encodeAsAsyncIterable: () => encodeAsAsyncIterable,
  encodeAsIterable: () => encodeAsIterable,
  encodeIter: () => encodeIter,
  isNativeAccelerationEnabled: () => isNativeAccelerationEnabled,
  roundFloat32: () => roundFloat32
});

// deno:https://deno.land/x/cbor@v1.5.8/decode.js
var decoder2;
try {
  decoder2 = new TextDecoder();
} catch (error2) {
}
var src;
var srcEnd;
var position = 0;
var EMPTY_ARRAY = [];
var LEGACY_RECORD_INLINE_ID = 105;
var RECORD_DEFINITIONS_ID = 57342;
var RECORD_INLINE_ID = 57343;
var BUNDLED_STRINGS_ID = 57337;
var PACKED_REFERENCE_TAG_ID = 6;
var STOP_CODE = {};
var strings = EMPTY_ARRAY;
var stringPosition = 0;
var currentDecoder = {};
var currentStructures;
var srcString;
var srcStringStart = 0;
var srcStringEnd = 0;
var bundledStrings;
var referenceMap;
var currentExtensions = [];
var currentExtensionRanges = [];
var packedValues;
var dataView;
var restoreMapsAsObject;
var defaultOptions = {
  useRecords: false,
  mapsAsObjects: true
};
var sequentialMode = false;
var inlineObjectReadThreshold = 2;
try {
  new Function("");
} catch (error2) {
  inlineObjectReadThreshold = Infinity;
}
var Decoder = class _Decoder {
  constructor(options) {
    if (options) {
      if ((options.keyMap || options._keyMap) && !options.useRecords) {
        options.useRecords = false;
        options.mapsAsObjects = true;
      }
      if (options.useRecords === false && options.mapsAsObjects === void 0) options.mapsAsObjects = true;
      if (options.getStructures) options.getShared = options.getStructures;
      if (options.getShared && !options.structures) (options.structures = []).uninitialized = true;
      if (options.keyMap) {
        this.mapKey = /* @__PURE__ */ new Map();
        for (let [k, v] of Object.entries(options.keyMap)) this.mapKey.set(v, k);
      }
    }
    Object.assign(this, options);
  }
  /*
  decodeKey(key) {
  	return this.keyMap
  		? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key
  		: key
  }
  */
  decodeKey(key) {
    return this.keyMap ? this.mapKey.get(key) || key : key;
  }
  encodeKey(key) {
    return this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key;
  }
  encodeKeys(rec) {
    if (!this._keyMap) return rec;
    let map2 = /* @__PURE__ */ new Map();
    for (let [k, v] of Object.entries(rec)) map2.set(this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k, v);
    return map2;
  }
  decodeKeys(map2) {
    if (!this._keyMap || map2.constructor.name != "Map") return map2;
    if (!this._mapKey) {
      this._mapKey = /* @__PURE__ */ new Map();
      for (let [k, v] of Object.entries(this._keyMap)) this._mapKey.set(v, k);
    }
    let res = {};
    map2.forEach((v, k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] = v);
    return res;
  }
  mapDecode(source, end) {
    let res = this.decode(source);
    if (this._keyMap) {
      switch (res.constructor.name) {
        case "Array":
          return res.map((r2) => this.decodeKeys(r2));
      }
    }
    return res;
  }
  decode(source, end) {
    if (src) {
      return saveState(() => {
        clearSource();
        return this ? this.decode(source, end) : _Decoder.prototype.decode.call(defaultOptions, source, end);
      });
    }
    srcEnd = end > -1 ? end : source.length;
    position = 0;
    stringPosition = 0;
    srcStringEnd = 0;
    srcString = null;
    strings = EMPTY_ARRAY;
    bundledStrings = null;
    src = source;
    try {
      dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));
    } catch (error2) {
      src = null;
      if (source instanceof Uint8Array) throw error2;
      throw new Error("Source must be a Uint8Array or Buffer but was a " + (source && typeof source == "object" ? source.constructor.name : typeof source));
    }
    if (this instanceof _Decoder) {
      currentDecoder = this;
      packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);
      if (this.structures) {
        currentStructures = this.structures;
        return checkedRead();
      } else if (!currentStructures || currentStructures.length > 0) {
        currentStructures = [];
      }
    } else {
      currentDecoder = defaultOptions;
      if (!currentStructures || currentStructures.length > 0) currentStructures = [];
      packedValues = null;
    }
    return checkedRead();
  }
  decodeMultiple(source, forEach) {
    let values, lastPosition = 0;
    try {
      let size = source.length;
      sequentialMode = true;
      let value = this ? this.decode(source, size) : defaultDecoder.decode(source, size);
      if (forEach) {
        if (forEach(value) === false) {
          return;
        }
        while (position < size) {
          lastPosition = position;
          if (forEach(checkedRead()) === false) {
            return;
          }
        }
      } else {
        values = [
          value
        ];
        while (position < size) {
          lastPosition = position;
          values.push(checkedRead());
        }
        return values;
      }
    } catch (error2) {
      error2.lastPosition = lastPosition;
      error2.values = values;
      throw error2;
    } finally {
      sequentialMode = false;
      clearSource();
    }
  }
};
function checkedRead() {
  try {
    let result = read();
    if (bundledStrings) {
      if (position >= bundledStrings.postBundlePosition) {
        let error2 = new Error("Unexpected bundle position");
        error2.incomplete = true;
        throw error2;
      }
      position = bundledStrings.postBundlePosition;
      bundledStrings = null;
    }
    if (position == srcEnd) {
      currentStructures = null;
      src = null;
      if (referenceMap) referenceMap = null;
    } else if (position > srcEnd) {
      let error2 = new Error("Unexpected end of CBOR data");
      error2.incomplete = true;
      throw error2;
    } else if (!sequentialMode) {
      throw new Error("Data read, but end of buffer not reached");
    }
    return result;
  } catch (error2) {
    clearSource();
    if (error2 instanceof RangeError || error2.message.startsWith("Unexpected end of buffer")) {
      error2.incomplete = true;
    }
    throw error2;
  }
}
function read() {
  let token = src[position++];
  let majorType = token >> 5;
  token = token & 31;
  if (token > 23) {
    switch (token) {
      case 24:
        token = src[position++];
        break;
      case 25:
        if (majorType == 7) {
          return getFloat16();
        }
        token = dataView.getUint16(position);
        position += 2;
        break;
      case 26:
        if (majorType == 7) {
          let value = dataView.getFloat32(position);
          if (currentDecoder.useFloat32 > 2) {
            let multiplier = mult10[(src[position] & 127) << 1 | src[position + 1] >> 7];
            position += 4;
            return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;
          }
          position += 4;
          return value;
        }
        token = dataView.getUint32(position);
        position += 4;
        break;
      case 27:
        if (majorType == 7) {
          let value = dataView.getFloat64(position);
          position += 8;
          return value;
        }
        if (majorType > 1) {
          if (dataView.getUint32(position) > 0) throw new Error("JavaScript does not support arrays, maps, or strings with length over 4294967295");
          token = dataView.getUint32(position + 4);
        } else if (currentDecoder.int64AsNumber) {
          token = dataView.getUint32(position) * 4294967296;
          token += dataView.getUint32(position + 4);
        } else token = dataView.getBigUint64(position);
        position += 8;
        break;
      case 31:
        switch (majorType) {
          case 2:
          case 3:
            throw new Error("Indefinite length not supported for byte or text strings");
          case 4:
            let array = [];
            let value, i2 = 0;
            while ((value = read()) != STOP_CODE) {
              array[i2++] = value;
            }
            return majorType == 4 ? array : majorType == 3 ? array.join("") : Buffer.concat(array);
          case 5:
            let key;
            if (currentDecoder.mapsAsObjects) {
              let object = {};
              if (currentDecoder.keyMap) while ((key = read()) != STOP_CODE) object[safeKey(currentDecoder.decodeKey(key))] = read();
              else while ((key = read()) != STOP_CODE) object[safeKey(key)] = read();
              return object;
            } else {
              if (restoreMapsAsObject) {
                currentDecoder.mapsAsObjects = true;
                restoreMapsAsObject = false;
              }
              let map2 = /* @__PURE__ */ new Map();
              if (currentDecoder.keyMap) while ((key = read()) != STOP_CODE) map2.set(currentDecoder.decodeKey(key), read());
              else while ((key = read()) != STOP_CODE) map2.set(key, read());
              return map2;
            }
          case 7:
            return STOP_CODE;
          default:
            throw new Error("Invalid major type for indefinite length " + majorType);
        }
      default:
        throw new Error("Unknown token " + token);
    }
  }
  switch (majorType) {
    case 0:
      return token;
    case 1:
      return ~token;
    case 2:
      return readBin(token);
    case 3:
      if (srcStringEnd >= position) {
        return srcString.slice(position - srcStringStart, (position += token) - srcStringStart);
      }
      if (srcStringEnd == 0 && srcEnd < 140 && token < 32) {
        let string = token < 16 ? shortStringInJS(token) : longStringInJS(token);
        if (string != null) return string;
      }
      return readFixedString(token);
    case 4:
      let array = new Array(token);
      for (let i2 = 0; i2 < token; i2++) array[i2] = read();
      return array;
    case 5:
      if (currentDecoder.mapsAsObjects) {
        let object = {};
        if (currentDecoder.keyMap) for (let i2 = 0; i2 < token; i2++) object[safeKey(currentDecoder.decodeKey(read()))] = read();
        else for (let i2 = 0; i2 < token; i2++) object[safeKey(read())] = read();
        return object;
      } else {
        if (restoreMapsAsObject) {
          currentDecoder.mapsAsObjects = true;
          restoreMapsAsObject = false;
        }
        let map2 = /* @__PURE__ */ new Map();
        if (currentDecoder.keyMap) for (let i2 = 0; i2 < token; i2++) map2.set(currentDecoder.decodeKey(read()), read());
        else for (let i2 = 0; i2 < token; i2++) map2.set(read(), read());
        return map2;
      }
    case 6:
      if (token >= BUNDLED_STRINGS_ID) {
        let structure = currentStructures[token & 8191];
        if (structure) {
          if (!structure.read) structure.read = createStructureReader(structure);
          return structure.read();
        }
        if (token < 65536) {
          if (token == RECORD_INLINE_ID) {
            let length = readJustLength();
            let id = read();
            let structure2 = read();
            recordDefinition(id, structure2);
            let object = {};
            if (currentDecoder.keyMap) for (let i2 = 2; i2 < length; i2++) {
              let key = currentDecoder.decodeKey(structure2[i2 - 2]);
              object[safeKey(key)] = read();
            }
            else for (let i2 = 2; i2 < length; i2++) {
              let key = structure2[i2 - 2];
              object[safeKey(key)] = read();
            }
            return object;
          } else if (token == RECORD_DEFINITIONS_ID) {
            let length = readJustLength();
            let id = read();
            for (let i2 = 2; i2 < length; i2++) {
              recordDefinition(id++, read());
            }
            return read();
          } else if (token == BUNDLED_STRINGS_ID) {
            return readBundleExt();
          }
          if (currentDecoder.getShared) {
            loadShared();
            structure = currentStructures[token & 8191];
            if (structure) {
              if (!structure.read) structure.read = createStructureReader(structure);
              return structure.read();
            }
          }
        }
      }
      let extension = currentExtensions[token];
      if (extension) {
        if (extension.handlesRead) return extension(read);
        else return extension(read());
      } else {
        let input = read();
        for (let i2 = 0; i2 < currentExtensionRanges.length; i2++) {
          let value = currentExtensionRanges[i2](token, input);
          if (value !== void 0) return value;
        }
        return new Tag(input, token);
      }
    case 7:
      switch (token) {
        case 20:
          return false;
        case 21:
          return true;
        case 22:
          return null;
        case 23:
          return;
        // undefined
        case 31:
        default:
          let packedValue = (packedValues || getPackedValues())[token];
          if (packedValue !== void 0) return packedValue;
          throw new Error("Unknown token " + token);
      }
    default:
      if (isNaN(token)) {
        let error2 = new Error("Unexpected end of CBOR data");
        error2.incomplete = true;
        throw error2;
      }
      throw new Error("Unknown CBOR token " + token);
  }
}
var validName = /^[a-zA-Z_$][a-zA-Z\d_$]*$/;
function createStructureReader(structure) {
  function readObject() {
    let length = src[position++];
    length = length & 31;
    if (length > 23) {
      switch (length) {
        case 24:
          length = src[position++];
          break;
        case 25:
          length = dataView.getUint16(position);
          position += 2;
          break;
        case 26:
          length = dataView.getUint32(position);
          position += 4;
          break;
        default:
          throw new Error("Expected array header, but got " + src[position - 1]);
      }
    }
    let compiledReader = this.compiledReader;
    while (compiledReader) {
      if (compiledReader.propertyCount === length) return compiledReader(read);
      compiledReader = compiledReader.next;
    }
    if (this.slowReads++ >= inlineObjectReadThreshold) {
      let array = this.length == length ? this : this.slice(0, length);
      compiledReader = currentDecoder.keyMap ? new Function("r", "return {" + array.map((k) => currentDecoder.decodeKey(k)).map((k) => validName.test(k) ? safeKey(k) + ":r()" : "[" + JSON.stringify(k) + "]:r()").join(",") + "}") : new Function("r", "return {" + array.map((key) => validName.test(key) ? safeKey(key) + ":r()" : "[" + JSON.stringify(key) + "]:r()").join(",") + "}");
      if (this.compiledReader) compiledReader.next = this.compiledReader;
      compiledReader.propertyCount = length;
      this.compiledReader = compiledReader;
      return compiledReader(read);
    }
    let object = {};
    if (currentDecoder.keyMap) for (let i2 = 0; i2 < length; i2++) object[safeKey(currentDecoder.decodeKey(this[i2]))] = read();
    else for (let i2 = 0; i2 < length; i2++) {
      object[safeKey(this[i2])] = read();
    }
    return object;
  }
  structure.slowReads = 0;
  return readObject;
}
function safeKey(key) {
  if (typeof key === "string") return key === "__proto__" ? "__proto_" : key;
  if (typeof key !== "object") return key.toString();
  throw new Error("Invalid property name type " + typeof key);
}
var readFixedString = readStringJS;
var isNativeAccelerationEnabled = false;
function readStringJS(length) {
  let result;
  if (length < 16) {
    if (result = shortStringInJS(length)) return result;
  }
  if (length > 64 && decoder2) return decoder2.decode(src.subarray(position, position += length));
  const end = position + length;
  const units = [];
  result = "";
  while (position < end) {
    const byte1 = src[position++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = src[position++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = src[position++] & 63;
      const byte3 = src[position++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = src[position++] & 63;
      const byte3 = src[position++] & 63;
      const byte4 = src[position++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= 4096) {
      result += fromCharCode.apply(String, units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += fromCharCode.apply(String, units);
  }
  return result;
}
var fromCharCode = String.fromCharCode;
function longStringInJS(length) {
  let start = position;
  let bytes = new Array(length);
  for (let i2 = 0; i2 < length; i2++) {
    const byte = src[position++];
    if ((byte & 128) > 0) {
      position = start;
      return;
    }
    bytes[i2] = byte;
  }
  return fromCharCode.apply(String, bytes);
}
function shortStringInJS(length) {
  if (length < 4) {
    if (length < 2) {
      if (length === 0) return "";
      else {
        let a2 = src[position++];
        if ((a2 & 128) > 1) {
          position -= 1;
          return;
        }
        return fromCharCode(a2);
      }
    } else {
      let a2 = src[position++];
      let b = src[position++];
      if ((a2 & 128) > 0 || (b & 128) > 0) {
        position -= 2;
        return;
      }
      if (length < 3) return fromCharCode(a2, b);
      let c = src[position++];
      if ((c & 128) > 0) {
        position -= 3;
        return;
      }
      return fromCharCode(a2, b, c);
    }
  } else {
    let a2 = src[position++];
    let b = src[position++];
    let c = src[position++];
    let d = src[position++];
    if ((a2 & 128) > 0 || (b & 128) > 0 || (c & 128) > 0 || (d & 128) > 0) {
      position -= 4;
      return;
    }
    if (length < 6) {
      if (length === 4) return fromCharCode(a2, b, c, d);
      else {
        let e2 = src[position++];
        if ((e2 & 128) > 0) {
          position -= 5;
          return;
        }
        return fromCharCode(a2, b, c, d, e2);
      }
    } else if (length < 8) {
      let e2 = src[position++];
      let f = src[position++];
      if ((e2 & 128) > 0 || (f & 128) > 0) {
        position -= 6;
        return;
      }
      if (length < 7) return fromCharCode(a2, b, c, d, e2, f);
      let g = src[position++];
      if ((g & 128) > 0) {
        position -= 7;
        return;
      }
      return fromCharCode(a2, b, c, d, e2, f, g);
    } else {
      let e2 = src[position++];
      let f = src[position++];
      let g = src[position++];
      let h = src[position++];
      if ((e2 & 128) > 0 || (f & 128) > 0 || (g & 128) > 0 || (h & 128) > 0) {
        position -= 8;
        return;
      }
      if (length < 10) {
        if (length === 8) return fromCharCode(a2, b, c, d, e2, f, g, h);
        else {
          let i2 = src[position++];
          if ((i2 & 128) > 0) {
            position -= 9;
            return;
          }
          return fromCharCode(a2, b, c, d, e2, f, g, h, i2);
        }
      } else if (length < 12) {
        let i2 = src[position++];
        let j = src[position++];
        if ((i2 & 128) > 0 || (j & 128) > 0) {
          position -= 10;
          return;
        }
        if (length < 11) return fromCharCode(a2, b, c, d, e2, f, g, h, i2, j);
        let k = src[position++];
        if ((k & 128) > 0) {
          position -= 11;
          return;
        }
        return fromCharCode(a2, b, c, d, e2, f, g, h, i2, j, k);
      } else {
        let i2 = src[position++];
        let j = src[position++];
        let k = src[position++];
        let l = src[position++];
        if ((i2 & 128) > 0 || (j & 128) > 0 || (k & 128) > 0 || (l & 128) > 0) {
          position -= 12;
          return;
        }
        if (length < 14) {
          if (length === 12) return fromCharCode(a2, b, c, d, e2, f, g, h, i2, j, k, l);
          else {
            let m2 = src[position++];
            if ((m2 & 128) > 0) {
              position -= 13;
              return;
            }
            return fromCharCode(a2, b, c, d, e2, f, g, h, i2, j, k, l, m2);
          }
        } else {
          let m2 = src[position++];
          let n2 = src[position++];
          if ((m2 & 128) > 0 || (n2 & 128) > 0) {
            position -= 14;
            return;
          }
          if (length < 15) return fromCharCode(a2, b, c, d, e2, f, g, h, i2, j, k, l, m2, n2);
          let o2 = src[position++];
          if ((o2 & 128) > 0) {
            position -= 15;
            return;
          }
          return fromCharCode(a2, b, c, d, e2, f, g, h, i2, j, k, l, m2, n2, o2);
        }
      }
    }
  }
}
function readBin(length) {
  return currentDecoder.copyBuffers ? (
    // specifically use the copying slice (not the node one)
    Uint8Array.prototype.slice.call(src, position, position += length)
  ) : src.subarray(position, position += length);
}
var f32Array = new Float32Array(1);
var u8Array = new Uint8Array(f32Array.buffer, 0, 4);
function getFloat16() {
  let byte0 = src[position++];
  let byte1 = src[position++];
  let exponent = (byte0 & 127) >> 2;
  if (exponent === 31) {
    if (byte1 || byte0 & 3) return NaN;
    return byte0 & 128 ? -Infinity : Infinity;
  }
  if (exponent === 0) {
    let abs = ((byte0 & 3) << 8 | byte1) / (1 << 24);
    return byte0 & 128 ? -abs : abs;
  }
  u8Array[3] = byte0 & 128 | // sign bit
  (exponent >> 1) + 56;
  u8Array[2] = (byte0 & 7) << 5 | // last exponent bit and first two mantissa bits
  byte1 >> 3;
  u8Array[1] = byte1 << 5;
  u8Array[0] = 0;
  return f32Array[0];
}
var keyCache = new Array(4096);
var Tag = class {
  constructor(value, tag) {
    this.value = value;
    this.tag = tag;
  }
};
currentExtensions[0] = (dateString) => {
  return new Date(dateString);
};
currentExtensions[1] = (epochSec) => {
  return new Date(Math.round(epochSec * 1e3));
};
currentExtensions[2] = (buffer) => {
  let value = BigInt(0);
  for (let i2 = 0, l = buffer.byteLength; i2 < l; i2++) {
    value = BigInt(buffer[i2]) + value << BigInt(8);
  }
  return value;
};
currentExtensions[3] = (buffer) => {
  return BigInt(-1) - currentExtensions[2](buffer);
};
currentExtensions[4] = (fraction) => {
  return +(fraction[1] + "e" + fraction[0]);
};
currentExtensions[5] = (fraction) => {
  return fraction[1] * Math.exp(fraction[0] * Math.log(2));
};
var recordDefinition = (id, structure) => {
  id = id - 57344;
  let existingStructure = currentStructures[id];
  if (existingStructure && existingStructure.isShared) {
    (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;
  }
  currentStructures[id] = structure;
  structure.read = createStructureReader(structure);
};
currentExtensions[LEGACY_RECORD_INLINE_ID] = (data) => {
  let length = data.length;
  let structure = data[1];
  recordDefinition(data[0], structure);
  let object = {};
  for (let i2 = 2; i2 < length; i2++) {
    let key = structure[i2 - 2];
    object[safeKey(key)] = data[i2];
  }
  return object;
};
currentExtensions[14] = (value) => {
  if (bundledStrings) return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value);
  return new Tag(value, 14);
};
currentExtensions[15] = (value) => {
  if (bundledStrings) return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);
  return new Tag(value, 15);
};
var glbl = {
  Error,
  RegExp
};
currentExtensions[27] = (data) => {
  return (glbl[data[0]] || Error)(data[1], data[2]);
};
var packedTable = (read2) => {
  if (src[position++] != 132) {
    let error2 = new Error("Packed values structure must be followed by a 4 element array");
    if (src.length < position) error2.incomplete = true;
    throw error2;
  }
  let newPackedValues = read2();
  if (!newPackedValues || !newPackedValues.length) {
    let error2 = new Error("Packed values structure must be followed by a 4 element array");
    error2.incomplete = true;
    throw error2;
  }
  packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;
  packedValues.prefixes = read2();
  packedValues.suffixes = read2();
  return read2();
};
packedTable.handlesRead = true;
currentExtensions[51] = packedTable;
currentExtensions[PACKED_REFERENCE_TAG_ID] = (data) => {
  if (!packedValues) {
    if (currentDecoder.getShared) loadShared();
    else return new Tag(data, PACKED_REFERENCE_TAG_ID);
  }
  if (typeof data == "number") return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];
  let error2 = new Error("No support for non-integer packed references yet");
  if (data === void 0) error2.incomplete = true;
  throw error2;
};
currentExtensions[28] = (read2) => {
  if (!referenceMap) {
    referenceMap = /* @__PURE__ */ new Map();
    referenceMap.id = 0;
  }
  let id = referenceMap.id++;
  let token = src[position];
  let target2;
  if (token >> 5 == 4) target2 = [];
  else target2 = {};
  let refEntry = {
    target: target2
  };
  referenceMap.set(id, refEntry);
  let targetProperties = read2();
  if (refEntry.used) return Object.assign(target2, targetProperties);
  refEntry.target = targetProperties;
  return targetProperties;
};
currentExtensions[28].handlesRead = true;
currentExtensions[29] = (id) => {
  let refEntry = referenceMap.get(id);
  refEntry.used = true;
  return refEntry.target;
};
currentExtensions[258] = (array) => new Set(array);
(currentExtensions[259] = (read2) => {
  if (currentDecoder.mapsAsObjects) {
    currentDecoder.mapsAsObjects = false;
    restoreMapsAsObject = true;
  }
  return read2();
}).handlesRead = true;
function combine(a2, b) {
  if (typeof a2 === "string") return a2 + b;
  if (a2 instanceof Array) return a2.concat(b);
  return Object.assign({}, a2, b);
}
function getPackedValues() {
  if (!packedValues) {
    if (currentDecoder.getShared) loadShared();
    else throw new Error("No packed values available");
  }
  return packedValues;
}
var SHARED_DATA_TAG_ID = 1399353956;
currentExtensionRanges.push((tag, input) => {
  if (tag >= 225 && tag <= 255) return combine(getPackedValues().prefixes[tag - 224], input);
  if (tag >= 28704 && tag <= 32767) return combine(getPackedValues().prefixes[tag - 28672], input);
  if (tag >= 1879052288 && tag <= 2147483647) return combine(getPackedValues().prefixes[tag - 1879048192], input);
  if (tag >= 216 && tag <= 223) return combine(input, getPackedValues().suffixes[tag - 216]);
  if (tag >= 27647 && tag <= 28671) return combine(input, getPackedValues().suffixes[tag - 27639]);
  if (tag >= 1811940352 && tag <= 1879048191) return combine(input, getPackedValues().suffixes[tag - 1811939328]);
  if (tag == SHARED_DATA_TAG_ID) {
    return {
      packedValues,
      structures: currentStructures.slice(0),
      version: input
    };
  }
  if (tag == 55799) return input;
});
var isLittleEndianMachine = new Uint8Array(new Uint16Array([
  1
]).buffer)[0] == 1;
var typedArrays = [
  Uint8Array,
  Uint8ClampedArray,
  Uint16Array,
  Uint32Array,
  typeof BigUint64Array == "undefined" ? {
    name: "BigUint64Array"
  } : BigUint64Array,
  Int8Array,
  Int16Array,
  Int32Array,
  typeof BigInt64Array == "undefined" ? {
    name: "BigInt64Array"
  } : BigInt64Array,
  Float32Array,
  Float64Array
];
var typedArrayTags = [
  64,
  68,
  69,
  70,
  71,
  72,
  77,
  78,
  79,
  85,
  86
];
for (let i2 = 0; i2 < typedArrays.length; i2++) {
  registerTypedArray(typedArrays[i2], typedArrayTags[i2]);
}
function registerTypedArray(TypedArray, tag) {
  let dvMethod = "get" + TypedArray.name.slice(0, -5);
  let bytesPerElement;
  if (typeof TypedArray === "function") bytesPerElement = TypedArray.BYTES_PER_ELEMENT;
  else TypedArray = null;
  for (let littleEndian = 0; littleEndian < 2; littleEndian++) {
    if (!littleEndian && bytesPerElement == 1) continue;
    let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : 3;
    currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine ? (buffer) => {
      if (!TypedArray) throw new Error("Could not find typed array for code " + tag);
      if (!currentDecoder.copyBuffers) {
        if (bytesPerElement === 1 || bytesPerElement === 2 && !(buffer.byteOffset & 1) || bytesPerElement === 4 && !(buffer.byteOffset & 3) || bytesPerElement === 8 && !(buffer.byteOffset & 7)) return new TypedArray(buffer.buffer, buffer.byteOffset, buffer.byteLength);
      }
      return new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer);
    } : (buffer) => {
      if (!TypedArray) throw new Error("Could not find typed array for code " + tag);
      let dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
      let elements = buffer.length >> sizeShift;
      let ta = new TypedArray(elements);
      let method = dv[dvMethod];
      for (let i2 = 0; i2 < elements; i2++) {
        ta[i2] = method.call(dv, i2 << sizeShift, littleEndian);
      }
      return ta;
    };
  }
}
function readBundleExt() {
  let length = readJustLength();
  let bundlePosition = position + read();
  for (let i2 = 2; i2 < length; i2++) {
    let bundleLength = readJustLength();
    position += bundleLength;
  }
  let dataPosition = position;
  position = bundlePosition;
  bundledStrings = [
    readStringJS(readJustLength()),
    readStringJS(readJustLength())
  ];
  bundledStrings.position0 = 0;
  bundledStrings.position1 = 0;
  bundledStrings.postBundlePosition = position;
  position = dataPosition;
  return read();
}
function readJustLength() {
  let token = src[position++] & 31;
  if (token > 23) {
    switch (token) {
      case 24:
        token = src[position++];
        break;
      case 25:
        token = dataView.getUint16(position);
        position += 2;
        break;
      case 26:
        token = dataView.getUint32(position);
        position += 4;
        break;
    }
  }
  return token;
}
function loadShared() {
  if (currentDecoder.getShared) {
    let sharedData = saveState(() => {
      src = null;
      return currentDecoder.getShared();
    }) || {};
    let updatedStructures = sharedData.structures || [];
    currentDecoder.sharedVersion = sharedData.version;
    packedValues = currentDecoder.sharedValues = sharedData.packedValues;
    if (currentStructures === true) currentDecoder.structures = currentStructures = updatedStructures;
    else currentStructures.splice.apply(currentStructures, [
      0,
      updatedStructures.length
    ].concat(updatedStructures));
  }
}
function saveState(callback) {
  let savedSrcEnd = srcEnd;
  let savedPosition = position;
  let savedStringPosition = stringPosition;
  let savedSrcStringStart = srcStringStart;
  let savedSrcStringEnd = srcStringEnd;
  let savedSrcString = srcString;
  let savedStrings = strings;
  let savedReferenceMap = referenceMap;
  let savedBundledStrings = bundledStrings;
  let savedSrc = new Uint8Array(src.slice(0, srcEnd));
  let savedStructures = currentStructures;
  let savedDecoder = currentDecoder;
  let savedSequentialMode = sequentialMode;
  let value = callback();
  srcEnd = savedSrcEnd;
  position = savedPosition;
  stringPosition = savedStringPosition;
  srcStringStart = savedSrcStringStart;
  srcStringEnd = savedSrcStringEnd;
  srcString = savedSrcString;
  strings = savedStrings;
  referenceMap = savedReferenceMap;
  bundledStrings = savedBundledStrings;
  src = savedSrc;
  sequentialMode = savedSequentialMode;
  currentStructures = savedStructures;
  currentDecoder = savedDecoder;
  dataView = new DataView(src.buffer, src.byteOffset, src.byteLength);
  return value;
}
function clearSource() {
  src = null;
  referenceMap = null;
  currentStructures = null;
}
function addExtension(extension) {
  currentExtensions[extension.tag] = extension.decode;
}
var mult10 = new Array(147);
for (let i2 = 0; i2 < 256; i2++) {
  mult10[i2] = +("1e" + Math.floor(45.15 - i2 * 0.30103));
}
var defaultDecoder = new Decoder({
  useRecords: false
});
var decode4 = defaultDecoder.decode;
var decodeMultiple = defaultDecoder.decodeMultiple;
var FLOAT32_OPTIONS = {
  NEVER: 0,
  ALWAYS: 1,
  DECIMAL_ROUND: 3,
  DECIMAL_FIT: 4
};
function roundFloat32(float32Number) {
  f32Array[0] = float32Number;
  let multiplier = mult10[(u8Array[3] & 127) << 1 | u8Array[2] >> 7];
  return (multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5) >> 0) / multiplier;
}

// deno:https://deno.land/x/cbor@v1.5.8/encode.js
var textEncoder;
try {
  textEncoder = new TextEncoder();
} catch (error2) {
}
var extensions;
var extensionClasses;
var Buffer2 = typeof globalThis === "object" && globalThis.Buffer;
var hasNodeBuffer = typeof Buffer2 !== "undefined";
var ByteArrayAllocate = hasNodeBuffer ? Buffer2.allocUnsafeSlow : Uint8Array;
var ByteArray = hasNodeBuffer ? Buffer2 : Uint8Array;
var MAX_STRUCTURES = 256;
var MAX_BUFFER_SIZE = hasNodeBuffer ? 4294967296 : 2144337920;
var throwOnIterable;
var target;
var targetView;
var position2 = 0;
var safeEnd;
var bundledStrings2 = null;
var MAX_BUNDLE_SIZE = 61440;
var hasNonLatin = /[\u0080-\uFFFF]/;
var RECORD_SYMBOL = Symbol("record-id");
var Encoder = class extends Decoder {
  constructor(options) {
    super(options);
    this.offset = 0;
    let typeBuffer;
    let start;
    let sharedStructures;
    let hasSharedUpdate;
    let structures;
    let referenceMap2;
    options = options || {};
    let encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position3, maxBytes) {
      return target.utf8Write(string, position3, maxBytes);
    } : textEncoder && textEncoder.encodeInto ? function(string, position3) {
      return textEncoder.encodeInto(string, target.subarray(position3)).written;
    } : false;
    let encoder2 = this;
    let hasSharedStructures = options.structures || options.saveStructures;
    let maxSharedStructures = options.maxSharedStructures;
    if (maxSharedStructures == null) maxSharedStructures = hasSharedStructures ? 128 : 0;
    if (maxSharedStructures > 8190) throw new Error("Maximum maxSharedStructure is 8190");
    let isSequential = options.sequential;
    if (isSequential) {
      maxSharedStructures = 0;
    }
    if (!this.structures) this.structures = [];
    if (this.saveStructures) this.saveShared = this.saveStructures;
    let samplingPackedValues, packedObjectMap2, sharedValues = options.sharedValues;
    let sharedPackedObjectMap2;
    if (sharedValues) {
      sharedPackedObjectMap2 = /* @__PURE__ */ Object.create(null);
      for (let i2 = 0, l = sharedValues.length; i2 < l; i2++) {
        sharedPackedObjectMap2[sharedValues[i2]] = i2;
      }
    }
    let recordIdsToRemove = [];
    let transitionsCount = 0;
    let serializationsSinceTransitionRebuild = 0;
    this.mapEncode = function(value, encodeOptions) {
      if (this._keyMap && !this._mapped) {
        switch (value.constructor.name) {
          case "Array":
            value = value.map((r2) => this.encodeKeys(r2));
            break;
        }
      }
      return this.encode(value, encodeOptions);
    };
    this.encode = function(value, encodeOptions) {
      if (!target) {
        target = new ByteArrayAllocate(8192);
        targetView = new DataView(target.buffer, 0, 8192);
        position2 = 0;
      }
      safeEnd = target.length - 10;
      if (safeEnd - position2 < 2048) {
        target = new ByteArrayAllocate(target.length);
        targetView = new DataView(target.buffer, 0, target.length);
        safeEnd = target.length - 10;
        position2 = 0;
      } else if (encodeOptions === REUSE_BUFFER_MODE) position2 = position2 + 7 & 2147483640;
      start = position2;
      if (encoder2.useSelfDescribedHeader) {
        targetView.setUint32(position2, 3654940416);
        position2 += 3;
      }
      referenceMap2 = encoder2.structuredClone ? /* @__PURE__ */ new Map() : null;
      if (encoder2.bundleStrings && typeof value !== "string") {
        bundledStrings2 = [];
        bundledStrings2.size = Infinity;
      } else bundledStrings2 = null;
      sharedStructures = encoder2.structures;
      if (sharedStructures) {
        if (sharedStructures.uninitialized) {
          let sharedData = encoder2.getShared() || {};
          encoder2.structures = sharedStructures = sharedData.structures || [];
          encoder2.sharedVersion = sharedData.version;
          let sharedValues2 = encoder2.sharedValues = sharedData.packedValues;
          if (sharedValues2) {
            sharedPackedObjectMap2 = {};
            for (let i2 = 0, l = sharedValues2.length; i2 < l; i2++) sharedPackedObjectMap2[sharedValues2[i2]] = i2;
          }
        }
        let sharedStructuresLength = sharedStructures.length;
        if (sharedStructuresLength > maxSharedStructures && !isSequential) sharedStructuresLength = maxSharedStructures;
        if (!sharedStructures.transitions) {
          sharedStructures.transitions = /* @__PURE__ */ Object.create(null);
          for (let i2 = 0; i2 < sharedStructuresLength; i2++) {
            let keys = sharedStructures[i2];
            if (!keys) continue;
            let nextTransition, transition = sharedStructures.transitions;
            for (let j = 0, l = keys.length; j < l; j++) {
              if (transition[RECORD_SYMBOL] === void 0) transition[RECORD_SYMBOL] = i2;
              let key = keys[j];
              nextTransition = transition[key];
              if (!nextTransition) {
                nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
              }
              transition = nextTransition;
            }
            transition[RECORD_SYMBOL] = i2 | 1048576;
          }
        }
        if (!isSequential) sharedStructures.nextId = sharedStructuresLength;
      }
      if (hasSharedUpdate) hasSharedUpdate = false;
      structures = sharedStructures || [];
      packedObjectMap2 = sharedPackedObjectMap2;
      if (options.pack) {
        let packedValues2 = /* @__PURE__ */ new Map();
        packedValues2.values = [];
        packedValues2.encoder = encoder2;
        packedValues2.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap2 ? 16 : Infinity);
        packedValues2.objectMap = sharedPackedObjectMap2 || false;
        packedValues2.samplingPackedValues = samplingPackedValues;
        findRepetitiveStrings(value, packedValues2);
        if (packedValues2.values.length > 0) {
          target[position2++] = 216;
          target[position2++] = 51;
          writeArrayHeader(4);
          let valuesArray = packedValues2.values;
          encode4(valuesArray);
          writeArrayHeader(0);
          writeArrayHeader(0);
          packedObjectMap2 = Object.create(sharedPackedObjectMap2 || null);
          for (let i2 = 0, l = valuesArray.length; i2 < l; i2++) {
            packedObjectMap2[valuesArray[i2]] = i2;
          }
        }
      }
      throwOnIterable = encodeOptions & THROW_ON_ITERABLE;
      try {
        if (throwOnIterable) return;
        encode4(value);
        if (bundledStrings2) {
          writeBundles(start, encode4);
        }
        encoder2.offset = position2;
        if (referenceMap2 && referenceMap2.idsToInsert) {
          position2 += referenceMap2.idsToInsert.length * 2;
          if (position2 > safeEnd) makeRoom(position2);
          encoder2.offset = position2;
          let serialized = insertIds(target.subarray(start, position2), referenceMap2.idsToInsert);
          referenceMap2 = null;
          return serialized;
        }
        if (encodeOptions & REUSE_BUFFER_MODE) {
          target.start = start;
          target.end = position2;
          return target;
        }
        return target.subarray(start, position2);
      } finally {
        if (sharedStructures) {
          if (serializationsSinceTransitionRebuild < 10) serializationsSinceTransitionRebuild++;
          if (sharedStructures.length > maxSharedStructures) sharedStructures.length = maxSharedStructures;
          if (transitionsCount > 1e4) {
            sharedStructures.transitions = null;
            serializationsSinceTransitionRebuild = 0;
            transitionsCount = 0;
            if (recordIdsToRemove.length > 0) recordIdsToRemove = [];
          } else if (recordIdsToRemove.length > 0 && !isSequential) {
            for (let i2 = 0, l = recordIdsToRemove.length; i2 < l; i2++) {
              recordIdsToRemove[i2][RECORD_SYMBOL] = void 0;
            }
            recordIdsToRemove = [];
          }
        }
        if (hasSharedUpdate && encoder2.saveShared) {
          if (encoder2.structures.length > maxSharedStructures) {
            encoder2.structures = encoder2.structures.slice(0, maxSharedStructures);
          }
          let returnBuffer = target.subarray(start, position2);
          if (encoder2.updateSharedData() === false) return encoder2.encode(value);
          return returnBuffer;
        }
        if (encodeOptions & RESET_BUFFER_MODE) position2 = start;
      }
    };
    this.findCommonStringsToPack = () => {
      samplingPackedValues = /* @__PURE__ */ new Map();
      if (!sharedPackedObjectMap2) sharedPackedObjectMap2 = /* @__PURE__ */ Object.create(null);
      return (options2) => {
        let threshold = options2 && options2.threshold || 4;
        let position3 = this.pack ? options2.maxPrivatePackedValues || 16 : 0;
        if (!sharedValues) sharedValues = this.sharedValues = [];
        for (let [key, status] of samplingPackedValues) {
          if (status.count > threshold) {
            sharedPackedObjectMap2[key] = position3++;
            sharedValues.push(key);
            hasSharedUpdate = true;
          }
        }
        while (this.saveShared && this.updateSharedData() === false) {
        }
        samplingPackedValues = null;
      };
    };
    const encode4 = (value) => {
      if (position2 > safeEnd) target = makeRoom(position2);
      var type = typeof value;
      var length;
      if (type === "string") {
        if (packedObjectMap2) {
          let packedPosition = packedObjectMap2[value];
          if (packedPosition >= 0) {
            if (packedPosition < 16) target[position2++] = packedPosition + 224;
            else {
              target[position2++] = 198;
              if (packedPosition & 1) encode4(15 - packedPosition >> 1);
              else encode4(packedPosition - 16 >> 1);
            }
            return;
          } else if (samplingPackedValues && !options.pack) {
            let status = samplingPackedValues.get(value);
            if (status) status.count++;
            else samplingPackedValues.set(value, {
              count: 1
            });
          }
        }
        let strLength = value.length;
        if (bundledStrings2 && strLength >= 4 && strLength < 1024) {
          if ((bundledStrings2.size += strLength) > MAX_BUNDLE_SIZE) {
            let extStart;
            let maxBytes2 = (bundledStrings2[0] ? bundledStrings2[0].length * 3 + bundledStrings2[1].length : 0) + 10;
            if (position2 + maxBytes2 > safeEnd) target = makeRoom(position2 + maxBytes2);
            target[position2++] = 217;
            target[position2++] = 223;
            target[position2++] = 249;
            target[position2++] = bundledStrings2.position ? 132 : 130;
            target[position2++] = 26;
            extStart = position2 - start;
            position2 += 4;
            if (bundledStrings2.position) {
              writeBundles(start, encode4);
            }
            bundledStrings2 = [
              "",
              ""
            ];
            bundledStrings2.size = 0;
            bundledStrings2.position = extStart;
          }
          let twoByte = hasNonLatin.test(value);
          bundledStrings2[twoByte ? 0 : 1] += value;
          target[position2++] = twoByte ? 206 : 207;
          encode4(strLength);
          return;
        }
        let headerSize;
        if (strLength < 32) {
          headerSize = 1;
        } else if (strLength < 256) {
          headerSize = 2;
        } else if (strLength < 65536) {
          headerSize = 3;
        } else {
          headerSize = 5;
        }
        let maxBytes = strLength * 3;
        if (position2 + maxBytes > safeEnd) target = makeRoom(position2 + maxBytes);
        if (strLength < 64 || !encodeUtf8) {
          let i2, c1, c2, strPosition = position2 + headerSize;
          for (i2 = 0; i2 < strLength; i2++) {
            c1 = value.charCodeAt(i2);
            if (c1 < 128) {
              target[strPosition++] = c1;
            } else if (c1 < 2048) {
              target[strPosition++] = c1 >> 6 | 192;
              target[strPosition++] = c1 & 63 | 128;
            } else if ((c1 & 64512) === 55296 && ((c2 = value.charCodeAt(i2 + 1)) & 64512) === 56320) {
              c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
              i2++;
              target[strPosition++] = c1 >> 18 | 240;
              target[strPosition++] = c1 >> 12 & 63 | 128;
              target[strPosition++] = c1 >> 6 & 63 | 128;
              target[strPosition++] = c1 & 63 | 128;
            } else {
              target[strPosition++] = c1 >> 12 | 224;
              target[strPosition++] = c1 >> 6 & 63 | 128;
              target[strPosition++] = c1 & 63 | 128;
            }
          }
          length = strPosition - position2 - headerSize;
        } else {
          length = encodeUtf8(value, position2 + headerSize, maxBytes);
        }
        if (length < 24) {
          target[position2++] = 96 | length;
        } else if (length < 256) {
          if (headerSize < 2) {
            target.copyWithin(position2 + 2, position2 + 1, position2 + 1 + length);
          }
          target[position2++] = 120;
          target[position2++] = length;
        } else if (length < 65536) {
          if (headerSize < 3) {
            target.copyWithin(position2 + 3, position2 + 2, position2 + 2 + length);
          }
          target[position2++] = 121;
          target[position2++] = length >> 8;
          target[position2++] = length & 255;
        } else {
          if (headerSize < 5) {
            target.copyWithin(position2 + 5, position2 + 3, position2 + 3 + length);
          }
          target[position2++] = 122;
          targetView.setUint32(position2, length);
          position2 += 4;
        }
        position2 += length;
      } else if (type === "number") {
        if (!this.alwaysUseFloat && value >>> 0 === value) {
          if (value < 24) {
            target[position2++] = value;
          } else if (value < 256) {
            target[position2++] = 24;
            target[position2++] = value;
          } else if (value < 65536) {
            target[position2++] = 25;
            target[position2++] = value >> 8;
            target[position2++] = value & 255;
          } else {
            target[position2++] = 26;
            targetView.setUint32(position2, value);
            position2 += 4;
          }
        } else if (!this.alwaysUseFloat && value >> 0 === value) {
          if (value >= -24) {
            target[position2++] = 31 - value;
          } else if (value >= -256) {
            target[position2++] = 56;
            target[position2++] = ~value;
          } else if (value >= -65536) {
            target[position2++] = 57;
            targetView.setUint16(position2, ~value);
            position2 += 2;
          } else {
            target[position2++] = 58;
            targetView.setUint32(position2, ~value);
            position2 += 4;
          }
        } else {
          let useFloat32;
          if ((useFloat32 = this.useFloat32) > 0 && value < 4294967296 && value >= -2147483648) {
            target[position2++] = 250;
            targetView.setFloat32(position2, value);
            let xShifted;
            if (useFloat32 < 4 || // this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
            (xShifted = value * mult10[(target[position2] & 127) << 1 | target[position2 + 1] >> 7]) >> 0 === xShifted) {
              position2 += 4;
              return;
            } else position2--;
          }
          target[position2++] = 251;
          targetView.setFloat64(position2, value);
          position2 += 8;
        }
      } else if (type === "object") {
        if (!value) target[position2++] = 246;
        else {
          if (referenceMap2) {
            let referee = referenceMap2.get(value);
            if (referee) {
              target[position2++] = 216;
              target[position2++] = 29;
              target[position2++] = 25;
              if (!referee.references) {
                let idsToInsert = referenceMap2.idsToInsert || (referenceMap2.idsToInsert = []);
                referee.references = [];
                idsToInsert.push(referee);
              }
              referee.references.push(position2 - start);
              position2 += 2;
              return;
            } else referenceMap2.set(value, {
              offset: position2 - start
            });
          }
          let constructor = value.constructor;
          if (constructor === Object) {
            writeObject(value, true);
          } else if (constructor === Array) {
            length = value.length;
            if (length < 24) {
              target[position2++] = 128 | length;
            } else {
              writeArrayHeader(length);
            }
            for (let i2 = 0; i2 < length; i2++) {
              encode4(value[i2]);
            }
          } else if (constructor === Map) {
            if (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {
              target[position2++] = 217;
              target[position2++] = 1;
              target[position2++] = 3;
            }
            length = value.size;
            if (length < 24) {
              target[position2++] = 160 | length;
            } else if (length < 256) {
              target[position2++] = 184;
              target[position2++] = length;
            } else if (length < 65536) {
              target[position2++] = 185;
              target[position2++] = length >> 8;
              target[position2++] = length & 255;
            } else {
              target[position2++] = 186;
              targetView.setUint32(position2, length);
              position2 += 4;
            }
            if (encoder2.keyMap) {
              for (let [key, entryValue] of value) {
                encode4(encoder2.encodeKey(key));
                encode4(entryValue);
              }
            } else {
              for (let [key, entryValue] of value) {
                encode4(key);
                encode4(entryValue);
              }
            }
          } else {
            for (let i2 = 0, l = extensions.length; i2 < l; i2++) {
              let extensionClass = extensionClasses[i2];
              if (value instanceof extensionClass) {
                let extension = extensions[i2];
                let tag = extension.tag;
                if (tag == void 0) tag = extension.getTag && extension.getTag.call(this, value);
                if (tag < 24) {
                  target[position2++] = 192 | tag;
                } else if (tag < 256) {
                  target[position2++] = 216;
                  target[position2++] = tag;
                } else if (tag < 65536) {
                  target[position2++] = 217;
                  target[position2++] = tag >> 8;
                  target[position2++] = tag & 255;
                } else if (tag > -1) {
                  target[position2++] = 218;
                  targetView.setUint32(position2, tag);
                  position2 += 4;
                }
                extension.encode.call(this, value, encode4, makeRoom);
                return;
              }
            }
            if (value[Symbol.iterator]) {
              if (throwOnIterable) {
                let error2 = new Error("Iterable should be serialized as iterator");
                error2.iteratorNotHandled = true;
                throw error2;
              }
              target[position2++] = 159;
              for (let entry of value) {
                encode4(entry);
              }
              target[position2++] = 255;
              return;
            }
            if (value[Symbol.asyncIterator] || isBlob(value)) {
              let error2 = new Error("Iterable/blob should be serialized as iterator");
              error2.iteratorNotHandled = true;
              throw error2;
            }
            if (this.useToJSON && value.toJSON) {
              const json = value.toJSON();
              if (json !== value) return encode4(json);
            }
            writeObject(value, !value.hasOwnProperty);
          }
        }
      } else if (type === "boolean") {
        target[position2++] = value ? 245 : 244;
      } else if (type === "bigint") {
        if (value < BigInt(1) << BigInt(64) && value >= 0) {
          target[position2++] = 27;
          targetView.setBigUint64(position2, value);
        } else if (value > -(BigInt(1) << BigInt(64)) && value < 0) {
          target[position2++] = 59;
          targetView.setBigUint64(position2, -value - BigInt(1));
        } else {
          if (this.largeBigIntToFloat) {
            target[position2++] = 251;
            targetView.setFloat64(position2, Number(value));
          } else {
            throw new RangeError(value + " was too large to fit in CBOR 64-bit integer format, set largeBigIntToFloat to convert to float-64");
          }
        }
        position2 += 8;
      } else if (type === "undefined") {
        target[position2++] = 247;
      } else {
        throw new Error("Unknown type: " + type);
      }
    };
    const writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {
      let keys = Object.keys(object);
      let vals = Object.values(object);
      let length = keys.length;
      if (length < 24) {
        target[position2++] = 160 | length;
      } else if (length < 256) {
        target[position2++] = 184;
        target[position2++] = length;
      } else if (length < 65536) {
        target[position2++] = 185;
        target[position2++] = length >> 8;
        target[position2++] = length & 255;
      } else {
        target[position2++] = 186;
        targetView.setUint32(position2, length);
        position2 += 4;
      }
      let key;
      if (encoder2.keyMap) {
        for (let i2 = 0; i2 < length; i2++) {
          encode4(encoder2.encodeKey(keys[i2]));
          encode4(vals[i2]);
        }
      } else {
        for (let i2 = 0; i2 < length; i2++) {
          encode4(keys[i2]);
          encode4(vals[i2]);
        }
      }
    } : (object, safePrototype) => {
      target[position2++] = 185;
      let objectOffset = position2 - start;
      position2 += 2;
      let size = 0;
      if (encoder2.keyMap) {
        for (let key in object) if (safePrototype || object.hasOwnProperty(key)) {
          encode4(encoder2.encodeKey(key));
          encode4(object[key]);
          size++;
        }
      } else {
        for (let key in object) if (safePrototype || object.hasOwnProperty(key)) {
          encode4(key);
          encode4(object[key]);
          size++;
        }
      }
      target[objectOffset++ + start] = size >> 8;
      target[objectOffset + start] = size & 255;
    } : (object, safePrototype) => {
      let nextTransition, transition = structures.transitions || (structures.transitions = /* @__PURE__ */ Object.create(null));
      let newTransitions = 0;
      let length = 0;
      let parentRecordId;
      let keys;
      if (this.keyMap) {
        keys = Object.keys(object).map((k) => this.encodeKey(k));
        length = keys.length;
        for (let i2 = 0; i2 < length; i2++) {
          let key = keys[i2];
          nextTransition = transition[key];
          if (!nextTransition) {
            nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
            newTransitions++;
          }
          transition = nextTransition;
        }
      } else {
        for (let key in object) if (safePrototype || object.hasOwnProperty(key)) {
          nextTransition = transition[key];
          if (!nextTransition) {
            if (transition[RECORD_SYMBOL] & 1048576) {
              parentRecordId = transition[RECORD_SYMBOL] & 65535;
            }
            nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
            newTransitions++;
          }
          transition = nextTransition;
          length++;
        }
      }
      let recordId = transition[RECORD_SYMBOL];
      if (recordId !== void 0) {
        recordId &= 65535;
        target[position2++] = 217;
        target[position2++] = recordId >> 8 | 224;
        target[position2++] = recordId & 255;
      } else {
        if (!keys) keys = transition.__keys__ || (transition.__keys__ = Object.keys(object));
        if (parentRecordId === void 0) {
          recordId = structures.nextId++;
          if (!recordId) {
            recordId = 0;
            structures.nextId = 1;
          }
          if (recordId >= MAX_STRUCTURES) {
            structures.nextId = (recordId = maxSharedStructures) + 1;
          }
        } else {
          recordId = parentRecordId;
        }
        structures[recordId] = keys;
        if (recordId < maxSharedStructures) {
          target[position2++] = 217;
          target[position2++] = recordId >> 8 | 224;
          target[position2++] = recordId & 255;
          transition = structures.transitions;
          for (let i2 = 0; i2 < length; i2++) {
            if (transition[RECORD_SYMBOL] === void 0 || transition[RECORD_SYMBOL] & 1048576) transition[RECORD_SYMBOL] = recordId;
            transition = transition[keys[i2]];
          }
          transition[RECORD_SYMBOL] = recordId | 1048576;
          hasSharedUpdate = true;
        } else {
          transition[RECORD_SYMBOL] = recordId;
          targetView.setUint32(position2, 3655335680);
          position2 += 3;
          if (newTransitions) transitionsCount += serializationsSinceTransitionRebuild * newTransitions;
          if (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures) recordIdsToRemove.shift()[RECORD_SYMBOL] = void 0;
          recordIdsToRemove.push(transition);
          writeArrayHeader(length + 2);
          encode4(57344 + recordId);
          encode4(keys);
          if (safePrototype === null) return;
          for (let key in object) if (safePrototype || object.hasOwnProperty(key)) encode4(object[key]);
          return;
        }
      }
      if (length < 24) {
        target[position2++] = 128 | length;
      } else {
        writeArrayHeader(length);
      }
      if (safePrototype === null) return;
      for (let key in object) if (safePrototype || object.hasOwnProperty(key)) encode4(object[key]);
    };
    const makeRoom = (end) => {
      let newSize;
      if (end > 16777216) {
        if (end - start > MAX_BUFFER_SIZE) throw new Error("Encoded buffer would be larger than maximum buffer size");
        newSize = Math.min(MAX_BUFFER_SIZE, Math.round(Math.max((end - start) * (end > 67108864 ? 1.25 : 2), 4194304) / 4096) * 4096);
      } else newSize = (Math.max(end - start << 2, target.length - 1) >> 12) + 1 << 12;
      let newBuffer = new ByteArrayAllocate(newSize);
      targetView = new DataView(newBuffer.buffer, 0, newSize);
      if (target.copy) target.copy(newBuffer, 0, start, end);
      else newBuffer.set(target.slice(start, end));
      position2 -= start;
      start = 0;
      safeEnd = newBuffer.length - 10;
      return target = newBuffer;
    };
    let chunkThreshold = 100;
    let continuedChunkThreshold = 1e3;
    this.encodeAsIterable = function(value, options2) {
      return startEncoding(value, options2, encodeObjectAsIterable);
    };
    this.encodeAsAsyncIterable = function(value, options2) {
      return startEncoding(value, options2, encodeObjectAsAsyncIterable);
    };
    function* encodeObjectAsIterable(object, iterateProperties, finalIterable) {
      let constructor = object.constructor;
      if (constructor === Object) {
        let useRecords = encoder2.useRecords !== false;
        if (useRecords) writeObject(object, null);
        else writeEntityLength(Object.keys(object).length, 160);
        for (let key in object) {
          let value = object[key];
          if (!useRecords) encode4(key);
          if (value && typeof value === "object") {
            if (iterateProperties[key]) yield* encodeObjectAsIterable(value, iterateProperties[key]);
            else yield* tryEncode(value, iterateProperties, key);
          } else encode4(value);
        }
      } else if (constructor === Array) {
        let length = object.length;
        writeArrayHeader(length);
        for (let i2 = 0; i2 < length; i2++) {
          let value = object[i2];
          if (value && (typeof value === "object" || position2 - start > chunkThreshold)) {
            if (iterateProperties.element) yield* encodeObjectAsIterable(value, iterateProperties.element);
            else yield* tryEncode(value, iterateProperties, "element");
          } else encode4(value);
        }
      } else if (object[Symbol.iterator]) {
        target[position2++] = 159;
        for (let value of object) {
          if (value && (typeof value === "object" || position2 - start > chunkThreshold)) {
            if (iterateProperties.element) yield* encodeObjectAsIterable(value, iterateProperties.element);
            else yield* tryEncode(value, iterateProperties, "element");
          } else encode4(value);
        }
        target[position2++] = 255;
      } else if (isBlob(object)) {
        writeEntityLength(object.size, 64);
        yield target.subarray(start, position2);
        yield object;
        restartEncoding();
      } else if (object[Symbol.asyncIterator]) {
        target[position2++] = 159;
        yield target.subarray(start, position2);
        yield object;
        restartEncoding();
        target[position2++] = 255;
      } else {
        encode4(object);
      }
      if (finalIterable && position2 > start) yield target.subarray(start, position2);
      else if (position2 - start > chunkThreshold) {
        yield target.subarray(start, position2);
        restartEncoding();
      }
    }
    function* tryEncode(value, iterateProperties, key) {
      let restart = position2 - start;
      try {
        encode4(value);
        if (position2 - start > chunkThreshold) {
          yield target.subarray(start, position2);
          restartEncoding();
        }
      } catch (error2) {
        if (error2.iteratorNotHandled) {
          iterateProperties[key] = {};
          position2 = start + restart;
          yield* encodeObjectAsIterable.call(this, value, iterateProperties[key]);
        } else throw error2;
      }
    }
    function restartEncoding() {
      chunkThreshold = continuedChunkThreshold;
      encoder2.encode(null, THROW_ON_ITERABLE);
    }
    function startEncoding(value, options2, encodeIterable) {
      if (options2 && options2.chunkThreshold) chunkThreshold = continuedChunkThreshold = options2.chunkThreshold;
      else chunkThreshold = 100;
      if (value && typeof value === "object") {
        encoder2.encode(null, THROW_ON_ITERABLE);
        return encodeIterable(value, encoder2.iterateProperties || (encoder2.iterateProperties = {}), true);
      }
      return [
        encoder2.encode(value)
      ];
    }
    async function* encodeObjectAsAsyncIterable(value, iterateProperties) {
      for (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {
        let constructor = encodedValue.constructor;
        if (constructor === ByteArray || constructor === Uint8Array) yield encodedValue;
        else if (isBlob(encodedValue)) {
          let reader = encodedValue.stream().getReader();
          let next;
          while (!(next = await reader.read()).done) {
            yield next.value;
          }
        } else if (encodedValue[Symbol.asyncIterator]) {
          for await (let asyncValue of encodedValue) {
            restartEncoding();
            if (asyncValue) yield* encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {}));
            else yield encoder2.encode(asyncValue);
          }
        } else {
          yield encodedValue;
        }
      }
    }
  }
  useBuffer(buffer) {
    target = buffer;
    targetView = new DataView(target.buffer, target.byteOffset, target.byteLength);
    position2 = 0;
  }
  clearSharedData() {
    if (this.structures) this.structures = [];
    if (this.sharedValues) this.sharedValues = void 0;
  }
  updateSharedData() {
    let lastVersion = this.sharedVersion || 0;
    this.sharedVersion = lastVersion + 1;
    let structuresCopy = this.structures.slice(0);
    let sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion);
    let saveResults = this.saveShared(sharedData, (existingShared) => (existingShared && existingShared.version || 0) == lastVersion);
    if (saveResults === false) {
      sharedData = this.getShared() || {};
      this.structures = sharedData.structures || [];
      this.sharedValues = sharedData.packedValues;
      this.sharedVersion = sharedData.version;
      this.structures.nextId = this.structures.length;
    } else {
      structuresCopy.forEach((structure, i2) => this.structures[i2] = structure);
    }
    return saveResults;
  }
};
function writeEntityLength(length, majorValue) {
  if (length < 24) target[position2++] = majorValue | length;
  else if (length < 256) {
    target[position2++] = majorValue | 24;
    target[position2++] = length;
  } else if (length < 65536) {
    target[position2++] = majorValue | 25;
    target[position2++] = length >> 8;
    target[position2++] = length & 255;
  } else {
    target[position2++] = majorValue | 26;
    targetView.setUint32(position2, length);
    position2 += 4;
  }
}
var SharedData = class {
  constructor(structures, values, version) {
    this.structures = structures;
    this.packedValues = values;
    this.version = version;
  }
};
function writeArrayHeader(length) {
  if (length < 24) target[position2++] = 128 | length;
  else if (length < 256) {
    target[position2++] = 152;
    target[position2++] = length;
  } else if (length < 65536) {
    target[position2++] = 153;
    target[position2++] = length >> 8;
    target[position2++] = length & 255;
  } else {
    target[position2++] = 154;
    targetView.setUint32(position2, length);
    position2 += 4;
  }
}
var BlobConstructor = typeof Blob === "undefined" ? function() {
} : Blob;
function isBlob(object) {
  if (object instanceof BlobConstructor) return true;
  let tag = object[Symbol.toStringTag];
  return tag === "Blob" || tag === "File";
}
function findRepetitiveStrings(value, packedValues2) {
  switch (typeof value) {
    case "string":
      if (value.length > 3) {
        if (packedValues2.objectMap[value] > -1 || packedValues2.values.length >= packedValues2.maxValues) return;
        let packedStatus = packedValues2.get(value);
        if (packedStatus) {
          if (++packedStatus.count == 2) {
            packedValues2.values.push(value);
          }
        } else {
          packedValues2.set(value, {
            count: 1
          });
          if (packedValues2.samplingPackedValues) {
            let status = packedValues2.samplingPackedValues.get(value);
            if (status) status.count++;
            else packedValues2.samplingPackedValues.set(value, {
              count: 1
            });
          }
        }
      }
      break;
    case "object":
      if (value) {
        if (value instanceof Array) {
          for (let i2 = 0, l = value.length; i2 < l; i2++) {
            findRepetitiveStrings(value[i2], packedValues2);
          }
        } else {
          let includeKeys = !packedValues2.encoder.useRecords;
          for (var key in value) {
            if (value.hasOwnProperty(key)) {
              if (includeKeys) findRepetitiveStrings(key, packedValues2);
              findRepetitiveStrings(value[key], packedValues2);
            }
          }
        }
      }
      break;
    case "function":
      console.log(value);
  }
}
var isLittleEndianMachine2 = new Uint8Array(new Uint16Array([
  1
]).buffer)[0] == 1;
extensionClasses = [
  Date,
  Set,
  Error,
  RegExp,
  Tag,
  ArrayBuffer,
  Uint8Array,
  Uint8ClampedArray,
  Uint16Array,
  Uint32Array,
  typeof BigUint64Array == "undefined" ? function() {
  } : BigUint64Array,
  Int8Array,
  Int16Array,
  Int32Array,
  typeof BigInt64Array == "undefined" ? function() {
  } : BigInt64Array,
  Float32Array,
  Float64Array,
  SharedData
];
extensions = [
  {
    tag: 1,
    encode(date, encode4) {
      let seconds = date.getTime() / 1e3;
      if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 4294967296) {
        target[position2++] = 26;
        targetView.setUint32(position2, seconds);
        position2 += 4;
      } else {
        target[position2++] = 251;
        targetView.setFloat64(position2, seconds);
        position2 += 8;
      }
    }
  },
  {
    tag: 258,
    encode(set, encode4) {
      let array = Array.from(set);
      encode4(array);
    }
  },
  {
    tag: 27,
    encode(error2, encode4) {
      encode4([
        error2.name,
        error2.message
      ]);
    }
  },
  {
    tag: 27,
    encode(regex, encode4) {
      encode4([
        "RegExp",
        regex.source,
        regex.flags
      ]);
    }
  },
  {
    getTag(tag) {
      return tag.tag;
    },
    encode(tag, encode4) {
      encode4(tag.value);
    }
  },
  {
    encode(arrayBuffer, encode4, makeRoom) {
      writeBuffer(arrayBuffer, makeRoom);
    }
  },
  {
    getTag(typedArray) {
      if (typedArray.constructor === Uint8Array) {
        if (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false) return 64;
      }
    },
    encode(typedArray, encode4, makeRoom) {
      writeBuffer(typedArray, makeRoom);
    }
  },
  typedArrayEncoder(68, 1),
  typedArrayEncoder(69, 2),
  typedArrayEncoder(70, 4),
  typedArrayEncoder(71, 8),
  typedArrayEncoder(72, 1),
  typedArrayEncoder(77, 2),
  typedArrayEncoder(78, 4),
  typedArrayEncoder(79, 8),
  typedArrayEncoder(85, 4),
  typedArrayEncoder(86, 8),
  {
    encode(sharedData, encode4) {
      let packedValues2 = sharedData.packedValues || [];
      let sharedStructures = sharedData.structures || [];
      if (packedValues2.values.length > 0) {
        target[position2++] = 216;
        target[position2++] = 51;
        writeArrayHeader(4);
        let valuesArray = packedValues2.values;
        encode4(valuesArray);
        writeArrayHeader(0);
        writeArrayHeader(0);
        packedObjectMap = Object.create(sharedPackedObjectMap || null);
        for (let i2 = 0, l = valuesArray.length; i2 < l; i2++) {
          packedObjectMap[valuesArray[i2]] = i2;
        }
      }
      if (sharedStructures) {
        targetView.setUint32(position2, 3655335424);
        position2 += 3;
        let definitions = sharedStructures.slice(0);
        definitions.unshift(57344);
        definitions.push(new Tag(sharedData.version, 1399353956));
        encode4(definitions);
      } else encode4(new Tag(sharedData.version, 1399353956));
    }
  }
];
function typedArrayEncoder(tag, size) {
  if (!isLittleEndianMachine2 && size > 1) tag -= 4;
  return {
    tag,
    encode: function writeExtBuffer(typedArray, encode4) {
      let length = typedArray.byteLength;
      let offset = typedArray.byteOffset || 0;
      let buffer = typedArray.buffer || typedArray;
      encode4(hasNodeBuffer ? Buffer2.from(buffer, offset, length) : new Uint8Array(buffer, offset, length));
    }
  };
}
function writeBuffer(buffer, makeRoom) {
  let length = buffer.byteLength;
  if (length < 24) {
    target[position2++] = 64 + length;
  } else if (length < 256) {
    target[position2++] = 88;
    target[position2++] = length;
  } else if (length < 65536) {
    target[position2++] = 89;
    target[position2++] = length >> 8;
    target[position2++] = length & 255;
  } else {
    target[position2++] = 90;
    targetView.setUint32(position2, length);
    position2 += 4;
  }
  if (position2 + length >= target.length) {
    makeRoom(position2 + length);
  }
  target.set(buffer.buffer ? buffer : new Uint8Array(buffer), position2);
  position2 += length;
}
function insertIds(serialized, idsToInsert) {
  let nextId;
  let distanceToMove = idsToInsert.length * 2;
  let lastEnd = serialized.length - distanceToMove;
  idsToInsert.sort((a2, b) => a2.offset > b.offset ? 1 : -1);
  for (let id = 0; id < idsToInsert.length; id++) {
    let referee = idsToInsert[id];
    referee.id = id;
    for (let position3 of referee.references) {
      serialized[position3++] = id >> 8;
      serialized[position3] = id & 255;
    }
  }
  while (nextId = idsToInsert.pop()) {
    let offset = nextId.offset;
    serialized.copyWithin(offset + distanceToMove, offset, lastEnd);
    distanceToMove -= 2;
    let position3 = offset + distanceToMove;
    serialized[position3++] = 216;
    serialized[position3++] = 28;
    lastEnd = offset;
  }
  return serialized;
}
function writeBundles(start, encode4) {
  targetView.setUint32(bundledStrings2.position + start, position2 - bundledStrings2.position - start + 1);
  let writeStrings = bundledStrings2;
  bundledStrings2 = null;
  encode4(writeStrings[0]);
  encode4(writeStrings[1]);
}
function addExtension2(extension) {
  if (extension.Class) {
    if (!extension.encode) throw new Error("Extension has no encode function");
    extensionClasses.unshift(extension.Class);
    extensions.unshift(extension);
  }
  addExtension(extension);
}
var defaultEncoder = new Encoder({
  useRecords: false
});
var encode3 = defaultEncoder.encode;
var encodeAsIterable = defaultEncoder.encodeAsIterable;
var encodeAsAsyncIterable = defaultEncoder.encodeAsAsyncIterable;
var { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS;
var REUSE_BUFFER_MODE = 512;
var RESET_BUFFER_MODE = 1024;
var THROW_ON_ITERABLE = 2048;

// deno:https://deno.land/x/cbor@v1.5.8/iterators.js
function encodeIter(objectIterator, options = {}) {
  if (!objectIterator || typeof objectIterator !== "object") {
    throw new Error("first argument must be an Iterable, Async Iterable, or a Promise for an Async Iterable");
  } else if (typeof objectIterator[Symbol.iterator] === "function") {
    return encodeIterSync(objectIterator, options);
  } else if (typeof objectIterator.then === "function" || typeof objectIterator[Symbol.asyncIterator] === "function") {
    return encodeIterAsync(objectIterator, options);
  } else {
    throw new Error("first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a Promise");
  }
}
function* encodeIterSync(objectIterator, options) {
  const encoder2 = new Encoder(options);
  for (const value of objectIterator) {
    yield encoder2.encode(value);
  }
}
async function* encodeIterAsync(objectIterator, options) {
  const encoder2 = new Encoder(options);
  for await (const value of objectIterator) {
    yield encoder2.encode(value);
  }
}
function decodeIter(bufferIterator, options = {}) {
  if (!bufferIterator || typeof bufferIterator !== "object") {
    throw new Error("first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a promise");
  }
  const decoder3 = new Decoder(options);
  let incomplete;
  const parser = (chunk) => {
    let yields;
    if (incomplete) {
      chunk = Buffer.concat([
        incomplete,
        chunk
      ]);
      incomplete = void 0;
    }
    try {
      yields = decoder3.decodeMultiple(chunk);
    } catch (err) {
      if (err.incomplete) {
        incomplete = chunk.slice(err.lastPosition);
        yields = err.values;
      } else {
        throw err;
      }
    }
    return yields;
  };
  if (typeof bufferIterator[Symbol.iterator] === "function") {
    return function* iter() {
      for (const value of bufferIterator) {
        yield* parser(value);
      }
    }();
  } else if (typeof bufferIterator[Symbol.asyncIterator] === "function") {
    return async function* iter() {
      for await (const value of bufferIterator) {
        yield* parser(value);
      }
    }();
  }
}

// deno:https://deno.land/x/b64@1.1.28/dist/base64.min.mjs
var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var charsUrl = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
var genLookup = (target2) => {
  const lookupTemp = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
  const len = chars.length;
  for (let i2 = 0; i2 < len; i2++) {
    lookupTemp[target2.charCodeAt(i2)] = i2;
  }
  return lookupTemp;
};
var lookup = genLookup(chars);
var lookupUrl = genLookup(charsUrl);
var base64UrlPattern = /^[-A-Za-z0-9\-_]*$/;
var base64Pattern = /^[-A-Za-z0-9+/]*={0,3}$/;
var base64 = {};
base64.toArrayBuffer = (data, urlMode) => {
  const len = data.length;
  let bufferLength = data.length * 0.75, i2, p = 0, encoded1, encoded2, encoded3, encoded4;
  if (data[data.length - 1] === "=") {
    bufferLength--;
    if (data[data.length - 2] === "=") {
      bufferLength--;
    }
  }
  const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer), target2 = urlMode ? lookupUrl : lookup;
  for (i2 = 0; i2 < len; i2 += 4) {
    encoded1 = target2[data.charCodeAt(i2)];
    encoded2 = target2[data.charCodeAt(i2 + 1)];
    encoded3 = target2[data.charCodeAt(i2 + 2)];
    encoded4 = target2[data.charCodeAt(i2 + 3)];
    bytes[p++] = encoded1 << 2 | encoded2 >> 4;
    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
  }
  return arraybuffer;
};
base64.fromArrayBuffer = (arrBuf, urlMode) => {
  const bytes = new Uint8Array(arrBuf);
  let i2, result = "";
  const len = bytes.length, target2 = urlMode ? charsUrl : chars;
  for (i2 = 0; i2 < len; i2 += 3) {
    result += target2[bytes[i2] >> 2];
    result += target2[(bytes[i2] & 3) << 4 | bytes[i2 + 1] >> 4];
    result += target2[(bytes[i2 + 1] & 15) << 2 | bytes[i2 + 2] >> 6];
    result += target2[bytes[i2 + 2] & 63];
  }
  const remainder = len % 3;
  if (remainder === 2) {
    result = result.substring(0, result.length - 1) + (urlMode ? "" : "=");
  } else if (remainder === 1) {
    result = result.substring(0, result.length - 2) + (urlMode ? "" : "==");
  }
  return result;
};
base64.toString = (str, urlMode) => {
  return new TextDecoder().decode(base64.toArrayBuffer(str, urlMode));
};
base64.fromString = (str, urlMode) => {
  return base64.fromArrayBuffer(new TextEncoder().encode(str), urlMode);
};
base64.validate = (encoded, urlMode) => {
  if (!(typeof encoded === "string" || encoded instanceof String)) {
    return false;
  }
  try {
    return urlMode ? base64UrlPattern.test(encoded) : base64Pattern.test(encoded);
  } catch (_e) {
    return false;
  }
};
base64.base64 = base64;

// lib/certUtils.js
var Certificate2 = class {
  constructor(cert) {
    let decoded;
    if (typeof cert === "string" || cert instanceof String) {
      cert = cert.replace(/\r/g, "").trim();
      decoded = ab2str(coerceToArrayBuffer(cert, "certificate"));
    }
    if (isPem(cert)) {
      cert = pemToBase64(cert);
    } else if (decoded && isPem(decoded)) {
      cert = pemToBase64(decoded);
    }
    if (typeof cert === "string" || cert instanceof String) {
      cert = cert.replace(/\n/g, "");
    }
    cert = coerceToArrayBuffer(cert, "certificate");
    if (cert.byteLength === 0) {
      throw new Error("cert was empty (0 bytes)");
    }
    const asn1 = toolbox_exports.fromBER(cert);
    if (asn1.offset === -1) {
      throw new Error("error parsing ASN.1");
    }
    this._cert = new toolbox_exports.pkijs.Certificate({
      schema: asn1.result
    });
    this.warning = /* @__PURE__ */ new Map();
    this.info = /* @__PURE__ */ new Map();
  }
  getCommonName() {
    return this.searchForCommonName(this._cert.subject.typesAndValues);
  }
  searchForCommonName(attributes) {
    const X509_COMMON_NAME_KEY = "2.5.4.3";
    for (const attr of attributes) {
      if (attr.type === X509_COMMON_NAME_KEY) {
        return attr.value.valueBlock.value;
      }
    }
    return "";
  }
  verify() {
    const issuerCommonName = this.getIssuer();
    const issuerCert = CertManager.getCertByCommonName(issuerCommonName);
    const _issuerCert = issuerCert ? issuerCert._cert : void 0;
    return this._cert.verify(_issuerCert).catch((err) => {
      if (typeof err === "string") {
        err = new Error(err);
      }
      return Promise.reject(err);
    });
  }
  async getPublicKey() {
    const k = await this._cert.getPublicKey();
    return k;
  }
  async getPublicKeyJwk() {
    const publicKey = await this.getPublicKey();
    const publicKeyJwk = await toolbox_exports.webcrypto.subtle.exportKey("jwk", publicKey);
    return publicKeyJwk;
  }
  getIssuer() {
    return this.searchForCommonName(this._cert.issuer.typesAndValues);
  }
  getSerial(compatibility) {
    if (compatibility === void 0) {
      console.warn('[DEPRECATION WARNING] Please use getSerial("v2").');
    } else if (compatibility === "v1") {
      console.warn('[DEPRECATION WARNING] Please migrate to getSerial("v2") which will return just the serial number.');
    }
    return compatibility === "v2" ? this._cert.serialNumber.valueBlock.toString() : this.getCommonName();
  }
  getVersion() {
    return this._cert.version + 1;
  }
  getSubject() {
    const ret = /* @__PURE__ */ new Map();
    const subjectItems = this._cert.subject.typesAndValues;
    for (const subject of subjectItems) {
      const kv = resolveOid(subject.type, decodeValue(subject.value.valueBlock));
      ret.set(kv.id, kv.value);
    }
    return ret;
  }
  getExtensions() {
    const ret = /* @__PURE__ */ new Map();
    if (this._cert.extensions === void 0) return ret;
    for (const ext of this._cert.extensions) {
      let kv;
      let v = ext.parsedValue || ext.extnValue;
      try {
        if (v.valueBlock) {
          v = decodeValue(v.valueBlock);
        }
        kv = resolveOid(ext.extnID, v);
      } catch (err) {
        if (ext.critical === false) {
          this.warning.set("x509-extension-error", ext.extnID + ": " + err.message);
          continue;
        } else {
          throw err;
        }
      }
      ret.set(kv.id, kv.value);
    }
    return ret;
  }
};
function resolveOid(id, value) {
  const ret = {
    id,
    value
  };
  if (value && value.valueHex) value = value.valueHex;
  let retMap;
  switch (id) {
    // FIDO
    case "1.3.6.1.4.1.45724.2.1.1":
      ret.id = "fido-u2f-transports";
      ret.value = decodeU2FTransportType(value);
      return ret;
    case "1.3.6.1.4.1.45724.1.1.4":
      ret.id = "fido-aaguid";
      return ret;
    // Subject
    case "2.5.4.6":
      ret.id = "country-name";
      return ret;
    case "2.5.4.10":
      ret.id = "organization-name";
      return ret;
    case "2.5.4.11":
      ret.id = "organizational-unit-name";
      return ret;
    case "2.5.4.3":
      ret.id = "common-name";
      return ret;
    // cert attributes
    case "2.5.29.14":
      ret.id = "subject-key-identifier";
      return ret;
    case "2.5.29.15":
      ret.id = "key-usage";
      ret.value = decodeKeyUsage(value);
      return ret;
    case "2.5.29.19":
      ret.id = "basic-constraints";
      return ret;
    case "2.5.29.35":
      retMap = /* @__PURE__ */ new Map();
      ret.id = "authority-key-identifier";
      retMap.set("key-identifier", decodeValue(value.keyIdentifier));
      ret.value = retMap;
      return ret;
    case "2.5.29.32":
      ret.id = "certificate-policies";
      ret.value = decodeCertificatePolicies(value);
      return ret;
    case "1.3.6.1.4.1.311.21.31":
      ret.id = "policy-qualifiers";
      ret.value = decodePolicyQualifiers(value);
      return ret;
    case "2.5.29.37":
      ret.id = "ext-key-usage";
      ret.value = decodeExtKeyUsage(value);
      return ret;
    case "2.5.29.17":
      ret.id = "subject-alt-name";
      ret.value = decodeAltNames(value);
      return ret;
    case "1.3.6.1.5.5.7.1.1":
      ret.id = "authority-info-access";
      ret.value = decodeAuthorityInfoAccess(value);
      return ret;
    case "1.3.6.1.5.5.7.48.2":
      ret.id = "cert-authority-issuers";
      if (typeof value !== "object") {
        throw new Error("expect cert-authority-issues to have Object as value");
      }
      ret.value = decodeGeneralName(value.type, value.value);
      return ret;
    case "1.3.6.1.5.5.7.2.2":
      ret.id = "policy-qualifier";
      ret.value = decodeValue(value.valueBlock);
      return ret;
    // TPM
    case "2.23.133.8.3":
      ret.id = "tcg-kp-aik-certificate";
      return ret;
    case "2.23.133.2.1":
      ret.id = "tcg-at-tpm-manufacturer";
      return ret;
    case "2.23.133.2.2":
      ret.id = "tcg-at-tpm-model";
      return ret;
    case "2.23.133.2.3":
      ret.id = "tcg-at-tpm-version";
      return ret;
    // Yubico
    case "1.3.6.1.4.1.41482.2":
      ret.id = "yubico-device-id";
      ret.value = resolveOid(ab2str(value)).id;
      return ret;
    case "1.3.6.1.4.1.41482.1.1":
      ret.id = "Security Key by Yubico";
      return ret;
    case "1.3.6.1.4.1.41482.1.2":
      ret.id = "YubiKey NEO/NEO-n";
      return ret;
    case "1.3.6.1.4.1.41482.1.3":
      ret.id = "YubiKey Plus";
      return ret;
    case "1.3.6.1.4.1.41482.1.4":
      ret.id = "YubiKey Edge";
      return ret;
    case "1.3.6.1.4.1.41482.1.5":
      ret.id = "YubiKey 4/YubiKey 4 Nano";
      return ret;
    // TODO
    // 1.3.6.1.4.1.45724.1.1.4 FIDO AAGUID
    // basic-constraints Yubico FIDO2, ST Micro
    // 2.5.29.35 ST Micro
    // subject-key-identifier ST Micro
    // 1.3.6.1.4.1.41482.3.3 Yubico Firmware version, encoded as 3 bytes, like: 040300 for 4.3.0
    // 1.3.6.1.4.1.41482.3.7 Yubico serial number of the YubiKey, encoded as an integer
    // 1.3.6.1.4.1.41482.3.8 Yubico two bytes, the first encoding pin policy and the second touch policy
    // Pin policy: 01 - never, 02 - once per session, 03 - always
    // Touch policy: 01 - never, 02 - always, 03 - cached for 15s
    default:
      return ret;
  }
}
function decodeValue(valueBlock) {
  const blockType = Object.getPrototypeOf(valueBlock).constructor.name;
  switch (blockType) {
    case "LocalIntegerValueBlock":
      return valueBlock.valueDec;
    case "LocalOctetStringValueBlock":
      return valueBlock.valueHex;
    case "LocalUtf8StringValueBlock":
      return valueBlock.value;
    case "LocalSimpleStringValueBlock":
      return valueBlock.value;
    case "OctetString":
      return valueBlock.valueBlock.valueHex;
    case "LocalBitStringValueBlock":
      return new Uint8Array(valueBlock.valueHex)[0];
    case "LocalBmpStringValueBlock":
      return valueBlock.value;
    case "LocalConstructedValueBlock":
      if (typeof valueBlock === "object" && Array.isArray(valueBlock.value)) {
        return valueBlock.value.map((v) => decodeValue(v));
      }
      return valueBlock;
    case "Constructed":
      return decodeValue(valueBlock.valueBlock.value[0]);
    case "BmpString":
      return decodeValue(valueBlock.valueBlock);
    case "Utf8String":
      return valueBlock.valueBlock.value;
    default:
      throw new TypeError("unknown value type when decoding certificate: " + blockType);
  }
}
function decodeU2FTransportType(u2fRawTransports) {
  const bitLen = 3;
  const bitCount = 8 - bitLen - 1;
  let type = u2fRawTransports >> bitLen;
  const ret = /* @__PURE__ */ new Set();
  for (let i2 = bitCount; i2 >= 0; i2--) {
    if (type & 1) switch (i2) {
      case 0:
        ret.add("bluetooth-classic");
        break;
      case 1:
        ret.add("bluetooth-low-energy");
        break;
      case 2:
        ret.add("usb");
        break;
      case 3:
        ret.add("nfc");
        break;
      case 4:
        ret.add("usb-internal");
        break;
      default:
        throw new Error("unknown U2F transport type: " + type);
    }
    type >>= 1;
  }
  return ret;
}
function decodeKeyUsage(value) {
  if (typeof value !== "number") {
    throw new Error("certificate: expected 'keyUsage' value to be number");
  }
  const retSet = /* @__PURE__ */ new Set();
  if (value & 128) retSet.add("digitalSignature");
  if (value & 64) retSet.add("contentCommitment");
  if (value & 32) retSet.add("keyEncipherment");
  if (value & 16) retSet.add("dataEncipherment");
  if (value & 8) retSet.add("keyAgreement");
  if (value & 4) retSet.add("keyCertSign");
  if (value & 2) retSet.add("cRLSign");
  if (value & 1) retSet.add("encipherOnly");
  if (value & 1) retSet.add("decipherOnly");
  return retSet;
}
function decodeExtKeyUsage(value) {
  let keyPurposes = value.keyPurposes;
  if (typeof value !== "object" || !Array.isArray(keyPurposes)) {
    throw new Error("expected extended key purposes to be an Array");
  }
  keyPurposes = keyPurposes.map((oid) => resolveOid(oid).id);
  return keyPurposes;
}
function decodeCertificatePolicies(value) {
  if (value && Array.isArray(value.certificatePolicies)) {
    value = value.certificatePolicies.map((_policy) => resolveOid(value.certificatePolicies[0].policyIdentifier, value.certificatePolicies[0].policyQualifiers));
  }
  return value;
}
function decodePolicyQualifiers(value) {
  if (value && Array.isArray(value)) {
    value = value.map((qual) => resolveOid(qual.policyQualifierId, qual.qualifier));
  }
  return value;
}
function decodeAltNames(value) {
  if (typeof value !== "object" || !Array.isArray(value.altNames)) {
    throw new Error("expected alternate names to be an Array");
  }
  let altNames = value.altNames;
  altNames = altNames.map((name) => {
    if (typeof name !== "object") {
      throw new Error("expected alternate name to be an object");
    }
    if (name.type !== 4) {
      throw new Error("expected all alternate names to be of general type");
    }
    if (typeof name.value !== "object" || !Array.isArray(name.value.typesAndValues)) {
      throw new Error("malformatted alternate name");
    }
    return decodeGeneralName(name.type, name.value.typesAndValues);
  });
  return altNames;
}
function decodeAuthorityInfoAccess(v) {
  if (typeof v !== "object" || !Array.isArray(v.accessDescriptions)) {
    throw new Error("expected authority info access descriptions to be Array");
  }
  const retMap = /* @__PURE__ */ new Map();
  v.accessDescriptions.forEach((desc) => {
    const { id, value } = resolveOid(desc.accessMethod, desc.accessLocation);
    retMap.set(id, value);
  });
  return retMap;
}
function decodeGeneralName(type, v) {
  if (typeof type !== "number") {
    throw new Error("malformed general name in x509 certificate");
  }
  let nameList;
  switch (type) {
    case 0:
      throw new Error("general name 'other name' not supported");
    case 1:
      throw new Error("general name 'rfc822Name' not supported");
    case 2:
      throw new Error("general name 'dNSName' not supported");
    case 3:
      throw new Error("general name 'x400Address' not supported");
    case 4:
      if (!Array.isArray(v)) {
        throw new Error("expected general name 'directory name' to be Array");
      }
      nameList = /* @__PURE__ */ new Map();
      v.forEach((val) => {
        const { id, value } = resolveOid(val.type, decodeValue(val.value));
        nameList.set(id, value);
      });
      return {
        directoryName: nameList
      };
    case 5:
      throw new Error("general name 'ediPartyName' not supported");
    case 6:
      return {
        uniformResourceIdentifier: v
      };
    case 7:
      throw new Error("general name 'iPAddress' not supported");
    case 8:
      throw new Error("general name 'registeredID' not supported");
    default:
      throw new Error("unknown general name type: " + type);
  }
}
var CRL = class {
  constructor(crl) {
    if (typeof crl === "string" || crl instanceof String) {
      crl = crl.replace(/\r/g, "");
    }
    if (isPem(crl)) {
      crl = pemToBase64(crl);
    }
    crl = coerceToArrayBuffer(crl, "crl");
    const asn1 = toolbox_exports.fromBER(crl);
    this._crl = new toolbox_exports.pkijs.CertificateRevocationList({
      schema: asn1.result
    });
  }
};
var certMap = /* @__PURE__ */ new Map();
var CertManager = class {
  static addCert(certBuf) {
    const cert = new Certificate2(certBuf);
    const commonName = cert.getCommonName();
    certMap.set(commonName, cert);
    return true;
  }
  static getCerts() {
    return new Map([
      ...certMap
    ]);
  }
  static getCertBySerial(serial) {
    console.warn("[DEPRECATION WARNING] Please use CertManager.getCertByCommonName(commonName).");
    return certMap.get(serial);
  }
  static getCertByCommonName(commonName) {
    return certMap.get(commonName);
  }
  static removeAll() {
    certMap.clear();
  }
  static async verifyCertChain(certs, roots, crls) {
    if (!Array.isArray(certs) || certs.length < 1) {
      throw new Error("expected 'certs' to be non-empty Array, got: " + certs);
    }
    certs = certs.map((cert) => {
      if (!(cert instanceof Certificate2)) {
        cert = new Certificate2(cert);
      }
      return cert._cert;
    });
    if (!Array.isArray(roots) || roots.length < 1) {
      throw new Error("expected 'roots' to be non-empty Array, got: " + roots);
    }
    roots = roots.map((r2) => {
      if (!(r2 instanceof Certificate2)) {
        r2 = new Certificate2(r2);
      }
      return r2._cert;
    });
    crls = crls || [];
    if (!Array.isArray(crls)) {
      throw new Error("expected 'crls' to be undefined or Array, got: " + crls);
    }
    crls = crls.map((crl) => {
      if (!(crl instanceof CRL)) {
        crl = new CRL(crl);
      }
      return crl._crl;
    });
    const chain = new toolbox_exports.pkijs.CertificateChainValidationEngine({
      trustedCerts: roots,
      certs,
      crls
    });
    const res = await chain.verify();
    if (!res.result) {
      throw new Error(res.resultMessage);
    } else {
      return res;
    }
  }
};
var helpers = {
  resolveOid
};

// lib/keyUtils.js
var coseLabels = {
  1: {
    name: "kty",
    values: {
      1: "OKP",
      2: "EC",
      3: "RSA"
    }
  },
  2: {
    name: "kid",
    values: {}
  },
  3: {
    name: "alg",
    values: {
      "-7": "ECDSA_w_SHA256",
      /* "-8": "EdDSA", */
      "-35": "ECDSA_w_SHA384",
      "-36": "ECDSA_w_SHA512",
      /*"-37": "RSASSA-PSS_w_SHA-256",
      "-38": "RSASSA-PSS_w_SHA-384",
      "-39": "RSASSA-PSS_w_SHA-512",*/
      "-257": "RSASSA-PKCS1-v1_5_w_SHA256",
      "-258": "RSASSA-PKCS1-v1_5_w_SHA384",
      "-259": "RSASSA-PKCS1-v1_5_w_SHA512",
      "-65535": "RSASSA-PKCS1-v1_5_w_SHA1"
    }
  },
  4: {
    name: "key_ops",
    values: {}
  },
  5: {
    name: "base_iv",
    values: {}
  }
};
var coseKeyParamList = {
  // ECDSA key parameters
  // defined here: https://tools.ietf.org/html/rfc8152#section-13.1.1
  EC: {
    "-1": {
      name: "crv",
      values: {
        1: "P-256",
        2: "P-384",
        3: "P-521"
      }
    },
    // value = Buffer
    "-2": {
      name: "x"
    },
    "-3": {
      name: "y"
    },
    "-4": {
      name: "d"
    }
  },
  // Octet Key Pair key parameters
  // defined here: https://datatracker.ietf.org/doc/html/rfc8152#section-13.2
  OKP: {
    "-1": {
      name: "crv",
      values: {
        4: "X25519",
        5: "X448",
        6: "Ed25519",
        7: "Ed448"
      }
    },
    // value = Buffer
    "-2": {
      name: "x"
    },
    "-4": {
      name: "d"
    }
  },
  // RSA key parameters
  // defined here: https://tools.ietf.org/html/rfc8230#section-4
  RSA: {
    // value = Buffer
    "-1": {
      name: "n"
    },
    "-2": {
      name: "e"
    },
    "-3": {
      name: "d"
    },
    "-4": {
      name: "p"
    },
    "-5": {
      name: "q"
    },
    "-6": {
      name: "dP"
    },
    "-7": {
      name: "dQ"
    },
    "-8": {
      name: "qInv"
    },
    "-9": {
      name: "other"
    },
    "-10": {
      name: "r_i"
    },
    "-11": {
      name: "d_i"
    },
    "-12": {
      name: "t_i"
    }
  }
};
var algToJWKAlg = {
  "RSASSA-PKCS1-v1_5_w_SHA256": "RS256",
  "RSASSA-PKCS1-v1_5_w_SHA384": "RS384",
  "RSASSA-PKCS1-v1_5_w_SHA512": "RS512",
  "RSASSA-PKCS1-v1_5_w_SHA1": "RS256",
  /*
  PS256-512 is untested 
  "RSASSA-PSS_w_SHA-256": "PS256",
  "RSASSA-PSS_w_SHA-384": "PS384",
  "RSASSA-PSS_w_SHA-512": "PS512",*/
  "ECDSA_w_SHA256": "ES256",
  "ECDSA_w_SHA384": "ES384",
  "ECDSA_w_SHA512": "ES512"
};
var algorithmInputMap = {
  /* Cose Algorithm identifier to Webcrypto algorithm name */
  "RSASSA-PKCS1-v1_5_w_SHA256": "RSASSA-PKCS1-v1_5",
  "RSASSA-PKCS1-v1_5_w_SHA384": "RSASSA-PKCS1-v1_5",
  "RSASSA-PKCS1-v1_5_w_SHA512": "RSASSA-PKCS1-v1_5",
  "RSASSA-PKCS1-v1_5_w_SHA1": "RSASSA-PKCS1-v1_5",
  /*"RSASSA-PSS_w_SHA-256": "RSASSA-PSS",
  "RSASSA-PSS_w_SHA-384": "RSASSA-PSS",
  "RSASSA-PSS_w_SHA-512": "RSASSA-PSS",*/
  "ECDSA_w_SHA256": "ECDSA",
  "ECDSA_w_SHA384": "ECDSA",
  "ECDSA_w_SHA512": "ECDSA",
  /*"EdDSA": "EdDSA",*/
  /* JWK alg to Webcrypto algorithm name */
  "RS256": "RSASSA-PKCS1-v1_5",
  "RS384": "RSASSA-PKCS1-v1_5",
  "RS512": "RSASSA-PKCS1-v1_5",
  /*"PS256": "RSASSA-PSS",
  "PS384": "RSASSA-PSS",
  "PS512": "RSASSA-PSS",*/
  "ES384": "ECDSA",
  "ES256": "ECDSA",
  "ES512": "ECDSA"
};
var inputHashMap = {
  /* Cose Algorithm identifier to Webcrypto hash name */
  "RSASSA-PKCS1-v1_5_w_SHA256": "SHA-256",
  "RSASSA-PKCS1-v1_5_w_SHA384": "SHA-384",
  "RSASSA-PKCS1-v1_5_w_SHA512": "SHA-512",
  "RSASSA-PKCS1-v1_5_w_SHA1": "SHA-1",
  /*"RSASSA-PSS_w_SHA256": "SHA-256",
  "RSASSA-PSS_w_SHA384": "SHA-384",
  "RSASSA-PSS_w_SHA512": "SHA-512",*/
  "ECDSA_w_SHA256": "SHA-256",
  "ECDSA_w_SHA384": "SHA-384",
  "ECDSA_w_SHA512": "SHA-512"
};
var PublicKey = class {
  /**
  * Create a empty public key
  * 
  * @returns {CryptoKey}
  */
  constructor() {
    this._original_pem = void 0;
    this._original_jwk = void 0;
    this._original_cose = void 0;
    this._alg = void 0;
    this._key = void 0;
  }
  /**
  * Import a CryptoKey, makes basic checks and throws on failure
  * 
  * @public
  * @param {CryptoKey} key - CryptoKey to import
  * @param {object} [alg] - Algorithm override
  * 
  * @returns {CryptoKey} - Returns this for chaining
  */
  fromCryptoKey(key, alg) {
    if (!key) {
      throw new TypeError("No key passed");
    }
    if (key && (!key.type || key.type !== "public")) {
      throw new TypeError("Invalid argument passed to fromCryptoKey, should be instance of CryptoKey with type public");
    }
    this._key = key;
    this.setAlgorithm(key.algorithm);
    if (alg) {
      this.setAlgorithm(alg);
    }
    return this;
  }
  /**
  * Import public key from SPKI PEM. Throws on any type of failure.
  *
  * @async
  * @public
  * @param {string} pem - PEM formatted string
  * @return {Promise<PublicKey>} - Returns itself for chaining
  */
  async fromPem(pem, hashName) {
    let base64ber, ber;
    if (typeof pem === "string" || pem instanceof String) {
      pem = pem.replace(/\r/g, "");
    }
    if (isPem(pem)) {
      base64ber = pemToBase64(pem);
      ber = coerceToArrayBuffer(base64ber, "base64ber");
    } else {
      throw new Error("Supplied key is not in PEM format");
    }
    if (ber.byteLength === 0) {
      throw new Error("Supplied key ber was empty (0 bytes)");
    }
    const asn1 = toolbox_exports.fromBER(ber);
    if (asn1.offset === -1) {
      throw new Error("error parsing ASN.1");
    }
    let keyInfo = new toolbox_exports.pkijs.PublicKeyInfo({
      schema: asn1.result
    });
    const algorithm = {};
    if (keyInfo.algorithm.algorithmId === "1.2.840.10045.2.1") {
      algorithm.name = "ECDSA";
      const parsedKey = keyInfo.parsedKey;
      if (parsedKey && parsedKey.namedCurve === "1.2.840.10045.3.1.7") {
        algorithm.namedCurve = "P-256";
      } else if (parsedKey && parsedKey.namedCurve === "1.3.132.0.34") {
        algorithm.namedCurve = "P-384";
      } else if (parsedKey && parsedKey.namedCurve === "1.3.132.0.35") {
        algorithm.namedCurve = "P-512";
      } else {
        algorithm.namedCurve = "P-256";
      }
    } else if (keyInfo.algorithm.algorithmId === "1.2.840.113549.1.1.1") {
      algorithm.name = "RSASSA-PKCS1-v1_5";
      algorithm.hash = hashName || "SHA-256";
    }
    this.setAlgorithm(algorithm);
    let importSPKIResult;
    try {
      importSPKIResult = await toolbox_exports.webcrypto.subtle.importKey("spki", ber, algorithm, true, [
        "verify"
      ]);
    } catch (_e1) {
      throw new Error("Unsupported key format", _e1);
    }
    this._original_pem = pem;
    this._key = importSPKIResult;
    return this;
  }
  /**
  * Import public key from JWK. Throws on any type of failure.
  *
  * @async
  * @public
  * @param {object} jwk - JWK object
  * @return {Promise<PublicKey>} - Returns itself for chaining
  */
  async fromJWK(jwk, extractable) {
    const jwkCopy = JSON.parse(JSON.stringify(jwk));
    if (typeof extractable !== "undefined" && typeof extractable === "boolean") {
      jwkCopy.ext = extractable;
    }
    this.setAlgorithm(jwkCopy);
    this._original_jwk = jwk;
    const generatedKey = await toolbox_exports.webcrypto.subtle.importKey("jwk", jwkCopy, this.getAlgorithm(), true, [
      "verify"
    ]);
    this._key = generatedKey;
    return this;
  }
  /**
  * Import public key from COSE data. Throws on any type of failure.
  * 
  * Internally this function converts COSE to a JWK, then calls .fromJwk() to import key to CryptoKey
  *
  * @async
  * @public
  * @param {object} cose - COSE data
  * @return {Promise<PublicKey>} - Returns itself for chaining
  */
  async fromCose(cose) {
    if (typeof cose !== "object") {
      throw new TypeError("'cose' argument must be an object, probably an Buffer conatining valid COSE");
    }
    this._cose = coerceToArrayBuffer(cose, "coseToJwk");
    let parsedCose;
    try {
      toolbox_exports.cbor.decodeMultiple(new Uint8Array(cose), (cborObject) => {
        parsedCose = cborObject;
        return false;
      });
    } catch (err) {
      throw new Error("couldn't parse authenticator.authData.attestationData CBOR: " + err);
    }
    if (typeof parsedCose !== "object") {
      throw new Error("invalid parsing of authenticator.authData.attestationData CBOR");
    }
    const coseMap = new Map(Object.entries(parsedCose));
    const extraMap = /* @__PURE__ */ new Map();
    const retKey = {};
    for (const kv of coseMap) {
      const key = kv[0].toString();
      let value = kv[1].toString();
      if (!coseLabels[key]) {
        extraMap.set(kv[0], kv[1]);
        continue;
      }
      const name = coseLabels[key].name;
      if (coseLabels[key].values[value]) {
        value = coseLabels[key].values[value];
      }
      retKey[name] = value;
    }
    const keyParams = coseKeyParamList[retKey.kty];
    for (const kv of extraMap) {
      const key = kv[0].toString();
      let value = kv[1];
      if (!keyParams[key]) {
        throw new Error("unknown COSE key label: " + retKey.kty + " " + key);
      }
      const name = keyParams[key].name;
      if (keyParams[key].values) {
        value = keyParams[key].values[value.toString()];
      }
      value = coerceToBase64Url(value, "coseToJwk");
      retKey[name] = value;
    }
    this._original_cose = cose;
    this.setAlgorithm(retKey);
    retKey.alg = algToJWKAlg[retKey.alg];
    await this.fromJWK(retKey, true);
    return this;
  }
  /**
  * Exports public key to PEM. 
  * - Reuses original PEM string if present.
  * - Possible to force regeneration of PEM string by setting 'forcedExport' parameter to true
  * - Throws on any kind of failure
  *
  * @async
  * @public
  * @param {boolean} [forcedExport] - Force regeneration of PEM string even if original PEM-string is available
  * @return {Promise<string>} - Returns PEM string
  */
  async toPem(forcedExport) {
    if (this._original_pem && !forcedExport) {
      return this._original_pem;
    } else if (this.getKey()) {
      let pemResult = abToPem("PUBLIC KEY", await toolbox_exports.webcrypto.subtle.exportKey("spki", this.getKey()));
      return pemResult;
    } else {
      throw new Error("No key information available");
    }
  }
  /**
  * Exports public key to JWK. 
  * - Only works if original jwk from 'fromJwk()' is available
  * - Throws on any kind of failure
  *
  * @public
  * @return {object} - Returns JWK object
  */
  toJwk() {
    if (this._original_jwk) {
      return this._original_jwk;
    } else {
      throw new Error("No usable key information available");
    }
  }
  /**
  * Exports public key to COSE data 
  * - Only works if original cose data from 'fromCose()' is available
  * - Throws on any kind of failure
  *
  * @public
  * @return {object} - Returns COSE data object
  */
  toCose() {
    if (this._original_cose) {
      return this._original_cose;
    } else {
      throw new Error("No usable key information available");
    }
  }
  /**
  * Returns internal key in CryptoKey format
  * - Mainly intended for internal use
  * - Throws if internal CryptoKey does not exist
  *
  * @public
  * @return {CryptoKey} - Internal CryptoKey instance, or undefined
  */
  getKey() {
    if (this._key) {
      return this._key;
    } else {
      throw new Error("Key data not available");
    }
  }
  /**
  * Returns internal algorithm, which should be of one of the following formats 
  * - RsaHashedImportParams
  * - EcKeyImportParams
  * - undefined
  *
  * @public
  * @return {object|undefined} - Internal algorithm representation, or undefined
  */
  getAlgorithm() {
    return this._alg;
  }
  /**
  * Sets internal algorithm identifier in format used by webcrypto, should be one of
  * - Allows adding missing properties
  * - Makes sure `alg.hash` is is `{ hash: { name: 'foo'} }` format
  * - Syncs back updated algorithm to this._key
  *
  * @public
  * @param {object} - RsaHashedImportParams, EcKeyImportParams, JWK or JWK-like
  * @return {object|undefined} - Internal algorithm representation, or undefined
  */
  setAlgorithm(algorithmInput) {
    let algorithmOutput = this._alg || {};
    if (algorithmInput.name) {
      algorithmOutput.name = algorithmInput.name;
    } else if (algorithmInput.alg) {
      const algMapResult = algorithmInputMap[algorithmInput.alg];
      if (algMapResult) {
        algorithmOutput.name = algMapResult;
      }
    }
    if (algorithmInput.hash) {
      if (algorithmInput.hash.name) {
        algorithmOutput.hash = algorithmInput.hash;
      } else {
        algorithmOutput.hash = {
          name: algorithmInput.hash
        };
        ;
      }
    } else if (algorithmInput.alg) {
      let hashMapResult = inputHashMap[algorithmInput.alg];
      if (hashMapResult) {
        algorithmOutput.hash = {
          name: hashMapResult
        };
      }
    }
    if (algorithmInput.namedCurve) {
      algorithmOutput.namedCurve = algorithmInput.namedCurve;
    } else if (algorithmInput.crv) {
      algorithmOutput.namedCurve = algorithmInput.crv;
    }
    if (Object.keys(algorithmOutput).length > 0) {
      this._alg = algorithmOutput;
      if (this._alg.hash && this._key) {
        this._key.algorithm.hash = this._alg.hash;
      }
    }
  }
};
function coseAlgToStr(alg) {
  if (typeof alg !== "number") {
    throw new TypeError("expected 'alg' to be a number, got: " + alg);
  }
  const algValues = coseLabels["3"].values;
  const mapResult = algValues[alg];
  if (!mapResult) {
    throw new Error("'alg' is not a valid COSE algorithm number");
  }
  return algValues[alg];
}
function coseAlgToHashStr(alg) {
  if (typeof alg === "number") alg = coseAlgToStr(alg);
  if (typeof alg !== "string") {
    throw new Error("'alg' is not a string or a valid COSE algorithm number");
  }
  const mapResult = inputHashMap[alg];
  if (!mapResult) {
    throw new Error("'alg' is not a valid COSE algorithm");
  }
  return inputHashMap[alg];
}

// test/helpers/not-used-by-deno.js
var not_used_by_deno_exports = {};

// lib/toolbox.js
var webcrypto2;
if (typeof self !== "undefined" && "crypto" in self) {
  webcrypto2 = self.crypto;
} else {
  if (not_used_by_deno_exports && void 0) {
    webcrypto2 = void 0;
  } else {
    webcrypto2 = new (void 0)();
  }
}
var pkijs = {
  setEngine,
  CryptoEngine,
  Certificate,
  CertificateRevocationList,
  CertificateChainValidationEngine,
  PublicKeyInfo
};
pkijs.setEngine("newEngine", webcrypto2, new pkijs.CryptoEngine({
  name: "",
  crypto: webcrypto2,
  subtle: webcrypto2.subtle
}));
function extractBigNum(fullArray, start, end, expectedLength) {
  let num = fullArray.slice(start, end);
  if (num.length !== expectedLength) {
    num = Array(expectedLength).fill(0).concat(...num).slice(num.length);
  }
  return num;
}
function derToRaw(signature) {
  const rStart = 4;
  const rEnd = rStart + signature[3];
  const sStart = rEnd + 2;
  return new Uint8Array([
    ...extractBigNum(signature, rStart, rEnd, 32),
    ...extractBigNum(signature, sStart, signature.length, 32)
  ]);
}
function isAndroidFacetId(str) {
  return str.startsWith("android:apk-key-hash:");
}
function isIOSFacetId(str) {
  return str.startsWith("ios:bundle-id:");
}
function checkOrigin(str) {
  if (!str) throw new Error("Empty Origin");
  if (isAndroidFacetId(str) || isIOSFacetId(str)) {
    return str;
  }
  const originUrl = new URL(str);
  const origin = originUrl.origin;
  if (origin !== str) {
    throw new Error("origin was malformatted");
  }
  const isLocalhost = originUrl.hostname == "localhost" || originUrl.hostname.endsWith(".localhost");
  if (originUrl.protocol !== "https:" && !isLocalhost) {
    throw new Error("origin should be https");
  }
  if ((!validDomainName(originUrl.hostname) || !validEtldPlusOne(originUrl.hostname)) && !isLocalhost) {
    throw new Error("origin is not a valid eTLD+1");
  }
  return origin;
}
function checkUrl(value, name, rules = {}) {
  if (!name) {
    throw new TypeError("name not specified in checkUrl");
  }
  if (typeof value !== "string") {
    throw new Error(`${name} must be a string`);
  }
  let urlValue = null;
  try {
    urlValue = new URL(value);
  } catch (_err) {
    throw new Error(`${name} is not a valid eTLD+1/url`);
  }
  if (!value.startsWith("http")) {
    throw new Error(`${name} must be http protocol`);
  }
  if (!rules.allowHttp && urlValue.protocol !== "https:") {
    throw new Error(`${name} should be https`);
  }
  if (!rules.allowPath && (value.endsWith("/") || urlValue.pathname !== "/")) {
    throw new Error(`${name} should not include path in url`);
  }
  if (!rules.allowHash && urlValue.hash) {
    throw new Error(`${name} should not include hash in url`);
  }
  if (!rules.allowCred && (urlValue.username || urlValue.password)) {
    throw new Error(`${name} should not include credentials in url`);
  }
  if (!rules.allowQuery && urlValue.search) {
    throw new Error(`${name} should not include query string in url`);
  }
  return value;
}
function validEtldPlusOne(value) {
  const result = m(value, {
    allowPrivateDomains: true
  });
  if (result.publicSuffix === null) {
    return false;
  }
  if (result.domainWithoutSuffix === null) {
    return false;
  }
  return true;
}
function validDomainName(value) {
  const ascii = punycode_default.toASCII(value);
  if (ascii.length < 1) {
    return false;
  }
  if (ascii.length > 255) {
    return false;
  }
  const labels = ascii.split(".");
  let label;
  for (let i2 = 0; i2 < labels.length; ++i2) {
    label = labels[i2];
    if (!label.length) {
      return false;
    }
    if (label.length > 63) {
      return false;
    }
    if (label.charAt(0) === "-") {
      return false;
    }
    if (!/^[a-z0-9-]+$/.test(label)) {
      return false;
    }
  }
  return true;
}
function checkDomainOrUrl(value, name, rules = {}) {
  if (!name) {
    throw new TypeError("name not specified in checkDomainOrUrl");
  }
  if (typeof value !== "string") {
    throw new Error(`${name} must be a string`);
  }
  if (validEtldPlusOne(value, name) && validDomainName(value, name)) {
    return value;
  }
  return checkUrl(value, name, rules);
}
function checkRpId(rpId) {
  if (typeof rpId !== "string") {
    throw new Error("rpId must be a string");
  }
  const isLocalhost = rpId === "localhost" || rpId.endsWith(".localhost");
  if (isLocalhost) return rpId;
  return checkDomainOrUrl(rpId, "rpId");
}
async function verifySignature(publicKey, expectedSignature, data, hashName) {
  let publicKeyInst;
  if (publicKey instanceof PublicKey) {
    publicKeyInst = publicKey;
  } else if (publicKey && publicKey.type === "public") {
    publicKeyInst = new PublicKey();
    publicKeyInst.fromCryptoKey(publicKey);
  } else {
    publicKeyInst = new PublicKey();
    await publicKeyInst.fromPem(publicKey);
  }
  const alg = publicKeyInst.getAlgorithm();
  if (typeof alg === "undefined") {
    throw new Error("verifySignature: Algoritm missing.");
  }
  if (hashName) {
    alg.hash = {
      name: hashName
    };
  }
  if (!alg.hash) {
    throw new Error("verifySignature: Hash name missing.");
  }
  publicKeyInst.setAlgorithm(alg);
  try {
    let uSignature = new Uint8Array(expectedSignature);
    if (alg.name === "ECDSA") {
      uSignature = await derToRaw(uSignature);
    }
    const result = await webcrypto2.subtle.verify(publicKeyInst.getAlgorithm(), publicKeyInst.getKey(), uSignature, new Uint8Array(data));
    if (!result && hashName === "SHA-1" && not_used_by_deno_exports && void 0) {
      try {
        const pem = await publicKeyInst.toPem();
        const verify2 = (void 0)("RSA-SHA1");
        verify2.update(Buffer.from(data));
        verify2.end();
        return verify2.verify(pem, Buffer.from(expectedSignature));
      } catch (fallbackError) {
        console.error("SHA-1 fallback failed:", fallbackError);
        return result;
      }
    }
    return result;
  } catch (e2) {
    console.error(e2);
    throw e2;
  }
}
async function hashDigest(o2, alg) {
  if (typeof o2 === "string") {
    o2 = new TextEncoder().encode(o2);
  }
  const result = await webcrypto2.subtle.digest(alg || "SHA-256", o2);
  return result;
}
function randomValues(n2) {
  const byteArray = new Uint8Array(n2);
  webcrypto2.getRandomValues(byteArray);
  return byteArray;
}
function getHostname(urlIn) {
  return new URL(urlIn).hostname;
}
async function getEmbeddedJwk(jwsHeader, alg) {
  let publicKeyJwk;
  if (jwsHeader.jwk) {
    publicKeyJwk = jwsHeader.jwk;
  } else if (jwsHeader.x5c) {
    const x5c0 = jwsHeader.x5c[0];
    const cert = new Certificate2(x5c0);
    publicKeyJwk = await cert.getPublicKeyJwk();
    publicKeyJwk.kid = publicKeyJwk.kid || cert.getCommonName();
  }
  if (!publicKeyJwk) {
    throw new Error("getEmbeddedJwk: JWK not found in JWS.");
  }
  publicKeyJwk.alg = publicKeyJwk.alg || jwsHeader.alg || alg;
  return publicKeyJwk;
}

// lib/utils.js
function ab2str(buf) {
  let str = "";
  new Uint8Array(buf).forEach((ch) => {
    str += String.fromCharCode(ch);
  });
  return str;
}
function isBase64Url(str) {
  return !!str.match(/^[A-Za-z0-9\-_]+={0,2}$/);
}
function isPem(pem) {
  if (typeof pem !== "string") {
    return false;
  }
  const pemRegex = /^-----BEGIN .+-----$\n([A-Za-z0-9+/=]|\n)*^-----END .+-----$/m;
  return !!pem.match(pemRegex);
}
function isPositiveInteger(n2) {
  return n2 >>> 0 === parseFloat(n2);
}
function abToBuf(ab) {
  return new Uint8Array(ab).buffer;
}
function abToInt(ab) {
  if (!(ab instanceof ArrayBuffer)) {
    throw new Error("abToInt: expected ArrayBuffer");
  }
  const buf = new Uint8Array(ab);
  let cnt = ab.byteLength - 1;
  let ret = 0;
  buf.forEach((byte) => {
    ret |= byte << cnt * 8;
    cnt--;
  });
  return ret;
}
function abToPem(type, ab) {
  if (typeof type !== "string") {
    throw new Error("abToPem expected 'type' to be string like 'CERTIFICATE', got: " + type);
  }
  const str = coerceToBase64(ab, "pem buffer");
  return [
    `-----BEGIN ${type}-----
`,
    ...str.match(/.{1,64}/g).map((s2) => s2 + "\n"),
    `-----END ${type}-----
`
  ].join("");
}
var appendBuffer = function(buffer1, buffer2) {
  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
  tmp.set(new Uint8Array(buffer1), 0);
  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
  return tmp.buffer;
};
function coerceToArrayBuffer(buf, name) {
  if (!name) {
    throw new TypeError("name not specified in coerceToArrayBuffer");
  }
  if (typeof buf === "string" && buf === "") {
    buf = new Uint8Array(0);
  } else if (typeof buf === "string") {
    buf = buf.replace(/\+/g, "-").replace(/\//g, "_").replace("=", "");
    buf = base64.toArrayBuffer(buf, true);
  }
  if (Array.isArray(buf)) {
    buf = new Uint8Array(buf);
  }
  if (typeof Buffer !== "undefined" && buf instanceof Buffer) {
    buf = new Uint8Array(buf);
    buf = buf.buffer;
  }
  if (buf instanceof Uint8Array) {
    buf = buf.slice(0, buf.byteLength, buf.buffer.byteOffset).buffer;
  }
  if (!(buf instanceof ArrayBuffer)) {
    throw new TypeError(`could not coerce '${name}' to ArrayBuffer`);
  }
  return buf;
}
function coerceToBase64(thing, name) {
  if (!name) {
    throw new TypeError("name not specified in coerceToBase64");
  }
  if (typeof thing !== "string") {
    try {
      thing = base64.fromArrayBuffer(coerceToArrayBuffer(thing, name));
    } catch (_err) {
      throw new Error(`could not coerce '${name}' to string`);
    }
  }
  return thing;
}
function str2ab(str) {
  const buf = new ArrayBuffer(str.length);
  const bufView = new Uint8Array(buf);
  for (let i2 = 0, strLen = str.length; i2 < strLen; i2++) {
    bufView[i2] = str.charCodeAt(i2);
  }
  return buf;
}
function coerceToBase64Url(thing, name) {
  if (!name) {
    throw new TypeError("name not specified in coerceToBase64");
  }
  if (typeof thing === "string") {
    thing = thing.replace(/\+/g, "-").replace(/\//g, "_").replace(/={0,2}$/g, "");
  }
  if (typeof thing !== "string") {
    try {
      thing = base64.fromArrayBuffer(coerceToArrayBuffer(thing, name), true);
    } catch (_err) {
      throw new Error(`could not coerce '${name}' to string`);
    }
  }
  return thing;
}
function arrayBufferEquals(b1, b2) {
  if (!(b1 instanceof ArrayBuffer) || !(b2 instanceof ArrayBuffer)) {
    return false;
  }
  if (b1.byteLength !== b2.byteLength) {
    return false;
  }
  b1 = new Uint8Array(b1);
  b2 = new Uint8Array(b2);
  for (let i2 = 0; i2 < b1.byteLength; i2++) {
    if (b1[i2] !== b2[i2]) return false;
  }
  return true;
}
function abToHex(ab) {
  if (!(ab instanceof ArrayBuffer)) {
    throw new TypeError("Invalid argument passed to abToHex");
  }
  const result = Array.prototype.map.call(new Uint8Array(ab), (x) => ("00" + x.toString(16)).slice(-2)).join("");
  return result;
}
function b64ToJsObject(b64, desc) {
  return JSON.parse(ab2str(coerceToArrayBuffer(b64, desc)));
}
function jsObjectToB64(obj) {
  return base64.fromString(JSON.stringify(obj).replace(/[\u{0080}-\u{FFFF}]/gu, ""));
}
function pemToBase64(pem) {
  if (typeof pem === "string" || pem instanceof String) {
    pem = pem.replace(/\r/g, "");
  }
  if (!isPem(pem)) {
    throw new Error("expected PEM string as input");
  }
  pem = pem.replace(/\n$/, "");
  let pemArr = pem.split("\n");
  pemArr = pemArr.slice(1, pemArr.length - 1);
  return pemArr.join("");
}

// lib/validator.js
async function validateExpectations() {
  let req = this.requiredExpectations;
  let opt = this.optionalExpectations;
  let exp = this.expectations;
  if (!(exp instanceof Map)) {
    throw new Error("expectations should be of type Map");
  }
  if (Array.isArray(req)) {
    req = /* @__PURE__ */ new Set([
      req
    ]);
  }
  if (!(req instanceof Set)) {
    throw new Error("requiredExpectaions should be of type Set");
  }
  if (Array.isArray(opt)) {
    opt = /* @__PURE__ */ new Set([
      opt
    ]);
  }
  if (!(opt instanceof Set)) {
    throw new Error("optionalExpectations should be of type Set");
  }
  for (let field of req) {
    if (!exp.has(field)) {
      throw new Error(`expectation did not contain value for '${field}'`);
    }
  }
  let optCount = 0;
  for (const [field] of exp) {
    if (opt.has(field)) {
      optCount++;
    }
  }
  if (req.size !== exp.size - optCount) {
    throw new Error(`wrong number of expectations: should have ${req.size} but got ${exp.size - optCount}`);
  }
  if (req.has("origin")) {
    let expectedOrigin = exp.get("origin");
    toolbox_exports.checkOrigin(expectedOrigin);
  }
  if (exp.has("rpId")) {
    let expectedRpId = exp.get("rpId");
    toolbox_exports.checkRpId(expectedRpId);
  }
  if (exp.has("challenge")) {
    let challenge = exp.get("challenge");
    if (typeof challenge !== "string") {
      throw new Error("expected challenge should be of type String, got: " + typeof challenge);
    }
    if (!isBase64Url(challenge)) {
      throw new Error("expected challenge should be properly encoded base64url String");
    }
  }
  if (req.has("flags")) {
    let validFlags = /* @__PURE__ */ new Set([
      "UP",
      "UV",
      "UP-or-UV",
      "AT",
      "ED"
    ]);
    let flags = exp.get("flags");
    for (let flag of flags) {
      if (!validFlags.has(flag)) {
        throw new Error(`expected flag unknown: ${flag}`);
      }
    }
  }
  if (req.has("prevCounter")) {
    let prevCounter = exp.get("prevCounter");
    if (!isPositiveInteger(prevCounter)) {
      throw new Error("expected counter to be positive integer");
    }
  }
  if (req.has("publicKey")) {
    let publicKey = exp.get("publicKey");
    if (!isPem(publicKey)) {
      throw new Error("expected publicKey to be in PEM format");
    }
  }
  if (req.has("userHandle")) {
    let userHandle = exp.get("userHandle");
    if (userHandle !== null && typeof userHandle !== "string") {
      throw new Error("expected userHandle to be null or string");
    }
  }
  if (exp.has("allowCredentials")) {
    let allowCredentials = exp.get("allowCredentials");
    if (allowCredentials != null) {
      if (!Array.isArray(allowCredentials)) {
        throw new Error("expected allowCredentials to be null or array");
      } else {
        allowCredentials.forEach((allowCredential, index) => {
          if (typeof allowCredential.id === "string") {
            allowCredential.id = coerceToArrayBuffer(allowCredential.id, "allowCredentials[" + index + "].id");
          }
          if (allowCredential.id == null || !(allowCredential.id instanceof ArrayBuffer)) {
            throw new Error("expected id of allowCredentials[" + index + "] to be ArrayBuffer");
          }
          if (allowCredential.type == null || allowCredential.type !== "public-key") {
            throw new Error("expected type of allowCredentials[" + index + "] to be string with value 'public-key'");
          }
          if (allowCredential.transports != null && !Array.isArray(allowCredential.transports)) {
            throw new Error("expected transports of allowCredentials[" + index + "] to be array or null");
          } else if (allowCredential.transports != null && !allowCredential.transports.every((el) => [
            "usb",
            "nfc",
            "ble",
            "cable",
            "internal"
          ].includes(el))) {
            throw new Error("expected transports of allowCredentials[" + index + "] to be string with value 'usb', 'nfc', 'ble', 'cable', 'internal' or null");
          }
        });
      }
    }
  }
  this.audit.validExpectations = true;
  return true;
}
function validateCreateRequest() {
  let req = this.request;
  if (typeof req !== "object") {
    throw new TypeError("expected request to be Object, got " + typeof req);
  }
  if (!(req.rawId instanceof ArrayBuffer) && !(req.id instanceof ArrayBuffer)) {
    throw new TypeError("expected 'id' or 'rawId' field of request to be ArrayBuffer, got rawId " + typeof req.rawId + " and id " + typeof req.id);
  }
  if (typeof req.response !== "object") {
    throw new TypeError("expected 'response' field of request to be Object, got " + typeof req.response);
  }
  if (typeof req.response.attestationObject !== "string" && !(req.response.attestationObject instanceof ArrayBuffer)) {
    throw new TypeError("expected 'response.attestationObject' to be base64 String or ArrayBuffer");
  }
  if (typeof req.response.clientDataJSON !== "string" && !(req.response.clientDataJSON instanceof ArrayBuffer)) {
    throw new TypeError("expected 'response.clientDataJSON' to be base64 String or ArrayBuffer");
  }
  this.audit.validRequest = true;
  return true;
}
function validateAssertionResponse() {
  let req = this.request;
  if (typeof req !== "object") {
    throw new TypeError("expected request to be Object, got " + typeof req);
  }
  if (!(req.rawId instanceof ArrayBuffer) && !(req.id instanceof ArrayBuffer)) {
    throw new TypeError("expected 'id' or 'rawId' field of request to be ArrayBuffer, got rawId " + typeof req.rawId + " and id " + typeof req.id);
  }
  if (typeof req.response !== "object") {
    throw new TypeError("expected 'response' field of request to be Object, got " + typeof req.response);
  }
  if (typeof req.response.clientDataJSON !== "string" && !(req.response.clientDataJSON instanceof ArrayBuffer)) {
    throw new TypeError("expected 'response.clientDataJSON' to be base64 String or ArrayBuffer");
  }
  if (typeof req.response.authenticatorData !== "string" && !(req.response.authenticatorData instanceof ArrayBuffer)) {
    throw new TypeError("expected 'response.authenticatorData' to be base64 String or ArrayBuffer");
  }
  if (typeof req.response.signature !== "string" && !(req.response.signature instanceof ArrayBuffer)) {
    throw new TypeError("expected 'response.signature' to be base64 String or ArrayBuffer");
  }
  if (typeof req.response.userHandle !== "string" && !(req.response.userHandle instanceof ArrayBuffer) && req.response.userHandle !== void 0 && req.response.userHandle !== null) {
    throw new TypeError("expected 'response.userHandle' to be base64 String, ArrayBuffer, or undefined");
  }
  this.audit.validRequest = true;
  return true;
}
async function validateRawClientDataJson() {
  let rawClientDataJson = this.clientData.get("rawClientDataJson");
  if (!(rawClientDataJson instanceof ArrayBuffer)) {
    throw new Error("clientData clientDataJson should be ArrayBuffer");
  }
  this.audit.journal.add("rawClientDataJson");
  return true;
}
async function validateTransports() {
  let transports = this.authnrData.get("transports");
  if (transports != null && !Array.isArray(transports)) {
    throw new Error("expected transports to be 'null' or 'array<string>'");
  }
  for (const index in transports) {
    if (typeof transports[index] !== "string") {
      throw new Error("expected transports[" + index + "] to be 'string'");
    }
  }
  this.audit.journal.add("transports");
  return true;
}
async function validateId() {
  let rawId = this.clientData.get("rawId");
  if (!(rawId instanceof ArrayBuffer)) {
    throw new Error("expected id to be of type ArrayBuffer");
  }
  let credId = this.authnrData.get("credId");
  if (credId !== void 0 && !arrayBufferEquals(rawId, credId)) {
    throw new Error("id and credId were not the same");
  }
  let allowCredentials = this.expectations.get("allowCredentials");
  if (allowCredentials != void 0) {
    if (!allowCredentials.some((cred) => {
      let result = arrayBufferEquals(rawId, cred.id);
      return result;
    })) {
      throw new Error("Credential ID does not match any value in allowCredentials");
    }
  }
  this.audit.journal.add("rawId");
  return true;
}
async function validateOrigin() {
  let expectedOrigin = this.expectations.get("origin");
  let clientDataOrigin = this.clientData.get("origin");
  let origin = toolbox_exports.checkOrigin(clientDataOrigin);
  if (origin !== expectedOrigin) {
    throw new Error("clientData origin did not match expected origin");
  }
  this.audit.journal.add("origin");
  return true;
}
async function validateCreateType() {
  let type = this.clientData.get("type");
  if (type !== "webauthn.create") {
    throw new Error("clientData type should be 'webauthn.create', got: " + type);
  }
  this.audit.journal.add("type");
  return true;
}
async function validateGetType() {
  let type = this.clientData.get("type");
  if (type !== "webauthn.get") {
    throw new Error("clientData type should be 'webauthn.get'");
  }
  this.audit.journal.add("type");
  return true;
}
async function validateChallenge() {
  let expectedChallenge = this.expectations.get("challenge");
  let challenge = this.clientData.get("challenge");
  if (typeof challenge !== "string") {
    throw new Error("clientData challenge was not a string");
  }
  if (!isBase64Url(challenge)) {
    throw new TypeError("clientData challenge was not properly encoded base64url");
  }
  challenge = challenge.replace(/={1,2}$/, "");
  if (challenge !== expectedChallenge) {
    throw new Error("clientData challenge mismatch");
  }
  this.audit.journal.add("challenge");
  return true;
}
async function validateTokenBinding() {
  let tokenBinding = this.clientData.get("tokenBinding");
  if (typeof tokenBinding === "object") {
    if (tokenBinding.status !== "not-supported" && tokenBinding.status !== "supported") {
      throw new Error("tokenBinding status should be 'not-supported' or 'supported', got: " + tokenBinding.status);
    }
    if (Object.keys(tokenBinding).length != 1) {
      throw new Error("tokenBinding had too many keys");
    }
  } else if (tokenBinding !== void 0) {
    throw new Error("Token binding field malformed: " + tokenBinding);
  }
  this.audit.journal.add("tokenBinding");
  return true;
}
async function validateRawAuthnrData() {
  let rawAuthnrData = this.authnrData.get("rawAuthnrData");
  if (!(rawAuthnrData instanceof ArrayBuffer)) {
    throw new Error("authnrData rawAuthnrData should be ArrayBuffer");
  }
  this.audit.journal.add("rawAuthnrData");
  return true;
}
async function validateAttestation() {
  return Fido2Lib.validateAttestation.call(this);
}
async function validateAssertionSignature() {
  let expectedSignature = this.authnrData.get("sig");
  let publicKey = this.expectations.get("publicKey");
  let rawAuthnrData = this.authnrData.get("rawAuthnrData");
  let rawClientData = this.clientData.get("rawClientDataJson");
  let clientDataHashBuf = await toolbox_exports.hashDigest(rawClientData);
  let clientDataHash = new Uint8Array(clientDataHashBuf).buffer;
  let res = await toolbox_exports.verifySignature(publicKey, expectedSignature, appendBuffer(rawAuthnrData, clientDataHash), "SHA-256");
  if (!res) {
    throw new Error("signature validation failed");
  }
  this.audit.journal.add("sig");
  return true;
}
async function validateRpIdHash() {
  let rpIdHash = this.authnrData.get("rpIdHash");
  if (typeof Buffer !== "undefined" && rpIdHash instanceof Buffer) {
    rpIdHash = new Uint8Array(rpIdHash).buffer;
  }
  if (!(rpIdHash instanceof ArrayBuffer)) {
    throw new Error("couldn't coerce clientData rpIdHash to ArrayBuffer");
  }
  let domain = this.expectations.has("rpId") ? this.expectations.get("rpId") : toolbox_exports.getHostname(this.expectations.get("origin"));
  let createdHash = new Uint8Array(await toolbox_exports.hashDigest(domain)).buffer;
  if (rpIdHash.byteLength !== createdHash.byteLength) {
    throw new Error("authnrData rpIdHash length mismatch");
  }
  rpIdHash = new Uint8Array(rpIdHash);
  createdHash = new Uint8Array(createdHash);
  for (let i2 = 0; i2 < rpIdHash.byteLength; i2++) {
    if (rpIdHash[i2] !== createdHash[i2]) {
      throw new TypeError("authnrData rpIdHash mismatch");
    }
  }
  this.audit.journal.add("rpIdHash");
  return true;
}
async function validateFlags() {
  let expectedFlags = this.expectations.get("flags");
  let flags = this.authnrData.get("flags");
  for (let expFlag of expectedFlags) {
    if (expFlag === "UP-or-UV") {
      if (flags.has("UV")) {
        if (flags.has("UP")) {
          continue;
        } else {
          throw new Error("expected User Presence (UP) flag to be set if User Verification (UV) is set");
        }
      } else if (flags.has("UP")) {
        continue;
      } else {
        throw new Error("expected User Presence (UP) or User Verification (UV) flag to be set and neither was");
      }
    }
    if (expFlag === "UV") {
      if (flags.has("UV")) {
        if (flags.has("UP")) {
          continue;
        } else {
          throw new Error("expected User Presence (UP) flag to be set if User Verification (UV) is set");
        }
      } else {
        throw new Error(`expected flag was not set: ${expFlag}`);
      }
    }
    if (!flags.has(expFlag)) {
      throw new Error(`expected flag was not set: ${expFlag}`);
    }
  }
  this.audit.journal.add("flags");
  return true;
}
async function validateInitialCounter() {
  let counter = this.authnrData.get("counter");
  if (typeof counter !== "number") {
    throw new Error("authnrData counter wasn't a number");
  }
  this.audit.journal.add("counter");
  return true;
}
async function validateAaguid() {
  let aaguid = this.authnrData.get("aaguid");
  if (!(aaguid instanceof ArrayBuffer)) {
    throw new Error("authnrData AAGUID is not ArrayBuffer");
  }
  if (aaguid.byteLength !== 16) {
    throw new Error("authnrData AAGUID was wrong length");
  }
  this.audit.journal.add("aaguid");
  return true;
}
async function validateCredId() {
  let credId = this.authnrData.get("credId");
  let credIdLen = this.authnrData.get("credIdLen");
  if (!(credId instanceof ArrayBuffer)) {
    throw new Error("authnrData credId should be ArrayBuffer");
  }
  if (typeof credIdLen !== "number") {
    throw new Error("authnrData credIdLen should be number, got " + typeof credIdLen);
  }
  if (credId.byteLength !== credIdLen) {
    throw new Error("authnrData credId was wrong length");
  }
  this.audit.journal.add("credId");
  this.audit.journal.add("credIdLen");
  return true;
}
async function validatePublicKey() {
  let cbor = this.authnrData.get("credentialPublicKeyCose");
  let jwk = this.authnrData.get("credentialPublicKeyJwk");
  let pem = this.authnrData.get("credentialPublicKeyPem");
  if (!(cbor instanceof ArrayBuffer)) {
    throw new Error("authnrData credentialPublicKeyCose isn't of type ArrayBuffer");
  }
  this.audit.journal.add("credentialPublicKeyCose");
  if (typeof jwk !== "object") {
    throw new Error("authnrData credentialPublicKeyJwk isn't of type Object");
  }
  if (typeof jwk.kty !== "string") {
    throw new Error("authnrData credentialPublicKeyJwk.kty isn't of type String");
  }
  if (typeof jwk.alg !== "string") {
    throw new Error("authnrData credentialPublicKeyJwk.alg isn't of type String");
  }
  switch (jwk.kty) {
    case "EC":
      if (typeof jwk.crv !== "string") {
        throw new Error("authnrData credentialPublicKeyJwk.crv isn't of type String");
      }
      break;
    case "RSA":
      if (typeof jwk.n !== "string") {
        throw new Error("authnrData credentialPublicKeyJwk.n isn't of type String");
      }
      if (typeof jwk.e !== "string") {
        throw new Error("authnrData credentialPublicKeyJwk.e isn't of type String");
      }
      break;
    default:
      throw new Error("authnrData unknown JWK key type: " + jwk.kty);
  }
  this.audit.journal.add("credentialPublicKeyJwk");
  if (typeof pem !== "string") {
    throw new Error("authnrData credentialPublicKeyPem isn't of type String");
  }
  if (!isPem(pem)) {
    throw new Error("authnrData credentialPublicKeyPem was malformatted");
  }
  this.audit.journal.add("credentialPublicKeyPem");
  return true;
}
function validateExtensions() {
  const extensions2 = this.authnrData.get("webAuthnExtensions");
  const shouldHaveExtensions = this.authnrData.get("flags").has("ED");
  if (shouldHaveExtensions) {
    if (Array.isArray(extensions2) && extensions2.every((item) => typeof item === "object")) {
      this.audit.journal.add("webAuthnExtensions");
    } else {
      throw new Error("webAuthnExtensions aren't valid");
    }
  } else {
    if (extensions2 !== void 0) {
      throw new Error("unexpected webAuthnExtensions found");
    }
  }
  return true;
}
async function validateUserHandle() {
  let userHandle = this.authnrData.get("userHandle");
  if (userHandle === void 0 || userHandle === null || userHandle === "") {
    this.audit.journal.add("userHandle");
    return true;
  }
  userHandle = coerceToBase64Url(userHandle, "userHandle");
  let expUserHandle = this.expectations.get("userHandle");
  if (typeof userHandle === "string" && userHandle === expUserHandle) {
    this.audit.journal.add("userHandle");
    return true;
  }
  throw new Error("unable to validate userHandle");
}
async function validateCounter() {
  let prevCounter = this.expectations.get("prevCounter");
  let counter = this.authnrData.get("counter");
  let counterSupported = !(counter === 0 && prevCounter === 0);
  if (counter <= prevCounter && counterSupported) {
    throw new Error("counter rollback detected");
  }
  this.audit.journal.add("counter");
  this.audit.info.set("counter-supported", "" + counterSupported);
  return true;
}
async function validateAudit() {
  let journal = this.audit.journal;
  let clientData = this.clientData;
  let authnrData = this.authnrData;
  for (let kv of clientData) {
    let val = kv[0];
    if (!journal.has(val)) {
      throw new Error(`internal audit failed: ${val} was not validated`);
    }
  }
  for (let kv of authnrData) {
    let val = kv[0];
    if (!journal.has(val)) {
      throw new Error(`internal audit failed: ${val} was not validated`);
    }
  }
  if (journal.size !== clientData.size + authnrData.size) {
    throw new Error(`internal audit failed: ${journal.size} fields checked; expected ${clientData.size + authnrData.size}`);
  }
  if (!this.audit.validExpectations) {
    throw new Error("internal audit failed: expectations not validated");
  }
  if (!this.audit.validRequest) {
    throw new Error("internal audit failed: request not validated");
  }
  this.audit.complete = true;
  return true;
}
function attach(o2) {
  let mixins = {
    validateExpectations,
    validateCreateRequest,
    // clientData validators
    validateRawClientDataJson,
    validateOrigin,
    validateId,
    validateCreateType,
    validateGetType,
    validateChallenge,
    validateTokenBinding,
    validateTransports,
    // authnrData validators
    validateRawAuthnrData,
    validateAttestation,
    validateAssertionSignature,
    validateRpIdHash,
    validateAaguid,
    validateCredId,
    validatePublicKey,
    validateExtensions,
    validateFlags,
    validateUserHandle,
    validateCounter,
    validateInitialCounter,
    validateAssertionResponse,
    // audit structures
    audit: {
      validExpectations: false,
      validRequest: false,
      complete: false,
      journal: /* @__PURE__ */ new Set(),
      warning: /* @__PURE__ */ new Map(),
      info: /* @__PURE__ */ new Map()
    },
    validateAudit
  };
  for (let key of Object.keys(mixins)) {
    o2[key] = mixins[key];
  }
}

// lib/parser.js
function parseExpectations(exp) {
  if (typeof exp !== "object") {
    throw new TypeError("expected 'expectations' to be of type object, got " + typeof exp);
  }
  const ret = /* @__PURE__ */ new Map();
  if (exp.origin) {
    if (typeof exp.origin !== "string") {
      throw new TypeError("expected 'origin' should be string, got " + typeof exp.origin);
    }
    const origin = toolbox_exports.checkOrigin(exp.origin);
    ret.set("origin", origin);
  }
  if (exp.rpId) {
    if (typeof exp.rpId !== "string") {
      throw new TypeError("expected 'rpId' should be string, got " + typeof exp.rpId);
    }
    const rpId = toolbox_exports.checkRpId(exp.rpId);
    ret.set("rpId", rpId);
  }
  if (exp.challenge) {
    let challenge = exp.challenge;
    challenge = coerceToBase64Url(challenge, "expected challenge");
    ret.set("challenge", challenge);
  }
  if (exp.flags) {
    let flags = exp.flags;
    if (Array.isArray(flags)) {
      flags = new Set(flags);
    }
    if (!(flags instanceof Set)) {
      throw new TypeError("expected flags to be an Array or a Set, got: " + typeof flags);
    }
    ret.set("flags", flags);
  }
  if (exp.prevCounter !== void 0) {
    if (typeof exp.prevCounter !== "number") {
      throw new TypeError("expected 'prevCounter' should be Number, got " + typeof exp.prevCounter);
    }
    ret.set("prevCounter", exp.prevCounter);
  }
  if (exp.publicKey) {
    if (typeof exp.publicKey !== "string") {
      throw new TypeError("expected 'publicKey' should be String, got " + typeof exp.publicKey);
    }
    ret.set("publicKey", exp.publicKey);
  }
  if (exp.userHandle !== void 0) {
    let userHandle = exp.userHandle;
    if (userHandle !== null && userHandle !== "") {
      userHandle = coerceToBase64Url(userHandle, "userHandle");
    }
    ret.set("userHandle", userHandle);
  }
  if (exp.allowCredentials !== void 0) {
    const allowCredentials = exp.allowCredentials;
    if (allowCredentials !== null && !Array.isArray(allowCredentials)) {
      throw new TypeError("expected 'allowCredentials' to be null or array, got " + typeof allowCredentials);
    }
    for (const index in allowCredentials) {
      if (allowCredentials[index].id != null) {
        allowCredentials[index].id = coerceToArrayBuffer(allowCredentials[index].id, "allowCredentials[" + index + "].id");
      }
    }
    ret.set("allowCredentials", allowCredentials);
  }
  return ret;
}
function parseClientResponse(msg) {
  if (typeof msg !== "object") {
    throw new TypeError("expected msg to be Object");
  }
  if (msg.id && !msg.rawId) {
    msg.rawId = msg.id;
  }
  const rawId = coerceToArrayBuffer(msg.rawId, "rawId");
  if (typeof msg.response !== "object") {
    throw new TypeError("expected response to be Object");
  }
  const clientDataJSON = coerceToArrayBuffer(msg.response.clientDataJSON, "clientDataJSON");
  if (!(clientDataJSON instanceof ArrayBuffer)) {
    throw new TypeError("expected 'clientDataJSON' to be ArrayBuffer");
  }
  const clientDataJson = ab2str(clientDataJSON);
  let parsed;
  try {
    parsed = JSON.parse(clientDataJson);
  } catch (err) {
    throw new Error("couldn't parse clientDataJson: " + err);
  }
  const ret = /* @__PURE__ */ new Map([
    [
      "challenge",
      parsed.challenge
    ],
    [
      "origin",
      parsed.origin
    ],
    [
      "type",
      parsed.type
    ],
    [
      "tokenBinding",
      parsed.tokenBinding
    ],
    [
      "rawClientDataJson",
      clientDataJSON
    ],
    [
      "rawId",
      rawId
    ]
  ]);
  return ret;
}
async function parseAttestationObject(attestationObject) {
  attestationObject = coerceToArrayBuffer(attestationObject, "attestationObject");
  let parsed;
  try {
    parsed = toolbox_exports.cbor.decode(new Uint8Array(attestationObject));
  } catch (_err) {
    throw new TypeError("couldn't parse attestationObject CBOR");
  }
  if (typeof parsed !== "object") {
    throw new TypeError("invalid parsing of attestationObject cbor");
  }
  if (typeof parsed.fmt !== "string") {
    throw new Error("expected attestation CBOR to contain a 'fmt' string");
  }
  if (typeof parsed.attStmt !== "object") {
    throw new Error("expected attestation CBOR to contain a 'attStmt' object");
  }
  if (!(parsed.authData instanceof Uint8Array)) {
    throw new Error("expected attestation CBOR to contain a 'authData' byte sequence");
  }
  const ret = new Map([
    ...Fido2Lib.parseAttestation(parsed.fmt, parsed.attStmt),
    // return raw buffer for future signature verification
    [
      "rawAuthnrData",
      coerceToArrayBuffer(parsed.authData, "authData")
    ],
    // Added for compatibility with parseAuthnrAttestationResponse
    [
      "transports",
      void 0
    ],
    // parse authData
    ...await parseAuthenticatorData(parsed.authData)
  ]);
  return ret;
}
async function parseAuthnrAttestationResponse(msg) {
  if (typeof msg !== "object") {
    throw new TypeError("expected msg to be Object");
  }
  if (typeof msg.response !== "object") {
    throw new TypeError("expected response to be Object");
  }
  let attestationObject = msg.response.attestationObject;
  attestationObject = coerceToArrayBuffer(attestationObject, "attestationObject");
  let parsed;
  try {
    parsed = toolbox_exports.cbor.decode(new Uint8Array(attestationObject));
  } catch (_err) {
    throw new TypeError("couldn't parse attestationObject CBOR");
  }
  if (typeof parsed !== "object") {
    throw new TypeError("invalid parsing of attestationObject CBOR");
  }
  if (typeof parsed.fmt !== "string") {
    throw new Error("expected attestation CBOR to contain a 'fmt' string");
  }
  if (typeof parsed.attStmt !== "object") {
    throw new Error("expected attestation CBOR to contain a 'attStmt' object");
  }
  if (!(parsed.authData instanceof Uint8Array)) {
    throw new Error("expected attestation CBOR to contain a 'authData' byte sequence");
  }
  if (msg.transports != void 0 && !Array.isArray(msg.transports)) {
    throw new Error("expected transports to be 'null' or 'array<string>'");
  }
  const ret = new Map([
    ...Fido2Lib.parseAttestation(parsed.fmt, parsed.attStmt),
    // return raw buffer for future signature verification
    [
      "rawAuthnrData",
      coerceToArrayBuffer(parsed.authData, "authData")
    ],
    [
      "transports",
      msg.transports
    ],
    // parse authData
    ...await parseAuthenticatorData(parsed.authData)
  ]);
  return ret;
}
async function parseAuthenticatorData(authnrDataArrayBuffer) {
  authnrDataArrayBuffer = coerceToArrayBuffer(authnrDataArrayBuffer, "authnrDataArrayBuffer");
  const ret = /* @__PURE__ */ new Map();
  const authnrDataBuf = new DataView(authnrDataArrayBuffer);
  let offset = 0;
  ret.set("rpIdHash", authnrDataBuf.buffer.slice(offset, offset + 32));
  offset += 32;
  const flags = authnrDataBuf.getUint8(offset);
  const flagsSet = /* @__PURE__ */ new Set();
  ret.set("flags", flagsSet);
  if (flags & 1) flagsSet.add("UP");
  if (flags & 2) flagsSet.add("RFU1");
  if (flags & 4) flagsSet.add("UV");
  if (flags & 8) flagsSet.add("RFU3");
  if (flags & 16) flagsSet.add("RFU4");
  if (flags & 32) flagsSet.add("RFU5");
  if (flags & 64) flagsSet.add("AT");
  if (flags & 128) flagsSet.add("ED");
  offset++;
  ret.set("counter", authnrDataBuf.getUint32(offset, false));
  offset += 4;
  const attestation = flagsSet.has("AT");
  const extensions2 = flagsSet.has("ED");
  if (attestation) {
    ret.set("aaguid", authnrDataBuf.buffer.slice(offset, offset + 16));
    offset += 16;
    const credIdLen = authnrDataBuf.getUint16(offset, false);
    ret.set("credIdLen", credIdLen);
    offset += 2;
    ret.set("credId", authnrDataBuf.buffer.slice(offset, offset + credIdLen));
    offset += credIdLen;
    const publicKey = new PublicKey();
    await publicKey.fromCose(authnrDataBuf.buffer.slice(offset, authnrDataBuf.buffer.byteLength));
    ret.set("credentialPublicKeyCose", await publicKey.toCose());
    ret.set("credentialPublicKeyJwk", await publicKey.toJwk());
    ret.set("credentialPublicKeyPem", await publicKey.toPem());
  }
  if (extensions2) {
    const cborObjects = toolbox_exports.cbor.decodeMultiple(new Uint8Array(authnrDataBuf.buffer.slice(offset, authnrDataBuf.buffer.byteLength)));
    if (attestation) {
      cborObjects.shift();
    }
    if (cborObjects.length === 0) {
      throw new Error("extensions missing");
    }
    ret.set("webAuthnExtensions", cborObjects);
  }
  return ret;
}
async function parseAuthnrAssertionResponse(msg) {
  if (typeof msg !== "object") {
    throw new TypeError("expected msg to be Object");
  }
  if (typeof msg.response !== "object") {
    throw new TypeError("expected response to be Object");
  }
  let userHandle;
  if (msg.response.userHandle !== void 0 && msg.response.userHandle !== null) {
    userHandle = coerceToArrayBuffer(msg.response.userHandle, "response.userHandle");
    if (userHandle.byteLength === 0) {
      userHandle = void 0;
    }
  }
  const sigAb = coerceToArrayBuffer(msg.response.signature, "response.signature");
  const ret = new Map([
    [
      "sig",
      sigAb
    ],
    [
      "userHandle",
      userHandle
    ],
    [
      "rawAuthnrData",
      coerceToArrayBuffer(msg.response.authenticatorData, "response.authenticatorData")
    ],
    ...await parseAuthenticatorData(msg.response.authenticatorData)
  ]);
  return ret;
}

// lib/response.js
var lockSym = Symbol();
var Fido2Result = class {
  constructor(sym) {
    if (sym !== lockSym) {
      throw new Error("Do not create with 'new' operator. Call 'Fido2AttestationResult.create()' or 'Fido2AssertionResult.create()' instead.");
    }
    attach(this);
  }
  parse() {
    this.clientData = parseClientResponse(this.request);
  }
  async validate() {
    await this.validateRawClientDataJson();
    await this.validateOrigin();
    await this.validateChallenge();
    await this.validateTokenBinding();
    await this.validateId();
    await this.validateRawAuthnrData();
    await this.validateRpIdHash();
    await this.validateFlags();
    await this.validateExtensions();
  }
  async create(req, exp) {
    if (typeof req !== "object") {
      throw new TypeError("expected 'request' to be object, got: " + typeof req);
    }
    if (typeof exp !== "object") {
      throw new TypeError("expected 'expectations' to be object, got: " + typeof exp);
    }
    this.expectations = parseExpectations(exp);
    this.request = req;
    await this.validateExpectations();
    await this.parse();
    await this.validate();
    await this.validateAudit();
    return this;
  }
};
var Fido2AttestationResult = class _Fido2AttestationResult extends Fido2Result {
  constructor(sym) {
    super(sym);
    this.requiredExpectations = /* @__PURE__ */ new Set([
      "origin",
      "challenge",
      "flags"
    ]);
    this.optionalExpectations = /* @__PURE__ */ new Set([
      "rpId"
    ]);
  }
  async parse() {
    this.validateCreateRequest();
    await super.parse();
    this.authnrData = await parseAuthnrAttestationResponse(this.request);
  }
  async validate() {
    await this.validateCreateType();
    await this.validateAaguid();
    await this.validatePublicKey();
    await super.validate();
    await this.validateAttestation();
    await this.validateInitialCounter();
    await this.validateCredId();
    await this.validateTransports();
  }
  static async create(req, exp) {
    return await new _Fido2AttestationResult(lockSym).create(req, exp);
  }
};
var Fido2AssertionResult = class _Fido2AssertionResult extends Fido2Result {
  constructor(sym) {
    super(sym);
    this.requiredExpectations = /* @__PURE__ */ new Set([
      "origin",
      "challenge",
      "flags",
      "prevCounter",
      "publicKey",
      "userHandle"
    ]);
    this.optionalExpectations = /* @__PURE__ */ new Set([
      "rpId",
      "allowCredentials"
    ]);
  }
  async parse() {
    this.validateAssertionResponse();
    await super.parse();
    this.authnrData = await parseAuthnrAssertionResponse(this.request);
  }
  async validate() {
    await this.validateGetType();
    await super.validate();
    await this.validateAssertionSignature();
    await this.validateUserHandle();
    await this.validateCounter();
  }
  static create(req, exp) {
    return new _Fido2AssertionResult(lockSym).create(req, exp);
  }
};

// lib/mds.js
var fidoMdsRootCert = "-----BEGIN CERTIFICATE-----\nMIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G\nA1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp\nZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4\nMTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG\nA1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8\nRgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT\ngHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm\nKPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd\nQQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ\nXriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw\nDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o\nLkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU\nRUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp\njjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK\n6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX\nmcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs\nMx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH\nWD9f\n-----END CERTIFICATE-----\n";
var MdsEntry = class {
  /**
  * Creates a new MDS entry. It is assumed that the entry has already been validated.
  * The typical way of creating new MdsEntry objects is via the {@link MdsCollection#addEntry} and {@link MdsCollection#validate}
  * methods, which will take care of parsing and validing the MDS entry for you.
  * @param  {Object} mdsEntry The parsed and validated metadata statement Object for this entry
  * @param  {Object} tocEntry The parsed and validated TOC information Object for this entry
  * @return {mdsEntry}          The properly formatted MDS entry
  */
  constructor(mdsEntry, tocEntry) {
    for (const key of Object.keys(tocEntry)) {
      this[key] = tocEntry[key];
    }
    for (const key of Object.keys(mdsEntry)) {
      this[key] = mdsEntry[key];
    }
    if (this.metadataStatement) {
      delete this.metadataStatement;
    }
    this.attachmentHint = this.attachmentHint instanceof Array ? this.attachmentHint : attachmentHintToArr(this.attachmentHint);
    function attachmentHintToArr(hint) {
      const ret = [];
      if (hint & 1) ret.push("internal");
      if (hint & 2) ret.push("external");
      if (hint & 4) ret.push("wired");
      if (hint & 8) ret.push("wireless");
      if (hint & 16) ret.push("nfc");
      if (hint & 32) ret.push("bluetooth");
      if (hint & 64) ret.push("network");
      if (hint & 128) ret.push("ready");
      if (hint & 65280) throw new Error("unknown attachment hint flags: " + hint & 65280);
      return ret;
    }
    if (!Array.isArray(this.attestationTypes)) throw new Error("expected attestationTypes to be Array, got: " + this.attestationTypes);
    this.attestationTypes = this.attestationTypes.map((att) => typeof att === "string" ? att : attestationTypeToStr(att));
    function attestationTypeToStr(att) {
      switch (att) {
        case 15879:
          return "basic-full";
        case 15880:
          return "basic-surrogate";
        case 15881:
          return "ecdaa";
        default:
          throw new Error("uknown attestation type: " + att);
      }
    }
    if (this.authenticationAlgorithms) {
      this.authenticationAlgorithm = this.authenticationAlgorithms[0];
    }
    this.authenticationAlgorithm = typeof this.authenticationAlgorithm === "string" ? this.authenticationAlgorithm : algToStr(this.authenticationAlgorithm);
    function algToStr(alg) {
      switch (alg) {
        case 1:
          return "ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW";
        case 2:
          return "ALG_SIGN_SECP256R1_ECDSA_SHA256_DER";
        case 3:
          return "ALG_SIGN_RSASSA_PSS_SHA256_RAW";
        case 4:
          return "ALG_SIGN_RSASSA_PSS_SHA256_DER";
        case 5:
          return "ALG_SIGN_SECP256K1_ECDSA_SHA256_RAW";
        case 6:
          return "ALG_SIGN_SECP256K1_ECDSA_SHA256_DER";
        case 7:
          return "ALG_SIGN_SM2_SM3_RAW";
        case 8:
          return "ALG_SIGN_RSA_EMSA_PKCS1_SHA256_RAW";
        case 9:
          return "ALG_SIGN_RSA_EMSA_PKCS1_SHA256_DER";
        default:
          throw new Error("unknown authentication algorithm: " + alg);
      }
    }
    if (this.attestationRootCertificates) {
      for (const certificate of this.attestationRootCertificates) {
        CertManager.addCert(certificate);
      }
    }
    this.keyProtection = this.keyProtection instanceof Array ? this.keyProtection : keyProtToArr(this.keyProtection);
    function keyProtToArr(kp) {
      const ret = [];
      if (kp & 1) ret.push("software");
      if (kp & 2) ret.push("hardware");
      if (kp & 4) ret.push("tee");
      if (kp & 8) ret.push("secure-element");
      if (kp & 16) ret.push("remote-handle");
      if (kp & 65504) throw new Error("unknown key protection flags: " + kp & 65504);
      return ret;
    }
    this.matcherProtection = this.matcherProtection instanceof Array ? this.matcherProtection : matcherProtToArr(this.matcherProtection);
    function matcherProtToArr(mp) {
      const ret = [];
      if (mp & 1) ret.push("software");
      if (mp & 2) ret.push("hardware");
      if (mp & 4) ret.push("tee");
      if (mp & 65528) throw new Error("unknown key protection flags: " + mp & 65528);
      return ret;
    }
    if (this.publicKeyAlgAndEncodings) this.publicKeyAlgAndEncoding = `ALG_KEY_${this.publicKeyAlgAndEncodings[0].toUpperCase()}`;
    this.publicKeyAlgAndEncoding = typeof this.publicKeyAlgAndEncoding === "string" ? this.publicKeyAlgAndEncoding : pkAlgAndEncodingToStr(this.publicKeyAlgAndEncoding);
    function pkAlgAndEncodingToStr(pkalg) {
      switch (pkalg) {
        case 256:
          return "ALG_KEY_ECC_X962_RAW";
        case 257:
          return "ALG_KEY_ECC_X962_DER";
        case 258:
          return "ALG_KEY_RSA_2048_RAW";
        case 259:
          return "ALG_KEY_RSA_2048_DER";
        case 260:
          return "ALG_KEY_COSE";
        default:
          throw new Error("unknown public key algorithm and encoding: " + pkalg);
      }
    }
    this.tcDisplay = this.tcDisplay instanceof Array ? this.tcDisplay : tcDisplayToArr(this.tcDisplay);
    function tcDisplayToArr(tcd) {
      const ret = [];
      if (tcd & 1) ret.push("any");
      if (tcd & 2) ret.push("priviledged-software");
      if (tcd & 4) ret.push("tee");
      if (tcd & 8) ret.push("hardware");
      if (tcd & 16) ret.push("remote");
      if (tcd & 65504) throw new Error("unknown transaction confirmation display flags: " + tcd & 65504);
      return ret;
    }
    this.userVerificationDetails = uvDetailsToSet(this.userVerificationDetails);
    function uvDetailsToSet(uvList) {
      const ret = [];
      if (!Array.isArray(uvList)) throw new Error("expected userVerificationDetails to be an Array, got: " + uvList);
      uvList.forEach((uv) => {
        if (!Array.isArray(uv)) throw new Error("expected userVerification to be Array, got " + uv);
        const d = uv.map((desc) => {
          const newDesc = {};
          let descKey;
          if ("caDesc" in desc) {
            newDesc.type = "code";
            descKey = "caDesc";
          }
          if ("baDesc" in desc) {
            newDesc.type = "biometric";
            descKey = "baDesc";
          }
          if ("paDesc" in desc) {
            newDesc.type = "pattern";
            descKey = "paDesc";
          }
          newDesc.userVerification = uvToArr(desc.userVerification);
          if (desc.userVerificationMethod) newDesc.userVerification = (desc.userVerificationMethod.match(/(\w+)_internal/) || [
            "none",
            "none"
          ])[1];
          if (descKey) for (const key of Object.keys(desc[descKey])) {
            newDesc[key] = desc[descKey][key];
          }
          return newDesc;
        });
        ret.push(d);
      });
      return ret;
    }
    function uvToArr(uv) {
      const ret = [];
      if (uv & 1) ret.push("presence");
      if (uv & 2) ret.push("fingerprint");
      if (uv & 4) ret.push("passcode");
      if (uv & 8) ret.push("voiceprint");
      if (uv & 16) ret.push("faceprint");
      if (uv & 32) ret.push("location");
      if (uv & 64) ret.push("eyeprint");
      if (uv & 128) ret.push("pattern");
      if (uv & 256) ret.push("handprint");
      if (uv & 512) ret.push("none");
      if (uv & 1024) ret.push("all");
      return ret;
    }
    if (this.protocolFamily === void 0) this.protocolFamily = "uaf";
    realBoolean(this, "isSecondFactorOnly");
    realBoolean(this, "isKeyRestricted");
    realBoolean(this, "isFreshUserVerificationRequired");
  }
};
var MdsCollection = class {
  /**
  * Creates a new MdsCollection
  * @return {MdsCollection} The MDS collection that was created. The freshly created MDS collection has
  * no Table of Contents (TOC) or entries, which must be added through {@link addToc} and {@link addEntry}, respectively.
  */
  constructor(collectionName) {
    if (typeof collectionName !== "string" || collectionName.length < 1) {
      throw new Error("expected 'collectionName' to be non-empty string, got: " + collectionName);
    }
    this.toc = null;
    this.unvalidatedEntryList = /* @__PURE__ */ new Map();
    this.entryList = /* @__PURE__ */ new Map();
    this.validated = false;
    this.name = collectionName;
  }
  /**
  * Validates and stores the Table of Contents (TOC) for future reference. This method validates
  * the TOC JSON Web Token (JWT) signature, as well as the certificate chain. The certiciate chain
  * is validated using the `rootCert` and `crls` that are provided.
  * @param {String} tocStr   The base64url encoded Table of Contents, as described in the [FIDO Metadata Service specification]{@link https://fidoalliance.org/specs/fido-v2.0-id-20180227/fido-metadata-service-v2.0-id-20180227.html}
  * @param {Array.<String>|Array.<ArrayBuffer>|String|ArrayBuffer|undefined} rootCert One or more root certificates that serve as a trust anchor for the Metadata Service.
  * Certificate format is flexible, and can be a PEM string, a base64 encoded string, or an ArrayBuffer, provieded that each of those formats can be decoded to valid ASN.1
  * If the `rootCert` is `undefined`, then the default [FIDO MDS root certificate](https://mds.fidoalliance.org/Root.cer) will be used.
  * @param {Array.<String>|Array.<ArrayBuffer>} crls     An array of Certificate Revocation Lists (CRLs) that should be used when validating
  * the certificate chain. Like `rootCert` the format of the CRLs is flexible and can be PEM encoded, base64 encoded, or an ArrayBuffer
  * provied that the CRL contains valid ASN.1 encoding.
  * @returns {Promise.<Object>} Returns a Promise that resolves to a TOC object, or that rejects with an error.
  */
  async addToc(tocStr, rootCert, crls) {
    if (typeof tocStr !== "string" || tocStr.length < 1) {
      throw new Error("expected MDS TOC to be non-empty string");
    }
    let parsedJws;
    try {
      const protectedHeader = await toolbox_exports.decodeProtectedHeader(tocStr);
      const publicKey = await toolbox_exports.getEmbeddedJwk(protectedHeader);
      parsedJws = await toolbox_exports.jwtVerify(tocStr, await toolbox_exports.importJWK(publicKey));
      parsedJws.header = protectedHeader;
      parsedJws.key = publicKey;
      this.toc = parsedJws.payload;
    } catch (e2) {
      e2.message = "could not parse and validate MDS TOC: " + e2.message;
      throw e2;
    }
    if (rootCert === void 0) {
      if (parsedJws.kid === "Metadata TOC Signer 3" || parsedJws.key && parsedJws.key.kid === "Metadata TOC Signer 3") {
        rootCert = "-----BEGIN CERTIFICATE-----\nMIICQzCCAcigAwIBAgIORqmxkzowRM99NQZJurcwCgYIKoZIzj0EAwMwUzELMAkG\nA1UEBhMCVVMxFjAUBgNVBAoTDUZJRE8gQWxsaWFuY2UxHTAbBgNVBAsTFE1ldGFk\nYXRhIFRPQyBTaWduaW5nMQ0wCwYDVQQDEwRSb290MB4XDTE1MDYxNzAwMDAwMFoX\nDTQ1MDYxNzAwMDAwMFowUzELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUZJRE8gQWxs\naWFuY2UxHTAbBgNVBAsTFE1ldGFkYXRhIFRPQyBTaWduaW5nMQ0wCwYDVQQDEwRS\nb290MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEFEoo+6jdxg6oUuOloqPjK/nVGyY+\nAXCFz1i5JR4OPeFJs+my143ai0p34EX4R1Xxm9xGi9n8F+RxLjLNPHtlkB3X4ims\nrfIx7QcEImx1cMTgu5zUiwxLX1ookVhIRSoso2MwYTAOBgNVHQ8BAf8EBAMCAQYw\nDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU0qUfC6f2YshA1Ni9udeO0VS7vEYw\nHwYDVR0jBBgwFoAU0qUfC6f2YshA1Ni9udeO0VS7vEYwCgYIKoZIzj0EAwMDaQAw\nZgIxAKulGbSFkDSZusGjbNkAhAkqTkLWo3GrN5nRBNNk2Q4BlG+AvM5q9wa5WciW\nDcMdeQIxAMOEzOFsxX9Bo0h4LOFE5y5H8bdPFYW+l5gy1tQiJv+5NUyM2IBB55XU\nYjdBz56jSA==\n-----END CERTIFICATE-----\n";
      } else {
        rootCert = fidoMdsRootCert;
      }
    }
    let rootCerts;
    if (Array.isArray(rootCert)) rootCerts = rootCert;
    else rootCerts = [
      rootCert
    ];
    const certHeader = parsedJws.header ? parsedJws.header : parsedJws.protectedHeader;
    await CertManager.verifyCertChain(certHeader.x5c, rootCerts, crls);
    this.toc.raw = tocStr;
    if (this.toc.entries.some((entry) => !entry.metadataStatement)) console.warn("[DEPRECATION WARNING] FIDO MDS v2 will be removed in October 2022. Please update to MDS v3!");
    return this.toc;
  }
  /**
  * Returns the parsed and validated Table of Contents object from {@link getToc}
  * @return {Object|null} Returns the TOC if one has been provided to {@link getToc}
  * or `null` if no TOC has been provided yet.
  */
  getToc() {
    return this.toc;
  }
  /**
  * Parses and adds a new MDS entry to the collection. The entry will not be available
  * through {@link findEntry} until {@link validate} has been called
  * @param {String} entryStr The base64url encoded entry, most likely downloaded from
  * the URL that was found in the Table of Contents (TOC)
  */
  addEntry(entryStr) {
    if (typeof entryStr !== "string" || entryStr.length < 1) {
      throw new Error("expected MDS entry to be non-empty string");
    }
    let newEntry = b64ToJsObject(entryStr, "MDS entry");
    if (newEntry.metadataStatement) {
      newEntry = newEntry.metadataStatement;
      entryStr = jsObjectToB64(newEntry);
    }
    newEntry.raw = entryStr;
    const newEntryId = getMdsEntryId(newEntry);
    if (Array.isArray(newEntryId)) {
      newEntryId.forEach((id) => {
        this.unvalidatedEntryList.set(id, newEntry);
      });
    } else {
      this.unvalidatedEntryList.set(newEntryId, newEntry);
    }
  }
  /**
  * Validates all entries that have been added. Note that {@link MdsCollection#findEntry}
  * will not find an {@link MdsEntry} until it has been validated.
  * @throws {Error} If a validation error occurs
  * @returns {Promise} Returns a Promise
  */
  async validate() {
    if (typeof this.toc !== "object" || this.toc === null) {
      throw new Error("add MDS TOC before attempting to validate MDS collection");
    }
    if (this.unvalidatedEntryList.size < 1) {
      throw new Error("add MDS entries before attempting to validate MDS collection");
    }
    let mapEntry;
    for (mapEntry of this.unvalidatedEntryList) {
      const entry = mapEntry[1];
      const entryId = getMdsEntryId(entry);
      let tocEntry = this.toc.entries.filter((te) => {
        const teId = getMdsEntryId(te);
        const eq = idEquals(teId, entryId);
        return eq;
      });
      if (tocEntry.length !== 1) {
        throw new Error(`found the wrong number of TOC entries for '${entryId}': ${tocEntry.length}`);
      }
      tocEntry = tocEntry[0];
      const entryHash = await toolbox_exports.hashDigest(entry.raw);
      let tocEntryHash;
      if (tocEntry.hash) {
        tocEntryHash = tocEntry.hash;
      } else {
        tocEntryHash = await toolbox_exports.hashDigest(jsObjectToB64(tocEntry.metadataStatement));
      }
      tocEntryHash = coerceToArrayBuffer(tocEntryHash, "MDS TOC entry hash");
      if (!arrayBufferEquals(entryHash, tocEntryHash)) {
        throw new Error("MDS entry hash did not match corresponding hash in MDS TOC");
      }
      const newEntry = new MdsEntry(entry, tocEntry);
      newEntry.collection = this;
      if (Array.isArray(entryId)) {
        entryId.forEach((id) => {
          this.entryList.set(tocEntry.metadataStatement ? id.replace(/-/g, "") : id, newEntry);
        });
      } else {
        this.entryList.set(tocEntry.metadataStatement ? entryId.replace(/-/g, "") : entryId, newEntry);
      }
    }
  }
  /**
  * Looks up an entry by AAID, AAGUID, or attestationCertificateKeyIdentifiers.
  * Only entries that have been validated will be found.
  * @param  {String|ArrayBuffer} id The AAID, AAGUID, or attestationCertificateKeyIdentifiers of the entry to find
  * @return {MdsEntry|null}    The MDS entry that was found, or null if no entry was found.
  */
  findEntry(id) {
    if (id instanceof ArrayBuffer) {
      id = coerceToBase64Url(id, "MDS entry id");
    }
    if (typeof id !== "string") {
      throw new Error("expected 'id' to be String, got: " + id);
    }
    return this.entryList.get(id.replace(/-/g, "")) || this.entryList.get(abToHex(toolbox_exports.base64.toArrayBuffer(id, true)).replace(/-/g, "")) || null;
  }
};
function getMdsEntryId(obj) {
  if (typeof obj !== "object") {
    throw new Error("getMdsEntryId expected 'obj' to be object, got: " + obj);
  }
  if (typeof obj.aaid === "string") {
    return obj.aaid;
  }
  if (typeof obj.aaguid === "string") {
    return obj.aaguid;
  }
  if (Array.isArray(obj.attestationCertificateKeyIdentifiers)) {
    return obj.attestationCertificateKeyIdentifiers;
  }
  throw new Error("MDS entry didn't have a valid ID");
}
function idEquals(id1, id2) {
  if (id1 instanceof ArrayBuffer) {
    id1 = coerceToBase64Url(id1);
  }
  if (id2 instanceof ArrayBuffer) {
    id2 = coerceToBase64Url(id2);
  }
  if (typeof id1 === "string" && typeof id2 === "string") {
    return id1 === id2;
  }
  if (Array.isArray(id1) && Array.isArray(id2)) {
    if (id1.length !== id2.length) return false;
    const allSame = id1.reduce((acc, val) => acc && id2.includes(val), true);
    if (!allSame) return false;
    return true;
  }
  return false;
}
function realBoolean(obj, prop) {
  if (obj[prop] === "true") obj[prop] = true;
  if (obj[prop] === "false") obj[prop] = false;
}

// lib/attestations/none.js
function noneParseFn(attStmt) {
  if (Object.keys(attStmt).length !== 0) {
    throw new Error("'none' attestation format: attStmt had fields");
  }
  return /* @__PURE__ */ new Map();
}
function noneValidateFn() {
  this.audit.journal.add("fmt");
  return true;
}
var noneAttestation = {
  name: "none",
  parseFn: noneParseFn,
  validateFn: noneValidateFn
};

// lib/attestations/u2fRootCerts.js
var u2fRootCerts = [
  // Yubico Root Cert
  // https://developers.yubico.com/U2F/yubico-u2f-ca-certs.txt
  "MIIDHjCCAgagAwIBAgIEG0BT9zANBgkqhkiG9w0BAQsFADAuMSwwKgYDVQQDEyNZ\ndWJpY28gVTJGIFJvb3QgQ0EgU2VyaWFsIDQ1NzIwMDYzMTAgFw0xNDA4MDEwMDAw\nMDBaGA8yMDUwMDkwNDAwMDAwMFowLjEsMCoGA1UEAxMjWXViaWNvIFUyRiBSb290\nIENBIFNlcmlhbCA0NTcyMDA2MzEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQC/jwYuhBVlqaiYWEMsrWFisgJ+PtM91eSrpI4TK7U53mwCIawSDHy8vUmk\n5N2KAj9abvT9NP5SMS1hQi3usxoYGonXQgfO6ZXyUA9a+KAkqdFnBnlyugSeCOep\n8EdZFfsaRFtMjkwz5Gcz2Py4vIYvCdMHPtwaz0bVuzneueIEz6TnQjE63Rdt2zbw\nnebwTG5ZybeWSwbzy+BJ34ZHcUhPAY89yJQXuE0IzMZFcEBbPNRbWECRKgjq//qT\n9nmDOFVlSRCt2wiqPSzluwn+v+suQEBsUjTGMEd25tKXXTkNW21wIWbxeSyUoTXw\nLvGS6xlwQSgNpk2qXYwf8iXg7VWZAgMBAAGjQjBAMB0GA1UdDgQWBBQgIvz0bNGJ\nhjgpToksyKpP9xv9oDAPBgNVHRMECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIBBjAN\nBgkqhkiG9w0BAQsFAAOCAQEAjvjuOMDSa+JXFCLyBKsycXtBVZsJ4Ue3LbaEsPY4\nMYN/hIQ5ZM5p7EjfcnMG4CtYkNsfNHc0AhBLdq45rnT87q/6O3vUEtNMafbhU6kt\nhX7Y+9XFN9NpmYxr+ekVY5xOxi8h9JDIgoMP4VB1uS0aunL1IGqrNooL9mmFnL2k\nLVVee6/VR6C5+KSTCMCWppMuJIZII2v9o4dkoZ8Y7QRjQlLfYzd3qGtKbw7xaF1U\nsG/5xUb/Btwb2X2g4InpiB/yt/3CpQXpiWX/K4mBvUKiGn05ZsqeY1gx4g0xLBqc\nU9psmyPzK+Vsgw2jeRQ5JlKDyqE0hebfC1tvFu0CCrJFcw=="
];

// lib/attestations/packed.js
var algMap = /* @__PURE__ */ new Map([
  [
    -7,
    {
      algName: "ECDSA_w_SHA256",
      hashAlg: "SHA-256"
    }
  ],
  // [-8, {
  //     name: "EdDSA",
  //     hash: undefined
  // }],
  [
    -35,
    {
      algName: "ECDSA_w_SHA384",
      hashAlg: "SHA-384"
    }
  ],
  [
    -36,
    {
      algName: "ECDSA_w_SHA512",
      hashAlg: "SHA-512"
    }
  ],
  [
    -257,
    {
      algName: "RSASSA-PKCS1-v1_5_w_SHA256",
      hashAlg: "SHA-256"
    }
  ]
]);
function packedParseFn(attStmt) {
  const ret = /* @__PURE__ */ new Map();
  const algEntry = algMap.get(attStmt.alg);
  if (algEntry === void 0) {
    throw new Error("packed attestation: unknown algorithm: " + attStmt.alg);
  }
  ret.set("alg", algEntry);
  const x5c = attStmt.x5c;
  const newX5c = [];
  if (Array.isArray(x5c)) {
    for (let cert of x5c) {
      cert = coerceToArrayBuffer(cert, "packed x5c cert");
      newX5c.push(cert);
    }
    ret.set("attCert", newX5c.shift());
    ret.set("x5c", newX5c);
  } else {
    ret.set("x5c", x5c);
  }
  let ecdaaKeyId = attStmt.ecdaaKeyId;
  if (ecdaaKeyId !== void 0) {
    ecdaaKeyId = coerceToArrayBuffer(ecdaaKeyId, "ecdaaKeyId");
    ret.set("ecdaaKeyId", ecdaaKeyId);
  }
  let sig = attStmt.sig;
  sig = coerceToArrayBuffer(sig, "packed signature");
  ret.set("sig", sig);
  return ret;
}
async function packedValidateFn() {
  const x5c = this.authnrData.get("x5c");
  const ecdaaKeyId = this.authnrData.get("ecdaaKeyId");
  if (x5c !== void 0 && ecdaaKeyId !== void 0) {
    throw new Error("packed attestation: should be 'basic' or 'ecdaa', got both");
  }
  if (x5c) return await packedValidateBasic.call(this);
  if (ecdaaKeyId) return await packedValidateEcdaa.call(this);
  return await packedValidateSurrogate.call(this);
}
async function packedValidateBasic() {
  const { algName, hashAlg } = this.authnrData.get("alg");
  if (algName === void 0) {
    throw new Error("packed attestation: unknown algorithm " + algName);
  }
  const res = await validateSignature(this.clientData.get("rawClientDataJson"), this.authnrData.get("rawAuthnrData"), this.authnrData.get("sig"), hashAlg, this.authnrData.get("attCert"));
  if (!res) {
    throw new Error("packed attestation signature verification failed");
  }
  this.audit.journal.add("sig");
  this.audit.journal.add("alg");
  await validateCerts(this.authnrData.get("attCert"), this.authnrData.get("aaguid"), this.authnrData.get("x5c"), this.audit);
  this.audit.info.set("attestation-type", "basic");
  this.audit.journal.add("fmt");
  return true;
}
async function validateSignature(rawClientData, authenticatorData, sig, hashAlg, parsedAttCert) {
  const hash = await toolbox_exports.hashDigest(rawClientData);
  const clientDataHash = new Uint8Array(hash).buffer;
  const attCertPem = abToPem("CERTIFICATE", parsedAttCert);
  const cert = new Certificate2(attCertPem);
  const publicKey = await cert.getPublicKey();
  const verify2 = await toolbox_exports.verifySignature(publicKey, sig, appendBuffer(authenticatorData, clientDataHash), hashAlg);
  return verify2;
}
async function validateCerts(parsedAttCert, aaguid, _x5c, audit) {
  if (CertManager.getCerts().size === 0) {
    u2fRootCerts.forEach((cert) => CertManager.addCert(cert));
  }
  const attCert = new Certificate2(coerceToBase64(parsedAttCert, "parsedAttCert"));
  try {
    await attCert.verify();
  } catch (e2) {
    const err = e2;
    if (err.message === "Please provide issuer certificate as a parameter") {
      audit.warning.set("attesation-not-validated", "could not validate attestation because the root attestation certification could not be found");
    } else {
      throw err;
    }
  }
  audit.journal.add("x5c");
  if (attCert.getVersion() !== 3) {
    throw new Error("expected packed attestation certificate to be x.509v3");
  }
  const exts = attCert.getExtensions();
  exts.forEach((v, k) => audit.info.set(k, v));
  attCert.info.forEach((v, k) => audit.info.set(k, v));
  attCert.warning.forEach((v, k) => audit.warning.set(k, v));
  audit.journal.add("attCert");
  if (attCert.getVersion() !== 3) {
    throw new Error("expected packed attestation certificate to be x.509v3");
  }
  const subject = attCert.getSubject();
  if (typeof subject.get("country-name") !== "string") {
    throw new Error("packed attestation: attestation certificate missing 'country name'");
  }
  if (typeof subject.get("organization-name") !== "string") {
    throw new Error("packed attestation: attestation certificate missing 'organization name'");
  }
  if (subject.get("organizational-unit-name") !== "Authenticator Attestation") {
    throw new Error("packed attestation: attestation certificate 'organizational unit name' must be 'Authenticator Attestation'");
  }
  if (typeof subject.get("common-name") !== "string") {
    throw new Error("packed attestation: attestation certificate missing 'common name'");
  }
  const basicConstraints = exts.get("basic-constraints");
  if (basicConstraints.cA !== false) {
    throw new Error("packed attestation: basic constraints 'cA' must be 'false'");
  }
  const certAaguid = exts.get("fido-aaguid");
  if (certAaguid !== void 0 && !arrayBufferEquals(aaguid, certAaguid)) {
    throw new Error("packed attestation: authnrData AAGUID did not match AAGUID in attestation certificate");
  }
}
async function validateSelfSignature(rawClientData, authenticatorData, sig, hashAlg, publicKeyPem) {
  const clientDataHash = await toolbox_exports.hashDigest(rawClientData, hashAlg);
  const verify2 = await toolbox_exports.verifySignature(publicKeyPem, sig, appendBuffer(authenticatorData, clientDataHash), hashAlg);
  return verify2;
}
async function packedValidateSurrogate() {
  const { algName, hashAlg } = this.authnrData.get("alg");
  if (algName === void 0) {
    throw new Error("packed attestation: unknown algorithm " + algName);
  }
  const res = await validateSelfSignature(this.clientData.get("rawClientDataJson"), this.authnrData.get("rawAuthnrData"), this.authnrData.get("sig"), hashAlg, this.authnrData.get("credentialPublicKeyPem"));
  if (!res || typeof res !== "boolean") {
    throw new Error("packed attestation signature verification failed");
  }
  this.audit.journal.add("sig");
  this.audit.journal.add("alg");
  this.audit.journal.add("x5c");
  this.audit.info.set("attestation-type", "self");
  this.audit.journal.add("fmt");
  return true;
}
function packedValidateEcdaa() {
  throw new Error("packed attestation: ECDAA not implemented, please open a GitHub issue.");
}
var packedAttestation = {
  name: "packed",
  parseFn: packedParseFn,
  validateFn: packedValidateFn
};

// lib/attestations/fidoU2F.js
function fidoU2fParseFn(attStmt) {
  const ret = /* @__PURE__ */ new Map();
  const x5c = attStmt.x5c;
  let sig = attStmt.sig;
  if (!Array.isArray(x5c)) {
    throw new TypeError("expected U2F attestation x5c field to be of type Array");
  }
  if (x5c.length < 1) {
    throw new TypeError("no certificates in U2F x5c field");
  }
  const newX5c = [];
  for (let cert of x5c) {
    cert = coerceToArrayBuffer(cert, "U2F x5c cert");
    newX5c.push(cert);
  }
  ret.set("attCert", newX5c.shift());
  ret.set("x5c", newX5c);
  sig = coerceToArrayBuffer(sig, "U2F signature");
  ret.set("sig", sig);
  return ret;
}
async function fidoU2fValidateFn() {
  const x5c = this.authnrData.get("x5c");
  const parsedAttCert = this.authnrData.get("attCert");
  if (x5c.length > 0) {
    throw new Error("cert chain not validated");
  }
  this.audit.journal.add("x5c");
  if (CertManager.getCerts().size === 0) {
    u2fRootCerts.forEach((cert2) => CertManager.addCert(cert2));
  }
  const attCert = new Certificate2(coerceToBase64(parsedAttCert, "parsedAttCert"));
  try {
    await attCert.verify();
  } catch (err) {
    if (err.message === "Please provide issuer certificate as a parameter") {
      this.audit.warning.set("attesation-not-validated", "could not validate attestation because the root attestation certification could not be found");
    } else {
      throw err;
    }
  }
  if (attCert.getVersion() !== 3) {
    throw new Error("expected U2F attestation certificate to be x.509v3");
  }
  attCert.getExtensions().forEach((v, k) => this.audit.info.set(k, v));
  attCert.info.forEach((v, k) => this.audit.info.set(k, v));
  attCert.warning.forEach((v, k) => this.audit.warning.set(k, v));
  this.audit.journal.add("attCert");
  const jwk = this.authnrData.get("credentialPublicKeyJwk");
  if (jwk.kty !== "EC" || jwk.crv !== "P-256") {
    throw new Error("bad U2F key type");
  }
  const rpIdHash = this.authnrData.get("rpIdHash");
  const credId = this.authnrData.get("credId");
  const rawClientData = this.clientData.get("rawClientDataJson");
  const clientDataHash = abToBuf(await toolbox_exports.hashDigest(abToBuf(rawClientData)));
  const x = coerceToArrayBuffer(jwk.x, "U2F public key x component");
  if (x.byteLength !== 32) {
    throw new Error("U2F public key x component was wrong size");
  }
  const y = coerceToArrayBuffer(jwk.y, "U2F public key y component");
  if (y.byteLength !== 32) {
    throw new Error("U2F public key y component was wrong size");
  }
  const verificationData = new Uint8Array([
    0,
    ...new Uint8Array(rpIdHash),
    ...new Uint8Array(clientDataHash),
    ...new Uint8Array(credId),
    4,
    ...new Uint8Array(x),
    ...new Uint8Array(y)
  ]);
  const sig = this.authnrData.get("sig");
  const attCertPem = abToPem("CERTIFICATE", parsedAttCert);
  const cert = new Certificate2(attCertPem);
  const publicKey = await cert.getPublicKey();
  const res = await toolbox_exports.verifySignature(publicKey, abToBuf(sig), abToBuf(verificationData), "SHA-256");
  if (!res) {
    throw new Error("U2F attestation signature verification failed");
  }
  this.audit.journal.add("sig");
  this.audit.info.set("attestation-type", "basic");
  this.audit.journal.add("fmt");
  return true;
}
var fidoU2fAttestation = {
  name: "fido-u2f",
  parseFn: fidoU2fParseFn,
  validateFn: fidoU2fValidateFn
};

// lib/attestations/androidSafetyNet.js
function androidSafetyNetParseFn(attStmt) {
  const ret = /* @__PURE__ */ new Map();
  ret.set("ver", attStmt.ver);
  const response = ab2str(attStmt.response);
  ret.set("response", response);
  return ret;
}
async function androidSafetyNetValidateFn() {
  const response = this.authnrData.get("response");
  const protectedHeader = await toolbox_exports.decodeProtectedHeader(response);
  const publicKey = await toolbox_exports.getEmbeddedJwk(protectedHeader);
  const parsedJws = await toolbox_exports.jwtVerify(response, await toolbox_exports.importJWK(publicKey));
  parsedJws.header = protectedHeader;
  this.authnrData.set("payload", parsedJws.payload);
  if (!parsedJws.payload.ctsProfileMatch) {
    throw new Error("android-safetynet attestation: ctsProfileMatch: the device is not compatible");
  }
  const rawClientData = this.clientData.get("rawClientDataJson");
  const rawAuthnrData = this.authnrData.get("rawAuthnrData");
  const clientDataHash = await toolbox_exports.hashDigest(rawClientData);
  const rawAuthnrDataBuf = new Uint8Array(rawAuthnrData);
  const clientDataHashBuf = new Uint8Array(clientDataHash);
  const concatenated = appendBuffer(rawAuthnrDataBuf, clientDataHashBuf);
  const hash = await toolbox_exports.hashDigest(concatenated);
  const nonce = toolbox_exports.base64.fromArrayBuffer(hash);
  if (nonce !== parsedJws.payload.nonce) {
    throw new Error("android-safetynet attestation: nonce check hash failed");
  }
  if (parsedJws.payload.error) {
    throw new Error("android-safetynet: " + parsedJws.payload.error + "advice: " + parsedJws.payload.advice);
  }
  this.audit.journal.add("payload");
  this.audit.journal.add("ver");
  this.audit.journal.add("response");
  this.authnrData.set("attCert", parsedJws.header.x5c.shift());
  this.authnrData.set("x5c", parsedJws.header.x5c);
  this.audit.journal.add("attCert");
  this.audit.journal.add("x5c");
  const attCert = new Certificate2(coerceToBase64(parsedJws.header.x5c.shift(), "parsedAttCert"));
  this.audit.info.set("organization-name", attCert.getSubject().get("organization-name"));
  this.audit.info.set("attestation-type", "basic");
  this.audit.journal.add("fmt");
  return true;
}
var androidSafetyNetAttestation = {
  name: "android-safetynet",
  parseFn: androidSafetyNetParseFn,
  validateFn: androidSafetyNetValidateFn
};

// lib/attestations/tpm.js
function tpmParseFn(attStmt) {
  const ret = /* @__PURE__ */ new Map();
  if (attStmt.ecdaaKeyId !== void 0) {
    throw new Error("TPM ECDAA attesation is not currently supported.");
  }
  const x5c = attStmt.x5c;
  if (!Array.isArray(x5c)) {
    throw new TypeError("expected TPM attestation x5c field to be of type Array");
  }
  if (x5c.length < 1) {
    throw new TypeError("no certificates in TPM x5c field");
  }
  const newX5c = [];
  for (let cert of x5c) {
    cert = coerceToArrayBuffer(cert, "TPM x5c cert");
    newX5c.push(cert);
  }
  ret.set("attCert", newX5c.shift());
  ret.set("x5c", newX5c);
  if (attStmt.ecdaaKeyId) ret.set("ecdaaKeyId", attStmt.ecdaaKeyId);
  ret.set("sig", coerceToArrayBuffer(attStmt.sig, "tpm signature"));
  ret.set("ver", attStmt.ver);
  const alg = {
    algName: coseAlgToStr(attStmt.alg),
    hashAlg: coseAlgToHashStr(attStmt.alg)
  };
  ret.set("alg", alg);
  const certInfo = parseCertInfo(coerceToArrayBuffer(attStmt.certInfo, "certInfo"));
  ret.set("certInfo", certInfo);
  const pubArea = parsePubArea(coerceToArrayBuffer(attStmt.pubArea, "pubArea"));
  ret.set("pubArea", pubArea);
  return ret;
}
function parseCertInfo(certInfo) {
  if (!(certInfo instanceof ArrayBuffer)) {
    throw new Error("tpm attestation: expected certInfo to be ArrayBuffer");
  }
  const dv = new DataView(certInfo);
  let offset = 0;
  let ret;
  const ci = /* @__PURE__ */ new Map();
  ci.set("rawCertInfo", certInfo);
  const magic = dv.getUint32(offset);
  if (magic !== 4283712327) {
    throw new Error("tpm attestation: certInfo had bad magic number: " + magic.toString(16));
  }
  ci.set("magic", magic);
  offset += 4;
  const type = decodeStructureTag(dv.getUint16(offset));
  if (type !== "TPM_ST_ATTEST_CERTIFY") {
    throw new Error("tpm attestation: got wrong type. expected 'TPM_ST_ATTEST_CERTIFY' got: " + type);
  }
  ci.set("type", type);
  offset += 2;
  ret = getTpm2bName(dv, offset);
  ci.set("qualifiedSignerHashType", ret.hashType);
  ci.set("qualifiedSigner", ret.nameHash);
  offset = ret.offset;
  ret = getSizedElement(dv, offset);
  ci.set("extraData", ret.buf);
  offset = ret.offset;
  ci.set("clock", dv.buffer.slice(offset, offset + 8));
  offset += 8;
  ci.set("resetCount", dv.getUint32(offset));
  offset += 4;
  ci.set("restartCount", dv.getUint32(offset));
  offset += 4;
  ci.set("safe", !!dv.getUint8(offset));
  offset++;
  ci.set("firmwareVersion", dv.buffer.slice(offset, offset + 8));
  offset += 8;
  ret = getTpm2bName(dv, offset);
  ci.set("nameHashType", ret.hashType);
  ci.set("name", ret.nameHash);
  offset = ret.offset;
  ret = getTpm2bName(dv, offset);
  ci.set("qualifiedNameHashType", ret.hashType);
  ci.set("qualifiedName", ret.nameHash);
  offset = ret.offset;
  if (offset !== certInfo.byteLength) {
    throw new Error("tpm attestation: left over bytes when parsing cert info");
  }
  return ci;
}
function parsePubArea(pubArea) {
  if (!(pubArea instanceof ArrayBuffer)) {
    throw new Error("tpm attestation: expected pubArea to be ArrayBuffer");
  }
  const dv = new DataView(pubArea);
  let offset = 0;
  let ret;
  const pa = /* @__PURE__ */ new Map();
  pa.set("rawPubArea", pubArea);
  const type = algIdToStr(dv.getUint16(offset));
  pa.set("type", type);
  offset += 2;
  pa.set("nameAlg", algIdToStr(dv.getUint16(offset)));
  offset += 2;
  pa.set("objectAttributes", decodeObjectAttributes(dv.getUint32(offset)));
  offset += 4;
  ret = getSizedElement(dv, offset);
  pa.set("authPolicy", ret.buf);
  offset = ret.offset;
  if (type !== "TPM_ALG_RSA") {
    throw new Error("tpm attestation: only TPM_ALG_RSA supported");
  }
  pa.set("symmetric", algIdToStr(dv.getUint16(offset)));
  offset += 2;
  pa.set("scheme", algIdToStr(dv.getUint16(offset)));
  offset += 2;
  pa.set("keyBits", dv.getUint16(offset));
  offset += 2;
  let exponent = dv.getUint32(offset);
  if (exponent === 0) exponent = 65537;
  pa.set("exponent", exponent);
  offset += 4;
  ret = getSizedElement(dv, offset);
  pa.set("unique", ret.buf);
  offset = ret.offset;
  if (offset !== pubArea.byteLength) {
    throw new Error("tpm attestation: left over bytes when parsing public area");
  }
  return pa;
}
function decodeStructureTag(t2) {
  switch (t2) {
    case 196:
      return "TPM_ST_RSP_COMMAND";
    case 32768:
      return "TPM_ST_NULL";
    case 32769:
      return "TPM_ST_NO_SESSIONS";
    case 32770:
      return "TPM_ST_SESSIONS";
    case 32771:
      return "TPM_RESERVED_0x8003";
    case 32772:
      return "TPM_RESERVED_0x8004";
    case 32788:
      return "TPM_ST_ATTEST_NV";
    case 32789:
      return "TPM_ST_ATTEST_COMMAND_AUDIT";
    case 32790:
      return "TPM_ST_ATTEST_SESSION_AUDIT";
    case 32791:
      return "TPM_ST_ATTEST_CERTIFY";
    case 32792:
      return "TPM_ST_ATTEST_QUOTE";
    case 32793:
      return "TPM_ST_ATTEST_TIME";
    case 32794:
      return "TPM_ST_ATTEST_CREATION";
    case 32795:
      return "TPM_RESERVED_0x801B";
    case 32801:
      return "TPM_ST_CREATION";
    case 32802:
      return "TPM_ST_VERIFIED";
    case 32803:
      return "TPM_ST_AUTH_SECRET";
    case 32804:
      return "TPM_ST_HASHCHECK";
    case 32805:
      return "TPM_ST_AUTH_SIGNED";
    case 32809:
      return "TPM_ST_FU_MANIFEST";
    default:
      throw new Error("tpm attestation: unknown structure tag: " + t2.toString(16));
  }
}
function decodeObjectAttributes(oa) {
  const attrList = [
    "RESERVED_0",
    "FIXED_TPM",
    "ST_CLEAR",
    "RESERVED_3",
    "FIXED_PARENT",
    "SENSITIVE_DATA_ORIGIN",
    "USER_WITH_AUTH",
    "ADMIN_WITH_POLICY",
    "RESERVED_8",
    "RESERVED_9",
    "NO_DA",
    "ENCRYPTED_DUPLICATION",
    "RESERVED_12",
    "RESERVED_13",
    "RESERVED_14",
    "RESERVED_15",
    "RESTRICTED",
    "DECRYPT",
    "SIGN_ENCRYPT",
    "RESERVED_19",
    "RESERVED_20",
    "RESERVED_21",
    "RESERVED_22",
    "RESERVED_23",
    "RESERVED_24",
    "RESERVED_25",
    "RESERVED_26",
    "RESERVED_27",
    "RESERVED_28",
    "RESERVED_29",
    "RESERVED_30",
    "RESERVED_31"
  ];
  const ret = /* @__PURE__ */ new Set();
  for (let i2 = 0; i2 < 32; i2++) {
    const bit = 1 << i2;
    if (oa & bit) {
      ret.add(attrList[i2]);
    }
  }
  return ret;
}
function getSizedElement(dv, offset) {
  const size = dv.getUint16(offset);
  offset += 2;
  const buf = dv.buffer.slice(offset, offset + size);
  dv = new DataView(buf);
  offset += size;
  return {
    size,
    dv,
    buf,
    offset
  };
}
function getTpm2bName(dvIn, oIn) {
  const { offset, dv } = getSizedElement(dvIn, oIn);
  const hashType = algIdToStr(dv.getUint16(0));
  const nameHash = dv.buffer.slice(2);
  return {
    hashType,
    nameHash,
    offset
  };
}
function algIdToStr(hashType) {
  const hashList = [
    "TPM_ALG_ERROR",
    "TPM_ALG_RSA",
    null,
    null,
    "TPM_ALG_SHA1",
    "TPM_ALG_HMAC",
    "TPM_ALG_AES",
    "TPM_ALG_MGF1",
    null,
    "TPM_ALG_KEYEDHASH",
    "TPM_ALG_XOR",
    "TPM_ALG_SHA256",
    "TPM_ALG_SHA384",
    "TPM_ALG_SHA512",
    null,
    null,
    "TPM_ALG_NULL",
    null,
    "TPM_ALG_SM3_256",
    "TPM_ALG_SM4",
    "TPM_ALG_RSASSA",
    "TPM_ALG_RSAES",
    "TPM_ALG_RSAPSS",
    "TPM_ALG_OAEP",
    "TPM_ALG_ECDSA"
  ];
  return hashList[hashType];
}
async function tpmValidateFn() {
  const parsedAttCert = this.authnrData.get("attCert");
  const certInfo = this.authnrData.get("certInfo");
  const pubArea = this.authnrData.get("pubArea");
  const ver = this.authnrData.get("ver");
  if (ver != "2.0") {
    throw new Error("tpm attestation: expected TPM version 2.0");
  }
  this.audit.journal.add("ver");
  const pubAreaPkN = pubArea.get("unique");
  const pubAreaPkExp = pubArea.get("exponent");
  const credentialPublicKeyJwk = this.authnrData.get("credentialPublicKeyJwk");
  const credentialPublicKeyJwkN = coerceToArrayBuffer(credentialPublicKeyJwk.n, "credentialPublicKeyJwk.n");
  const credentialPublicKeyJwkExpBuf = coerceToArrayBuffer(credentialPublicKeyJwk.e, "credentialPublicKeyJwk.e");
  const credentialPublicKeyJwkExp = abToInt(credentialPublicKeyJwkExpBuf);
  if (credentialPublicKeyJwk.kty !== "RSA" || pubArea.get("type") !== "TPM_ALG_RSA") {
    throw new Error("tpm attestation: only RSA keys are currently supported");
  }
  if (pubAreaPkExp !== credentialPublicKeyJwkExp) {
    throw new Error("tpm attestation: RSA exponents of WebAuthn credentialPublicKey and TPM publicArea did not match");
  }
  if (!arrayBufferEquals(credentialPublicKeyJwkN, pubAreaPkN)) {
    throw new Error("tpm attestation: RSA 'n' of WebAuthn credentialPublicKey and TPM publicArea did not match");
  }
  const magic = certInfo.get("magic");
  if (magic !== 4283712327) {
    throw new Error("tpm attestation: certInfo had bad magic number: " + magic.toString(16));
  }
  const type = certInfo.get("type");
  if (type !== "TPM_ST_ATTEST_CERTIFY") {
    throw new Error("tpm attestation: got wrong type. expected 'TPM_ST_ATTEST_CERTIFY' got: " + type);
  }
  const rawAuthnrData = this.authnrData.get("rawAuthnrData");
  const rawClientData = this.clientData.get("rawClientDataJson");
  const clientDataHashBuf = await toolbox_exports.hashDigest(abToBuf(rawClientData));
  const alg = this.authnrData.get("alg");
  if (alg.hashAlg === void 0) {
    throw new Error("tpm attestation: unknown algorithm: " + alg);
  }
  this.audit.journal.add("alg");
  const extraDataHashBuf = await toolbox_exports.hashDigest(appendBuffer(abToBuf(rawAuthnrData), clientDataHashBuf), alg.hashAlg);
  const generatedExtraDataHash = new Uint8Array(extraDataHashBuf).buffer;
  const extraData = certInfo.get("extraData");
  if (!arrayBufferEquals(generatedExtraDataHash, extraData)) {
    throw new Error("extraData hash did not match authnrData + clientDataHash hashed");
  }
  const pubAreaName = certInfo.get("name");
  const pubAreaNameHashAlg = tpmHashToNpmHash(certInfo.get("nameHashType"));
  const pubAreaNameHashBuf = await toolbox_exports.hashDigest(abToBuf(pubArea.get("rawPubArea")), pubAreaNameHashAlg);
  const generatedPubAreaNameHash = new Uint8Array(pubAreaNameHashBuf).buffer;
  if (!arrayBufferEquals(generatedPubAreaNameHash, pubAreaName)) {
    throw new Error("pubAreaName hash did not match hash of publicArea");
  }
  this.audit.journal.add("pubArea");
  const sig = this.authnrData.get("sig");
  const rawCertInfo = certInfo.get("rawCertInfo");
  const attCertPem = abToPem("CERTIFICATE", parsedAttCert);
  const cert = new Certificate2(attCertPem);
  const publicKey = await cert.getPublicKey();
  const res = await toolbox_exports.verifySignature(publicKey, sig, abToBuf(rawCertInfo), alg.hashAlg);
  if (!res) {
    throw new Error("TPM attestation signature verification failed");
  }
  this.audit.journal.add("sig");
  this.audit.journal.add("certInfo");
  const attCert = new Certificate2(coerceToBase64(parsedAttCert, "parsedAttCert"));
  try {
    await attCert.verify();
  } catch (e2) {
    const err = e2;
    if (err.message === "Please provide issuer certificate as a parameter") {
      this.audit.warning.set("attesation-not-validated", "could not validate attestation because the root attestation certification could not be found");
    } else {
      throw err;
    }
  }
  if (attCert.getVersion() !== 3) {
    throw new Error("expected TPM attestation certificate to be x.509v3");
  }
  const attCertSubject = attCert.getSubject();
  if (attCertSubject.size !== 0) {
    throw new Error("tpm attestation: attestation certificate MUST have empty subject");
  }
  const attCertExt = attCert.getExtensions();
  attCertExt.forEach((v, k) => this.audit.info.set(k, v));
  attCert.info.forEach((v, k) => this.audit.info.set(k, v));
  attCert.warning.forEach((v, k) => this.audit.warning.set(k, v));
  const altName = attCertExt.get("subject-alt-name");
  if (altName === void 0 || !Array.isArray(altName) || altName.length < 1) {
    throw new Error("tpm attestation: Subject Alternative Name extension MUST be set as defined in [TPMv2-EK-Profile] section 3.2.9");
  }
  let directoryName;
  altName.forEach((name) => {
    if (name.directoryName !== void 0) {
      directoryName = name.directoryName;
    }
  });
  if (directoryName === void 0) {
    throw new Error("tpm attestation: subject alternative name did not contain directory name");
  }
  if (!directoryName.has("tcg-at-tpm-manufacturer")) {
    throw new Error("tpm attestation: subject alternative name did not list manufacturer");
  }
  if (!directoryName.has("tcg-at-tpm-model")) {
    throw new Error("tpm attestation: subject alternative name did not list model number");
  }
  if (!directoryName.has("tcg-at-tpm-version")) {
    throw new Error("tpm attestation: subject alternative name did not list firmware version");
  }
  const extKeyUsage = attCertExt.get("ext-key-usage");
  if (!Array.isArray(extKeyUsage) || !extKeyUsage.includes("tcg-kp-aik-certificate")) {
    throw new Error("tpm attestation: the Extended Key Usage extension MUST contain 'tcg-kp-aik-certificate'");
  }
  const basicConstraints = attCertExt.get("basic-constraints");
  if (typeof basicConstraints !== "object" || basicConstraints.cA !== false) {
    throw new Error("tpm attestation: the Basic Constraints extension MUST have the CA component set to false");
  }
  const certAaguid = attCertExt.get("fido-aaguid");
  const aaguid = this.authnrData.get("aaguid");
  if (certAaguid !== void 0 && !arrayBufferEquals(aaguid, certAaguid)) {
    throw new Error("tpm attestation: authnrData AAGUID did not match AAGUID in attestation certificate");
  }
  this.audit.journal.add("x5c");
  this.audit.journal.add("attCert");
  this.audit.info.set("attestation-type", "AttCA");
  this.audit.journal.add("fmt");
  return true;
}
function tpmHashToNpmHash(tpmHash) {
  switch (tpmHash) {
    case "TPM_ALG_SHA1":
      return "SHA-1";
    case "TPM_ALG_SHA256":
      return "SHA-256";
    case "TPM_ALG_SHA384":
      return "SHA-384";
    case "TPM_ALG_SHA512":
      return "SHA-512";
    default:
      throw new TypeError("Unsupported hash type: " + tpmHash);
  }
}
var tpmAttestation = {
  name: "tpm",
  parseFn: tpmParseFn,
  validateFn: tpmValidateFn
};

// lib/attestations/apple.js
function appleParseFn(attStmt) {
  const ret = /* @__PURE__ */ new Map();
  const x5c = attStmt.x5c;
  if (!Array.isArray(x5c)) {
    throw new TypeError("expected apple attestation x5c field to be of type Array");
  }
  if (x5c.length < 1) {
    throw new TypeError("expected apple attestation x5c field to contain at least 1 entry");
  }
  const abX5c = [];
  for (let cert of x5c) {
    cert = coerceToArrayBuffer(cert, "apple x5c cert");
    abX5c.push(cert);
  }
  ret.set("credCert", abX5c.shift());
  ret.set("x5c", abX5c);
  return ret;
}
async function appleValidateFn() {
  const parsedCredCert = this.authnrData.get("credCert");
  const rawClientData = this.clientData.get("rawClientDataJson");
  const rawAuthnrData = this.authnrData.get("rawAuthnrData");
  const clientDataHash = await toolbox_exports.hashDigest(rawClientData);
  const rawAuthnrDataBuf = new Uint8Array(rawAuthnrData);
  const clientDataHashBuf = new Uint8Array(clientDataHash);
  const nonceToHash = appendBuffer(rawAuthnrDataBuf, clientDataHashBuf);
  const nonce = await toolbox_exports.hashDigest(nonceToHash);
  const credCert = new Certificate2(coerceToBase64(parsedCredCert, "parsedCredCert"));
  this.audit.journal.add("credCert");
  const extensions2 = credCert.getExtensions();
  let expectedNonce;
  for (const ext of extensions2) {
    if (Array.isArray(ext) && ext.length > 1) {
      if (ext[0] === "1.2.840.113635.100.8.2") {
        if (Array.isArray(ext[1]) && ext[1].length) {
          expectedNonce = ext[1][0];
        }
      }
    }
  }
  if (!expectedNonce) {
    throw new Error("extension with key '1.2.840.113635.100.8.2' (apple) was not found");
  }
  if (!arrayBufferEquals(expectedNonce, nonce)) {
    throw new Error("nonce did not match expectedNonce");
  }
  const credentialPublicKey = new PublicKey();
  await credentialPublicKey.fromPem(this.authnrData.get("credentialPublicKeyPem"));
  const certificatePublicKey = new PublicKey();
  certificatePublicKey.fromCryptoKey(await credCert.getPublicKey());
  const credentialPublicKeyReexportedPem = await credentialPublicKey.toPem(true);
  const certificatePublicKeyReexportedPem = await certificatePublicKey.toPem(true);
  this.audit.journal.add("credentialPublicKeyPem");
  if (credentialPublicKeyReexportedPem !== certificatePublicKeyReexportedPem) {
    throw new Error("certificatePublicKey did not match credentialPublicKey");
  }
  this.audit.journal.add("x5c");
  this.audit.info.set("attestation-type", "anonca");
  this.audit.journal.add("fmt");
  return true;
}
var appleAttestation = {
  name: "apple",
  parseFn: appleParseFn,
  validateFn: appleValidateFn
};

// lib/main.js
var {
  coerceToArrayBuffer: coerceToArrayBuffer2,
  abToBuf: abToBuf2,
  tools,
  appendBuffer: appendBuffer2
} = utils_exports;
var globalAttestationMap = /* @__PURE__ */ new Map();
var globalExtensionMap = /* @__PURE__ */ new Map();
var globalMdsCollection = /* @__PURE__ */ new Map();
var Fido2Lib = class {
  /**
   * Creates a FIDO2 server class
   * @param {Object} opts Options for the server
   * @param {Number} [opts.timeout=60000] The amount of time to wait, in milliseconds, before a call has timed out
   * @param {String} [opts.rpId="localhost"] The name of the server
   * @param {String} [opts.rpName="Anonymous Service"] The name of the server
   * @param {String} [opts.rpIcon] A URL for the service's icon. Can be a [RFC 2397]{@link https://tools.ietf.org/html/rfc2397} data URL.
   * @param {Number} [opts.challengeSize=64] The number of bytes to use for the challenge
   * @param {Object} [opts.authenticatorSelection] An object describing what types of authenticators are allowed to register with the service.
   * See [AuthenticatorSelectionCriteria] {@link https://w3.org/TR/webauthn/#authenticatorSelection} in the WebAuthn spec for details.
   * @param {String} [opts.authenticatorAttachment] Indicates whether authenticators should be part of the OS ("platform"), or can be roaming authenticators ("cross-platform")
   * @param {Boolean} [opts.authenticatorRequireResidentKey] Indicates whether authenticators must store the key internally (true) or if they can use a KDF to generate keys
   * @param {String} [opts.authenticatorUserVerification] Indicates whether user verification should be performed. Options are "required", "preferred", or "discouraged".
   * @param {String} [opts.attestation="direct"] The preferred attestation type to be used.
   * See [AttestationConveyancePreference]{https://w3.org/TR/webauthn/#enumdef-attestationconveyancepreference} in the WebAuthn spec
   * @param {Array<Number>} [opts.cryptoParams] A list of COSE algorithm identifiers (e.g. -7)
   * ordered by the preference in which the authenticator should use them.
   */
  constructor(opts) {
    opts = opts || {};
    this.config = {};
    this.config.timeout = opts.timeout === void 0 ? 6e4 : opts.timeout;
    checkOptType(this.config, "timeout", "number");
    if (!(this.config.timeout >>> 0 === parseFloat(this.config.timeout))) {
      throw new RangeError("timeout should be zero or positive integer");
    }
    this.config.challengeSize = opts.challengeSize || 64;
    checkOptType(this.config, "challengeSize", "number");
    if (this.config.challengeSize < 32) {
      throw new RangeError(
        "challenge size too small, must be 32 or greater"
      );
    }
    this.config.rpId = opts.rpId;
    checkOptType(this.config, "rpId", "string");
    this.config.rpName = opts.rpName || "Anonymous Service";
    checkOptType(this.config, "rpName", "string");
    this.config.rpIcon = opts.rpIcon;
    checkOptType(this.config, "rpIcon", "string");
    this.config.authenticatorRequireResidentKey = opts.authenticatorRequireResidentKey;
    checkOptType(this.config, "authenticatorRequireResidentKey", "boolean");
    this.config.authenticatorAttachment = opts.authenticatorAttachment;
    if (this.config.authenticatorAttachment !== void 0 && (this.config.authenticatorAttachment !== "platform" && this.config.authenticatorAttachment !== "cross-platform")) {
      throw new TypeError(
        "expected authenticatorAttachment to be 'platform', or 'cross-platform', got: " + this.config.authenticatorAttachment
      );
    }
    this.config.authenticatorUserVerification = opts.authenticatorUserVerification;
    if (this.config.authenticatorUserVerification !== void 0 && (this.config.authenticatorUserVerification !== "required" && this.config.authenticatorUserVerification !== "preferred" && this.config.authenticatorUserVerification !== "discouraged")) {
      throw new TypeError(
        "expected authenticatorUserVerification to be 'required', 'preferred', or 'discouraged', got: " + this.config.authenticatorUserVerification
      );
    }
    this.config.attestation = opts.attestation || "direct";
    if (this.config.attestation !== "direct" && this.config.attestation !== "indirect" && this.config.attestation !== "none") {
      throw new TypeError(
        "expected attestation to be 'direct', 'indirect', or 'none', got: " + this.config.attestation
      );
    }
    this.config.cryptoParams = opts.cryptoParams || [-7, -257];
    checkOptType(this.config, "cryptoParams", Array);
    if (this.config.cryptoParams.length < 1) {
      throw new TypeError("cryptoParams must have at least one element");
    }
    this.config.cryptoParams.forEach((param) => {
      checkOptType({ cryptoParam: param }, "cryptoParam", "number");
    });
    this.attestationMap = globalAttestationMap;
    this.extSet = /* @__PURE__ */ new Set();
    this.extOptMap = /* @__PURE__ */ new Map();
  }
  /**
   * Creates a new {@link MdsCollection}
   * @param {String} collectionName The name of the collection to create.
   * Used to identify the source of a {@link MdsEntry} when {@link Fido2Lib#findMdsEntry}
   * finds multiple matching entries from different sources (e.g. FIDO MDS 1 & FIDO MDS 2)
   * @return {MdsCollection} The MdsCollection that was created
   * @see  MdsCollection
   */
  static createMdsCollection(collectionName) {
    return new MdsCollection(collectionName);
  }
  /**
   * Adds a new {@link MdsCollection} to the global MDS collection list that will be used for {@link findMdsEntry}
   * @param {MdsCollection} mdsCollection The MDS collection that will be used
   * @see  MdsCollection
   */
  static async addMdsCollection(mdsCollection) {
    if (!(mdsCollection instanceof MdsCollection)) {
      throw new Error(
        "expected 'mdsCollection' to be instance of MdsCollection, got: " + mdsCollection
      );
    }
    await mdsCollection.validate();
    globalMdsCollection.set(mdsCollection.name, mdsCollection);
  }
  /**
   * Removes all entries from the global MDS collections list. Mostly used for testing.
   */
  static clearMdsCollections() {
    globalMdsCollection.clear();
  }
  /**
   * Returns {@link MdsEntry} objects that match the requested id. The
   * lookup is done by calling {@link MdsCollection#findEntry} on the current global
   * MDS collection. If no global MDS collection has been specified using
   * {@link setMdsCollection}, an `Error` will be thrown.
   * @param  {String|ArrayBuffer} id The authenticator id to look up metadata for
   * @return {Array.<MdsEntry>}    Returns an Array of {@link MdsEntry} for the specified id.
   * If no entry was found, the Array will be empty.
   * @see  MdsCollection
   */
  static findMdsEntry(id) {
    if (globalMdsCollection.size < 1) {
      throw new Error(
        "must set MDS collection before attempting to find an MDS entry"
      );
    }
    const ret = [];
    for (const collection of globalMdsCollection.values()) {
      const entry = collection.findEntry(id);
      if (entry) ret.push(entry);
    }
    return ret;
  }
  /**
   * Adds a new global extension that will be available to all instantiations of
   * {@link Fido2Lib}. Note that the extension must still be enabled by calling
   * {@link enableExtension} for each instantiation of a Fido2Lib.
   * @param {String} extName     The name of the extension to add. (e.g. - "appid")
   * @param {Function} optionGeneratorFn Extensions are included in
   * @param {Function} resultParserFn    [description]
   * @param {Function} resultValidatorFn [description]
   */
  static addExtension(extName, optionGeneratorFn, resultParserFn, resultValidatorFn) {
    if (typeof extName !== "string") {
      throw new Error("expected 'extName' to be String, got: " + extName);
    }
    if (globalExtensionMap.has(extName)) {
      throw new Error(
        `the extension '${extName}' has already been added`
      );
    }
    if (typeof optionGeneratorFn !== "function") {
      throw new Error(
        "expected 'optionGeneratorFn' to be a Function, got: " + optionGeneratorFn
      );
    }
    if (typeof resultParserFn !== "function") {
      throw new Error(
        "expected 'resultParserFn' to be a Function, got: " + resultParserFn
      );
    }
    if (typeof resultValidatorFn !== "function") {
      throw new Error(
        "expected 'resultValidatorFn' to be a Function, got: " + resultValidatorFn
      );
    }
    globalExtensionMap.set(extName, {
      optionGeneratorFn,
      resultParserFn,
      resultValidatorFn
    });
  }
  /**
   * Removes all extensions from the global extension registry. Mostly used for testing.
   */
  static deleteAllExtensions() {
    globalExtensionMap.clear();
  }
  /**
   * Generates the options to send to the client for the specified extension
   * @private
   * @param  {String} extName The name of the extension to generate options for. Must be a valid extension that has been registered through {@link Fido2Lib#addExtension}
   * @param  {String} type    The type of options that are being generated. Valid options are "attestation" or "assertion".
   * @param  {Any} [options] Optional parameters to pass to the generator function
   * @return {Any}         The extension value that will be sent to the client. If `undefined`, this extension won't be included in the
   * options sent to the client.
   */
  generateExtensionOptions(extName, type, options) {
    if (typeof extName !== "string") {
      throw new Error("expected 'extName' to be String, got: " + extName);
    }
    if (type !== "attestation" && type !== "assertion") {
      throw new Error(
        "expected 'type' to be 'attestation' or 'assertion', got: " + type
      );
    }
    const ext = globalExtensionMap.get(extName);
    if (typeof ext !== "object" || typeof ext.optionGeneratorFn !== "function") {
      throw new Error(`valid extension for '${extName}' not found`);
    }
    const ret = ext.optionGeneratorFn(extName, type, options);
    return ret;
  }
  static parseExtensionResult(extName, clientThing, authnrThing) {
    if (typeof extName !== "string") {
      throw new Error("expected 'extName' to be String, got: " + extName);
    }
    const ext = globalExtensionMap.get(extName);
    if (typeof ext !== "object" || typeof ext.parseFn !== "function") {
      throw new Error(`valid extension for '${extName}' not found`);
    }
    const ret = ext.parseFn(extName, clientThing, authnrThing);
    return ret;
  }
  static validateExtensionResult(extName) {
    const ext = globalExtensionMap.get(extName);
    if (typeof ext !== "object" || typeof ext.validateFn !== "function") {
      throw new Error(`valid extension for '${extName}' not found`);
    }
    const ret = ext.validateFn.call(this);
    return ret;
  }
  /**
   * Enables the specified extension.
   * @param  {String} extName The name of the extension to enable. Must be a valid extension that has been registered through {@link Fido2Lib#addExtension}
   */
  enableExtension(extName) {
    if (typeof extName !== "string") {
      throw new Error("expected 'extName' to be String, got: " + extName);
    }
    if (!globalExtensionMap.has(extName)) {
      throw new Error(`valid extension for '${extName}' not found`);
    }
    this.extSet.add(extName);
  }
  /**
   * Disables the specified extension.
   * @param  {String} extName The name of the extension to enable. Must be a valid extension that has been registered through {@link Fido2Lib#addExtension}
   */
  disableExtension(extName) {
    if (typeof extName !== "string") {
      throw new Error("expected 'extName' to be String, got: " + extName);
    }
    if (!globalExtensionMap.has(extName)) {
      throw new Error(`valid extension for '${extName}' not found`);
    }
    this.extSet.delete(extName);
  }
  /**
   * Specifies the options to be used for the extension
   * @param  {String} extName The name of the extension to set the options for (e.g. - "appid". Must be a valid extension that has been registered through {@link Fido2Lib#addExtension}
   * @param {Any} options The parameter that will be passed to the option generator function (e.g. - "https://webauthn.org")
   */
  setExtensionOptions(extName, options) {
    if (typeof extName !== "string") {
      throw new Error("expected 'extName' to be String, got: " + extName);
    }
    if (!globalExtensionMap.has(extName)) {
      throw new Error(`valid extension for '${extName}' not found`);
    }
    this.extOptMap.set(extName, options);
  }
  /**
   * Validates an attestation response. Will be called within the context (`this`) of a {@link Fido2AttestationResult}
   * @private
   */
  static async validateAttestation() {
    const fmt = this.authnrData.get("fmt");
    if (typeof fmt !== "string") {
      throw new TypeError(
        "expected 'fmt' to be string, got: " + typeof fmt
      );
    }
    const fmtObj = globalAttestationMap.get(fmt);
    if (typeof fmtObj !== "object" || typeof fmtObj.parseFn !== "function" || typeof fmtObj.validateFn !== "function") {
      throw new Error(`no support for attestation format: ${fmt}`);
    }
    const ret = await fmtObj.validateFn.call(this);
    if (ret !== true) {
      throw new Error(`${fmt} validateFn did not return 'true'`);
    }
    return ret;
  }
  /**
   * Adds a new attestation format that will automatically be recognized and parsed
   * for any future {@link Fido2CreateRequest} messages
   * @param {String} fmt The name of the attestation format, as it appears in the
   * ARIN registry and / or as it will appear in the {@link Fido2CreateRequest}
   * message that is received
   * @param {Function} parseFn The function that will be called to parse the
   * attestation format. It will receive the `attStmt` as a parameter and will be
   * called from the context (`this`) of the `Fido2CreateRequest`
   * @param {Function} validateFn The function that will be called to validate the
   * attestation format. It will receive no arguments, as all the necessary
   * information for validating the attestation statement will be contained in the
   * calling context (`this`).
   */
  static addAttestationFormat(fmt, parseFn, validateFn) {
    if (typeof fmt !== "string") {
      throw new TypeError(
        "expected 'fmt' to be string, got: " + typeof fmt
      );
    }
    if (typeof parseFn !== "function") {
      throw new TypeError(
        "expected 'parseFn' to be string, got: " + typeof parseFn
      );
    }
    if (typeof validateFn !== "function") {
      throw new TypeError(
        "expected 'validateFn' to be string, got: " + typeof validateFn
      );
    }
    if (globalAttestationMap.has(fmt)) {
      throw new Error(`can't add format: '${fmt}' already exists`);
    }
    globalAttestationMap.set(fmt, {
      parseFn,
      validateFn
    });
    return true;
  }
  /**
   * Deletes all currently registered attestation formats.
   */
  static deleteAllAttestationFormats() {
    globalAttestationMap.clear();
  }
  /**
   * Parses an attestation statememnt of the format specified
   * @private
   * @param {String} fmt The name of the format to be parsed, as specified in the
   * ARIN registry of attestation formats.
   * @param {Object} attStmt The attestation object to be parsed.
   * @return {Map} A Map of all the attestation fields that were parsed.
   * At this point the fields have not yet been verified.
   * @throws {Error} when a field cannot be parsed or verified.
   * @throws {TypeError} when supplied parameters `fmt` or `attStmt` are of the
   * wrong type
   */
  static parseAttestation(fmt, attStmt) {
    if (typeof fmt !== "string") {
      throw new TypeError(
        "expected 'fmt' to be string, got: " + typeof fmt
      );
    }
    if (typeof attStmt !== "object") {
      throw new TypeError(
        "expected 'attStmt' to be object, got: " + typeof attStmt
      );
    }
    const fmtObj = globalAttestationMap.get(fmt);
    if (typeof fmtObj !== "object" || typeof fmtObj.parseFn !== "function" || typeof fmtObj.validateFn !== "function") {
      throw new Error(`no support for attestation format: ${fmt}`);
    }
    const ret = fmtObj.parseFn.call(this, attStmt);
    if (!(ret instanceof Map)) {
      throw new Error(`${fmt} parseFn did not return a Map`);
    }
    return new Map([
      ["fmt", fmt],
      ...ret
    ]);
  }
  /**
   * Parses and validates an attestation response from the client
   * @param {Object} res The assertion result that was generated by the client.
   * See {@link https://w3.org/TR/webauthn/#authenticatorattestationresponse AuthenticatorAttestationResponse} in the WebAuthn spec.
   * @param {String} [res.id] The base64url encoded id returned by the client
   * @param {String} [res.rawId] The base64url encoded rawId returned by the client. If `res.rawId` is missing, `res.id` will be used instead. If both are missing an error will be thrown.
   * @param {String} res.response.clientDataJSON The base64url encoded clientDataJSON returned by the client
   * @param {String} res.response.authenticatorData The base64url encoded authenticatorData returned by the client
   * @param {Object} expected The expected parameters for the assertion response.
   * If these parameters don't match the recieved values, validation will fail and an error will be thrown.
   * @param {String} expected.challenge The base64url encoded challenge that was sent to the client, as generated by [assertionOptions]{@link Fido2Lib#assertionOptions}
   * @param {String} expected.origin The expected origin that the authenticator has signed over. For example, "https://localhost:8443" or "https://webauthn.org"
   * @param {String} expected.factor Which factor is expected for the assertion. Valid values are "first", "second", or "either".
   * If "first", this requires that the authenticator performed user verification (e.g. - biometric authentication, PIN authentication, etc.).
   * If "second", this requires that the authenticator performed user presence (e.g. - user pressed a button).
   * If "either", then either "first" or "second" is acceptable
   * @return {Promise<Fido2AttestationResult>} Returns a Promise that resolves to a {@link Fido2AttestationResult}
   * @throws {Error} If parsing or validation fails
   */
  async attestationResult(res, expected) {
    expected.flags = factorToFlags(expected.factor, ["AT"]);
    delete expected.factor;
    return await Fido2AttestationResult.create(res, expected);
  }
  /**
   * Parses and validates an assertion response from the client
   * @param {Object} res The assertion result that was generated by the client.
   * See {@link https://w3.org/TR/webauthn/#authenticatorassertionresponse AuthenticatorAssertionResponse} in the WebAuthn spec.
   * @param {String} [res.id] The base64url encoded id returned by the client
   * @param {String} [res.rawId] The base64url encoded rawId returned by the client. If `res.rawId` is missing, `res.id` will be used instead. If both are missing an error will be thrown.
   * @param {String} res.response.clientDataJSON The base64url encoded clientDataJSON returned by the client
   * @param {String} res.response.attestationObject The base64url encoded authenticatorData returned by the client
   * @param {String} res.response.signature The base64url encoded signature returned by the client
   * @param {String|null} [res.response.userHandle] The base64url encoded userHandle returned by the client. May be null or an empty string.
   * @param {Object} expected The expected parameters for the assertion response.
   * If these parameters don't match the recieved values, validation will fail and an error will be thrown.
   * @param {String} expected.challenge The base64url encoded challenge that was sent to the client, as generated by [assertionOptions]{@link Fido2Lib#assertionOptions}
   * @param {String} expected.origin The expected origin that the authenticator has signed over. For example, "https://localhost:8443" or "https://webauthn.org"
   * @param {String} expected.factor Which factor is expected for the assertion. Valid values are "first", "second", or "either".
   * If "first", this requires that the authenticator performed user verification (e.g. - biometric authentication, PIN authentication, etc.).
   * If "second", this requires that the authenticator performed user presence (e.g. - user pressed a button).
   * If "either", then either "first" or "second" is acceptable
   * @param {String} expected.publicKey A PEM encoded public key that will be used to validate the assertion response signature.
   * This is the public key that was returned for this user during [attestationResult]{@link Fido2Lib#attestationResult}
   * @param {Number} expected.prevCounter The previous value of the signature counter for this authenticator.
   * @param {String|null} expected.userHandle The expected userHandle, which was the user.id during registration
   * @return {Promise<Fido2AssertionResult>} Returns a Promise that resolves to a {@link Fido2AssertionResult}
   * @throws {Error} If parsing or validation fails
   */
  // deno-lint-ignore require-await
  async assertionResult(res, expected) {
    expected.flags = factorToFlags(expected.factor, []);
    delete expected.factor;
    return Fido2AssertionResult.create(res, expected);
  }
  /**
   * Gets a challenge and any other parameters for the `navigator.credentials.create()` call
   * The `challenge` property is an `ArrayBuffer` and will need to be encoded to be transmitted to the client.
   * @param {Object} [opts] An object containing various options for the option creation
   * @param {Object} [opts.extensionOptions] An object that contains the extensions to enable, and the options to use for each of them.
   * The keys of this object are the names of the extensions (e.g. - "appid"), and the value of each key is the option that will
   * be passed to that extension when it is generating the value to send to the client. This object overrides the extensions that
   * have been set with {@link enableExtension} and the options that have been set with {@link setExtensionOptions}. If an extension
   * was enabled with {@link enableExtension} but it isn't included in this object, the extension won't be sent to the client. Likewise,
   * if an extension was disabled with {@link disableExtension} but it is included in this object, it will be sent to the client.
   * @param {String} [extraData] Extra data to be signed by the authenticator during attestation. The challenge will be a hash:
   * SHA256(rawChallenge + extraData) and the `rawChallenge` will be returned as part of PublicKeyCredentialCreationOptions.
   * @returns {Promise<PublicKeyCredentialCreationOptions>} The options for creating calling `navigator.credentials.create()`
   */
  async attestationOptions(opts) {
    opts = opts || {};
    let challenge = tools.randomValues(this.config.challengeSize);
    challenge = coerceToArrayBuffer2(challenge, "challenge");
    const pubKeyCredParams = [];
    this.config.cryptoParams.forEach((coseId) => {
      pubKeyCredParams.push({
        type: "public-key",
        alg: coseId
      });
    });
    let rawChallenge;
    if (opts.extraData) {
      rawChallenge = challenge;
      const extraData = coerceToArrayBuffer2(opts.extraData, "extraData");
      const hash = await tools.hashDigest(
        appendBuffer2(challenge, extraData)
      );
      challenge = new Uint8Array(hash).buffer;
    }
    const options = {
      rp: {},
      user: {}
    };
    const extensions2 = createExtensions.call(
      this,
      "attestation",
      opts.extensionOptions
    );
    setOpt(options.rp, "name", this.config.rpName);
    setOpt(options.rp, "id", this.config.rpId);
    setOpt(options.rp, "icon", this.config.rpIcon);
    setOpt(options, "challenge", challenge);
    setOpt(options, "pubKeyCredParams", pubKeyCredParams);
    setOpt(options, "timeout", this.config.timeout);
    setOpt(options, "attestation", this.config.attestation);
    if (this.config.authenticatorAttachment !== void 0 || this.config.authenticatorRequireResidentKey !== void 0 || this.config.authenticatorUserVerification !== void 0) {
      options.authenticatorSelection = {};
      setOpt(
        options.authenticatorSelection,
        "authenticatorAttachment",
        this.config.authenticatorAttachment
      );
      setOpt(
        options.authenticatorSelection,
        "requireResidentKey",
        this.config.authenticatorRequireResidentKey
      );
      setOpt(
        options.authenticatorSelection,
        "userVerification",
        this.config.authenticatorUserVerification
      );
    }
    setOpt(options, "rawChallenge", rawChallenge);
    if (Object.keys(extensions2).length > 0) {
      options.extensions = extensions2;
    }
    return options;
  }
  /**
   * Creates an assertion challenge and any other parameters for the `navigator.credentials.get()` call.
   * The `challenge` property is an `ArrayBuffer` and will need to be encoded to be transmitted to the client.
   * @param {Object} [opts] An object containing various options for the option creation
   * @param {Object} [opts.extensionOptions] An object that contains the extensions to enable, and the options to use for each of them.
   * The keys of this object are the names of the extensions (e.g. - "appid"), and the value of each key is the option that will
   * be passed to that extension when it is generating the value to send to the client. This object overrides the extensions that
   * have been set with {@link enableExtension} and the options that have been set with {@link setExtensionOptions}. If an extension
   * was enabled with {@link enableExtension} but it isn't included in this object, the extension won't be sent to the client. Likewise,
   * if an extension was disabled with {@link disableExtension} but it is included in this object, it will be sent to the client.
   * @param {String} [extraData] Extra data to be signed by the authenticator during attestation. The challenge will be a hash:
   * SHA256(rawChallenge + extraData) and the `rawChallenge` will be returned as part of PublicKeyCredentialCreationOptions.
   * @returns {Promise<PublicKeyCredentialRequestOptions>} The options to be passed to `navigator.credentials.get()`
   */
  async assertionOptions(opts) {
    opts = opts || {};
    let challenge = tools.randomValues(this.config.challengeSize);
    challenge = coerceToArrayBuffer2(challenge, "challenge");
    const options = {};
    let rawChallenge;
    if (opts.extraData) {
      rawChallenge = challenge;
      const extraData = coerceToArrayBuffer2(opts.extraData, "extraData");
      challenge = abToBuf2(
        await tools.hashDigest(appendBuffer2(challenge, extraData))
      );
    }
    const extensions2 = createExtensions.call(
      this,
      "assertion",
      opts.extensionOptions
    );
    setOpt(options, "challenge", challenge);
    setOpt(options, "timeout", this.config.timeout);
    setOpt(options, "rpId", this.config.rpId);
    setOpt(
      options,
      "userVerification",
      this.config.authenticatorUserVerification
    );
    setOpt(options, "rawChallenge", rawChallenge);
    if (Object.keys(extensions2).length > 0) {
      options.extensions = extensions2;
    }
    return options;
  }
};
function checkOptType(opts, prop, type) {
  if (typeof opts !== "object") return;
  if (opts[prop] === void 0) return;
  const tType = typeof type;
  if (tType === "string") {
    if (typeof opts[prop] !== type) {
      throw new TypeError(
        `expected ${prop} to be ${type}, got: ${opts[prop]}`
      );
    }
  }
  if (tType === "function") {
    if (!(opts[prop] instanceof type)) {
      throw new TypeError(
        `expected ${prop} to be ${type.name}, got: ${opts[prop]}`
      );
    }
  }
}
function setOpt(obj, prop, val) {
  if (val !== void 0) {
    obj[prop] = val;
  }
}
function factorToFlags(expectedFactor, flags) {
  flags = flags || [];
  switch (expectedFactor) {
    case "first":
      flags.push("UP");
      flags.push("UV");
      break;
    case "second":
      flags.push("UP");
      break;
    case "either":
      flags.push("UP-or-UV");
      break;
    default:
      throw new TypeError(
        "expectedFactor should be 'first', 'second' or 'either'"
      );
  }
  return flags;
}
function createExtensions(type, extObj) {
  const extensions2 = {};
  let enabledExtensions = this.extSet;
  let extensionsOptions = this.extOptMap;
  if (typeof extObj === "object") {
    enabledExtensions = new Set(Object.keys(extObj));
    extensionsOptions = /* @__PURE__ */ new Map();
    for (const key of Object.keys(extObj)) {
      extensionsOptions.set(key, extObj[key]);
    }
  }
  for (const extension of enabledExtensions) {
    const extVal = this.generateExtensionOptions(
      extension,
      type,
      extensionsOptions.get(extension)
    );
    if (extVal !== void 0) extensions2[extension] = extVal;
  }
  return extensions2;
}
Fido2Lib.addAttestationFormat(
  noneAttestation.name,
  noneAttestation.parseFn,
  noneAttestation.validateFn
);
Fido2Lib.addAttestationFormat(
  packedAttestation.name,
  packedAttestation.parseFn,
  packedAttestation.validateFn
);
Fido2Lib.addAttestationFormat(
  fidoU2fAttestation.name,
  fidoU2fAttestation.parseFn,
  fidoU2fAttestation.validateFn
);
Fido2Lib.addAttestationFormat(
  androidSafetyNetAttestation.name,
  androidSafetyNetAttestation.parseFn,
  androidSafetyNetAttestation.validateFn
);
Fido2Lib.addAttestationFormat(
  tpmAttestation.name,
  tpmAttestation.parseFn,
  tpmAttestation.validateFn
);
Fido2Lib.addAttestationFormat(
  appleAttestation.name,
  appleAttestation.parseFn,
  appleAttestation.validateFn
);
export {
  CRL,
  CertManager,
  Certificate2 as Certificate,
  Fido2AssertionResult,
  Fido2AttestationResult,
  Fido2Lib,
  Fido2Result,
  MdsCollection,
  MdsEntry,
  PublicKey,
  abToBuf,
  abToHex,
  androidSafetyNetAttestation,
  appendBuffer,
  appleAttestation,
  arrayBufferEquals,
  attach,
  coerceToArrayBuffer,
  coerceToBase64,
  coerceToBase64Url,
  coseAlgToHashStr,
  coseAlgToStr,
  fidoU2fAttestation,
  helpers,
  isBase64Url,
  isPem,
  jsObjectToB64,
  noneAttestation,
  packedAttestation,
  parseAttestationObject,
  parseAuthenticatorData,
  parseAuthnrAssertionResponse,
  parseAuthnrAttestationResponse,
  parseClientResponse,
  parseExpectations,
  pemToBase64,
  str2ab,
  toolbox_exports as tools,
  tpmAttestation
};
/*!
 * MIT License
 * 
 * Copyright (c) 2017-2024 Peculiar Ventures, LLC
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */
/*!
 Copyright (c) Peculiar Ventures, LLC
*/
/*!
 * Copyright (c) 2014, GMO GlobalSign
 * Copyright (c) 2015-2022, Peculiar Ventures
 * All rights reserved.
 * 
 * Author 2014-2019, Yury Strozhevsky
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 * 
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*!
 * Copyright (c) 2014, GlobalSign
 * Copyright (c) 2015-2019, Peculiar Ventures
 * All rights reserved.
 * 
 * Author 2014-2019, Yury Strozhevsky
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 * 
 * * Neither the name of the {organization} nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
