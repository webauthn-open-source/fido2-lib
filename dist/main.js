// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

function a(a1, o1) {
    let i11 = 0, e1 = a1.length, s2 = !1;
    if (!1 === o1) {
        if (!0 === a1.startsWith("data:")) return null;
        for(; i11 < a1.length && a1.charCodeAt(i11) <= 32;)i11 += 1;
        for(; e1 > i11 + 1 && a1.charCodeAt(e1 - 1) <= 32;)e1 -= 1;
        if (47 === a1.charCodeAt(i11) && 47 === a1.charCodeAt(i11 + 1)) i11 += 2;
        else {
            const o2 = a1.indexOf(":/", i11);
            if (-1 !== o2) {
                const e3 = o2 - i11, s1 = a1.charCodeAt(i11), n1 = a1.charCodeAt(i11 + 1), r1 = a1.charCodeAt(i11 + 2), t1 = a1.charCodeAt(i11 + 3), c1 = a1.charCodeAt(i11 + 4);
                if (5 === e3 && 104 === s1 && 116 === n1 && 116 === r1 && 112 === t1 && 115 === c1) ;
                else if (4 === e3 && 104 === s1 && 116 === n1 && 116 === r1 && 112 === t1) ;
                else if (3 === e3 && 119 === s1 && 115 === n1 && 115 === r1) ;
                else if (2 === e3 && 119 === s1 && 115 === n1) ;
                else for(let e2 = i11; e2 < o2; e2 += 1){
                    const o3 = 32 | a1.charCodeAt(e2);
                    if (!1 == (o3 >= 97 && o3 <= 122 || o3 >= 48 && o3 <= 57 || 46 === o3 || 45 === o3 || 43 === o3)) return null;
                }
                for(i11 = o2 + 2; 47 === a1.charCodeAt(i11);)i11 += 1;
            }
        }
        let o4 = -1, n2 = -1, r2 = -1;
        for(let t2 = i11; t2 < e1; t2 += 1){
            const i2 = a1.charCodeAt(t2);
            if (35 === i2 || 47 === i2 || 63 === i2) {
                e1 = t2;
                break;
            }
            64 === i2 ? o4 = t2 : 93 === i2 ? n2 = t2 : 58 === i2 ? r2 = t2 : i2 >= 65 && i2 <= 90 && (s2 = !0);
        }
        if (-1 !== o4 && o4 > i11 && o4 < e1 && (i11 = o4 + 1), 91 === a1.charCodeAt(i11)) return -1 !== n2 ? a1.slice(i11 + 1, n2).toLowerCase() : null;
        -1 !== r2 && r2 > i11 && r2 < e1 && (e1 = r2);
    }
    for(; e1 > i11 + 1 && 46 === a1.charCodeAt(e1 - 1);)e1 -= 1;
    const n3 = 0 !== i11 || e1 !== a1.length ? a1.slice(i11, e1) : a1;
    return s2 ? n3.toLowerCase() : n3;
}
function o(a2) {
    if (a2.length > 255) return !1;
    if (0 === a2.length) return !1;
    if (!1 == ((o6 = a2.charCodeAt(0)) >= 97 && o6 <= 122 || o6 >= 48 && o6 <= 57 || o6 > 127)) return !1;
    var o6;
    let i3 = -1, e4 = -1;
    const s3 = a2.length;
    for(let o5 = 0; o5 < s3; o5 += 1){
        const s4 = a2.charCodeAt(o5);
        if (46 === s4) {
            if (o5 - i3 > 64 || 46 === e4 || 45 === e4 || 95 === e4) return !1;
            i3 = o5;
        } else if (!1 === ((function(a3) {
            return a3 >= 97 && a3 <= 122 || a3 >= 48 && a3 <= 57 || a3 > 127;
        })(s4) || 45 === s4 || 95 === s4)) return !1;
        e4 = s4;
    }
    return s3 - i3 - 1 <= 63 && 45 !== e4;
}
const i = function({ allowIcannDomains: a4 = !0 , allowPrivateDomains: o7 = !1 , detectIp: i4 = !0 , extractHostname: e5 = !0 , mixedInputs: s5 = !0 , validHosts: n4 = null , validateHostname: r3 = !0  }) {
    return {
        allowIcannDomains: a4,
        allowPrivateDomains: o7,
        detectIp: i4,
        extractHostname: e5,
        mixedInputs: s5,
        validHosts: n4,
        validateHostname: r3
    };
}({});
function e(e6, s6, n5, r4, t3) {
    const c2 = function(a5) {
        return void 0 === a5 ? i : (function({ allowIcannDomains: a6 = !0 , allowPrivateDomains: o8 = !1 , detectIp: i5 = !0 , extractHostname: e7 = !0 , mixedInputs: s7 = !0 , validHosts: n6 = null , validateHostname: r5 = !0  }) {
            return {
                allowIcannDomains: a6,
                allowPrivateDomains: o8,
                detectIp: i5,
                extractHostname: e7,
                mixedInputs: s7,
                validHosts: n6,
                validateHostname: r5
            };
        })(a5);
    }(r4);
    return "string" != typeof e6 ? t3 : (!1 === c2.extractHostname ? t3.hostname = e6 : !0 === c2.mixedInputs ? t3.hostname = a(e6, o(e6)) : t3.hostname = a(e6, !1), 0 === s6 || null === t3.hostname || !0 === c2.detectIp && (t3.isIp = (function(a7) {
        if (a7.length < 3) return !1;
        let o9 = "[" === a7[0] ? 1 : 0, i6 = a7.length;
        if ("]" === a7[i6 - 1] && (i6 -= 1), i6 - o9 > 39) return !1;
        let e8 = !1;
        for(; o9 < i6; o9 += 1){
            const i7 = a7.charCodeAt(o9);
            if (58 === i7) e8 = !0;
            else if (0 == (i7 >= 48 && i7 <= 57 || i7 >= 97 && i7 <= 102 || i7 >= 65 && i7 <= 90)) return !1;
        }
        return e8;
    })(u1 = t3.hostname) || (function(a8) {
        if (a8.length < 7) return !1;
        if (a8.length > 15) return !1;
        let o10 = 0;
        for(let i8 = 0; i8 < a8.length; i8 += 1){
            const e9 = a8.charCodeAt(i8);
            if (46 === e9) o10 += 1;
            else if (e9 < 48 || e9 > 57) return !1;
        }
        return 3 === o10 && 46 !== a8.charCodeAt(0) && 46 !== a8.charCodeAt(a8.length - 1);
    })(u1), !0 === t3.isIp) ? t3 : !0 === c2.validateHostname && !0 === c2.extractHostname && !1 === o(t3.hostname) ? (t3.hostname = null, t3) : (n5(t3.hostname, c2, t3), 2 === s6 || null === t3.publicSuffix ? t3 : (t3.domain = (function(a10, o11, i9) {
        if (null !== i9.validHosts) {
            const a9 = i9.validHosts;
            for(let i10 = 0; i10 < a9.length; i10 += 1){
                const e10 = a9[i10];
                if (!0 === (function(a11, o12) {
                    return !!a11.endsWith(o12) && (a11.length === o12.length || "." === a11[a11.length - o12.length - 1]);
                })(o11, e10)) return e10;
            }
        }
        return a10.length === o11.length ? null : (function(a12, o13) {
            const i11 = a12.length - o13.length - 2, e11 = a12.lastIndexOf(".", i11);
            return -1 === e11 ? a12 : a12.slice(e11 + 1);
        })(o11, a10);
    })(t3.publicSuffix, t3.hostname, c2), 3 === s6 || null === t3.domain ? t3 : (t3.subdomain = (function(a13, o14) {
        return o14.length === a13.length ? "" : a13.slice(0, -o14.length - 1);
    })(t3.hostname, t3.domain), 4 === s6 || (t3.domainWithoutSuffix = (l1 = t3.domain, m1 = t3.publicSuffix, l1.slice(0, -m1.length - 1))), t3))));
    var u1, l1, m1;
}
const s = function() {
    const a14 = {
        $: 1,
        succ: {}
    }, o15 = {
        $: 0,
        succ: {
            city: a14
        }
    };
    return {
        $: 0,
        succ: {
            ck: {
                $: 0,
                succ: {
                    www: a14
                }
            },
            jp: {
                $: 0,
                succ: {
                    kawasaki: o15,
                    kitakyushu: o15,
                    kobe: o15,
                    nagoya: o15,
                    sapporo: o15,
                    sendai: o15,
                    yokohama: o15
                }
            }
        }
    };
}(), n = function() {
    const a15 = {
        $: 1,
        succ: {}
    }, o16 = {
        $: 2,
        succ: {}
    }, i12 = {
        $: 1,
        succ: {
            gov: a15,
            com: a15,
            org: a15,
            net: a15,
            edu: a15
        }
    }, e12 = {
        $: 0,
        succ: {
            "*": o16
        }
    }, s8 = {
        $: 1,
        succ: {
            blogspot: o16
        }
    }, n7 = {
        $: 1,
        succ: {
            gov: a15
        }
    }, r6 = {
        $: 0,
        succ: {
            "*": a15
        }
    }, t4 = {
        $: 0,
        succ: {
            cloud: o16
        }
    }, c3 = {
        $: 1,
        succ: {
            co: o16
        }
    }, u2 = {
        $: 2,
        succ: {
            nodes: o16
        }
    }, l2 = {
        $: 0,
        succ: {
            s3: o16
        }
    }, m2 = {
        $: 0,
        succ: {
            direct: o16
        }
    }, d1 = {
        $: 0,
        succ: {
            vfs: o16,
            "webview-assets": o16
        }
    }, g1 = {
        $: 0,
        succ: {
            cloud9: d1
        }
    }, h1 = {
        $: 0,
        succ: {
            dualstack: l2,
            cloud9: d1
        }
    }, k = {
        $: 0,
        succ: {
            s3: o16,
            dualstack: l2,
            "s3-website": o16,
            cloud9: d1
        }
    }, b = {
        $: 0,
        succ: {
            apps: o16
        }
    }, p = {
        $: 0,
        succ: {
            paas: o16
        }
    }, y = {
        $: 0,
        succ: {
            app: o16
        }
    }, f = {
        $: 2,
        succ: {
            eu: o16
        }
    }, v = {
        $: 0,
        succ: {
            site: o16
        }
    }, x = {
        $: 0,
        succ: {
            pages: o16
        }
    }, w = {
        $: 1,
        succ: {
            com: a15,
            edu: a15,
            net: a15,
            org: a15
        }
    }, $ = {
        $: 0,
        succ: {
            j: o16
        }
    }, z = {
        $: 0,
        succ: {
            jelastic: o16
        }
    }, j = {
        $: 0,
        succ: {
            user: o16
        }
    }, q = {
        $: 1,
        succ: {
            ybo: o16
        }
    }, I = {
        $: 0,
        succ: {
            cust: o16,
            reservd: o16
        }
    }, S = {
        $: 0,
        succ: {
            cust: o16
        }
    }, C = {
        $: 1,
        succ: {
            gov: a15,
            edu: a15,
            mil: a15,
            com: a15,
            org: a15,
            net: a15
        }
    }, P = {
        $: 1,
        succ: {
            edu: a15,
            biz: a15,
            net: a15,
            org: a15,
            gov: a15,
            info: a15,
            com: a15
        }
    }, A = {
        $: 1,
        succ: {
            gov: a15,
            blogspot: o16
        }
    }, H = {
        $: 1,
        succ: {
            framer: o16
        }
    }, D = {
        $: 1,
        succ: {
            barsy: o16
        }
    }, W = {
        $: 0,
        succ: {
            forgot: o16
        }
    }, L = {
        $: 1,
        succ: {
            gs: a15
        }
    }, O = {
        $: 0,
        succ: {
            nes: a15
        }
    }, B = {
        $: 1,
        succ: {
            k12: a15,
            cc: a15,
            lib: a15
        }
    }, E = {
        $: 1,
        succ: {
            cc: a15,
            lib: a15
        }
    };
    return {
        $: 0,
        succ: {
            ac: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    net: a15,
                    mil: a15,
                    org: a15,
                    drr: o16
                }
            },
            ad: {
                $: 1,
                succ: {
                    nom: a15
                }
            },
            ae: {
                $: 1,
                succ: {
                    co: a15,
                    net: a15,
                    org: a15,
                    sch: a15,
                    ac: a15,
                    gov: a15,
                    mil: a15,
                    blogspot: o16
                }
            },
            aero: {
                $: 1,
                succ: {
                    "accident-investigation": a15,
                    "accident-prevention": a15,
                    aerobatic: a15,
                    aeroclub: a15,
                    aerodrome: a15,
                    agents: a15,
                    aircraft: a15,
                    airline: a15,
                    airport: a15,
                    "air-surveillance": a15,
                    airtraffic: a15,
                    "air-traffic-control": a15,
                    ambulance: a15,
                    amusement: a15,
                    association: a15,
                    author: a15,
                    ballooning: a15,
                    broker: a15,
                    caa: a15,
                    cargo: a15,
                    catering: a15,
                    certification: a15,
                    championship: a15,
                    charter: a15,
                    civilaviation: a15,
                    club: a15,
                    conference: a15,
                    consultant: a15,
                    consulting: a15,
                    control: a15,
                    council: a15,
                    crew: a15,
                    design: a15,
                    dgca: a15,
                    educator: a15,
                    emergency: a15,
                    engine: a15,
                    engineer: a15,
                    entertainment: a15,
                    equipment: a15,
                    exchange: a15,
                    express: a15,
                    federation: a15,
                    flight: a15,
                    fuel: a15,
                    gliding: a15,
                    government: a15,
                    groundhandling: a15,
                    group: a15,
                    hanggliding: a15,
                    homebuilt: a15,
                    insurance: a15,
                    journal: a15,
                    journalist: a15,
                    leasing: a15,
                    logistics: a15,
                    magazine: a15,
                    maintenance: a15,
                    media: a15,
                    microlight: a15,
                    modelling: a15,
                    navigation: a15,
                    parachuting: a15,
                    paragliding: a15,
                    "passenger-association": a15,
                    pilot: a15,
                    press: a15,
                    production: a15,
                    recreation: a15,
                    repbody: a15,
                    res: a15,
                    research: a15,
                    rotorcraft: a15,
                    safety: a15,
                    scientist: a15,
                    services: a15,
                    show: a15,
                    skydiving: a15,
                    software: a15,
                    student: a15,
                    trader: a15,
                    trading: a15,
                    trainer: a15,
                    union: a15,
                    workinggroup: a15,
                    works: a15
                }
            },
            af: i12,
            ag: {
                $: 1,
                succ: {
                    com: a15,
                    org: a15,
                    net: a15,
                    co: a15,
                    nom: a15
                }
            },
            ai: {
                $: 1,
                succ: {
                    off: a15,
                    com: a15,
                    net: a15,
                    org: a15,
                    uwu: o16
                }
            },
            al: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    mil: a15,
                    net: a15,
                    org: a15,
                    blogspot: o16
                }
            },
            am: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    commune: a15,
                    net: a15,
                    org: a15,
                    radio: o16,
                    blogspot: o16,
                    neko: o16,
                    nyaa: o16
                }
            },
            ao: {
                $: 1,
                succ: {
                    ed: a15,
                    gv: a15,
                    og: a15,
                    co: a15,
                    pb: a15,
                    it: a15
                }
            },
            aq: a15,
            ar: {
                $: 1,
                succ: {
                    bet: a15,
                    com: s8,
                    coop: a15,
                    edu: a15,
                    gob: a15,
                    gov: a15,
                    int: a15,
                    mil: a15,
                    musica: a15,
                    mutual: a15,
                    net: a15,
                    org: a15,
                    senasa: a15,
                    tur: a15
                }
            },
            arpa: {
                $: 1,
                succ: {
                    e164: a15,
                    "in-addr": a15,
                    ip6: a15,
                    iris: a15,
                    uri: a15,
                    urn: a15
                }
            },
            as: n7,
            asia: {
                $: 1,
                succ: {
                    cloudns: o16
                }
            },
            at: {
                $: 1,
                succ: {
                    ac: {
                        $: 1,
                        succ: {
                            sth: a15
                        }
                    },
                    co: s8,
                    gv: a15,
                    or: a15,
                    funkfeuer: {
                        $: 0,
                        succ: {
                            wien: o16
                        }
                    },
                    futurecms: {
                        $: 0,
                        succ: {
                            "*": o16,
                            ex: e12,
                            in: e12
                        }
                    },
                    futurehosting: o16,
                    futuremailing: o16,
                    ortsinfo: {
                        $: 0,
                        succ: {
                            ex: e12,
                            kunden: e12
                        }
                    },
                    biz: o16,
                    info: o16,
                    priv: o16,
                    myspreadshop: o16,
                    "12hp": o16,
                    "2ix": o16,
                    "4lima": o16,
                    "lima-city": o16
                }
            },
            au: {
                $: 1,
                succ: {
                    com: {
                        $: 1,
                        succ: {
                            blogspot: o16,
                            cloudlets: {
                                $: 0,
                                succ: {
                                    mel: o16
                                }
                            },
                            myspreadshop: o16
                        }
                    },
                    net: a15,
                    org: a15,
                    edu: {
                        $: 1,
                        succ: {
                            act: a15,
                            catholic: a15,
                            nsw: {
                                $: 1,
                                succ: {
                                    schools: a15
                                }
                            },
                            nt: a15,
                            qld: a15,
                            sa: a15,
                            tas: a15,
                            vic: a15,
                            wa: a15
                        }
                    },
                    gov: {
                        $: 1,
                        succ: {
                            qld: a15,
                            sa: a15,
                            tas: a15,
                            vic: a15,
                            wa: a15
                        }
                    },
                    asn: a15,
                    id: a15,
                    info: a15,
                    conf: a15,
                    oz: a15,
                    act: a15,
                    nsw: a15,
                    nt: a15,
                    qld: a15,
                    sa: a15,
                    tas: a15,
                    vic: a15,
                    wa: a15
                }
            },
            aw: {
                $: 1,
                succ: {
                    com: a15
                }
            },
            ax: {
                $: 1,
                succ: {
                    be: o16,
                    cat: o16,
                    es: o16,
                    eu: o16,
                    gg: o16,
                    mc: o16,
                    us: o16,
                    xy: o16
                }
            },
            az: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    int: a15,
                    gov: a15,
                    org: a15,
                    edu: a15,
                    info: a15,
                    pp: a15,
                    mil: a15,
                    name: a15,
                    pro: a15,
                    biz: a15
                }
            },
            ba: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    mil: a15,
                    net: a15,
                    org: a15,
                    rs: o16,
                    blogspot: o16
                }
            },
            bb: {
                $: 1,
                succ: {
                    biz: a15,
                    co: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    info: a15,
                    net: a15,
                    org: a15,
                    store: a15,
                    tv: a15
                }
            },
            bd: r6,
            be: {
                $: 1,
                succ: {
                    ac: a15,
                    webhosting: o16,
                    blogspot: o16,
                    interhostsolutions: t4,
                    kuleuven: {
                        $: 0,
                        succ: {
                            ezproxy: o16
                        }
                    },
                    myspreadshop: o16,
                    transurl: e12
                }
            },
            bf: n7,
            bg: {
                $: 1,
                succ: {
                    0: a15,
                    1: a15,
                    2: a15,
                    3: a15,
                    4: a15,
                    5: a15,
                    6: a15,
                    7: a15,
                    8: a15,
                    9: a15,
                    a: a15,
                    b: a15,
                    c: a15,
                    d: a15,
                    e: a15,
                    f: a15,
                    g: a15,
                    h: a15,
                    i: a15,
                    j: a15,
                    k: a15,
                    l: a15,
                    m: a15,
                    n: a15,
                    o: a15,
                    p: a15,
                    q: a15,
                    r: a15,
                    s: a15,
                    t: a15,
                    u: a15,
                    v: a15,
                    w: a15,
                    x: a15,
                    y: a15,
                    z: a15,
                    blogspot: o16,
                    barsy: o16
                }
            },
            bh: i12,
            bi: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    edu: a15,
                    or: a15,
                    org: a15
                }
            },
            biz: {
                $: 1,
                succ: {
                    cloudns: o16,
                    jozi: o16,
                    dyndns: o16,
                    "for-better": o16,
                    "for-more": o16,
                    "for-some": o16,
                    "for-the": o16,
                    selfip: o16,
                    webhop: o16,
                    orx: o16,
                    mmafan: o16,
                    myftp: o16,
                    "no-ip": o16,
                    dscloud: o16
                }
            },
            bj: {
                $: 1,
                succ: {
                    asso: a15,
                    barreau: a15,
                    gouv: a15,
                    blogspot: o16
                }
            },
            bm: i12,
            bn: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    net: a15,
                    org: a15,
                    co: o16
                }
            },
            bo: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gob: a15,
                    int: a15,
                    org: a15,
                    net: a15,
                    mil: a15,
                    tv: a15,
                    web: a15,
                    academia: a15,
                    agro: a15,
                    arte: a15,
                    blog: a15,
                    bolivia: a15,
                    ciencia: a15,
                    cooperativa: a15,
                    democracia: a15,
                    deporte: a15,
                    ecologia: a15,
                    economia: a15,
                    empresa: a15,
                    indigena: a15,
                    industria: a15,
                    info: a15,
                    medicina: a15,
                    movimiento: a15,
                    musica: a15,
                    natural: a15,
                    nombre: a15,
                    noticias: a15,
                    patria: a15,
                    politica: a15,
                    profesional: a15,
                    plurinacional: a15,
                    pueblo: a15,
                    revista: a15,
                    salud: a15,
                    tecnologia: a15,
                    tksat: a15,
                    transporte: a15,
                    wiki: a15
                }
            },
            br: {
                $: 1,
                succ: {
                    "9guacu": a15,
                    abc: a15,
                    adm: a15,
                    adv: a15,
                    agr: a15,
                    aju: a15,
                    am: a15,
                    anani: a15,
                    aparecida: a15,
                    app: a15,
                    arq: a15,
                    art: a15,
                    ato: a15,
                    b: a15,
                    barueri: a15,
                    belem: a15,
                    bhz: a15,
                    bib: a15,
                    bio: a15,
                    blog: a15,
                    bmd: a15,
                    boavista: a15,
                    bsb: a15,
                    campinagrande: a15,
                    campinas: a15,
                    caxias: a15,
                    cim: a15,
                    cng: a15,
                    cnt: a15,
                    com: {
                        $: 1,
                        succ: {
                            blogspot: o16,
                            virtualcloud: {
                                $: 0,
                                succ: {
                                    scale: {
                                        $: 0,
                                        succ: {
                                            users: o16
                                        }
                                    }
                                }
                            }
                        }
                    },
                    contagem: a15,
                    coop: a15,
                    coz: a15,
                    cri: a15,
                    cuiaba: a15,
                    curitiba: a15,
                    def: a15,
                    des: a15,
                    det: a15,
                    dev: a15,
                    ecn: a15,
                    eco: a15,
                    edu: a15,
                    emp: a15,
                    enf: a15,
                    eng: a15,
                    esp: a15,
                    etc: a15,
                    eti: a15,
                    far: a15,
                    feira: a15,
                    flog: a15,
                    floripa: a15,
                    fm: a15,
                    fnd: a15,
                    fortal: a15,
                    fot: a15,
                    foz: a15,
                    fst: a15,
                    g12: a15,
                    geo: a15,
                    ggf: a15,
                    goiania: a15,
                    gov: {
                        $: 1,
                        succ: {
                            ac: a15,
                            al: a15,
                            am: a15,
                            ap: a15,
                            ba: a15,
                            ce: a15,
                            df: a15,
                            es: a15,
                            go: a15,
                            ma: a15,
                            mg: a15,
                            ms: a15,
                            mt: a15,
                            pa: a15,
                            pb: a15,
                            pe: a15,
                            pi: a15,
                            pr: a15,
                            rj: a15,
                            rn: a15,
                            ro: a15,
                            rr: a15,
                            rs: a15,
                            sc: a15,
                            se: a15,
                            sp: a15,
                            to: a15
                        }
                    },
                    gru: a15,
                    imb: a15,
                    ind: a15,
                    inf: a15,
                    jab: a15,
                    jampa: a15,
                    jdf: a15,
                    joinville: a15,
                    jor: a15,
                    jus: a15,
                    leg: {
                        $: 1,
                        succ: {
                            ac: o16,
                            al: o16,
                            am: o16,
                            ap: o16,
                            ba: o16,
                            ce: o16,
                            df: o16,
                            es: o16,
                            go: o16,
                            ma: o16,
                            mg: o16,
                            ms: o16,
                            mt: o16,
                            pa: o16,
                            pb: o16,
                            pe: o16,
                            pi: o16,
                            pr: o16,
                            rj: o16,
                            rn: o16,
                            ro: o16,
                            rr: o16,
                            rs: o16,
                            sc: o16,
                            se: o16,
                            sp: o16,
                            to: o16
                        }
                    },
                    lel: a15,
                    log: a15,
                    londrina: a15,
                    macapa: a15,
                    maceio: a15,
                    manaus: a15,
                    maringa: a15,
                    mat: a15,
                    med: a15,
                    mil: a15,
                    morena: a15,
                    mp: a15,
                    mus: a15,
                    natal: a15,
                    net: a15,
                    niteroi: a15,
                    nom: r6,
                    not: a15,
                    ntr: a15,
                    odo: a15,
                    ong: a15,
                    org: a15,
                    osasco: a15,
                    palmas: a15,
                    poa: a15,
                    ppg: a15,
                    pro: a15,
                    psc: a15,
                    psi: a15,
                    pvh: a15,
                    qsl: a15,
                    radio: a15,
                    rec: a15,
                    recife: a15,
                    rep: a15,
                    ribeirao: a15,
                    rio: a15,
                    riobranco: a15,
                    riopreto: a15,
                    salvador: a15,
                    sampa: a15,
                    santamaria: a15,
                    santoandre: a15,
                    saobernardo: a15,
                    saogonca: a15,
                    seg: a15,
                    sjc: a15,
                    slg: a15,
                    slz: a15,
                    sorocaba: a15,
                    srv: a15,
                    taxi: a15,
                    tc: a15,
                    tec: a15,
                    teo: a15,
                    the: a15,
                    tmp: a15,
                    trd: a15,
                    tur: a15,
                    tv: a15,
                    udi: a15,
                    vet: a15,
                    vix: a15,
                    vlog: a15,
                    wiki: a15,
                    zlg: a15
                }
            },
            bs: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    edu: a15,
                    gov: a15,
                    we: o16
                }
            },
            bt: i12,
            bv: a15,
            bw: {
                $: 1,
                succ: {
                    co: a15,
                    org: a15
                }
            },
            by: {
                $: 1,
                succ: {
                    gov: a15,
                    mil: a15,
                    com: s8,
                    of: a15,
                    mycloud: o16,
                    mediatech: o16
                }
            },
            bz: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    edu: a15,
                    gov: a15,
                    za: o16,
                    gsj: o16
                }
            },
            ca: {
                $: 1,
                succ: {
                    ab: a15,
                    bc: a15,
                    mb: a15,
                    nb: a15,
                    nf: a15,
                    nl: a15,
                    ns: a15,
                    nt: a15,
                    nu: a15,
                    on: a15,
                    pe: a15,
                    qc: a15,
                    sk: a15,
                    yk: a15,
                    gc: a15,
                    barsy: o16,
                    awdev: e12,
                    co: o16,
                    blogspot: o16,
                    "no-ip": o16,
                    myspreadshop: o16
                }
            },
            cat: a15,
            cc: {
                $: 1,
                succ: {
                    cloudns: o16,
                    ftpaccess: o16,
                    "game-server": o16,
                    myphotos: o16,
                    scrapping: o16,
                    twmail: o16,
                    csx: o16,
                    fantasyleague: o16,
                    spawn: {
                        $: 0,
                        succ: {
                            instances: o16
                        }
                    }
                }
            },
            cd: n7,
            cf: s8,
            cg: a15,
            ch: {
                $: 1,
                succ: {
                    square7: o16,
                    blogspot: o16,
                    flow: {
                        $: 0,
                        succ: {
                            ae: {
                                $: 0,
                                succ: {
                                    alp1: o16
                                }
                            },
                            appengine: o16
                        }
                    },
                    "linkyard-cloud": o16,
                    dnsking: o16,
                    gotdns: o16,
                    myspreadshop: o16,
                    firenet: {
                        $: 0,
                        succ: {
                            "*": o16,
                            svc: e12
                        }
                    },
                    "12hp": o16,
                    "2ix": o16,
                    "4lima": o16,
                    "lima-city": o16
                }
            },
            ci: {
                $: 1,
                succ: {
                    org: a15,
                    or: a15,
                    com: a15,
                    co: a15,
                    edu: a15,
                    ed: a15,
                    ac: a15,
                    net: a15,
                    go: a15,
                    asso: a15,
                    "xn--aroport-bya": a15,
                    "aéroport": a15,
                    int: a15,
                    presse: a15,
                    md: a15,
                    gouv: a15,
                    fin: o16,
                    nl: o16
                }
            },
            ck: r6,
            cl: {
                $: 1,
                succ: {
                    co: a15,
                    gob: a15,
                    gov: a15,
                    mil: a15,
                    blogspot: o16
                }
            },
            cm: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    gov: a15,
                    net: a15
                }
            },
            cn: {
                $: 1,
                succ: {
                    ac: a15,
                    com: {
                        $: 1,
                        succ: {
                            amazonaws: {
                                $: 0,
                                succ: {
                                    compute: e12,
                                    eb: {
                                        $: 0,
                                        succ: {
                                            "cn-north-1": o16,
                                            "cn-northwest-1": o16
                                        }
                                    },
                                    elb: e12,
                                    "cn-north-1": l2
                                }
                            }
                        }
                    },
                    edu: a15,
                    gov: a15,
                    net: a15,
                    org: a15,
                    mil: a15,
                    "xn--55qx5d": a15,
                    "公司": a15,
                    "xn--io0a7i": a15,
                    "网络": a15,
                    "xn--od0alg": a15,
                    "網絡": a15,
                    ah: a15,
                    bj: a15,
                    cq: a15,
                    fj: a15,
                    gd: a15,
                    gs: a15,
                    gz: a15,
                    gx: a15,
                    ha: a15,
                    hb: a15,
                    he: a15,
                    hi: a15,
                    hl: a15,
                    hn: a15,
                    jl: a15,
                    js: a15,
                    jx: a15,
                    ln: a15,
                    nm: a15,
                    nx: a15,
                    qh: a15,
                    sc: a15,
                    sd: a15,
                    sh: a15,
                    sn: a15,
                    sx: a15,
                    tj: a15,
                    xj: a15,
                    xz: a15,
                    yn: a15,
                    zj: a15,
                    hk: a15,
                    mo: a15,
                    tw: a15,
                    instantcloud: o16,
                    quickconnect: m2
                }
            },
            co: {
                $: 1,
                succ: {
                    arts: a15,
                    com: s8,
                    edu: a15,
                    firm: a15,
                    gov: a15,
                    info: a15,
                    int: a15,
                    mil: a15,
                    net: a15,
                    nom: a15,
                    org: a15,
                    rec: a15,
                    web: a15,
                    carrd: o16,
                    crd: o16,
                    otap: e12,
                    leadpages: o16,
                    lpages: o16,
                    mypi: o16,
                    n4t: o16,
                    repl: {
                        $: 2,
                        succ: {
                            id: o16
                        }
                    },
                    supabase: o16
                }
            },
            com: {
                $: 1,
                succ: {
                    devcdnaccesso: e12,
                    adobeaemcloud: {
                        $: 2,
                        succ: {
                            dev: e12
                        }
                    },
                    airkitapps: o16,
                    "airkitapps-au": o16,
                    aivencloud: o16,
                    kasserver: o16,
                    amazonaws: {
                        $: 0,
                        succ: {
                            compute: e12,
                            "compute-1": e12,
                            "us-east-1": {
                                $: 2,
                                succ: {
                                    dualstack: l2,
                                    cloud9: d1
                                }
                            },
                            elb: e12,
                            s3: o16,
                            "s3-ap-northeast-1": o16,
                            "s3-ap-northeast-2": o16,
                            "s3-ap-south-1": o16,
                            "s3-ap-southeast-1": o16,
                            "s3-ap-southeast-2": o16,
                            "s3-ca-central-1": o16,
                            "s3-eu-central-1": o16,
                            "s3-eu-west-1": o16,
                            "s3-eu-west-2": o16,
                            "s3-eu-west-3": o16,
                            "s3-external-1": o16,
                            "s3-fips-us-gov-west-1": o16,
                            "s3-sa-east-1": o16,
                            "s3-us-gov-west-1": o16,
                            "s3-us-east-2": o16,
                            "s3-us-west-1": o16,
                            "s3-us-west-2": o16,
                            "ap-northeast-2": k,
                            "ap-south-1": k,
                            "ca-central-1": k,
                            "eu-central-1": k,
                            "eu-west-2": k,
                            "eu-west-3": k,
                            "us-east-2": k,
                            "ap-northeast-1": h1,
                            "ap-southeast-1": h1,
                            "ap-southeast-2": h1,
                            "eu-west-1": h1,
                            "sa-east-1": h1,
                            "s3-website-us-east-1": o16,
                            "s3-website-us-west-1": o16,
                            "s3-website-us-west-2": o16,
                            "s3-website-ap-northeast-1": o16,
                            "s3-website-ap-southeast-1": o16,
                            "s3-website-ap-southeast-2": o16,
                            "s3-website-eu-west-1": o16,
                            "s3-website-sa-east-1": o16,
                            "af-south-1": g1,
                            "ap-east-1": g1,
                            "ap-northeast-3": g1,
                            "eu-north-1": g1,
                            "eu-south-1": g1,
                            "me-south-1": g1,
                            "us-west-1": g1,
                            "us-west-2": g1
                        }
                    },
                    elasticbeanstalk: {
                        $: 2,
                        succ: {
                            "ap-northeast-1": o16,
                            "ap-northeast-2": o16,
                            "ap-northeast-3": o16,
                            "ap-south-1": o16,
                            "ap-southeast-1": o16,
                            "ap-southeast-2": o16,
                            "ca-central-1": o16,
                            "eu-central-1": o16,
                            "eu-west-1": o16,
                            "eu-west-2": o16,
                            "eu-west-3": o16,
                            "sa-east-1": o16,
                            "us-east-1": o16,
                            "us-east-2": o16,
                            "us-gov-west-1": o16,
                            "us-west-1": o16,
                            "us-west-2": o16
                        }
                    },
                    awsglobalaccelerator: o16,
                    siiites: o16,
                    appspacehosted: o16,
                    appspaceusercontent: o16,
                    "on-aptible": o16,
                    myasustor: o16,
                    "balena-devices": o16,
                    betainabox: o16,
                    boutir: o16,
                    bplaced: o16,
                    cafjs: o16,
                    br: o16,
                    cn: o16,
                    de: o16,
                    eu: o16,
                    jpn: o16,
                    mex: o16,
                    ru: o16,
                    sa: o16,
                    uk: o16,
                    us: o16,
                    za: o16,
                    ar: o16,
                    hu: o16,
                    kr: o16,
                    no: o16,
                    qc: o16,
                    uy: o16,
                    africa: o16,
                    gr: o16,
                    co: o16,
                    jdevcloud: o16,
                    wpdevcloud: o16,
                    cloudcontrolled: o16,
                    cloudcontrolapp: o16,
                    trycloudflare: o16,
                    "customer-oci": {
                        $: 0,
                        succ: {
                            "*": o16,
                            oci: e12,
                            ocp: e12,
                            ocs: e12
                        }
                    },
                    dattolocal: o16,
                    dattorelay: o16,
                    dattoweb: o16,
                    mydatto: o16,
                    builtwithdark: o16,
                    datadetect: {
                        $: 0,
                        succ: {
                            demo: o16,
                            instance: o16
                        }
                    },
                    ddns5: o16,
                    discordsays: o16,
                    discordsez: o16,
                    drayddns: o16,
                    dreamhosters: o16,
                    mydrobo: o16,
                    "dyndns-at-home": o16,
                    "dyndns-at-work": o16,
                    "dyndns-blog": o16,
                    "dyndns-free": o16,
                    "dyndns-home": o16,
                    "dyndns-ip": o16,
                    "dyndns-mail": o16,
                    "dyndns-office": o16,
                    "dyndns-pics": o16,
                    "dyndns-remote": o16,
                    "dyndns-server": o16,
                    "dyndns-web": o16,
                    "dyndns-wiki": o16,
                    "dyndns-work": o16,
                    blogdns: o16,
                    cechire: o16,
                    dnsalias: o16,
                    dnsdojo: o16,
                    doesntexist: o16,
                    dontexist: o16,
                    doomdns: o16,
                    "dyn-o-saur": o16,
                    dynalias: o16,
                    "est-a-la-maison": o16,
                    "est-a-la-masion": o16,
                    "est-le-patron": o16,
                    "est-mon-blogueur": o16,
                    "from-ak": o16,
                    "from-al": o16,
                    "from-ar": o16,
                    "from-ca": o16,
                    "from-ct": o16,
                    "from-dc": o16,
                    "from-de": o16,
                    "from-fl": o16,
                    "from-ga": o16,
                    "from-hi": o16,
                    "from-ia": o16,
                    "from-id": o16,
                    "from-il": o16,
                    "from-in": o16,
                    "from-ks": o16,
                    "from-ky": o16,
                    "from-ma": o16,
                    "from-md": o16,
                    "from-mi": o16,
                    "from-mn": o16,
                    "from-mo": o16,
                    "from-ms": o16,
                    "from-mt": o16,
                    "from-nc": o16,
                    "from-nd": o16,
                    "from-ne": o16,
                    "from-nh": o16,
                    "from-nj": o16,
                    "from-nm": o16,
                    "from-nv": o16,
                    "from-oh": o16,
                    "from-ok": o16,
                    "from-or": o16,
                    "from-pa": o16,
                    "from-pr": o16,
                    "from-ri": o16,
                    "from-sc": o16,
                    "from-sd": o16,
                    "from-tn": o16,
                    "from-tx": o16,
                    "from-ut": o16,
                    "from-va": o16,
                    "from-vt": o16,
                    "from-wa": o16,
                    "from-wi": o16,
                    "from-wv": o16,
                    "from-wy": o16,
                    getmyip: o16,
                    gotdns: o16,
                    "hobby-site": o16,
                    homelinux: o16,
                    homeunix: o16,
                    iamallama: o16,
                    "is-a-anarchist": o16,
                    "is-a-blogger": o16,
                    "is-a-bookkeeper": o16,
                    "is-a-bulls-fan": o16,
                    "is-a-caterer": o16,
                    "is-a-chef": o16,
                    "is-a-conservative": o16,
                    "is-a-cpa": o16,
                    "is-a-cubicle-slave": o16,
                    "is-a-democrat": o16,
                    "is-a-designer": o16,
                    "is-a-doctor": o16,
                    "is-a-financialadvisor": o16,
                    "is-a-geek": o16,
                    "is-a-green": o16,
                    "is-a-guru": o16,
                    "is-a-hard-worker": o16,
                    "is-a-hunter": o16,
                    "is-a-landscaper": o16,
                    "is-a-lawyer": o16,
                    "is-a-liberal": o16,
                    "is-a-libertarian": o16,
                    "is-a-llama": o16,
                    "is-a-musician": o16,
                    "is-a-nascarfan": o16,
                    "is-a-nurse": o16,
                    "is-a-painter": o16,
                    "is-a-personaltrainer": o16,
                    "is-a-photographer": o16,
                    "is-a-player": o16,
                    "is-a-republican": o16,
                    "is-a-rockstar": o16,
                    "is-a-socialist": o16,
                    "is-a-student": o16,
                    "is-a-teacher": o16,
                    "is-a-techie": o16,
                    "is-a-therapist": o16,
                    "is-an-accountant": o16,
                    "is-an-actor": o16,
                    "is-an-actress": o16,
                    "is-an-anarchist": o16,
                    "is-an-artist": o16,
                    "is-an-engineer": o16,
                    "is-an-entertainer": o16,
                    "is-certified": o16,
                    "is-gone": o16,
                    "is-into-anime": o16,
                    "is-into-cars": o16,
                    "is-into-cartoons": o16,
                    "is-into-games": o16,
                    "is-leet": o16,
                    "is-not-certified": o16,
                    "is-slick": o16,
                    "is-uberleet": o16,
                    "is-with-theband": o16,
                    "isa-geek": o16,
                    "isa-hockeynut": o16,
                    issmarterthanyou: o16,
                    "likes-pie": o16,
                    likescandy: o16,
                    "neat-url": o16,
                    "saves-the-whales": o16,
                    selfip: o16,
                    "sells-for-less": o16,
                    "sells-for-u": o16,
                    servebbs: o16,
                    "simple-url": o16,
                    "space-to-rent": o16,
                    "teaches-yoga": o16,
                    writesthisblog: o16,
                    digitaloceanspaces: e12,
                    ddnsfree: o16,
                    ddnsgeek: o16,
                    giize: o16,
                    gleeze: o16,
                    kozow: o16,
                    loseyourip: o16,
                    ooguy: o16,
                    theworkpc: o16,
                    mytuleap: o16,
                    "tuleap-partners": o16,
                    encoreapi: o16,
                    evennode: {
                        $: 0,
                        succ: {
                            "eu-1": o16,
                            "eu-2": o16,
                            "eu-3": o16,
                            "eu-4": o16,
                            "us-1": o16,
                            "us-2": o16,
                            "us-3": o16,
                            "us-4": o16
                        }
                    },
                    onfabrica: o16,
                    fbsbx: b,
                    "fastly-terrarium": o16,
                    "fastvps-server": o16,
                    mydobiss: o16,
                    firebaseapp: o16,
                    fldrv: o16,
                    forgeblocks: o16,
                    framercanvas: o16,
                    "freebox-os": o16,
                    freeboxos: o16,
                    freemyip: o16,
                    gentapps: o16,
                    gentlentapis: o16,
                    githubusercontent: o16,
                    "0emm": e12,
                    appspot: {
                        $: 2,
                        succ: {
                            r: e12
                        }
                    },
                    codespot: o16,
                    googleapis: o16,
                    googlecode: o16,
                    pagespeedmobilizer: o16,
                    publishproxy: o16,
                    withgoogle: o16,
                    withyoutube: o16,
                    blogspot: o16,
                    awsmppl: o16,
                    herokuapp: o16,
                    herokussl: o16,
                    myravendb: o16,
                    impertrixcdn: o16,
                    impertrix: o16,
                    smushcdn: o16,
                    wphostedmail: o16,
                    wpmucdn: o16,
                    pixolino: o16,
                    amscompute: o16,
                    clicketcloud: o16,
                    dopaas: o16,
                    hidora: o16,
                    "hosted-by-previder": p,
                    hosteur: {
                        $: 0,
                        succ: {
                            "rag-cloud": o16,
                            "rag-cloud-ch": o16
                        }
                    },
                    "ik-server": {
                        $: 0,
                        succ: {
                            jcloud: o16,
                            "jcloud-ver-jpc": o16
                        }
                    },
                    jelastic: {
                        $: 0,
                        succ: {
                            demo: o16
                        }
                    },
                    kilatiron: o16,
                    massivegrid: p,
                    wafaicloud: {
                        $: 0,
                        succ: {
                            jed: o16,
                            lon: o16,
                            ryd: o16
                        }
                    },
                    joyent: {
                        $: 0,
                        succ: {
                            cns: e12
                        }
                    },
                    ktistory: o16,
                    lpusercontent: o16,
                    lmpm: y,
                    linode: {
                        $: 0,
                        succ: {
                            members: o16,
                            nodebalancer: e12
                        }
                    },
                    linodeobjects: e12,
                    linodeusercontent: {
                        $: 0,
                        succ: {
                            ip: o16
                        }
                    },
                    barsycenter: o16,
                    barsyonline: o16,
                    mazeplay: o16,
                    miniserver: o16,
                    meteorapp: f,
                    hostedpi: o16,
                    "mythic-beasts": {
                        $: 0,
                        succ: {
                            customer: o16,
                            caracal: o16,
                            fentiger: o16,
                            lynx: o16,
                            ocelot: o16,
                            oncilla: o16,
                            onza: o16,
                            sphinx: o16,
                            vs: o16,
                            x: o16,
                            yali: o16
                        }
                    },
                    nospamproxy: t4,
                    "4u": o16,
                    nfshost: o16,
                    "001www": o16,
                    ddnslive: o16,
                    myiphost: o16,
                    blogsyte: o16,
                    ciscofreak: o16,
                    damnserver: o16,
                    ditchyourip: o16,
                    dnsiskinky: o16,
                    dynns: o16,
                    geekgalaxy: o16,
                    "health-carereform": o16,
                    homesecuritymac: o16,
                    homesecuritypc: o16,
                    myactivedirectory: o16,
                    mysecuritycamera: o16,
                    "net-freaks": o16,
                    onthewifi: o16,
                    point2this: o16,
                    quicksytes: o16,
                    securitytactics: o16,
                    serveexchange: o16,
                    servehumour: o16,
                    servep2p: o16,
                    servesarcasm: o16,
                    stufftoread: o16,
                    unusualperson: o16,
                    workisboring: o16,
                    "3utilities": o16,
                    ddnsking: o16,
                    myvnc: o16,
                    servebeer: o16,
                    servecounterstrike: o16,
                    serveftp: o16,
                    servegame: o16,
                    servehalflife: o16,
                    servehttp: o16,
                    serveirc: o16,
                    servemp3: o16,
                    servepics: o16,
                    servequake: o16,
                    observableusercontent: {
                        $: 0,
                        succ: {
                            static: o16
                        }
                    },
                    orsites: o16,
                    operaunite: o16,
                    "authgear-staging": o16,
                    authgearapps: o16,
                    skygearapp: o16,
                    outsystemscloud: o16,
                    ownprovider: o16,
                    pgfog: o16,
                    pagefrontapp: o16,
                    pagexl: o16,
                    paywhirl: e12,
                    gotpantheon: o16,
                    "platter-app": o16,
                    pleskns: o16,
                    "postman-echo": o16,
                    prgmr: {
                        $: 0,
                        succ: {
                            xen: o16
                        }
                    },
                    pythonanywhere: f,
                    qualifioapp: o16,
                    qbuser: o16,
                    qa2: o16,
                    "dev-myqnapcloud": o16,
                    "alpha-myqnapcloud": o16,
                    myqnapcloud: o16,
                    quipelements: e12,
                    rackmaze: o16,
                    rhcloud: o16,
                    render: y,
                    onrender: o16,
                    code: {
                        $: 0,
                        succ: {
                            builder: e12,
                            "dev-builder": e12,
                            "stg-builder": e12
                        }
                    },
                    logoip: o16,
                    scrysec: o16,
                    "firewall-gateway": o16,
                    myshopblocks: o16,
                    myshopify: o16,
                    shopitsite: o16,
                    "1kapp": o16,
                    appchizi: o16,
                    applinzi: o16,
                    sinaapp: o16,
                    vipsinaapp: o16,
                    "bounty-full": {
                        $: 2,
                        succ: {
                            alpha: o16,
                            beta: o16
                        }
                    },
                    streamlitapp: o16,
                    "try-snowplow": o16,
                    "stackhero-network": o16,
                    "playstation-cloud": o16,
                    myspreadshop: o16,
                    stdlib: {
                        $: 0,
                        succ: {
                            api: o16
                        }
                    },
                    "temp-dns": o16,
                    dsmynas: o16,
                    familyds: o16,
                    "tb-hosting": v,
                    reservd: o16,
                    thingdustdata: o16,
                    bloxcms: o16,
                    "townnews-staging": o16,
                    typeform: {
                        $: 0,
                        succ: {
                            pro: o16
                        }
                    },
                    hk: o16,
                    vultrobjects: e12,
                    wafflecell: o16,
                    "reserve-online": o16,
                    hotelwithflight: o16,
                    remotewd: o16,
                    wiardweb: x,
                    messwithdns: o16,
                    "woltlab-demo": o16,
                    wpenginepowered: {
                        $: 2,
                        succ: {
                            js: o16
                        }
                    },
                    wixsite: o16,
                    xnbay: {
                        $: 2,
                        succ: {
                            u2: o16,
                            "u2-local": o16
                        }
                    },
                    yolasite: o16
                }
            },
            coop: a15,
            cr: {
                $: 1,
                succ: {
                    ac: a15,
                    co: a15,
                    ed: a15,
                    fi: a15,
                    go: a15,
                    or: a15,
                    sa: a15
                }
            },
            cu: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    org: a15,
                    net: a15,
                    gov: a15,
                    inf: a15
                }
            },
            cv: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    int: a15,
                    nome: a15,
                    org: a15,
                    blogspot: o16
                }
            },
            cw: w,
            cx: {
                $: 1,
                succ: {
                    gov: a15,
                    ath: o16,
                    info: o16
                }
            },
            cy: {
                $: 1,
                succ: {
                    ac: a15,
                    biz: a15,
                    com: {
                        $: 1,
                        succ: {
                            blogspot: o16,
                            scaleforce: $
                        }
                    },
                    ekloges: a15,
                    gov: a15,
                    ltd: a15,
                    mil: a15,
                    net: a15,
                    org: a15,
                    press: a15,
                    pro: a15,
                    tm: a15
                }
            },
            cz: {
                $: 1,
                succ: {
                    co: o16,
                    realm: o16,
                    e4: o16,
                    blogspot: o16,
                    metacentrum: {
                        $: 0,
                        succ: {
                            cloud: e12,
                            custom: o16
                        }
                    },
                    muni: {
                        $: 0,
                        succ: {
                            cloud: {
                                $: 0,
                                succ: {
                                    flt: o16,
                                    usr: o16
                                }
                            }
                        }
                    }
                }
            },
            de: {
                $: 1,
                succ: {
                    bplaced: o16,
                    square7: o16,
                    com: o16,
                    cosidns: {
                        $: 0,
                        succ: {
                            dyn: o16
                        }
                    },
                    "dynamisches-dns": o16,
                    dnsupdater: o16,
                    "internet-dns": o16,
                    "l-o-g-i-n": o16,
                    dnshome: o16,
                    fuettertdasnetz: o16,
                    isteingeek: o16,
                    istmein: o16,
                    lebtimnetz: o16,
                    leitungsen: o16,
                    traeumtgerade: o16,
                    ddnss: {
                        $: 2,
                        succ: {
                            dyn: o16,
                            dyndns: o16
                        }
                    },
                    dyndns1: o16,
                    "dyn-ip24": o16,
                    "home-webserver": {
                        $: 2,
                        succ: {
                            dyn: o16
                        }
                    },
                    "myhome-server": o16,
                    frusky: e12,
                    goip: o16,
                    blogspot: o16,
                    "xn--gnstigbestellen-zvb": o16,
                    "günstigbestellen": o16,
                    "xn--gnstigliefern-wob": o16,
                    "günstigliefern": o16,
                    "hs-heilbronn": {
                        $: 0,
                        succ: {
                            it: x
                        }
                    },
                    "dyn-berlin": o16,
                    "in-berlin": o16,
                    "in-brb": o16,
                    "in-butter": o16,
                    "in-dsl": o16,
                    "in-vpn": o16,
                    iservschule: o16,
                    "mein-iserv": o16,
                    schulplattform: o16,
                    schulserver: o16,
                    "test-iserv": o16,
                    keymachine: o16,
                    "git-repos": o16,
                    "lcube-server": o16,
                    "svn-repos": o16,
                    barsy: o16,
                    logoip: o16,
                    "firewall-gateway": o16,
                    "my-gateway": o16,
                    "my-router": o16,
                    spdns: o16,
                    speedpartner: {
                        $: 0,
                        succ: {
                            customer: o16
                        }
                    },
                    myspreadshop: o16,
                    "taifun-dns": o16,
                    "12hp": o16,
                    "2ix": o16,
                    "4lima": o16,
                    "lima-city": o16,
                    "dd-dns": o16,
                    "dray-dns": o16,
                    draydns: o16,
                    "dyn-vpn": o16,
                    dynvpn: o16,
                    "mein-vigor": o16,
                    "my-vigor": o16,
                    "my-wan": o16,
                    "syno-ds": o16,
                    "synology-diskstation": o16,
                    "synology-ds": o16,
                    uberspace: e12,
                    virtualuser: o16,
                    "virtual-user": o16,
                    "community-pro": o16,
                    diskussionsbereich: o16
                }
            },
            dj: a15,
            dk: {
                $: 1,
                succ: {
                    biz: o16,
                    co: o16,
                    firm: o16,
                    reg: o16,
                    store: o16,
                    blogspot: o16,
                    myspreadshop: o16
                }
            },
            dm: i12,
            do: {
                $: 1,
                succ: {
                    art: a15,
                    com: a15,
                    edu: a15,
                    gob: a15,
                    gov: a15,
                    mil: a15,
                    net: a15,
                    org: a15,
                    sld: a15,
                    web: a15
                }
            },
            dz: {
                $: 1,
                succ: {
                    art: a15,
                    asso: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    org: a15,
                    net: a15,
                    pol: a15,
                    soc: a15,
                    tm: a15
                }
            },
            ec: {
                $: 1,
                succ: {
                    com: a15,
                    info: a15,
                    net: a15,
                    fin: a15,
                    k12: a15,
                    med: a15,
                    pro: a15,
                    org: a15,
                    edu: a15,
                    gov: a15,
                    gob: a15,
                    mil: a15,
                    base: o16,
                    official: o16
                }
            },
            edu: {
                $: 1,
                succ: {
                    rit: {
                        $: 0,
                        succ: {
                            "git-pages": o16
                        }
                    }
                }
            },
            ee: {
                $: 1,
                succ: {
                    edu: a15,
                    gov: a15,
                    riik: a15,
                    lib: a15,
                    med: a15,
                    com: s8,
                    pri: a15,
                    aip: a15,
                    org: a15,
                    fie: a15
                }
            },
            eg: {
                $: 1,
                succ: {
                    com: s8,
                    edu: a15,
                    eun: a15,
                    gov: a15,
                    mil: a15,
                    name: a15,
                    net: a15,
                    org: a15,
                    sci: a15
                }
            },
            er: r6,
            es: {
                $: 1,
                succ: {
                    com: s8,
                    nom: a15,
                    org: a15,
                    gob: a15,
                    edu: a15,
                    myspreadshop: o16
                }
            },
            et: {
                $: 1,
                succ: {
                    com: a15,
                    gov: a15,
                    org: a15,
                    edu: a15,
                    biz: a15,
                    name: a15,
                    info: a15,
                    net: a15
                }
            },
            eu: {
                $: 1,
                succ: {
                    airkitapps: o16,
                    mycd: o16,
                    cloudns: o16,
                    dogado: z,
                    barsy: o16,
                    wellbeingzone: o16,
                    spdns: o16,
                    transurl: e12,
                    diskstation: o16
                }
            },
            fi: {
                $: 1,
                succ: {
                    aland: a15,
                    dy: o16,
                    blogspot: o16,
                    "xn--hkkinen-5wa": o16,
                    "häkkinen": o16,
                    iki: o16,
                    cloudplatform: {
                        $: 0,
                        succ: {
                            fi: o16
                        }
                    },
                    datacenter: {
                        $: 0,
                        succ: {
                            demo: o16,
                            paas: o16
                        }
                    },
                    kapsi: o16,
                    myspreadshop: o16
                }
            },
            fj: {
                $: 1,
                succ: {
                    ac: a15,
                    biz: a15,
                    com: a15,
                    gov: a15,
                    info: a15,
                    mil: a15,
                    name: a15,
                    net: a15,
                    org: a15,
                    pro: a15
                }
            },
            fk: r6,
            fm: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    net: a15,
                    org: a15,
                    radio: o16
                }
            },
            fo: a15,
            fr: {
                $: 1,
                succ: {
                    asso: a15,
                    com: a15,
                    gouv: a15,
                    nom: a15,
                    prd: a15,
                    tm: a15,
                    aeroport: a15,
                    avocat: a15,
                    avoues: a15,
                    cci: a15,
                    chambagri: a15,
                    "chirurgiens-dentistes": a15,
                    "experts-comptables": a15,
                    "geometre-expert": a15,
                    greta: a15,
                    "huissier-justice": a15,
                    medecin: a15,
                    notaires: a15,
                    pharmacien: a15,
                    port: a15,
                    veterinaire: a15,
                    "en-root": o16,
                    "fbx-os": o16,
                    fbxos: o16,
                    "freebox-os": o16,
                    freeboxos: o16,
                    blogspot: o16,
                    goupile: o16,
                    "on-web": o16,
                    "chirurgiens-dentistes-en-france": o16,
                    dedibox: o16,
                    myspreadshop: o16,
                    ynh: o16
                }
            },
            ga: a15,
            gb: a15,
            gd: {
                $: 1,
                succ: {
                    edu: a15,
                    gov: a15
                }
            },
            ge: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    org: a15,
                    mil: a15,
                    net: a15,
                    pvt: a15
                }
            },
            gf: a15,
            gg: {
                $: 1,
                succ: {
                    co: a15,
                    net: a15,
                    org: a15,
                    kaas: o16,
                    cya: o16,
                    panel: {
                        $: 2,
                        succ: {
                            daemon: o16
                        }
                    }
                }
            },
            gh: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    org: a15,
                    mil: a15
                }
            },
            gi: {
                $: 1,
                succ: {
                    com: a15,
                    ltd: a15,
                    gov: a15,
                    mod: a15,
                    edu: a15,
                    org: a15
                }
            },
            gl: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    edu: a15,
                    net: a15,
                    org: a15,
                    biz: o16,
                    xx: o16
                }
            },
            gm: a15,
            gn: {
                $: 1,
                succ: {
                    ac: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    org: a15,
                    net: a15
                }
            },
            gov: a15,
            gp: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    mobi: a15,
                    edu: a15,
                    org: a15,
                    asso: a15,
                    app: o16
                }
            },
            gq: a15,
            gr: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    net: a15,
                    org: a15,
                    gov: a15,
                    blogspot: o16
                }
            },
            gs: a15,
            gt: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gob: a15,
                    ind: a15,
                    mil: a15,
                    net: a15,
                    org: a15,
                    blog: o16,
                    de: o16,
                    to: o16
                }
            },
            gu: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    guam: a15,
                    info: a15,
                    net: a15,
                    org: a15,
                    web: a15
                }
            },
            gw: a15,
            gy: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    net: a15,
                    org: a15,
                    be: o16
                }
            },
            hk: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    idv: a15,
                    net: a15,
                    org: a15,
                    "xn--55qx5d": a15,
                    "公司": a15,
                    "xn--wcvs22d": a15,
                    "教育": a15,
                    "xn--lcvr32d": a15,
                    "敎育": a15,
                    "xn--mxtq1m": a15,
                    "政府": a15,
                    "xn--gmqw5a": a15,
                    "個人": a15,
                    "xn--ciqpn": a15,
                    "个人": a15,
                    "xn--gmq050i": a15,
                    "箇人": a15,
                    "xn--zf0avx": a15,
                    "網络": a15,
                    "xn--io0a7i": a15,
                    "网络": a15,
                    "xn--mk0axi": a15,
                    "组織": a15,
                    "xn--od0alg": a15,
                    "網絡": a15,
                    "xn--od0aq3b": a15,
                    "网絡": a15,
                    "xn--tn0ag": a15,
                    "组织": a15,
                    "xn--uc0atv": a15,
                    "組織": a15,
                    "xn--uc0ay4a": a15,
                    "組织": a15,
                    blogspot: o16,
                    secaas: o16,
                    ltd: o16,
                    inc: o16
                }
            },
            hm: a15,
            hn: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    org: a15,
                    net: a15,
                    mil: a15,
                    gob: a15,
                    cc: o16
                }
            },
            hr: {
                $: 1,
                succ: {
                    iz: a15,
                    from: a15,
                    name: a15,
                    com: a15,
                    blogspot: o16,
                    free: o16
                }
            },
            ht: {
                $: 1,
                succ: {
                    com: a15,
                    shop: a15,
                    firm: a15,
                    info: a15,
                    adult: a15,
                    net: a15,
                    pro: a15,
                    org: a15,
                    med: a15,
                    art: a15,
                    coop: a15,
                    pol: a15,
                    asso: a15,
                    edu: a15,
                    rel: a15,
                    gouv: a15,
                    perso: a15
                }
            },
            hu: {
                $: 1,
                succ: {
                    2000: a15,
                    co: a15,
                    info: a15,
                    org: a15,
                    priv: a15,
                    sport: a15,
                    tm: a15,
                    agrar: a15,
                    bolt: a15,
                    casino: a15,
                    city: a15,
                    erotica: a15,
                    erotika: a15,
                    film: a15,
                    forum: a15,
                    games: a15,
                    hotel: a15,
                    ingatlan: a15,
                    jogasz: a15,
                    konyvelo: a15,
                    lakas: a15,
                    media: a15,
                    news: a15,
                    reklam: a15,
                    sex: a15,
                    shop: a15,
                    suli: a15,
                    szex: a15,
                    tozsde: a15,
                    utazas: a15,
                    video: a15,
                    blogspot: o16
                }
            },
            id: {
                $: 1,
                succ: {
                    ac: a15,
                    biz: a15,
                    co: s8,
                    desa: a15,
                    go: a15,
                    mil: a15,
                    my: {
                        $: 1,
                        succ: {
                            rss: e12
                        }
                    },
                    net: a15,
                    or: a15,
                    ponpes: a15,
                    sch: a15,
                    web: a15,
                    flap: o16,
                    forte: o16
                }
            },
            ie: {
                $: 1,
                succ: {
                    gov: a15,
                    blogspot: o16,
                    myspreadshop: o16
                }
            },
            il: {
                $: 1,
                succ: {
                    ac: a15,
                    co: {
                        $: 1,
                        succ: {
                            ravpage: o16,
                            blogspot: o16,
                            tabitorder: o16
                        }
                    },
                    gov: a15,
                    idf: a15,
                    k12: a15,
                    muni: a15,
                    net: a15,
                    org: a15
                }
            },
            "xn--4dbrk0ce": {
                $: 1,
                succ: {
                    "xn--4dbgdty6c": a15,
                    "xn--5dbhl8d": a15,
                    "xn--8dbq2a": a15,
                    "xn--hebda8b": a15
                }
            },
            "ישראל": {
                $: 1,
                succ: {
                    "אקדמיה": a15,
                    "ישוב": a15,
                    "צהל": a15,
                    "ממשל": a15
                }
            },
            im: {
                $: 1,
                succ: {
                    ac: a15,
                    co: {
                        $: 1,
                        succ: {
                            ltd: a15,
                            plc: a15
                        }
                    },
                    com: a15,
                    net: a15,
                    org: a15,
                    tt: a15,
                    tv: a15,
                    ro: o16
                }
            },
            in: {
                $: 1,
                succ: {
                    "5g": a15,
                    "6g": a15,
                    ac: a15,
                    ai: a15,
                    am: a15,
                    bihar: a15,
                    biz: a15,
                    business: a15,
                    ca: a15,
                    cn: a15,
                    co: a15,
                    com: a15,
                    coop: a15,
                    cs: a15,
                    delhi: a15,
                    dr: a15,
                    edu: a15,
                    er: a15,
                    firm: a15,
                    gen: a15,
                    gov: a15,
                    gujarat: a15,
                    ind: a15,
                    info: a15,
                    int: a15,
                    internet: a15,
                    io: a15,
                    me: a15,
                    mil: a15,
                    net: a15,
                    nic: a15,
                    org: a15,
                    pg: a15,
                    post: a15,
                    pro: a15,
                    res: a15,
                    travel: a15,
                    tv: a15,
                    uk: a15,
                    up: a15,
                    us: a15,
                    web: o16,
                    cloudns: o16,
                    blogspot: o16,
                    barsy: o16,
                    supabase: o16
                }
            },
            info: {
                $: 1,
                succ: {
                    cloudns: o16,
                    "dynamic-dns": o16,
                    dyndns: o16,
                    "barrel-of-knowledge": o16,
                    "barrell-of-knowledge": o16,
                    "for-our": o16,
                    "groks-the": o16,
                    "groks-this": o16,
                    "here-for-more": o16,
                    knowsitall: o16,
                    selfip: o16,
                    webhop: o16,
                    barsy: o16,
                    mayfirst: o16,
                    forumz: o16,
                    nsupdate: o16,
                    dvrcam: o16,
                    ilovecollege: o16,
                    "no-ip": o16,
                    dnsupdate: o16,
                    "v-info": o16
                }
            },
            int: {
                $: 1,
                succ: {
                    eu: a15
                }
            },
            io: {
                $: 1,
                succ: {
                    2038: o16,
                    com: a15,
                    apigee: o16,
                    "b-data": o16,
                    backplaneapp: o16,
                    banzaicloud: {
                        $: 0,
                        succ: {
                            app: o16,
                            backyards: e12
                        }
                    },
                    beagleboard: o16,
                    bitbucket: o16,
                    bluebite: o16,
                    boxfuse: o16,
                    browsersafetymark: o16,
                    bigv: {
                        $: 0,
                        succ: {
                            uk0: o16
                        }
                    },
                    cleverapps: o16,
                    dappnode: {
                        $: 0,
                        succ: {
                            dyndns: o16
                        }
                    },
                    dedyn: o16,
                    drud: o16,
                    definima: o16,
                    "fh-muenster": o16,
                    shw: o16,
                    forgerock: {
                        $: 0,
                        succ: {
                            id: o16
                        }
                    },
                    ghost: o16,
                    github: o16,
                    gitlab: o16,
                    lolipop: o16,
                    "hasura-app": o16,
                    hostyhosting: o16,
                    moonscale: e12,
                    beebyte: p,
                    beebyteapp: {
                        $: 0,
                        succ: {
                            sekd1: o16
                        }
                    },
                    jele: o16,
                    unispace: {
                        $: 0,
                        succ: {
                            "cloud-fr1": o16
                        }
                    },
                    webthings: o16,
                    loginline: o16,
                    barsy: o16,
                    azurecontainer: e12,
                    ngrok: o16,
                    nodeart: {
                        $: 0,
                        succ: {
                            stage: o16
                        }
                    },
                    nid: o16,
                    pantheonsite: o16,
                    dyn53: o16,
                    pstmn: {
                        $: 2,
                        succ: {
                            mock: o16
                        }
                    },
                    protonet: o16,
                    qoto: o16,
                    qcx: {
                        $: 2,
                        succ: {
                            sys: e12
                        }
                    },
                    vaporcloud: o16,
                    vbrplsbx: {
                        $: 0,
                        succ: {
                            g: o16
                        }
                    },
                    "on-k3s": e12,
                    "on-rio": e12,
                    readthedocs: o16,
                    resindevice: o16,
                    resinstaging: {
                        $: 0,
                        succ: {
                            devices: o16
                        }
                    },
                    hzc: o16,
                    sandcats: o16,
                    shiftcrypto: o16,
                    shiftedit: o16,
                    "mo-siemens": o16,
                    musician: o16,
                    lair: b,
                    stolos: e12,
                    spacekit: o16,
                    utwente: o16,
                    s5y: e12,
                    edugit: o16,
                    telebit: o16,
                    thingdust: {
                        $: 0,
                        succ: {
                            dev: I,
                            disrec: I,
                            prod: S,
                            testing: I
                        }
                    },
                    tickets: o16,
                    upli: o16,
                    wedeploy: o16,
                    editorx: o16,
                    basicserver: o16,
                    virtualserver: o16
                }
            },
            iq: C,
            ir: {
                $: 1,
                succ: {
                    ac: a15,
                    co: a15,
                    gov: a15,
                    id: a15,
                    net: a15,
                    org: a15,
                    sch: a15,
                    "xn--mgba3a4f16a": a15,
                    "ایران": a15,
                    "xn--mgba3a4fra": a15,
                    "ايران": a15
                }
            },
            is: {
                $: 1,
                succ: {
                    net: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    org: a15,
                    int: a15,
                    cupcake: o16,
                    blogspot: o16
                }
            },
            it: {
                $: 1,
                succ: {
                    gov: a15,
                    edu: a15,
                    abr: a15,
                    abruzzo: a15,
                    "aosta-valley": a15,
                    aostavalley: a15,
                    bas: a15,
                    basilicata: a15,
                    cal: a15,
                    calabria: a15,
                    cam: a15,
                    campania: a15,
                    "emilia-romagna": a15,
                    emiliaromagna: a15,
                    emr: a15,
                    "friuli-v-giulia": a15,
                    "friuli-ve-giulia": a15,
                    "friuli-vegiulia": a15,
                    "friuli-venezia-giulia": a15,
                    "friuli-veneziagiulia": a15,
                    "friuli-vgiulia": a15,
                    "friuliv-giulia": a15,
                    "friulive-giulia": a15,
                    friulivegiulia: a15,
                    "friulivenezia-giulia": a15,
                    friuliveneziagiulia: a15,
                    friulivgiulia: a15,
                    fvg: a15,
                    laz: a15,
                    lazio: a15,
                    lig: a15,
                    liguria: a15,
                    lom: a15,
                    lombardia: a15,
                    lombardy: a15,
                    lucania: a15,
                    mar: a15,
                    marche: a15,
                    mol: a15,
                    molise: a15,
                    piedmont: a15,
                    piemonte: a15,
                    pmn: a15,
                    pug: a15,
                    puglia: a15,
                    sar: a15,
                    sardegna: a15,
                    sardinia: a15,
                    sic: a15,
                    sicilia: a15,
                    sicily: a15,
                    taa: a15,
                    tos: a15,
                    toscana: a15,
                    "trentin-sud-tirol": a15,
                    "xn--trentin-sd-tirol-rzb": a15,
                    "trentin-süd-tirol": a15,
                    "trentin-sudtirol": a15,
                    "xn--trentin-sdtirol-7vb": a15,
                    "trentin-südtirol": a15,
                    "trentin-sued-tirol": a15,
                    "trentin-suedtirol": a15,
                    "trentino-a-adige": a15,
                    "trentino-aadige": a15,
                    "trentino-alto-adige": a15,
                    "trentino-altoadige": a15,
                    "trentino-s-tirol": a15,
                    "trentino-stirol": a15,
                    "trentino-sud-tirol": a15,
                    "xn--trentino-sd-tirol-c3b": a15,
                    "trentino-süd-tirol": a15,
                    "trentino-sudtirol": a15,
                    "xn--trentino-sdtirol-szb": a15,
                    "trentino-südtirol": a15,
                    "trentino-sued-tirol": a15,
                    "trentino-suedtirol": a15,
                    trentino: a15,
                    "trentinoa-adige": a15,
                    trentinoaadige: a15,
                    "trentinoalto-adige": a15,
                    trentinoaltoadige: a15,
                    "trentinos-tirol": a15,
                    trentinostirol: a15,
                    "trentinosud-tirol": a15,
                    "xn--trentinosd-tirol-rzb": a15,
                    "trentinosüd-tirol": a15,
                    trentinosudtirol: a15,
                    "xn--trentinosdtirol-7vb": a15,
                    "trentinosüdtirol": a15,
                    "trentinosued-tirol": a15,
                    trentinosuedtirol: a15,
                    "trentinsud-tirol": a15,
                    "xn--trentinsd-tirol-6vb": a15,
                    "trentinsüd-tirol": a15,
                    trentinsudtirol: a15,
                    "xn--trentinsdtirol-nsb": a15,
                    "trentinsüdtirol": a15,
                    "trentinsued-tirol": a15,
                    trentinsuedtirol: a15,
                    tuscany: a15,
                    umb: a15,
                    umbria: a15,
                    "val-d-aosta": a15,
                    "val-daosta": a15,
                    "vald-aosta": a15,
                    valdaosta: a15,
                    "valle-aosta": a15,
                    "valle-d-aosta": a15,
                    "valle-daosta": a15,
                    valleaosta: a15,
                    "valled-aosta": a15,
                    valledaosta: a15,
                    "vallee-aoste": a15,
                    "xn--valle-aoste-ebb": a15,
                    "vallée-aoste": a15,
                    "vallee-d-aoste": a15,
                    "xn--valle-d-aoste-ehb": a15,
                    "vallée-d-aoste": a15,
                    valleeaoste: a15,
                    "xn--valleaoste-e7a": a15,
                    "valléeaoste": a15,
                    valleedaoste: a15,
                    "xn--valledaoste-ebb": a15,
                    "valléedaoste": a15,
                    vao: a15,
                    vda: a15,
                    ven: a15,
                    veneto: a15,
                    ag: a15,
                    agrigento: a15,
                    al: a15,
                    alessandria: a15,
                    "alto-adige": a15,
                    altoadige: a15,
                    an: a15,
                    ancona: a15,
                    "andria-barletta-trani": a15,
                    "andria-trani-barletta": a15,
                    andriabarlettatrani: a15,
                    andriatranibarletta: a15,
                    ao: a15,
                    aosta: a15,
                    aoste: a15,
                    ap: a15,
                    aq: a15,
                    aquila: a15,
                    ar: a15,
                    arezzo: a15,
                    "ascoli-piceno": a15,
                    ascolipiceno: a15,
                    asti: a15,
                    at: a15,
                    av: a15,
                    avellino: a15,
                    ba: a15,
                    "balsan-sudtirol": a15,
                    "xn--balsan-sdtirol-nsb": a15,
                    "balsan-südtirol": a15,
                    "balsan-suedtirol": a15,
                    balsan: a15,
                    bari: a15,
                    "barletta-trani-andria": a15,
                    barlettatraniandria: a15,
                    belluno: a15,
                    benevento: a15,
                    bergamo: a15,
                    bg: a15,
                    bi: a15,
                    biella: a15,
                    bl: a15,
                    bn: a15,
                    bo: a15,
                    bologna: a15,
                    "bolzano-altoadige": a15,
                    bolzano: a15,
                    "bozen-sudtirol": a15,
                    "xn--bozen-sdtirol-2ob": a15,
                    "bozen-südtirol": a15,
                    "bozen-suedtirol": a15,
                    bozen: a15,
                    br: a15,
                    brescia: a15,
                    brindisi: a15,
                    bs: a15,
                    bt: a15,
                    "bulsan-sudtirol": a15,
                    "xn--bulsan-sdtirol-nsb": a15,
                    "bulsan-südtirol": a15,
                    "bulsan-suedtirol": a15,
                    bulsan: a15,
                    bz: a15,
                    ca: a15,
                    cagliari: a15,
                    caltanissetta: a15,
                    "campidano-medio": a15,
                    campidanomedio: a15,
                    campobasso: a15,
                    "carbonia-iglesias": a15,
                    carboniaiglesias: a15,
                    "carrara-massa": a15,
                    carraramassa: a15,
                    caserta: a15,
                    catania: a15,
                    catanzaro: a15,
                    cb: a15,
                    ce: a15,
                    "cesena-forli": a15,
                    "xn--cesena-forl-mcb": a15,
                    "cesena-forlì": a15,
                    cesenaforli: a15,
                    "xn--cesenaforl-i8a": a15,
                    "cesenaforlì": a15,
                    ch: a15,
                    chieti: a15,
                    ci: a15,
                    cl: a15,
                    cn: a15,
                    co: a15,
                    como: a15,
                    cosenza: a15,
                    cr: a15,
                    cremona: a15,
                    crotone: a15,
                    cs: a15,
                    ct: a15,
                    cuneo: a15,
                    cz: a15,
                    "dell-ogliastra": a15,
                    dellogliastra: a15,
                    en: a15,
                    enna: a15,
                    fc: a15,
                    fe: a15,
                    fermo: a15,
                    ferrara: a15,
                    fg: a15,
                    fi: a15,
                    firenze: a15,
                    florence: a15,
                    fm: a15,
                    foggia: a15,
                    "forli-cesena": a15,
                    "xn--forl-cesena-fcb": a15,
                    "forlì-cesena": a15,
                    forlicesena: a15,
                    "xn--forlcesena-c8a": a15,
                    "forlìcesena": a15,
                    fr: a15,
                    frosinone: a15,
                    ge: a15,
                    genoa: a15,
                    genova: a15,
                    go: a15,
                    gorizia: a15,
                    gr: a15,
                    grosseto: a15,
                    "iglesias-carbonia": a15,
                    iglesiascarbonia: a15,
                    im: a15,
                    imperia: a15,
                    is: a15,
                    isernia: a15,
                    kr: a15,
                    "la-spezia": a15,
                    laquila: a15,
                    laspezia: a15,
                    latina: a15,
                    lc: a15,
                    le: a15,
                    lecce: a15,
                    lecco: a15,
                    li: a15,
                    livorno: a15,
                    lo: a15,
                    lodi: a15,
                    lt: a15,
                    lu: a15,
                    lucca: a15,
                    macerata: a15,
                    mantova: a15,
                    "massa-carrara": a15,
                    massacarrara: a15,
                    matera: a15,
                    mb: a15,
                    mc: a15,
                    me: a15,
                    "medio-campidano": a15,
                    mediocampidano: a15,
                    messina: a15,
                    mi: a15,
                    milan: a15,
                    milano: a15,
                    mn: a15,
                    mo: a15,
                    modena: a15,
                    "monza-brianza": a15,
                    "monza-e-della-brianza": a15,
                    monza: a15,
                    monzabrianza: a15,
                    monzaebrianza: a15,
                    monzaedellabrianza: a15,
                    ms: a15,
                    mt: a15,
                    na: a15,
                    naples: a15,
                    napoli: a15,
                    no: a15,
                    novara: a15,
                    nu: a15,
                    nuoro: a15,
                    og: a15,
                    ogliastra: a15,
                    "olbia-tempio": a15,
                    olbiatempio: a15,
                    or: a15,
                    oristano: a15,
                    ot: a15,
                    pa: a15,
                    padova: a15,
                    padua: a15,
                    palermo: a15,
                    parma: a15,
                    pavia: a15,
                    pc: a15,
                    pd: a15,
                    pe: a15,
                    perugia: a15,
                    "pesaro-urbino": a15,
                    pesarourbino: a15,
                    pescara: a15,
                    pg: a15,
                    pi: a15,
                    piacenza: a15,
                    pisa: a15,
                    pistoia: a15,
                    pn: a15,
                    po: a15,
                    pordenone: a15,
                    potenza: a15,
                    pr: a15,
                    prato: a15,
                    pt: a15,
                    pu: a15,
                    pv: a15,
                    pz: a15,
                    ra: a15,
                    ragusa: a15,
                    ravenna: a15,
                    rc: a15,
                    re: a15,
                    "reggio-calabria": a15,
                    "reggio-emilia": a15,
                    reggiocalabria: a15,
                    reggioemilia: a15,
                    rg: a15,
                    ri: a15,
                    rieti: a15,
                    rimini: a15,
                    rm: a15,
                    rn: a15,
                    ro: a15,
                    roma: a15,
                    rome: a15,
                    rovigo: a15,
                    sa: a15,
                    salerno: a15,
                    sassari: a15,
                    savona: a15,
                    si: a15,
                    siena: a15,
                    siracusa: a15,
                    so: a15,
                    sondrio: a15,
                    sp: a15,
                    sr: a15,
                    ss: a15,
                    suedtirol: a15,
                    "xn--sdtirol-n2a": a15,
                    "südtirol": a15,
                    sv: a15,
                    ta: a15,
                    taranto: a15,
                    te: a15,
                    "tempio-olbia": a15,
                    tempioolbia: a15,
                    teramo: a15,
                    terni: a15,
                    tn: a15,
                    to: a15,
                    torino: a15,
                    tp: a15,
                    tr: a15,
                    "trani-andria-barletta": a15,
                    "trani-barletta-andria": a15,
                    traniandriabarletta: a15,
                    tranibarlettaandria: a15,
                    trapani: a15,
                    trento: a15,
                    treviso: a15,
                    trieste: a15,
                    ts: a15,
                    turin: a15,
                    tv: a15,
                    ud: a15,
                    udine: a15,
                    "urbino-pesaro": a15,
                    urbinopesaro: a15,
                    va: a15,
                    varese: a15,
                    vb: a15,
                    vc: a15,
                    ve: a15,
                    venezia: a15,
                    venice: a15,
                    verbania: a15,
                    vercelli: a15,
                    verona: a15,
                    vi: a15,
                    "vibo-valentia": a15,
                    vibovalentia: a15,
                    vicenza: a15,
                    viterbo: a15,
                    vr: a15,
                    vs: a15,
                    vt: a15,
                    vv: a15,
                    blogspot: o16,
                    ibxos: o16,
                    iliadboxos: o16,
                    neen: {
                        $: 0,
                        succ: {
                            jc: o16
                        }
                    },
                    tim: {
                        $: 0,
                        succ: {
                            open: {
                                $: 0,
                                succ: {
                                    jelastic: t4
                                }
                            }
                        }
                    },
                    "16-b": o16,
                    "32-b": o16,
                    "64-b": o16,
                    myspreadshop: o16,
                    syncloud: o16
                }
            },
            je: {
                $: 1,
                succ: {
                    co: a15,
                    net: a15,
                    org: a15,
                    of: o16
                }
            },
            jm: r6,
            jo: {
                $: 1,
                succ: {
                    com: a15,
                    org: a15,
                    net: a15,
                    edu: a15,
                    sch: a15,
                    gov: a15,
                    mil: a15,
                    name: a15
                }
            },
            jobs: a15,
            jp: {
                $: 1,
                succ: {
                    ac: a15,
                    ad: a15,
                    co: a15,
                    ed: a15,
                    go: a15,
                    gr: a15,
                    lg: a15,
                    ne: {
                        $: 1,
                        succ: {
                            aseinet: j,
                            gehirn: o16
                        }
                    },
                    or: a15,
                    aichi: {
                        $: 1,
                        succ: {
                            aisai: a15,
                            ama: a15,
                            anjo: a15,
                            asuke: a15,
                            chiryu: a15,
                            chita: a15,
                            fuso: a15,
                            gamagori: a15,
                            handa: a15,
                            hazu: a15,
                            hekinan: a15,
                            higashiura: a15,
                            ichinomiya: a15,
                            inazawa: a15,
                            inuyama: a15,
                            isshiki: a15,
                            iwakura: a15,
                            kanie: a15,
                            kariya: a15,
                            kasugai: a15,
                            kira: a15,
                            kiyosu: a15,
                            komaki: a15,
                            konan: a15,
                            kota: a15,
                            mihama: a15,
                            miyoshi: a15,
                            nishio: a15,
                            nisshin: a15,
                            obu: a15,
                            oguchi: a15,
                            oharu: a15,
                            okazaki: a15,
                            owariasahi: a15,
                            seto: a15,
                            shikatsu: a15,
                            shinshiro: a15,
                            shitara: a15,
                            tahara: a15,
                            takahama: a15,
                            tobishima: a15,
                            toei: a15,
                            togo: a15,
                            tokai: a15,
                            tokoname: a15,
                            toyoake: a15,
                            toyohashi: a15,
                            toyokawa: a15,
                            toyone: a15,
                            toyota: a15,
                            tsushima: a15,
                            yatomi: a15
                        }
                    },
                    akita: {
                        $: 1,
                        succ: {
                            akita: a15,
                            daisen: a15,
                            fujisato: a15,
                            gojome: a15,
                            hachirogata: a15,
                            happou: a15,
                            higashinaruse: a15,
                            honjo: a15,
                            honjyo: a15,
                            ikawa: a15,
                            kamikoani: a15,
                            kamioka: a15,
                            katagami: a15,
                            kazuno: a15,
                            kitaakita: a15,
                            kosaka: a15,
                            kyowa: a15,
                            misato: a15,
                            mitane: a15,
                            moriyoshi: a15,
                            nikaho: a15,
                            noshiro: a15,
                            odate: a15,
                            oga: a15,
                            ogata: a15,
                            semboku: a15,
                            yokote: a15,
                            yurihonjo: a15
                        }
                    },
                    aomori: {
                        $: 1,
                        succ: {
                            aomori: a15,
                            gonohe: a15,
                            hachinohe: a15,
                            hashikami: a15,
                            hiranai: a15,
                            hirosaki: a15,
                            itayanagi: a15,
                            kuroishi: a15,
                            misawa: a15,
                            mutsu: a15,
                            nakadomari: a15,
                            noheji: a15,
                            oirase: a15,
                            owani: a15,
                            rokunohe: a15,
                            sannohe: a15,
                            shichinohe: a15,
                            shingo: a15,
                            takko: a15,
                            towada: a15,
                            tsugaru: a15,
                            tsuruta: a15
                        }
                    },
                    chiba: {
                        $: 1,
                        succ: {
                            abiko: a15,
                            asahi: a15,
                            chonan: a15,
                            chosei: a15,
                            choshi: a15,
                            chuo: a15,
                            funabashi: a15,
                            futtsu: a15,
                            hanamigawa: a15,
                            ichihara: a15,
                            ichikawa: a15,
                            ichinomiya: a15,
                            inzai: a15,
                            isumi: a15,
                            kamagaya: a15,
                            kamogawa: a15,
                            kashiwa: a15,
                            katori: a15,
                            katsuura: a15,
                            kimitsu: a15,
                            kisarazu: a15,
                            kozaki: a15,
                            kujukuri: a15,
                            kyonan: a15,
                            matsudo: a15,
                            midori: a15,
                            mihama: a15,
                            minamiboso: a15,
                            mobara: a15,
                            mutsuzawa: a15,
                            nagara: a15,
                            nagareyama: a15,
                            narashino: a15,
                            narita: a15,
                            noda: a15,
                            oamishirasato: a15,
                            omigawa: a15,
                            onjuku: a15,
                            otaki: a15,
                            sakae: a15,
                            sakura: a15,
                            shimofusa: a15,
                            shirako: a15,
                            shiroi: a15,
                            shisui: a15,
                            sodegaura: a15,
                            sosa: a15,
                            tako: a15,
                            tateyama: a15,
                            togane: a15,
                            tohnosho: a15,
                            tomisato: a15,
                            urayasu: a15,
                            yachimata: a15,
                            yachiyo: a15,
                            yokaichiba: a15,
                            yokoshibahikari: a15,
                            yotsukaido: a15
                        }
                    },
                    ehime: {
                        $: 1,
                        succ: {
                            ainan: a15,
                            honai: a15,
                            ikata: a15,
                            imabari: a15,
                            iyo: a15,
                            kamijima: a15,
                            kihoku: a15,
                            kumakogen: a15,
                            masaki: a15,
                            matsuno: a15,
                            matsuyama: a15,
                            namikata: a15,
                            niihama: a15,
                            ozu: a15,
                            saijo: a15,
                            seiyo: a15,
                            shikokuchuo: a15,
                            tobe: a15,
                            toon: a15,
                            uchiko: a15,
                            uwajima: a15,
                            yawatahama: a15
                        }
                    },
                    fukui: {
                        $: 1,
                        succ: {
                            echizen: a15,
                            eiheiji: a15,
                            fukui: a15,
                            ikeda: a15,
                            katsuyama: a15,
                            mihama: a15,
                            minamiechizen: a15,
                            obama: a15,
                            ohi: a15,
                            ono: a15,
                            sabae: a15,
                            sakai: a15,
                            takahama: a15,
                            tsuruga: a15,
                            wakasa: a15
                        }
                    },
                    fukuoka: {
                        $: 1,
                        succ: {
                            ashiya: a15,
                            buzen: a15,
                            chikugo: a15,
                            chikuho: a15,
                            chikujo: a15,
                            chikushino: a15,
                            chikuzen: a15,
                            chuo: a15,
                            dazaifu: a15,
                            fukuchi: a15,
                            hakata: a15,
                            higashi: a15,
                            hirokawa: a15,
                            hisayama: a15,
                            iizuka: a15,
                            inatsuki: a15,
                            kaho: a15,
                            kasuga: a15,
                            kasuya: a15,
                            kawara: a15,
                            keisen: a15,
                            koga: a15,
                            kurate: a15,
                            kurogi: a15,
                            kurume: a15,
                            minami: a15,
                            miyako: a15,
                            miyama: a15,
                            miyawaka: a15,
                            mizumaki: a15,
                            munakata: a15,
                            nakagawa: a15,
                            nakama: a15,
                            nishi: a15,
                            nogata: a15,
                            ogori: a15,
                            okagaki: a15,
                            okawa: a15,
                            oki: a15,
                            omuta: a15,
                            onga: a15,
                            onojo: a15,
                            oto: a15,
                            saigawa: a15,
                            sasaguri: a15,
                            shingu: a15,
                            shinyoshitomi: a15,
                            shonai: a15,
                            soeda: a15,
                            sue: a15,
                            tachiarai: a15,
                            tagawa: a15,
                            takata: a15,
                            toho: a15,
                            toyotsu: a15,
                            tsuiki: a15,
                            ukiha: a15,
                            umi: a15,
                            usui: a15,
                            yamada: a15,
                            yame: a15,
                            yanagawa: a15,
                            yukuhashi: a15
                        }
                    },
                    fukushima: {
                        $: 1,
                        succ: {
                            aizubange: a15,
                            aizumisato: a15,
                            aizuwakamatsu: a15,
                            asakawa: a15,
                            bandai: a15,
                            date: a15,
                            fukushima: a15,
                            furudono: a15,
                            futaba: a15,
                            hanawa: a15,
                            higashi: a15,
                            hirata: a15,
                            hirono: a15,
                            iitate: a15,
                            inawashiro: a15,
                            ishikawa: a15,
                            iwaki: a15,
                            izumizaki: a15,
                            kagamiishi: a15,
                            kaneyama: a15,
                            kawamata: a15,
                            kitakata: a15,
                            kitashiobara: a15,
                            koori: a15,
                            koriyama: a15,
                            kunimi: a15,
                            miharu: a15,
                            mishima: a15,
                            namie: a15,
                            nango: a15,
                            nishiaizu: a15,
                            nishigo: a15,
                            okuma: a15,
                            omotego: a15,
                            ono: a15,
                            otama: a15,
                            samegawa: a15,
                            shimogo: a15,
                            shirakawa: a15,
                            showa: a15,
                            soma: a15,
                            sukagawa: a15,
                            taishin: a15,
                            tamakawa: a15,
                            tanagura: a15,
                            tenei: a15,
                            yabuki: a15,
                            yamato: a15,
                            yamatsuri: a15,
                            yanaizu: a15,
                            yugawa: a15
                        }
                    },
                    gifu: {
                        $: 1,
                        succ: {
                            anpachi: a15,
                            ena: a15,
                            gifu: a15,
                            ginan: a15,
                            godo: a15,
                            gujo: a15,
                            hashima: a15,
                            hichiso: a15,
                            hida: a15,
                            higashishirakawa: a15,
                            ibigawa: a15,
                            ikeda: a15,
                            kakamigahara: a15,
                            kani: a15,
                            kasahara: a15,
                            kasamatsu: a15,
                            kawaue: a15,
                            kitagata: a15,
                            mino: a15,
                            minokamo: a15,
                            mitake: a15,
                            mizunami: a15,
                            motosu: a15,
                            nakatsugawa: a15,
                            ogaki: a15,
                            sakahogi: a15,
                            seki: a15,
                            sekigahara: a15,
                            shirakawa: a15,
                            tajimi: a15,
                            takayama: a15,
                            tarui: a15,
                            toki: a15,
                            tomika: a15,
                            wanouchi: a15,
                            yamagata: a15,
                            yaotsu: a15,
                            yoro: a15
                        }
                    },
                    gunma: {
                        $: 1,
                        succ: {
                            annaka: a15,
                            chiyoda: a15,
                            fujioka: a15,
                            higashiagatsuma: a15,
                            isesaki: a15,
                            itakura: a15,
                            kanna: a15,
                            kanra: a15,
                            katashina: a15,
                            kawaba: a15,
                            kiryu: a15,
                            kusatsu: a15,
                            maebashi: a15,
                            meiwa: a15,
                            midori: a15,
                            minakami: a15,
                            naganohara: a15,
                            nakanojo: a15,
                            nanmoku: a15,
                            numata: a15,
                            oizumi: a15,
                            ora: a15,
                            ota: a15,
                            shibukawa: a15,
                            shimonita: a15,
                            shinto: a15,
                            showa: a15,
                            takasaki: a15,
                            takayama: a15,
                            tamamura: a15,
                            tatebayashi: a15,
                            tomioka: a15,
                            tsukiyono: a15,
                            tsumagoi: a15,
                            ueno: a15,
                            yoshioka: a15
                        }
                    },
                    hiroshima: {
                        $: 1,
                        succ: {
                            asaminami: a15,
                            daiwa: a15,
                            etajima: a15,
                            fuchu: a15,
                            fukuyama: a15,
                            hatsukaichi: a15,
                            higashihiroshima: a15,
                            hongo: a15,
                            jinsekikogen: a15,
                            kaita: a15,
                            kui: a15,
                            kumano: a15,
                            kure: a15,
                            mihara: a15,
                            miyoshi: a15,
                            naka: a15,
                            onomichi: a15,
                            osakikamijima: a15,
                            otake: a15,
                            saka: a15,
                            sera: a15,
                            seranishi: a15,
                            shinichi: a15,
                            shobara: a15,
                            takehara: a15
                        }
                    },
                    hokkaido: {
                        $: 1,
                        succ: {
                            abashiri: a15,
                            abira: a15,
                            aibetsu: a15,
                            akabira: a15,
                            akkeshi: a15,
                            asahikawa: a15,
                            ashibetsu: a15,
                            ashoro: a15,
                            assabu: a15,
                            atsuma: a15,
                            bibai: a15,
                            biei: a15,
                            bifuka: a15,
                            bihoro: a15,
                            biratori: a15,
                            chippubetsu: a15,
                            chitose: a15,
                            date: a15,
                            ebetsu: a15,
                            embetsu: a15,
                            eniwa: a15,
                            erimo: a15,
                            esan: a15,
                            esashi: a15,
                            fukagawa: a15,
                            fukushima: a15,
                            furano: a15,
                            furubira: a15,
                            haboro: a15,
                            hakodate: a15,
                            hamatonbetsu: a15,
                            hidaka: a15,
                            higashikagura: a15,
                            higashikawa: a15,
                            hiroo: a15,
                            hokuryu: a15,
                            hokuto: a15,
                            honbetsu: a15,
                            horokanai: a15,
                            horonobe: a15,
                            ikeda: a15,
                            imakane: a15,
                            ishikari: a15,
                            iwamizawa: a15,
                            iwanai: a15,
                            kamifurano: a15,
                            kamikawa: a15,
                            kamishihoro: a15,
                            kamisunagawa: a15,
                            kamoenai: a15,
                            kayabe: a15,
                            kembuchi: a15,
                            kikonai: a15,
                            kimobetsu: a15,
                            kitahiroshima: a15,
                            kitami: a15,
                            kiyosato: a15,
                            koshimizu: a15,
                            kunneppu: a15,
                            kuriyama: a15,
                            kuromatsunai: a15,
                            kushiro: a15,
                            kutchan: a15,
                            kyowa: a15,
                            mashike: a15,
                            matsumae: a15,
                            mikasa: a15,
                            minamifurano: a15,
                            mombetsu: a15,
                            moseushi: a15,
                            mukawa: a15,
                            muroran: a15,
                            naie: a15,
                            nakagawa: a15,
                            nakasatsunai: a15,
                            nakatombetsu: a15,
                            nanae: a15,
                            nanporo: a15,
                            nayoro: a15,
                            nemuro: a15,
                            niikappu: a15,
                            niki: a15,
                            nishiokoppe: a15,
                            noboribetsu: a15,
                            numata: a15,
                            obihiro: a15,
                            obira: a15,
                            oketo: a15,
                            okoppe: a15,
                            otaru: a15,
                            otobe: a15,
                            otofuke: a15,
                            otoineppu: a15,
                            oumu: a15,
                            ozora: a15,
                            pippu: a15,
                            rankoshi: a15,
                            rebun: a15,
                            rikubetsu: a15,
                            rishiri: a15,
                            rishirifuji: a15,
                            saroma: a15,
                            sarufutsu: a15,
                            shakotan: a15,
                            shari: a15,
                            shibecha: a15,
                            shibetsu: a15,
                            shikabe: a15,
                            shikaoi: a15,
                            shimamaki: a15,
                            shimizu: a15,
                            shimokawa: a15,
                            shinshinotsu: a15,
                            shintoku: a15,
                            shiranuka: a15,
                            shiraoi: a15,
                            shiriuchi: a15,
                            sobetsu: a15,
                            sunagawa: a15,
                            taiki: a15,
                            takasu: a15,
                            takikawa: a15,
                            takinoue: a15,
                            teshikaga: a15,
                            tobetsu: a15,
                            tohma: a15,
                            tomakomai: a15,
                            tomari: a15,
                            toya: a15,
                            toyako: a15,
                            toyotomi: a15,
                            toyoura: a15,
                            tsubetsu: a15,
                            tsukigata: a15,
                            urakawa: a15,
                            urausu: a15,
                            uryu: a15,
                            utashinai: a15,
                            wakkanai: a15,
                            wassamu: a15,
                            yakumo: a15,
                            yoichi: a15
                        }
                    },
                    hyogo: {
                        $: 1,
                        succ: {
                            aioi: a15,
                            akashi: a15,
                            ako: a15,
                            amagasaki: a15,
                            aogaki: a15,
                            asago: a15,
                            ashiya: a15,
                            awaji: a15,
                            fukusaki: a15,
                            goshiki: a15,
                            harima: a15,
                            himeji: a15,
                            ichikawa: a15,
                            inagawa: a15,
                            itami: a15,
                            kakogawa: a15,
                            kamigori: a15,
                            kamikawa: a15,
                            kasai: a15,
                            kasuga: a15,
                            kawanishi: a15,
                            miki: a15,
                            minamiawaji: a15,
                            nishinomiya: a15,
                            nishiwaki: a15,
                            ono: a15,
                            sanda: a15,
                            sannan: a15,
                            sasayama: a15,
                            sayo: a15,
                            shingu: a15,
                            shinonsen: a15,
                            shiso: a15,
                            sumoto: a15,
                            taishi: a15,
                            taka: a15,
                            takarazuka: a15,
                            takasago: a15,
                            takino: a15,
                            tamba: a15,
                            tatsuno: a15,
                            toyooka: a15,
                            yabu: a15,
                            yashiro: a15,
                            yoka: a15,
                            yokawa: a15
                        }
                    },
                    ibaraki: {
                        $: 1,
                        succ: {
                            ami: a15,
                            asahi: a15,
                            bando: a15,
                            chikusei: a15,
                            daigo: a15,
                            fujishiro: a15,
                            hitachi: a15,
                            hitachinaka: a15,
                            hitachiomiya: a15,
                            hitachiota: a15,
                            ibaraki: a15,
                            ina: a15,
                            inashiki: a15,
                            itako: a15,
                            iwama: a15,
                            joso: a15,
                            kamisu: a15,
                            kasama: a15,
                            kashima: a15,
                            kasumigaura: a15,
                            koga: a15,
                            miho: a15,
                            mito: a15,
                            moriya: a15,
                            naka: a15,
                            namegata: a15,
                            oarai: a15,
                            ogawa: a15,
                            omitama: a15,
                            ryugasaki: a15,
                            sakai: a15,
                            sakuragawa: a15,
                            shimodate: a15,
                            shimotsuma: a15,
                            shirosato: a15,
                            sowa: a15,
                            suifu: a15,
                            takahagi: a15,
                            tamatsukuri: a15,
                            tokai: a15,
                            tomobe: a15,
                            tone: a15,
                            toride: a15,
                            tsuchiura: a15,
                            tsukuba: a15,
                            uchihara: a15,
                            ushiku: a15,
                            yachiyo: a15,
                            yamagata: a15,
                            yawara: a15,
                            yuki: a15
                        }
                    },
                    ishikawa: {
                        $: 1,
                        succ: {
                            anamizu: a15,
                            hakui: a15,
                            hakusan: a15,
                            kaga: a15,
                            kahoku: a15,
                            kanazawa: a15,
                            kawakita: a15,
                            komatsu: a15,
                            nakanoto: a15,
                            nanao: a15,
                            nomi: a15,
                            nonoichi: a15,
                            noto: a15,
                            shika: a15,
                            suzu: a15,
                            tsubata: a15,
                            tsurugi: a15,
                            uchinada: a15,
                            wajima: a15
                        }
                    },
                    iwate: {
                        $: 1,
                        succ: {
                            fudai: a15,
                            fujisawa: a15,
                            hanamaki: a15,
                            hiraizumi: a15,
                            hirono: a15,
                            ichinohe: a15,
                            ichinoseki: a15,
                            iwaizumi: a15,
                            iwate: a15,
                            joboji: a15,
                            kamaishi: a15,
                            kanegasaki: a15,
                            karumai: a15,
                            kawai: a15,
                            kitakami: a15,
                            kuji: a15,
                            kunohe: a15,
                            kuzumaki: a15,
                            miyako: a15,
                            mizusawa: a15,
                            morioka: a15,
                            ninohe: a15,
                            noda: a15,
                            ofunato: a15,
                            oshu: a15,
                            otsuchi: a15,
                            rikuzentakata: a15,
                            shiwa: a15,
                            shizukuishi: a15,
                            sumita: a15,
                            tanohata: a15,
                            tono: a15,
                            yahaba: a15,
                            yamada: a15
                        }
                    },
                    kagawa: {
                        $: 1,
                        succ: {
                            ayagawa: a15,
                            higashikagawa: a15,
                            kanonji: a15,
                            kotohira: a15,
                            manno: a15,
                            marugame: a15,
                            mitoyo: a15,
                            naoshima: a15,
                            sanuki: a15,
                            tadotsu: a15,
                            takamatsu: a15,
                            tonosho: a15,
                            uchinomi: a15,
                            utazu: a15,
                            zentsuji: a15
                        }
                    },
                    kagoshima: {
                        $: 1,
                        succ: {
                            akune: a15,
                            amami: a15,
                            hioki: a15,
                            isa: a15,
                            isen: a15,
                            izumi: a15,
                            kagoshima: a15,
                            kanoya: a15,
                            kawanabe: a15,
                            kinko: a15,
                            kouyama: a15,
                            makurazaki: a15,
                            matsumoto: a15,
                            minamitane: a15,
                            nakatane: a15,
                            nishinoomote: a15,
                            satsumasendai: a15,
                            soo: a15,
                            tarumizu: a15,
                            yusui: a15
                        }
                    },
                    kanagawa: {
                        $: 1,
                        succ: {
                            aikawa: a15,
                            atsugi: a15,
                            ayase: a15,
                            chigasaki: a15,
                            ebina: a15,
                            fujisawa: a15,
                            hadano: a15,
                            hakone: a15,
                            hiratsuka: a15,
                            isehara: a15,
                            kaisei: a15,
                            kamakura: a15,
                            kiyokawa: a15,
                            matsuda: a15,
                            minamiashigara: a15,
                            miura: a15,
                            nakai: a15,
                            ninomiya: a15,
                            odawara: a15,
                            oi: a15,
                            oiso: a15,
                            sagamihara: a15,
                            samukawa: a15,
                            tsukui: a15,
                            yamakita: a15,
                            yamato: a15,
                            yokosuka: a15,
                            yugawara: a15,
                            zama: a15,
                            zushi: a15
                        }
                    },
                    kochi: {
                        $: 1,
                        succ: {
                            aki: a15,
                            geisei: a15,
                            hidaka: a15,
                            higashitsuno: a15,
                            ino: a15,
                            kagami: a15,
                            kami: a15,
                            kitagawa: a15,
                            kochi: a15,
                            mihara: a15,
                            motoyama: a15,
                            muroto: a15,
                            nahari: a15,
                            nakamura: a15,
                            nankoku: a15,
                            nishitosa: a15,
                            niyodogawa: a15,
                            ochi: a15,
                            okawa: a15,
                            otoyo: a15,
                            otsuki: a15,
                            sakawa: a15,
                            sukumo: a15,
                            susaki: a15,
                            tosa: a15,
                            tosashimizu: a15,
                            toyo: a15,
                            tsuno: a15,
                            umaji: a15,
                            yasuda: a15,
                            yusuhara: a15
                        }
                    },
                    kumamoto: {
                        $: 1,
                        succ: {
                            amakusa: a15,
                            arao: a15,
                            aso: a15,
                            choyo: a15,
                            gyokuto: a15,
                            kamiamakusa: a15,
                            kikuchi: a15,
                            kumamoto: a15,
                            mashiki: a15,
                            mifune: a15,
                            minamata: a15,
                            minamioguni: a15,
                            nagasu: a15,
                            nishihara: a15,
                            oguni: a15,
                            ozu: a15,
                            sumoto: a15,
                            takamori: a15,
                            uki: a15,
                            uto: a15,
                            yamaga: a15,
                            yamato: a15,
                            yatsushiro: a15
                        }
                    },
                    kyoto: {
                        $: 1,
                        succ: {
                            ayabe: a15,
                            fukuchiyama: a15,
                            higashiyama: a15,
                            ide: a15,
                            ine: a15,
                            joyo: a15,
                            kameoka: a15,
                            kamo: a15,
                            kita: a15,
                            kizu: a15,
                            kumiyama: a15,
                            kyotamba: a15,
                            kyotanabe: a15,
                            kyotango: a15,
                            maizuru: a15,
                            minami: a15,
                            minamiyamashiro: a15,
                            miyazu: a15,
                            muko: a15,
                            nagaokakyo: a15,
                            nakagyo: a15,
                            nantan: a15,
                            oyamazaki: a15,
                            sakyo: a15,
                            seika: a15,
                            tanabe: a15,
                            uji: a15,
                            ujitawara: a15,
                            wazuka: a15,
                            yamashina: a15,
                            yawata: a15
                        }
                    },
                    mie: {
                        $: 1,
                        succ: {
                            asahi: a15,
                            inabe: a15,
                            ise: a15,
                            kameyama: a15,
                            kawagoe: a15,
                            kiho: a15,
                            kisosaki: a15,
                            kiwa: a15,
                            komono: a15,
                            kumano: a15,
                            kuwana: a15,
                            matsusaka: a15,
                            meiwa: a15,
                            mihama: a15,
                            minamiise: a15,
                            misugi: a15,
                            miyama: a15,
                            nabari: a15,
                            shima: a15,
                            suzuka: a15,
                            tado: a15,
                            taiki: a15,
                            taki: a15,
                            tamaki: a15,
                            toba: a15,
                            tsu: a15,
                            udono: a15,
                            ureshino: a15,
                            watarai: a15,
                            yokkaichi: a15
                        }
                    },
                    miyagi: {
                        $: 1,
                        succ: {
                            furukawa: a15,
                            higashimatsushima: a15,
                            ishinomaki: a15,
                            iwanuma: a15,
                            kakuda: a15,
                            kami: a15,
                            kawasaki: a15,
                            marumori: a15,
                            matsushima: a15,
                            minamisanriku: a15,
                            misato: a15,
                            murata: a15,
                            natori: a15,
                            ogawara: a15,
                            ohira: a15,
                            onagawa: a15,
                            osaki: a15,
                            rifu: a15,
                            semine: a15,
                            shibata: a15,
                            shichikashuku: a15,
                            shikama: a15,
                            shiogama: a15,
                            shiroishi: a15,
                            tagajo: a15,
                            taiwa: a15,
                            tome: a15,
                            tomiya: a15,
                            wakuya: a15,
                            watari: a15,
                            yamamoto: a15,
                            zao: a15
                        }
                    },
                    miyazaki: {
                        $: 1,
                        succ: {
                            aya: a15,
                            ebino: a15,
                            gokase: a15,
                            hyuga: a15,
                            kadogawa: a15,
                            kawaminami: a15,
                            kijo: a15,
                            kitagawa: a15,
                            kitakata: a15,
                            kitaura: a15,
                            kobayashi: a15,
                            kunitomi: a15,
                            kushima: a15,
                            mimata: a15,
                            miyakonojo: a15,
                            miyazaki: a15,
                            morotsuka: a15,
                            nichinan: a15,
                            nishimera: a15,
                            nobeoka: a15,
                            saito: a15,
                            shiiba: a15,
                            shintomi: a15,
                            takaharu: a15,
                            takanabe: a15,
                            takazaki: a15,
                            tsuno: a15
                        }
                    },
                    nagano: {
                        $: 1,
                        succ: {
                            achi: a15,
                            agematsu: a15,
                            anan: a15,
                            aoki: a15,
                            asahi: a15,
                            azumino: a15,
                            chikuhoku: a15,
                            chikuma: a15,
                            chino: a15,
                            fujimi: a15,
                            hakuba: a15,
                            hara: a15,
                            hiraya: a15,
                            iida: a15,
                            iijima: a15,
                            iiyama: a15,
                            iizuna: a15,
                            ikeda: a15,
                            ikusaka: a15,
                            ina: a15,
                            karuizawa: a15,
                            kawakami: a15,
                            kiso: a15,
                            kisofukushima: a15,
                            kitaaiki: a15,
                            komagane: a15,
                            komoro: a15,
                            matsukawa: a15,
                            matsumoto: a15,
                            miasa: a15,
                            minamiaiki: a15,
                            minamimaki: a15,
                            minamiminowa: a15,
                            minowa: a15,
                            miyada: a15,
                            miyota: a15,
                            mochizuki: a15,
                            nagano: a15,
                            nagawa: a15,
                            nagiso: a15,
                            nakagawa: a15,
                            nakano: a15,
                            nozawaonsen: a15,
                            obuse: a15,
                            ogawa: a15,
                            okaya: a15,
                            omachi: a15,
                            omi: a15,
                            ookuwa: a15,
                            ooshika: a15,
                            otaki: a15,
                            otari: a15,
                            sakae: a15,
                            sakaki: a15,
                            saku: a15,
                            sakuho: a15,
                            shimosuwa: a15,
                            shinanomachi: a15,
                            shiojiri: a15,
                            suwa: a15,
                            suzaka: a15,
                            takagi: a15,
                            takamori: a15,
                            takayama: a15,
                            tateshina: a15,
                            tatsuno: a15,
                            togakushi: a15,
                            togura: a15,
                            tomi: a15,
                            ueda: a15,
                            wada: a15,
                            yamagata: a15,
                            yamanouchi: a15,
                            yasaka: a15,
                            yasuoka: a15
                        }
                    },
                    nagasaki: {
                        $: 1,
                        succ: {
                            chijiwa: a15,
                            futsu: a15,
                            goto: a15,
                            hasami: a15,
                            hirado: a15,
                            iki: a15,
                            isahaya: a15,
                            kawatana: a15,
                            kuchinotsu: a15,
                            matsuura: a15,
                            nagasaki: a15,
                            obama: a15,
                            omura: a15,
                            oseto: a15,
                            saikai: a15,
                            sasebo: a15,
                            seihi: a15,
                            shimabara: a15,
                            shinkamigoto: a15,
                            togitsu: a15,
                            tsushima: a15,
                            unzen: a15
                        }
                    },
                    nara: {
                        $: 1,
                        succ: {
                            ando: a15,
                            gose: a15,
                            heguri: a15,
                            higashiyoshino: a15,
                            ikaruga: a15,
                            ikoma: a15,
                            kamikitayama: a15,
                            kanmaki: a15,
                            kashiba: a15,
                            kashihara: a15,
                            katsuragi: a15,
                            kawai: a15,
                            kawakami: a15,
                            kawanishi: a15,
                            koryo: a15,
                            kurotaki: a15,
                            mitsue: a15,
                            miyake: a15,
                            nara: a15,
                            nosegawa: a15,
                            oji: a15,
                            ouda: a15,
                            oyodo: a15,
                            sakurai: a15,
                            sango: a15,
                            shimoichi: a15,
                            shimokitayama: a15,
                            shinjo: a15,
                            soni: a15,
                            takatori: a15,
                            tawaramoto: a15,
                            tenkawa: a15,
                            tenri: a15,
                            uda: a15,
                            yamatokoriyama: a15,
                            yamatotakada: a15,
                            yamazoe: a15,
                            yoshino: a15
                        }
                    },
                    niigata: {
                        $: 1,
                        succ: {
                            aga: a15,
                            agano: a15,
                            gosen: a15,
                            itoigawa: a15,
                            izumozaki: a15,
                            joetsu: a15,
                            kamo: a15,
                            kariwa: a15,
                            kashiwazaki: a15,
                            minamiuonuma: a15,
                            mitsuke: a15,
                            muika: a15,
                            murakami: a15,
                            myoko: a15,
                            nagaoka: a15,
                            niigata: a15,
                            ojiya: a15,
                            omi: a15,
                            sado: a15,
                            sanjo: a15,
                            seiro: a15,
                            seirou: a15,
                            sekikawa: a15,
                            shibata: a15,
                            tagami: a15,
                            tainai: a15,
                            tochio: a15,
                            tokamachi: a15,
                            tsubame: a15,
                            tsunan: a15,
                            uonuma: a15,
                            yahiko: a15,
                            yoita: a15,
                            yuzawa: a15
                        }
                    },
                    oita: {
                        $: 1,
                        succ: {
                            beppu: a15,
                            bungoono: a15,
                            bungotakada: a15,
                            hasama: a15,
                            hiji: a15,
                            himeshima: a15,
                            hita: a15,
                            kamitsue: a15,
                            kokonoe: a15,
                            kuju: a15,
                            kunisaki: a15,
                            kusu: a15,
                            oita: a15,
                            saiki: a15,
                            taketa: a15,
                            tsukumi: a15,
                            usa: a15,
                            usuki: a15,
                            yufu: a15
                        }
                    },
                    okayama: {
                        $: 1,
                        succ: {
                            akaiwa: a15,
                            asakuchi: a15,
                            bizen: a15,
                            hayashima: a15,
                            ibara: a15,
                            kagamino: a15,
                            kasaoka: a15,
                            kibichuo: a15,
                            kumenan: a15,
                            kurashiki: a15,
                            maniwa: a15,
                            misaki: a15,
                            nagi: a15,
                            niimi: a15,
                            nishiawakura: a15,
                            okayama: a15,
                            satosho: a15,
                            setouchi: a15,
                            shinjo: a15,
                            shoo: a15,
                            soja: a15,
                            takahashi: a15,
                            tamano: a15,
                            tsuyama: a15,
                            wake: a15,
                            yakage: a15
                        }
                    },
                    okinawa: {
                        $: 1,
                        succ: {
                            aguni: a15,
                            ginowan: a15,
                            ginoza: a15,
                            gushikami: a15,
                            haebaru: a15,
                            higashi: a15,
                            hirara: a15,
                            iheya: a15,
                            ishigaki: a15,
                            ishikawa: a15,
                            itoman: a15,
                            izena: a15,
                            kadena: a15,
                            kin: a15,
                            kitadaito: a15,
                            kitanakagusuku: a15,
                            kumejima: a15,
                            kunigami: a15,
                            minamidaito: a15,
                            motobu: a15,
                            nago: a15,
                            naha: a15,
                            nakagusuku: a15,
                            nakijin: a15,
                            nanjo: a15,
                            nishihara: a15,
                            ogimi: a15,
                            okinawa: a15,
                            onna: a15,
                            shimoji: a15,
                            taketomi: a15,
                            tarama: a15,
                            tokashiki: a15,
                            tomigusuku: a15,
                            tonaki: a15,
                            urasoe: a15,
                            uruma: a15,
                            yaese: a15,
                            yomitan: a15,
                            yonabaru: a15,
                            yonaguni: a15,
                            zamami: a15
                        }
                    },
                    osaka: {
                        $: 1,
                        succ: {
                            abeno: a15,
                            chihayaakasaka: a15,
                            chuo: a15,
                            daito: a15,
                            fujiidera: a15,
                            habikino: a15,
                            hannan: a15,
                            higashiosaka: a15,
                            higashisumiyoshi: a15,
                            higashiyodogawa: a15,
                            hirakata: a15,
                            ibaraki: a15,
                            ikeda: a15,
                            izumi: a15,
                            izumiotsu: a15,
                            izumisano: a15,
                            kadoma: a15,
                            kaizuka: a15,
                            kanan: a15,
                            kashiwara: a15,
                            katano: a15,
                            kawachinagano: a15,
                            kishiwada: a15,
                            kita: a15,
                            kumatori: a15,
                            matsubara: a15,
                            minato: a15,
                            minoh: a15,
                            misaki: a15,
                            moriguchi: a15,
                            neyagawa: a15,
                            nishi: a15,
                            nose: a15,
                            osakasayama: a15,
                            sakai: a15,
                            sayama: a15,
                            sennan: a15,
                            settsu: a15,
                            shijonawate: a15,
                            shimamoto: a15,
                            suita: a15,
                            tadaoka: a15,
                            taishi: a15,
                            tajiri: a15,
                            takaishi: a15,
                            takatsuki: a15,
                            tondabayashi: a15,
                            toyonaka: a15,
                            toyono: a15,
                            yao: a15
                        }
                    },
                    saga: {
                        $: 1,
                        succ: {
                            ariake: a15,
                            arita: a15,
                            fukudomi: a15,
                            genkai: a15,
                            hamatama: a15,
                            hizen: a15,
                            imari: a15,
                            kamimine: a15,
                            kanzaki: a15,
                            karatsu: a15,
                            kashima: a15,
                            kitagata: a15,
                            kitahata: a15,
                            kiyama: a15,
                            kouhoku: a15,
                            kyuragi: a15,
                            nishiarita: a15,
                            ogi: a15,
                            omachi: a15,
                            ouchi: a15,
                            saga: a15,
                            shiroishi: a15,
                            taku: a15,
                            tara: a15,
                            tosu: a15,
                            yoshinogari: a15
                        }
                    },
                    saitama: {
                        $: 1,
                        succ: {
                            arakawa: a15,
                            asaka: a15,
                            chichibu: a15,
                            fujimi: a15,
                            fujimino: a15,
                            fukaya: a15,
                            hanno: a15,
                            hanyu: a15,
                            hasuda: a15,
                            hatogaya: a15,
                            hatoyama: a15,
                            hidaka: a15,
                            higashichichibu: a15,
                            higashimatsuyama: a15,
                            honjo: a15,
                            ina: a15,
                            iruma: a15,
                            iwatsuki: a15,
                            kamiizumi: a15,
                            kamikawa: a15,
                            kamisato: a15,
                            kasukabe: a15,
                            kawagoe: a15,
                            kawaguchi: a15,
                            kawajima: a15,
                            kazo: a15,
                            kitamoto: a15,
                            koshigaya: a15,
                            kounosu: a15,
                            kuki: a15,
                            kumagaya: a15,
                            matsubushi: a15,
                            minano: a15,
                            misato: a15,
                            miyashiro: a15,
                            miyoshi: a15,
                            moroyama: a15,
                            nagatoro: a15,
                            namegawa: a15,
                            niiza: a15,
                            ogano: a15,
                            ogawa: a15,
                            ogose: a15,
                            okegawa: a15,
                            omiya: a15,
                            otaki: a15,
                            ranzan: a15,
                            ryokami: a15,
                            saitama: a15,
                            sakado: a15,
                            satte: a15,
                            sayama: a15,
                            shiki: a15,
                            shiraoka: a15,
                            soka: a15,
                            sugito: a15,
                            toda: a15,
                            tokigawa: a15,
                            tokorozawa: a15,
                            tsurugashima: a15,
                            urawa: a15,
                            warabi: a15,
                            yashio: a15,
                            yokoze: a15,
                            yono: a15,
                            yorii: a15,
                            yoshida: a15,
                            yoshikawa: a15,
                            yoshimi: a15
                        }
                    },
                    shiga: {
                        $: 1,
                        succ: {
                            aisho: a15,
                            gamo: a15,
                            higashiomi: a15,
                            hikone: a15,
                            koka: a15,
                            konan: a15,
                            kosei: a15,
                            koto: a15,
                            kusatsu: a15,
                            maibara: a15,
                            moriyama: a15,
                            nagahama: a15,
                            nishiazai: a15,
                            notogawa: a15,
                            omihachiman: a15,
                            otsu: a15,
                            ritto: a15,
                            ryuoh: a15,
                            takashima: a15,
                            takatsuki: a15,
                            torahime: a15,
                            toyosato: a15,
                            yasu: a15
                        }
                    },
                    shimane: {
                        $: 1,
                        succ: {
                            akagi: a15,
                            ama: a15,
                            gotsu: a15,
                            hamada: a15,
                            higashiizumo: a15,
                            hikawa: a15,
                            hikimi: a15,
                            izumo: a15,
                            kakinoki: a15,
                            masuda: a15,
                            matsue: a15,
                            misato: a15,
                            nishinoshima: a15,
                            ohda: a15,
                            okinoshima: a15,
                            okuizumo: a15,
                            shimane: a15,
                            tamayu: a15,
                            tsuwano: a15,
                            unnan: a15,
                            yakumo: a15,
                            yasugi: a15,
                            yatsuka: a15
                        }
                    },
                    shizuoka: {
                        $: 1,
                        succ: {
                            arai: a15,
                            atami: a15,
                            fuji: a15,
                            fujieda: a15,
                            fujikawa: a15,
                            fujinomiya: a15,
                            fukuroi: a15,
                            gotemba: a15,
                            haibara: a15,
                            hamamatsu: a15,
                            higashiizu: a15,
                            ito: a15,
                            iwata: a15,
                            izu: a15,
                            izunokuni: a15,
                            kakegawa: a15,
                            kannami: a15,
                            kawanehon: a15,
                            kawazu: a15,
                            kikugawa: a15,
                            kosai: a15,
                            makinohara: a15,
                            matsuzaki: a15,
                            minamiizu: a15,
                            mishima: a15,
                            morimachi: a15,
                            nishiizu: a15,
                            numazu: a15,
                            omaezaki: a15,
                            shimada: a15,
                            shimizu: a15,
                            shimoda: a15,
                            shizuoka: a15,
                            susono: a15,
                            yaizu: a15,
                            yoshida: a15
                        }
                    },
                    tochigi: {
                        $: 1,
                        succ: {
                            ashikaga: a15,
                            bato: a15,
                            haga: a15,
                            ichikai: a15,
                            iwafune: a15,
                            kaminokawa: a15,
                            kanuma: a15,
                            karasuyama: a15,
                            kuroiso: a15,
                            mashiko: a15,
                            mibu: a15,
                            moka: a15,
                            motegi: a15,
                            nasu: a15,
                            nasushiobara: a15,
                            nikko: a15,
                            nishikata: a15,
                            nogi: a15,
                            ohira: a15,
                            ohtawara: a15,
                            oyama: a15,
                            sakura: a15,
                            sano: a15,
                            shimotsuke: a15,
                            shioya: a15,
                            takanezawa: a15,
                            tochigi: a15,
                            tsuga: a15,
                            ujiie: a15,
                            utsunomiya: a15,
                            yaita: a15
                        }
                    },
                    tokushima: {
                        $: 1,
                        succ: {
                            aizumi: a15,
                            anan: a15,
                            ichiba: a15,
                            itano: a15,
                            kainan: a15,
                            komatsushima: a15,
                            matsushige: a15,
                            mima: a15,
                            minami: a15,
                            miyoshi: a15,
                            mugi: a15,
                            nakagawa: a15,
                            naruto: a15,
                            sanagochi: a15,
                            shishikui: a15,
                            tokushima: a15,
                            wajiki: a15
                        }
                    },
                    tokyo: {
                        $: 1,
                        succ: {
                            adachi: a15,
                            akiruno: a15,
                            akishima: a15,
                            aogashima: a15,
                            arakawa: a15,
                            bunkyo: a15,
                            chiyoda: a15,
                            chofu: a15,
                            chuo: a15,
                            edogawa: a15,
                            fuchu: a15,
                            fussa: a15,
                            hachijo: a15,
                            hachioji: a15,
                            hamura: a15,
                            higashikurume: a15,
                            higashimurayama: a15,
                            higashiyamato: a15,
                            hino: a15,
                            hinode: a15,
                            hinohara: a15,
                            inagi: a15,
                            itabashi: a15,
                            katsushika: a15,
                            kita: a15,
                            kiyose: a15,
                            kodaira: a15,
                            koganei: a15,
                            kokubunji: a15,
                            komae: a15,
                            koto: a15,
                            kouzushima: a15,
                            kunitachi: a15,
                            machida: a15,
                            meguro: a15,
                            minato: a15,
                            mitaka: a15,
                            mizuho: a15,
                            musashimurayama: a15,
                            musashino: a15,
                            nakano: a15,
                            nerima: a15,
                            ogasawara: a15,
                            okutama: a15,
                            ome: a15,
                            oshima: a15,
                            ota: a15,
                            setagaya: a15,
                            shibuya: a15,
                            shinagawa: a15,
                            shinjuku: a15,
                            suginami: a15,
                            sumida: a15,
                            tachikawa: a15,
                            taito: a15,
                            tama: a15,
                            toshima: a15
                        }
                    },
                    tottori: {
                        $: 1,
                        succ: {
                            chizu: a15,
                            hino: a15,
                            kawahara: a15,
                            koge: a15,
                            kotoura: a15,
                            misasa: a15,
                            nanbu: a15,
                            nichinan: a15,
                            sakaiminato: a15,
                            tottori: a15,
                            wakasa: a15,
                            yazu: a15,
                            yonago: a15
                        }
                    },
                    toyama: {
                        $: 1,
                        succ: {
                            asahi: a15,
                            fuchu: a15,
                            fukumitsu: a15,
                            funahashi: a15,
                            himi: a15,
                            imizu: a15,
                            inami: a15,
                            johana: a15,
                            kamiichi: a15,
                            kurobe: a15,
                            nakaniikawa: a15,
                            namerikawa: a15,
                            nanto: a15,
                            nyuzen: a15,
                            oyabe: a15,
                            taira: a15,
                            takaoka: a15,
                            tateyama: a15,
                            toga: a15,
                            tonami: a15,
                            toyama: a15,
                            unazuki: a15,
                            uozu: a15,
                            yamada: a15
                        }
                    },
                    wakayama: {
                        $: 1,
                        succ: {
                            arida: a15,
                            aridagawa: a15,
                            gobo: a15,
                            hashimoto: a15,
                            hidaka: a15,
                            hirogawa: a15,
                            inami: a15,
                            iwade: a15,
                            kainan: a15,
                            kamitonda: a15,
                            katsuragi: a15,
                            kimino: a15,
                            kinokawa: a15,
                            kitayama: a15,
                            koya: a15,
                            koza: a15,
                            kozagawa: a15,
                            kudoyama: a15,
                            kushimoto: a15,
                            mihama: a15,
                            misato: a15,
                            nachikatsuura: a15,
                            shingu: a15,
                            shirahama: a15,
                            taiji: a15,
                            tanabe: a15,
                            wakayama: a15,
                            yuasa: a15,
                            yura: a15
                        }
                    },
                    yamagata: {
                        $: 1,
                        succ: {
                            asahi: a15,
                            funagata: a15,
                            higashine: a15,
                            iide: a15,
                            kahoku: a15,
                            kaminoyama: a15,
                            kaneyama: a15,
                            kawanishi: a15,
                            mamurogawa: a15,
                            mikawa: a15,
                            murayama: a15,
                            nagai: a15,
                            nakayama: a15,
                            nanyo: a15,
                            nishikawa: a15,
                            obanazawa: a15,
                            oe: a15,
                            oguni: a15,
                            ohkura: a15,
                            oishida: a15,
                            sagae: a15,
                            sakata: a15,
                            sakegawa: a15,
                            shinjo: a15,
                            shirataka: a15,
                            shonai: a15,
                            takahata: a15,
                            tendo: a15,
                            tozawa: a15,
                            tsuruoka: a15,
                            yamagata: a15,
                            yamanobe: a15,
                            yonezawa: a15,
                            yuza: a15
                        }
                    },
                    yamaguchi: {
                        $: 1,
                        succ: {
                            abu: a15,
                            hagi: a15,
                            hikari: a15,
                            hofu: a15,
                            iwakuni: a15,
                            kudamatsu: a15,
                            mitou: a15,
                            nagato: a15,
                            oshima: a15,
                            shimonoseki: a15,
                            shunan: a15,
                            tabuse: a15,
                            tokuyama: a15,
                            toyota: a15,
                            ube: a15,
                            yuu: a15
                        }
                    },
                    yamanashi: {
                        $: 1,
                        succ: {
                            chuo: a15,
                            doshi: a15,
                            fuefuki: a15,
                            fujikawa: a15,
                            fujikawaguchiko: a15,
                            fujiyoshida: a15,
                            hayakawa: a15,
                            hokuto: a15,
                            ichikawamisato: a15,
                            kai: a15,
                            kofu: a15,
                            koshu: a15,
                            kosuge: a15,
                            "minami-alps": a15,
                            minobu: a15,
                            nakamichi: a15,
                            nanbu: a15,
                            narusawa: a15,
                            nirasaki: a15,
                            nishikatsura: a15,
                            oshino: a15,
                            otsuki: a15,
                            showa: a15,
                            tabayama: a15,
                            tsuru: a15,
                            uenohara: a15,
                            yamanakako: a15,
                            yamanashi: a15
                        }
                    },
                    "xn--4pvxs": a15,
                    "栃木": a15,
                    "xn--vgu402c": a15,
                    "愛知": a15,
                    "xn--c3s14m": a15,
                    "愛媛": a15,
                    "xn--f6qx53a": a15,
                    "兵庫": a15,
                    "xn--8pvr4u": a15,
                    "熊本": a15,
                    "xn--uist22h": a15,
                    "茨城": a15,
                    "xn--djrs72d6uy": a15,
                    "北海道": a15,
                    "xn--mkru45i": a15,
                    "千葉": a15,
                    "xn--0trq7p7nn": a15,
                    "和歌山": a15,
                    "xn--8ltr62k": a15,
                    "長崎": a15,
                    "xn--2m4a15e": a15,
                    "長野": a15,
                    "xn--efvn9s": a15,
                    "新潟": a15,
                    "xn--32vp30h": a15,
                    "青森": a15,
                    "xn--4it797k": a15,
                    "静岡": a15,
                    "xn--1lqs71d": a15,
                    "東京": a15,
                    "xn--5rtp49c": a15,
                    "石川": a15,
                    "xn--5js045d": a15,
                    "埼玉": a15,
                    "xn--ehqz56n": a15,
                    "三重": a15,
                    "xn--1lqs03n": a15,
                    "京都": a15,
                    "xn--qqqt11m": a15,
                    "佐賀": a15,
                    "xn--kbrq7o": a15,
                    "大分": a15,
                    "xn--pssu33l": a15,
                    "大阪": a15,
                    "xn--ntsq17g": a15,
                    "奈良": a15,
                    "xn--uisz3g": a15,
                    "宮城": a15,
                    "xn--6btw5a": a15,
                    "宮崎": a15,
                    "xn--1ctwo": a15,
                    "富山": a15,
                    "xn--6orx2r": a15,
                    "山口": a15,
                    "xn--rht61e": a15,
                    "山形": a15,
                    "xn--rht27z": a15,
                    "山梨": a15,
                    "xn--djty4k": a15,
                    "岩手": a15,
                    "xn--nit225k": a15,
                    "岐阜": a15,
                    "xn--rht3d": a15,
                    "岡山": a15,
                    "xn--klty5x": a15,
                    "島根": a15,
                    "xn--kltx9a": a15,
                    "広島": a15,
                    "xn--kltp7d": a15,
                    "徳島": a15,
                    "xn--uuwu58a": a15,
                    "沖縄": a15,
                    "xn--zbx025d": a15,
                    "滋賀": a15,
                    "xn--ntso0iqx3a": a15,
                    "神奈川": a15,
                    "xn--elqq16h": a15,
                    "福井": a15,
                    "xn--4it168d": a15,
                    "福岡": a15,
                    "xn--klt787d": a15,
                    "福島": a15,
                    "xn--rny31h": a15,
                    "秋田": a15,
                    "xn--7t0a264c": a15,
                    "群馬": a15,
                    "xn--5rtq34k": a15,
                    "香川": a15,
                    "xn--k7yn95e": a15,
                    "高知": a15,
                    "xn--tor131o": a15,
                    "鳥取": a15,
                    "xn--d5qv7z876c": a15,
                    "鹿児島": a15,
                    kawasaki: r6,
                    kitakyushu: r6,
                    kobe: r6,
                    nagoya: r6,
                    sapporo: r6,
                    sendai: r6,
                    yokohama: r6,
                    buyshop: o16,
                    fashionstore: o16,
                    handcrafted: o16,
                    kawaiishop: o16,
                    supersale: o16,
                    theshop: o16,
                    usercontent: o16,
                    angry: o16,
                    babyblue: o16,
                    babymilk: o16,
                    backdrop: o16,
                    bambina: o16,
                    bitter: o16,
                    blush: o16,
                    boo: o16,
                    boy: o16,
                    boyfriend: o16,
                    but: o16,
                    candypop: o16,
                    capoo: o16,
                    catfood: o16,
                    cheap: o16,
                    chicappa: o16,
                    chillout: o16,
                    chips: o16,
                    chowder: o16,
                    chu: o16,
                    ciao: o16,
                    cocotte: o16,
                    coolblog: o16,
                    cranky: o16,
                    cutegirl: o16,
                    daa: o16,
                    deca: o16,
                    deci: o16,
                    digick: o16,
                    egoism: o16,
                    fakefur: o16,
                    fem: o16,
                    flier: o16,
                    floppy: o16,
                    fool: o16,
                    frenchkiss: o16,
                    girlfriend: o16,
                    girly: o16,
                    gloomy: o16,
                    gonna: o16,
                    greater: o16,
                    hacca: o16,
                    heavy: o16,
                    her: o16,
                    hiho: o16,
                    hippy: o16,
                    holy: o16,
                    hungry: o16,
                    icurus: o16,
                    itigo: o16,
                    jellybean: o16,
                    kikirara: o16,
                    kill: o16,
                    kilo: o16,
                    kuron: o16,
                    littlestar: o16,
                    lolipopmc: o16,
                    lolitapunk: o16,
                    lomo: o16,
                    lovepop: o16,
                    lovesick: o16,
                    main: o16,
                    mods: o16,
                    mond: o16,
                    mongolian: o16,
                    moo: o16,
                    namaste: o16,
                    nikita: o16,
                    nobushi: o16,
                    noor: o16,
                    oops: o16,
                    parallel: o16,
                    parasite: o16,
                    pecori: o16,
                    peewee: o16,
                    penne: o16,
                    pepper: o16,
                    perma: o16,
                    pigboat: o16,
                    pinoko: o16,
                    punyu: o16,
                    pupu: o16,
                    pussycat: o16,
                    pya: o16,
                    raindrop: o16,
                    readymade: o16,
                    sadist: o16,
                    schoolbus: o16,
                    secret: o16,
                    staba: o16,
                    stripper: o16,
                    sub: o16,
                    sunnyday: o16,
                    thick: o16,
                    tonkotsu: o16,
                    under: o16,
                    upper: o16,
                    velvet: o16,
                    verse: o16,
                    versus: o16,
                    vivian: o16,
                    watson: o16,
                    weblike: o16,
                    whitesnow: o16,
                    zombie: o16,
                    blogspot: o16
                }
            },
            ke: {
                $: 1,
                succ: {
                    ac: a15,
                    co: s8,
                    go: a15,
                    info: a15,
                    me: a15,
                    mobi: a15,
                    ne: a15,
                    or: a15,
                    sc: a15
                }
            },
            kg: {
                $: 1,
                succ: {
                    org: a15,
                    net: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    mil: a15,
                    blog: o16,
                    io: o16,
                    jp: o16,
                    tv: o16,
                    uk: o16,
                    us: o16
                }
            },
            kh: r6,
            ki: P,
            km: {
                $: 1,
                succ: {
                    org: a15,
                    nom: a15,
                    gov: a15,
                    prd: a15,
                    tm: a15,
                    edu: a15,
                    mil: a15,
                    ass: a15,
                    com: a15,
                    coop: a15,
                    asso: a15,
                    presse: a15,
                    medecin: a15,
                    notaires: a15,
                    pharmaciens: a15,
                    veterinaire: a15,
                    gouv: a15
                }
            },
            kn: {
                $: 1,
                succ: {
                    net: a15,
                    org: a15,
                    edu: a15,
                    gov: a15
                }
            },
            kp: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    org: a15,
                    rep: a15,
                    tra: a15
                }
            },
            kr: {
                $: 1,
                succ: {
                    ac: a15,
                    co: a15,
                    es: a15,
                    go: a15,
                    hs: a15,
                    kg: a15,
                    mil: a15,
                    ms: a15,
                    ne: a15,
                    or: a15,
                    pe: a15,
                    re: a15,
                    sc: a15,
                    busan: a15,
                    chungbuk: a15,
                    chungnam: a15,
                    daegu: a15,
                    daejeon: a15,
                    gangwon: a15,
                    gwangju: a15,
                    gyeongbuk: a15,
                    gyeonggi: a15,
                    gyeongnam: a15,
                    incheon: a15,
                    jeju: a15,
                    jeonbuk: a15,
                    jeonnam: a15,
                    seoul: a15,
                    ulsan: a15,
                    blogspot: o16
                }
            },
            kw: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    emb: a15,
                    gov: a15,
                    ind: a15,
                    net: a15,
                    org: a15
                }
            },
            ky: w,
            kz: {
                $: 1,
                succ: {
                    org: a15,
                    edu: a15,
                    net: a15,
                    gov: a15,
                    mil: a15,
                    com: a15,
                    jcloud: o16,
                    kazteleport: {
                        $: 0,
                        succ: {
                            upaas: o16
                        }
                    }
                }
            },
            la: {
                $: 1,
                succ: {
                    int: a15,
                    net: a15,
                    info: a15,
                    edu: a15,
                    gov: a15,
                    per: a15,
                    com: a15,
                    org: a15,
                    bnr: o16,
                    c: o16
                }
            },
            lb: i12,
            lc: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    co: a15,
                    org: a15,
                    edu: a15,
                    gov: a15,
                    oy: o16
                }
            },
            li: {
                $: 1,
                succ: {
                    blogspot: o16,
                    caa: o16
                }
            },
            lk: {
                $: 1,
                succ: {
                    gov: a15,
                    sch: a15,
                    net: a15,
                    int: a15,
                    com: a15,
                    org: a15,
                    edu: a15,
                    ngo: a15,
                    soc: a15,
                    web: a15,
                    ltd: a15,
                    assn: a15,
                    grp: a15,
                    hotel: a15,
                    ac: a15
                }
            },
            lr: i12,
            ls: {
                $: 1,
                succ: {
                    ac: a15,
                    biz: a15,
                    co: a15,
                    edu: a15,
                    gov: a15,
                    info: a15,
                    net: a15,
                    org: a15,
                    sc: a15,
                    de: o16
                }
            },
            lt: A,
            lu: s8,
            lv: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    org: a15,
                    mil: a15,
                    id: a15,
                    net: a15,
                    asn: a15,
                    conf: a15
                }
            },
            ly: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    gov: a15,
                    plc: a15,
                    edu: a15,
                    sch: a15,
                    med: a15,
                    org: a15,
                    id: a15
                }
            },
            ma: {
                $: 1,
                succ: {
                    co: a15,
                    net: a15,
                    gov: a15,
                    org: a15,
                    ac: a15,
                    press: a15
                }
            },
            mc: {
                $: 1,
                succ: {
                    tm: a15,
                    asso: a15
                }
            },
            md: {
                $: 1,
                succ: {
                    blogspot: o16,
                    at: o16,
                    de: o16,
                    jp: o16,
                    to: o16
                }
            },
            me: {
                $: 1,
                succ: {
                    co: a15,
                    net: a15,
                    org: a15,
                    edu: a15,
                    ac: a15,
                    gov: a15,
                    its: a15,
                    priv: a15,
                    c66: o16,
                    daplie: {
                        $: 2,
                        succ: {
                            localhost: o16
                        }
                    },
                    edgestack: o16,
                    filegear: o16,
                    "filegear-au": o16,
                    "filegear-de": o16,
                    "filegear-gb": o16,
                    "filegear-ie": o16,
                    "filegear-jp": o16,
                    "filegear-sg": o16,
                    glitch: o16,
                    ravendb: o16,
                    lohmus: o16,
                    barsy: o16,
                    mcpe: o16,
                    mcdir: o16,
                    soundcast: o16,
                    tcp4: o16,
                    brasilia: o16,
                    ddns: o16,
                    dnsfor: o16,
                    hopto: o16,
                    loginto: o16,
                    noip: o16,
                    webhop: o16,
                    vp4: o16,
                    diskstation: o16,
                    dscloud: o16,
                    i234: o16,
                    myds: o16,
                    synology: o16,
                    tbits: o16,
                    transip: v,
                    wedeploy: o16,
                    yombo: o16,
                    nohost: o16
                }
            },
            mg: {
                $: 1,
                succ: {
                    org: a15,
                    nom: a15,
                    gov: a15,
                    prd: a15,
                    tm: a15,
                    edu: a15,
                    mil: a15,
                    com: a15,
                    co: a15
                }
            },
            mh: a15,
            mil: a15,
            mk: {
                $: 1,
                succ: {
                    com: a15,
                    org: a15,
                    net: a15,
                    edu: a15,
                    gov: a15,
                    inf: a15,
                    name: a15,
                    blogspot: o16
                }
            },
            ml: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gouv: a15,
                    gov: a15,
                    net: a15,
                    org: a15,
                    presse: a15
                }
            },
            mm: r6,
            mn: {
                $: 1,
                succ: {
                    gov: a15,
                    edu: a15,
                    org: a15,
                    nyc: o16
                }
            },
            mo: i12,
            mobi: {
                $: 1,
                succ: {
                    barsy: o16,
                    dscloud: o16
                }
            },
            mp: {
                $: 1,
                succ: {
                    ju: o16
                }
            },
            mq: a15,
            mr: A,
            ms: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    net: a15,
                    org: a15,
                    lab: o16,
                    minisite: o16
                }
            },
            mt: {
                $: 1,
                succ: {
                    com: s8,
                    edu: a15,
                    net: a15,
                    org: a15
                }
            },
            mu: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    gov: a15,
                    ac: a15,
                    co: a15,
                    or: a15
                }
            },
            museum: {
                $: 1,
                succ: {
                    academy: a15,
                    agriculture: a15,
                    air: a15,
                    airguard: a15,
                    alabama: a15,
                    alaska: a15,
                    amber: a15,
                    ambulance: a15,
                    american: a15,
                    americana: a15,
                    americanantiques: a15,
                    americanart: a15,
                    amsterdam: a15,
                    and: a15,
                    annefrank: a15,
                    anthro: a15,
                    anthropology: a15,
                    antiques: a15,
                    aquarium: a15,
                    arboretum: a15,
                    archaeological: a15,
                    archaeology: a15,
                    architecture: a15,
                    art: a15,
                    artanddesign: a15,
                    artcenter: a15,
                    artdeco: a15,
                    arteducation: a15,
                    artgallery: a15,
                    arts: a15,
                    artsandcrafts: a15,
                    asmatart: a15,
                    assassination: a15,
                    assisi: a15,
                    association: a15,
                    astronomy: a15,
                    atlanta: a15,
                    austin: a15,
                    australia: a15,
                    automotive: a15,
                    aviation: a15,
                    axis: a15,
                    badajoz: a15,
                    baghdad: a15,
                    bahn: a15,
                    bale: a15,
                    baltimore: a15,
                    barcelona: a15,
                    baseball: a15,
                    basel: a15,
                    baths: a15,
                    bauern: a15,
                    beauxarts: a15,
                    beeldengeluid: a15,
                    bellevue: a15,
                    bergbau: a15,
                    berkeley: a15,
                    berlin: a15,
                    bern: a15,
                    bible: a15,
                    bilbao: a15,
                    bill: a15,
                    birdart: a15,
                    birthplace: a15,
                    bonn: a15,
                    boston: a15,
                    botanical: a15,
                    botanicalgarden: a15,
                    botanicgarden: a15,
                    botany: a15,
                    brandywinevalley: a15,
                    brasil: a15,
                    bristol: a15,
                    british: a15,
                    britishcolumbia: a15,
                    broadcast: a15,
                    brunel: a15,
                    brussel: a15,
                    brussels: a15,
                    bruxelles: a15,
                    building: a15,
                    burghof: a15,
                    bus: a15,
                    bushey: a15,
                    cadaques: a15,
                    california: a15,
                    cambridge: a15,
                    can: a15,
                    canada: a15,
                    capebreton: a15,
                    carrier: a15,
                    cartoonart: a15,
                    casadelamoneda: a15,
                    castle: a15,
                    castres: a15,
                    celtic: a15,
                    center: a15,
                    chattanooga: a15,
                    cheltenham: a15,
                    chesapeakebay: a15,
                    chicago: a15,
                    children: a15,
                    childrens: a15,
                    childrensgarden: a15,
                    chiropractic: a15,
                    chocolate: a15,
                    christiansburg: a15,
                    cincinnati: a15,
                    cinema: a15,
                    circus: a15,
                    civilisation: a15,
                    civilization: a15,
                    civilwar: a15,
                    clinton: a15,
                    clock: a15,
                    coal: a15,
                    coastaldefence: a15,
                    cody: a15,
                    coldwar: a15,
                    collection: a15,
                    colonialwilliamsburg: a15,
                    coloradoplateau: a15,
                    columbia: a15,
                    columbus: a15,
                    communication: a15,
                    communications: a15,
                    community: a15,
                    computer: a15,
                    computerhistory: a15,
                    "xn--comunicaes-v6a2o": a15,
                    "comunicações": a15,
                    contemporary: a15,
                    contemporaryart: a15,
                    convent: a15,
                    copenhagen: a15,
                    corporation: a15,
                    "xn--correios-e-telecomunicaes-ghc29a": a15,
                    "correios-e-telecomunicações": a15,
                    corvette: a15,
                    costume: a15,
                    countryestate: a15,
                    county: a15,
                    crafts: a15,
                    cranbrook: a15,
                    creation: a15,
                    cultural: a15,
                    culturalcenter: a15,
                    culture: a15,
                    cyber: a15,
                    cymru: a15,
                    dali: a15,
                    dallas: a15,
                    database: a15,
                    ddr: a15,
                    decorativearts: a15,
                    delaware: a15,
                    delmenhorst: a15,
                    denmark: a15,
                    depot: a15,
                    design: a15,
                    detroit: a15,
                    dinosaur: a15,
                    discovery: a15,
                    dolls: a15,
                    donostia: a15,
                    durham: a15,
                    eastafrica: a15,
                    eastcoast: a15,
                    education: a15,
                    educational: a15,
                    egyptian: a15,
                    eisenbahn: a15,
                    elburg: a15,
                    elvendrell: a15,
                    embroidery: a15,
                    encyclopedic: a15,
                    england: a15,
                    entomology: a15,
                    environment: a15,
                    environmentalconservation: a15,
                    epilepsy: a15,
                    essex: a15,
                    estate: a15,
                    ethnology: a15,
                    exeter: a15,
                    exhibition: a15,
                    family: a15,
                    farm: a15,
                    farmequipment: a15,
                    farmers: a15,
                    farmstead: a15,
                    field: a15,
                    figueres: a15,
                    filatelia: a15,
                    film: a15,
                    fineart: a15,
                    finearts: a15,
                    finland: a15,
                    flanders: a15,
                    florida: a15,
                    force: a15,
                    fortmissoula: a15,
                    fortworth: a15,
                    foundation: a15,
                    francaise: a15,
                    frankfurt: a15,
                    franziskaner: a15,
                    freemasonry: a15,
                    freiburg: a15,
                    fribourg: a15,
                    frog: a15,
                    fundacio: a15,
                    furniture: a15,
                    gallery: a15,
                    garden: a15,
                    gateway: a15,
                    geelvinck: a15,
                    gemological: a15,
                    geology: a15,
                    georgia: a15,
                    giessen: a15,
                    glas: a15,
                    glass: a15,
                    gorge: a15,
                    grandrapids: a15,
                    graz: a15,
                    guernsey: a15,
                    halloffame: a15,
                    hamburg: a15,
                    handson: a15,
                    harvestcelebration: a15,
                    hawaii: a15,
                    health: a15,
                    heimatunduhren: a15,
                    hellas: a15,
                    helsinki: a15,
                    hembygdsforbund: a15,
                    heritage: a15,
                    histoire: a15,
                    historical: a15,
                    historicalsociety: a15,
                    historichouses: a15,
                    historisch: a15,
                    historisches: a15,
                    history: a15,
                    historyofscience: a15,
                    horology: a15,
                    house: a15,
                    humanities: a15,
                    illustration: a15,
                    imageandsound: a15,
                    indian: a15,
                    indiana: a15,
                    indianapolis: a15,
                    indianmarket: a15,
                    intelligence: a15,
                    interactive: a15,
                    iraq: a15,
                    iron: a15,
                    isleofman: a15,
                    jamison: a15,
                    jefferson: a15,
                    jerusalem: a15,
                    jewelry: a15,
                    jewish: a15,
                    jewishart: a15,
                    jfk: a15,
                    journalism: a15,
                    judaica: a15,
                    judygarland: a15,
                    juedisches: a15,
                    juif: a15,
                    karate: a15,
                    karikatur: a15,
                    kids: a15,
                    koebenhavn: a15,
                    koeln: a15,
                    kunst: a15,
                    kunstsammlung: a15,
                    kunstunddesign: a15,
                    labor: a15,
                    labour: a15,
                    lajolla: a15,
                    lancashire: a15,
                    landes: a15,
                    lans: a15,
                    "xn--lns-qla": a15,
                    "läns": a15,
                    larsson: a15,
                    lewismiller: a15,
                    lincoln: a15,
                    linz: a15,
                    living: a15,
                    livinghistory: a15,
                    localhistory: a15,
                    london: a15,
                    losangeles: a15,
                    louvre: a15,
                    loyalist: a15,
                    lucerne: a15,
                    luxembourg: a15,
                    luzern: a15,
                    mad: a15,
                    madrid: a15,
                    mallorca: a15,
                    manchester: a15,
                    mansion: a15,
                    mansions: a15,
                    manx: a15,
                    marburg: a15,
                    maritime: a15,
                    maritimo: a15,
                    maryland: a15,
                    marylhurst: a15,
                    media: a15,
                    medical: a15,
                    medizinhistorisches: a15,
                    meeres: a15,
                    memorial: a15,
                    mesaverde: a15,
                    michigan: a15,
                    midatlantic: a15,
                    military: a15,
                    mill: a15,
                    miners: a15,
                    mining: a15,
                    minnesota: a15,
                    missile: a15,
                    missoula: a15,
                    modern: a15,
                    moma: a15,
                    money: a15,
                    monmouth: a15,
                    monticello: a15,
                    montreal: a15,
                    moscow: a15,
                    motorcycle: a15,
                    muenchen: a15,
                    muenster: a15,
                    mulhouse: a15,
                    muncie: a15,
                    museet: a15,
                    museumcenter: a15,
                    museumvereniging: a15,
                    music: a15,
                    national: a15,
                    nationalfirearms: a15,
                    nationalheritage: a15,
                    nativeamerican: a15,
                    naturalhistory: a15,
                    naturalhistorymuseum: a15,
                    naturalsciences: a15,
                    nature: a15,
                    naturhistorisches: a15,
                    natuurwetenschappen: a15,
                    naumburg: a15,
                    naval: a15,
                    nebraska: a15,
                    neues: a15,
                    newhampshire: a15,
                    newjersey: a15,
                    newmexico: a15,
                    newport: a15,
                    newspaper: a15,
                    newyork: a15,
                    niepce: a15,
                    norfolk: a15,
                    north: a15,
                    nrw: a15,
                    nyc: a15,
                    nyny: a15,
                    oceanographic: a15,
                    oceanographique: a15,
                    omaha: a15,
                    online: a15,
                    ontario: a15,
                    openair: a15,
                    oregon: a15,
                    oregontrail: a15,
                    otago: a15,
                    oxford: a15,
                    pacific: a15,
                    paderborn: a15,
                    palace: a15,
                    paleo: a15,
                    palmsprings: a15,
                    panama: a15,
                    paris: a15,
                    pasadena: a15,
                    pharmacy: a15,
                    philadelphia: a15,
                    philadelphiaarea: a15,
                    philately: a15,
                    phoenix: a15,
                    photography: a15,
                    pilots: a15,
                    pittsburgh: a15,
                    planetarium: a15,
                    plantation: a15,
                    plants: a15,
                    plaza: a15,
                    portal: a15,
                    portland: a15,
                    portlligat: a15,
                    "posts-and-telecommunications": a15,
                    preservation: a15,
                    presidio: a15,
                    press: a15,
                    project: a15,
                    public: a15,
                    pubol: a15,
                    quebec: a15,
                    railroad: a15,
                    railway: a15,
                    research: a15,
                    resistance: a15,
                    riodejaneiro: a15,
                    rochester: a15,
                    rockart: a15,
                    roma: a15,
                    russia: a15,
                    saintlouis: a15,
                    salem: a15,
                    salvadordali: a15,
                    salzburg: a15,
                    sandiego: a15,
                    sanfrancisco: a15,
                    santabarbara: a15,
                    santacruz: a15,
                    santafe: a15,
                    saskatchewan: a15,
                    satx: a15,
                    savannahga: a15,
                    schlesisches: a15,
                    schoenbrunn: a15,
                    schokoladen: a15,
                    school: a15,
                    schweiz: a15,
                    science: a15,
                    scienceandhistory: a15,
                    scienceandindustry: a15,
                    sciencecenter: a15,
                    sciencecenters: a15,
                    "science-fiction": a15,
                    sciencehistory: a15,
                    sciences: a15,
                    sciencesnaturelles: a15,
                    scotland: a15,
                    seaport: a15,
                    settlement: a15,
                    settlers: a15,
                    shell: a15,
                    sherbrooke: a15,
                    sibenik: a15,
                    silk: a15,
                    ski: a15,
                    skole: a15,
                    society: a15,
                    sologne: a15,
                    soundandvision: a15,
                    southcarolina: a15,
                    southwest: a15,
                    space: a15,
                    spy: a15,
                    square: a15,
                    stadt: a15,
                    stalbans: a15,
                    starnberg: a15,
                    state: a15,
                    stateofdelaware: a15,
                    station: a15,
                    steam: a15,
                    steiermark: a15,
                    stjohn: a15,
                    stockholm: a15,
                    stpetersburg: a15,
                    stuttgart: a15,
                    suisse: a15,
                    surgeonshall: a15,
                    surrey: a15,
                    svizzera: a15,
                    sweden: a15,
                    sydney: a15,
                    tank: a15,
                    tcm: a15,
                    technology: a15,
                    telekommunikation: a15,
                    television: a15,
                    texas: a15,
                    textile: a15,
                    theater: a15,
                    time: a15,
                    timekeeping: a15,
                    topology: a15,
                    torino: a15,
                    touch: a15,
                    town: a15,
                    transport: a15,
                    tree: a15,
                    trolley: a15,
                    trust: a15,
                    trustee: a15,
                    uhren: a15,
                    ulm: a15,
                    undersea: a15,
                    university: a15,
                    usa: a15,
                    usantiques: a15,
                    usarts: a15,
                    uscountryestate: a15,
                    usculture: a15,
                    usdecorativearts: a15,
                    usgarden: a15,
                    ushistory: a15,
                    ushuaia: a15,
                    uslivinghistory: a15,
                    utah: a15,
                    uvic: a15,
                    valley: a15,
                    vantaa: a15,
                    versailles: a15,
                    viking: a15,
                    village: a15,
                    virginia: a15,
                    virtual: a15,
                    virtuel: a15,
                    vlaanderen: a15,
                    volkenkunde: a15,
                    wales: a15,
                    wallonie: a15,
                    war: a15,
                    washingtondc: a15,
                    watchandclock: a15,
                    "watch-and-clock": a15,
                    western: a15,
                    westfalen: a15,
                    whaling: a15,
                    wildlife: a15,
                    williamsburg: a15,
                    windmill: a15,
                    workshop: a15,
                    york: a15,
                    yorkshire: a15,
                    yosemite: a15,
                    youth: a15,
                    zoological: a15,
                    zoology: a15,
                    "xn--9dbhblg6di": a15,
                    "ירושלים": a15,
                    "xn--h1aegh": a15,
                    "иком": a15
                }
            },
            mv: {
                $: 1,
                succ: {
                    aero: a15,
                    biz: a15,
                    com: a15,
                    coop: a15,
                    edu: a15,
                    gov: a15,
                    info: a15,
                    int: a15,
                    mil: a15,
                    museum: a15,
                    name: a15,
                    net: a15,
                    org: a15,
                    pro: a15
                }
            },
            mw: {
                $: 1,
                succ: {
                    ac: a15,
                    biz: a15,
                    co: a15,
                    com: a15,
                    coop: a15,
                    edu: a15,
                    gov: a15,
                    int: a15,
                    museum: a15,
                    net: a15,
                    org: a15
                }
            },
            mx: {
                $: 1,
                succ: {
                    com: a15,
                    org: a15,
                    gob: a15,
                    edu: a15,
                    net: a15,
                    blogspot: o16
                }
            },
            my: {
                $: 1,
                succ: {
                    biz: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    mil: a15,
                    name: a15,
                    net: a15,
                    org: a15,
                    blogspot: o16
                }
            },
            mz: {
                $: 1,
                succ: {
                    ac: a15,
                    adv: a15,
                    co: a15,
                    edu: a15,
                    gov: a15,
                    mil: a15,
                    net: a15,
                    org: a15
                }
            },
            na: {
                $: 1,
                succ: {
                    info: a15,
                    pro: a15,
                    name: a15,
                    school: a15,
                    or: a15,
                    dr: a15,
                    us: a15,
                    mx: a15,
                    ca: a15,
                    in: a15,
                    cc: a15,
                    tv: a15,
                    ws: a15,
                    mobi: a15,
                    co: a15,
                    com: a15,
                    org: a15
                }
            },
            name: {
                $: 1,
                succ: {
                    her: W,
                    his: W
                }
            },
            nc: {
                $: 1,
                succ: {
                    asso: a15,
                    nom: a15
                }
            },
            ne: a15,
            net: {
                $: 1,
                succ: {
                    adobeaemcloud: o16,
                    alwaysdata: o16,
                    cloudfront: o16,
                    t3l3p0rt: o16,
                    appudo: o16,
                    "atlassian-dev": {
                        $: 0,
                        succ: {
                            prod: {
                                $: 0,
                                succ: {
                                    cdn: o16
                                }
                            }
                        }
                    },
                    myfritz: o16,
                    onavstack: o16,
                    shopselect: o16,
                    blackbaudcdn: o16,
                    boomla: o16,
                    bplaced: o16,
                    square7: o16,
                    gb: o16,
                    hu: o16,
                    jp: o16,
                    se: o16,
                    uk: o16,
                    in: o16,
                    clickrising: o16,
                    cloudaccess: o16,
                    "cdn77-ssl": o16,
                    cdn77: {
                        $: 0,
                        succ: {
                            r: o16
                        }
                    },
                    "feste-ip": o16,
                    "knx-server": o16,
                    "static-access": o16,
                    cryptonomic: e12,
                    dattolocal: o16,
                    mydatto: o16,
                    debian: o16,
                    bitbridge: o16,
                    "at-band-camp": o16,
                    blogdns: o16,
                    "broke-it": o16,
                    buyshouses: o16,
                    dnsalias: o16,
                    dnsdojo: o16,
                    "does-it": o16,
                    dontexist: o16,
                    dynalias: o16,
                    dynathome: o16,
                    endofinternet: o16,
                    "from-az": o16,
                    "from-co": o16,
                    "from-la": o16,
                    "from-ny": o16,
                    "gets-it": o16,
                    "ham-radio-op": o16,
                    homeftp: o16,
                    homeip: o16,
                    homelinux: o16,
                    homeunix: o16,
                    "in-the-band": o16,
                    "is-a-chef": o16,
                    "is-a-geek": o16,
                    "isa-geek": o16,
                    "kicks-ass": o16,
                    "office-on-the": o16,
                    podzone: o16,
                    "scrapper-site": o16,
                    selfip: o16,
                    "sells-it": o16,
                    servebbs: o16,
                    serveftp: o16,
                    thruhere: o16,
                    webhop: o16,
                    definima: o16,
                    casacam: o16,
                    dynu: o16,
                    dynv6: o16,
                    twmail: o16,
                    ru: o16,
                    channelsdvr: {
                        $: 2,
                        succ: {
                            u: o16
                        }
                    },
                    fastlylb: {
                        $: 2,
                        succ: {
                            map: o16
                        }
                    },
                    fastly: {
                        $: 0,
                        succ: {
                            freetls: o16,
                            map: o16,
                            prod: {
                                $: 0,
                                succ: {
                                    a: o16,
                                    global: o16
                                }
                            },
                            ssl: {
                                $: 0,
                                succ: {
                                    a: o16,
                                    b: o16,
                                    global: o16
                                }
                            }
                        }
                    },
                    edgeapp: o16,
                    flynnhosting: o16,
                    "cdn-edges": o16,
                    heteml: o16,
                    cloudfunctions: o16,
                    moonscale: o16,
                    "in-dsl": o16,
                    "in-vpn": o16,
                    ipifony: o16,
                    iobb: o16,
                    cloudjiffy: {
                        $: 2,
                        succ: {
                            "fra1-de": o16,
                            "west1-us": o16
                        }
                    },
                    elastx: {
                        $: 0,
                        succ: {
                            "jls-sto1": o16,
                            "jls-sto2": o16,
                            "jls-sto3": o16
                        }
                    },
                    faststacks: o16,
                    massivegrid: {
                        $: 0,
                        succ: {
                            paas: {
                                $: 0,
                                succ: {
                                    "fr-1": o16,
                                    "lon-1": o16,
                                    "lon-2": o16,
                                    "ny-1": o16,
                                    "ny-2": o16,
                                    "sg-1": o16
                                }
                            }
                        }
                    },
                    saveincloud: {
                        $: 0,
                        succ: {
                            jelastic: o16,
                            "nordeste-idc": o16
                        }
                    },
                    scaleforce: $,
                    tsukaeru: z,
                    kinghost: o16,
                    uni5: o16,
                    krellian: o16,
                    barsy: o16,
                    memset: o16,
                    azurewebsites: o16,
                    "azure-mobile": o16,
                    cloudapp: o16,
                    azurestaticapps: {
                        $: 2,
                        succ: {
                            1: o16,
                            centralus: o16,
                            eastasia: o16,
                            eastus2: o16,
                            westeurope: o16,
                            westus2: o16
                        }
                    },
                    dnsup: o16,
                    hicam: o16,
                    "now-dns": o16,
                    ownip: o16,
                    vpndns: o16,
                    "eating-organic": o16,
                    mydissent: o16,
                    myeffect: o16,
                    mymediapc: o16,
                    mypsx: o16,
                    mysecuritycamera: o16,
                    nhlfan: o16,
                    "no-ip": o16,
                    pgafan: o16,
                    privatizehealthinsurance: o16,
                    bounceme: o16,
                    ddns: o16,
                    redirectme: o16,
                    serveblog: o16,
                    serveminecraft: o16,
                    sytes: o16,
                    cloudycluster: o16,
                    ovh: {
                        $: 0,
                        succ: {
                            webpaas: e12,
                            hosting: e12
                        }
                    },
                    bar0: o16,
                    bar1: o16,
                    bar2: o16,
                    rackmaze: o16,
                    schokokeks: o16,
                    "firewall-gateway": o16,
                    seidat: o16,
                    senseering: o16,
                    siteleaf: o16,
                    "vps-host": {
                        $: 2,
                        succ: {
                            jelastic: {
                                $: 0,
                                succ: {
                                    atl: o16,
                                    njs: o16,
                                    ric: o16
                                }
                            }
                        }
                    },
                    myspreadshop: o16,
                    srcf: {
                        $: 0,
                        succ: {
                            soc: o16,
                            user: o16
                        }
                    },
                    supabase: o16,
                    dsmynas: o16,
                    familyds: o16,
                    tailscale: {
                        $: 0,
                        succ: {
                            beta: o16
                        }
                    },
                    ts: o16,
                    torproject: {
                        $: 2,
                        succ: {
                            pages: o16
                        }
                    },
                    "reserve-online": o16,
                    "community-pro": o16,
                    meinforum: o16,
                    yandexcloud: {
                        $: 2,
                        succ: {
                            storage: o16,
                            website: o16
                        }
                    },
                    za: o16
                }
            },
            nf: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    per: a15,
                    rec: a15,
                    web: a15,
                    arts: a15,
                    firm: a15,
                    info: a15,
                    other: a15,
                    store: a15
                }
            },
            ng: {
                $: 1,
                succ: {
                    com: s8,
                    edu: a15,
                    gov: a15,
                    i: a15,
                    mil: a15,
                    mobi: a15,
                    name: a15,
                    net: a15,
                    org: a15,
                    sch: a15,
                    col: o16,
                    firm: o16,
                    gen: o16,
                    ltd: o16,
                    ngo: o16
                }
            },
            ni: {
                $: 1,
                succ: {
                    ac: a15,
                    biz: a15,
                    co: a15,
                    com: a15,
                    edu: a15,
                    gob: a15,
                    in: a15,
                    info: a15,
                    int: a15,
                    mil: a15,
                    net: a15,
                    nom: a15,
                    org: a15,
                    web: a15
                }
            },
            nl: {
                $: 1,
                succ: {
                    co: o16,
                    "hosting-cluster": o16,
                    blogspot: o16,
                    gov: o16,
                    khplay: o16,
                    myspreadshop: o16,
                    transurl: e12,
                    cistron: o16,
                    demon: o16
                }
            },
            no: {
                $: 1,
                succ: {
                    fhs: a15,
                    vgs: a15,
                    fylkesbibl: a15,
                    folkebibl: a15,
                    museum: a15,
                    idrett: a15,
                    priv: a15,
                    mil: a15,
                    stat: a15,
                    dep: a15,
                    kommune: a15,
                    herad: a15,
                    aa: L,
                    ah: L,
                    bu: L,
                    fm: L,
                    hl: L,
                    hm: L,
                    "jan-mayen": L,
                    mr: L,
                    nl: L,
                    nt: L,
                    of: L,
                    ol: L,
                    oslo: L,
                    rl: L,
                    sf: L,
                    st: L,
                    svalbard: L,
                    tm: L,
                    tr: L,
                    va: L,
                    vf: L,
                    akrehamn: a15,
                    "xn--krehamn-dxa": a15,
                    "åkrehamn": a15,
                    algard: a15,
                    "xn--lgrd-poac": a15,
                    "ålgård": a15,
                    arna: a15,
                    brumunddal: a15,
                    bryne: a15,
                    bronnoysund: a15,
                    "xn--brnnysund-m8ac": a15,
                    "brønnøysund": a15,
                    drobak: a15,
                    "xn--drbak-wua": a15,
                    "drøbak": a15,
                    egersund: a15,
                    fetsund: a15,
                    floro: a15,
                    "xn--flor-jra": a15,
                    "florø": a15,
                    fredrikstad: a15,
                    hokksund: a15,
                    honefoss: a15,
                    "xn--hnefoss-q1a": a15,
                    "hønefoss": a15,
                    jessheim: a15,
                    jorpeland: a15,
                    "xn--jrpeland-54a": a15,
                    "jørpeland": a15,
                    kirkenes: a15,
                    kopervik: a15,
                    krokstadelva: a15,
                    langevag: a15,
                    "xn--langevg-jxa": a15,
                    "langevåg": a15,
                    leirvik: a15,
                    mjondalen: a15,
                    "xn--mjndalen-64a": a15,
                    "mjøndalen": a15,
                    "mo-i-rana": a15,
                    mosjoen: a15,
                    "xn--mosjen-eya": a15,
                    "mosjøen": a15,
                    nesoddtangen: a15,
                    orkanger: a15,
                    osoyro: a15,
                    "xn--osyro-wua": a15,
                    "osøyro": a15,
                    raholt: a15,
                    "xn--rholt-mra": a15,
                    "råholt": a15,
                    sandnessjoen: a15,
                    "xn--sandnessjen-ogb": a15,
                    "sandnessjøen": a15,
                    skedsmokorset: a15,
                    slattum: a15,
                    spjelkavik: a15,
                    stathelle: a15,
                    stavern: a15,
                    stjordalshalsen: a15,
                    "xn--stjrdalshalsen-sqb": a15,
                    "stjørdalshalsen": a15,
                    tananger: a15,
                    tranby: a15,
                    vossevangen: a15,
                    afjord: a15,
                    "xn--fjord-lra": a15,
                    "åfjord": a15,
                    agdenes: a15,
                    al: a15,
                    "xn--l-1fa": a15,
                    "ål": a15,
                    alesund: a15,
                    "xn--lesund-hua": a15,
                    "ålesund": a15,
                    alstahaug: a15,
                    alta: a15,
                    "xn--lt-liac": a15,
                    "áltá": a15,
                    alaheadju: a15,
                    "xn--laheadju-7ya": a15,
                    "álaheadju": a15,
                    alvdal: a15,
                    amli: a15,
                    "xn--mli-tla": a15,
                    "åmli": a15,
                    amot: a15,
                    "xn--mot-tla": a15,
                    "åmot": a15,
                    andebu: a15,
                    andoy: a15,
                    "xn--andy-ira": a15,
                    "andøy": a15,
                    andasuolo: a15,
                    ardal: a15,
                    "xn--rdal-poa": a15,
                    "årdal": a15,
                    aremark: a15,
                    arendal: a15,
                    "xn--s-1fa": a15,
                    "ås": a15,
                    aseral: a15,
                    "xn--seral-lra": a15,
                    "åseral": a15,
                    asker: a15,
                    askim: a15,
                    askvoll: a15,
                    askoy: a15,
                    "xn--asky-ira": a15,
                    "askøy": a15,
                    asnes: a15,
                    "xn--snes-poa": a15,
                    "åsnes": a15,
                    audnedaln: a15,
                    aukra: a15,
                    aure: a15,
                    aurland: a15,
                    "aurskog-holand": a15,
                    "xn--aurskog-hland-jnb": a15,
                    "aurskog-høland": a15,
                    austevoll: a15,
                    austrheim: a15,
                    averoy: a15,
                    "xn--avery-yua": a15,
                    "averøy": a15,
                    balestrand: a15,
                    ballangen: a15,
                    balat: a15,
                    "xn--blt-elab": a15,
                    "bálát": a15,
                    balsfjord: a15,
                    bahccavuotna: a15,
                    "xn--bhccavuotna-k7a": a15,
                    "báhccavuotna": a15,
                    bamble: a15,
                    bardu: a15,
                    beardu: a15,
                    beiarn: a15,
                    bajddar: a15,
                    "xn--bjddar-pta": a15,
                    "bájddar": a15,
                    baidar: a15,
                    "xn--bidr-5nac": a15,
                    "báidár": a15,
                    berg: a15,
                    bergen: a15,
                    berlevag: a15,
                    "xn--berlevg-jxa": a15,
                    "berlevåg": a15,
                    bearalvahki: a15,
                    "xn--bearalvhki-y4a": a15,
                    "bearalváhki": a15,
                    bindal: a15,
                    birkenes: a15,
                    bjarkoy: a15,
                    "xn--bjarky-fya": a15,
                    "bjarkøy": a15,
                    bjerkreim: a15,
                    bjugn: a15,
                    bodo: a15,
                    "xn--bod-2na": a15,
                    "bodø": a15,
                    badaddja: a15,
                    "xn--bdddj-mrabd": a15,
                    "bådåddjå": a15,
                    budejju: a15,
                    bokn: a15,
                    bremanger: a15,
                    bronnoy: a15,
                    "xn--brnny-wuac": a15,
                    "brønnøy": a15,
                    bygland: a15,
                    bykle: a15,
                    barum: a15,
                    "xn--brum-voa": a15,
                    "bærum": a15,
                    telemark: {
                        $: 0,
                        succ: {
                            bo: a15,
                            "xn--b-5ga": a15,
                            "bø": a15
                        }
                    },
                    nordland: {
                        $: 0,
                        succ: {
                            bo: a15,
                            "xn--b-5ga": a15,
                            "bø": a15,
                            heroy: a15,
                            "xn--hery-ira": a15,
                            "herøy": a15
                        }
                    },
                    bievat: a15,
                    "xn--bievt-0qa": a15,
                    "bievát": a15,
                    bomlo: a15,
                    "xn--bmlo-gra": a15,
                    "bømlo": a15,
                    batsfjord: a15,
                    "xn--btsfjord-9za": a15,
                    "båtsfjord": a15,
                    bahcavuotna: a15,
                    "xn--bhcavuotna-s4a": a15,
                    "báhcavuotna": a15,
                    dovre: a15,
                    drammen: a15,
                    drangedal: a15,
                    dyroy: a15,
                    "xn--dyry-ira": a15,
                    "dyrøy": a15,
                    donna: a15,
                    "xn--dnna-gra": a15,
                    "dønna": a15,
                    eid: a15,
                    eidfjord: a15,
                    eidsberg: a15,
                    eidskog: a15,
                    eidsvoll: a15,
                    eigersund: a15,
                    elverum: a15,
                    enebakk: a15,
                    engerdal: a15,
                    etne: a15,
                    etnedal: a15,
                    evenes: a15,
                    evenassi: a15,
                    "xn--eveni-0qa01ga": a15,
                    "evenášši": a15,
                    "evje-og-hornnes": a15,
                    farsund: a15,
                    fauske: a15,
                    fuossko: a15,
                    fuoisku: a15,
                    fedje: a15,
                    fet: a15,
                    finnoy: a15,
                    "xn--finny-yua": a15,
                    "finnøy": a15,
                    fitjar: a15,
                    fjaler: a15,
                    fjell: a15,
                    flakstad: a15,
                    flatanger: a15,
                    flekkefjord: a15,
                    flesberg: a15,
                    flora: a15,
                    fla: a15,
                    "xn--fl-zia": a15,
                    "flå": a15,
                    folldal: a15,
                    forsand: a15,
                    fosnes: a15,
                    frei: a15,
                    frogn: a15,
                    froland: a15,
                    frosta: a15,
                    frana: a15,
                    "xn--frna-woa": a15,
                    "fræna": a15,
                    froya: a15,
                    "xn--frya-hra": a15,
                    "frøya": a15,
                    fusa: a15,
                    fyresdal: a15,
                    forde: a15,
                    "xn--frde-gra": a15,
                    "førde": a15,
                    gamvik: a15,
                    gangaviika: a15,
                    "xn--ggaviika-8ya47h": a15,
                    "gáŋgaviika": a15,
                    gaular: a15,
                    gausdal: a15,
                    gildeskal: a15,
                    "xn--gildeskl-g0a": a15,
                    "gildeskål": a15,
                    giske: a15,
                    gjemnes: a15,
                    gjerdrum: a15,
                    gjerstad: a15,
                    gjesdal: a15,
                    gjovik: a15,
                    "xn--gjvik-wua": a15,
                    "gjøvik": a15,
                    gloppen: a15,
                    gol: a15,
                    gran: a15,
                    grane: a15,
                    granvin: a15,
                    gratangen: a15,
                    grimstad: a15,
                    grong: a15,
                    kraanghke: a15,
                    "xn--kranghke-b0a": a15,
                    "kråanghke": a15,
                    grue: a15,
                    gulen: a15,
                    hadsel: a15,
                    halden: a15,
                    halsa: a15,
                    hamar: a15,
                    hamaroy: a15,
                    habmer: a15,
                    "xn--hbmer-xqa": a15,
                    "hábmer": a15,
                    hapmir: a15,
                    "xn--hpmir-xqa": a15,
                    "hápmir": a15,
                    hammerfest: a15,
                    hammarfeasta: a15,
                    "xn--hmmrfeasta-s4ac": a15,
                    "hámmárfeasta": a15,
                    haram: a15,
                    hareid: a15,
                    harstad: a15,
                    hasvik: a15,
                    aknoluokta: a15,
                    "xn--koluokta-7ya57h": a15,
                    "ákŋoluokta": a15,
                    hattfjelldal: a15,
                    aarborte: a15,
                    haugesund: a15,
                    hemne: a15,
                    hemnes: a15,
                    hemsedal: a15,
                    "more-og-romsdal": {
                        $: 0,
                        succ: {
                            heroy: a15,
                            sande: a15
                        }
                    },
                    "xn--mre-og-romsdal-qqb": {
                        $: 0,
                        succ: {
                            "xn--hery-ira": a15,
                            sande: a15
                        }
                    },
                    "møre-og-romsdal": {
                        $: 0,
                        succ: {
                            "herøy": a15,
                            sande: a15
                        }
                    },
                    hitra: a15,
                    hjartdal: a15,
                    hjelmeland: a15,
                    hobol: a15,
                    "xn--hobl-ira": a15,
                    "hobøl": a15,
                    hof: a15,
                    hol: a15,
                    hole: a15,
                    holmestrand: a15,
                    holtalen: a15,
                    "xn--holtlen-hxa": a15,
                    "holtålen": a15,
                    hornindal: a15,
                    horten: a15,
                    hurdal: a15,
                    hurum: a15,
                    hvaler: a15,
                    hyllestad: a15,
                    hagebostad: a15,
                    "xn--hgebostad-g3a": a15,
                    "hægebostad": a15,
                    hoyanger: a15,
                    "xn--hyanger-q1a": a15,
                    "høyanger": a15,
                    hoylandet: a15,
                    "xn--hylandet-54a": a15,
                    "høylandet": a15,
                    ha: a15,
                    "xn--h-2fa": a15,
                    "hå": a15,
                    ibestad: a15,
                    inderoy: a15,
                    "xn--indery-fya": a15,
                    "inderøy": a15,
                    iveland: a15,
                    jevnaker: a15,
                    jondal: a15,
                    jolster: a15,
                    "xn--jlster-bya": a15,
                    "jølster": a15,
                    karasjok: a15,
                    karasjohka: a15,
                    "xn--krjohka-hwab49j": a15,
                    "kárášjohka": a15,
                    karlsoy: a15,
                    galsa: a15,
                    "xn--gls-elac": a15,
                    "gálsá": a15,
                    karmoy: a15,
                    "xn--karmy-yua": a15,
                    "karmøy": a15,
                    kautokeino: a15,
                    guovdageaidnu: a15,
                    klepp: a15,
                    klabu: a15,
                    "xn--klbu-woa": a15,
                    "klæbu": a15,
                    kongsberg: a15,
                    kongsvinger: a15,
                    kragero: a15,
                    "xn--krager-gya": a15,
                    "kragerø": a15,
                    kristiansand: a15,
                    kristiansund: a15,
                    krodsherad: a15,
                    "xn--krdsherad-m8a": a15,
                    "krødsherad": a15,
                    kvalsund: a15,
                    rahkkeravju: a15,
                    "xn--rhkkervju-01af": a15,
                    "ráhkkerávju": a15,
                    kvam: a15,
                    kvinesdal: a15,
                    kvinnherad: a15,
                    kviteseid: a15,
                    kvitsoy: a15,
                    "xn--kvitsy-fya": a15,
                    "kvitsøy": a15,
                    kvafjord: a15,
                    "xn--kvfjord-nxa": a15,
                    "kvæfjord": a15,
                    giehtavuoatna: a15,
                    kvanangen: a15,
                    "xn--kvnangen-k0a": a15,
                    "kvænangen": a15,
                    navuotna: a15,
                    "xn--nvuotna-hwa": a15,
                    "návuotna": a15,
                    kafjord: a15,
                    "xn--kfjord-iua": a15,
                    "kåfjord": a15,
                    gaivuotna: a15,
                    "xn--givuotna-8ya": a15,
                    "gáivuotna": a15,
                    larvik: a15,
                    lavangen: a15,
                    lavagis: a15,
                    loabat: a15,
                    "xn--loabt-0qa": a15,
                    "loabát": a15,
                    lebesby: a15,
                    davvesiida: a15,
                    leikanger: a15,
                    leirfjord: a15,
                    leka: a15,
                    leksvik: a15,
                    lenvik: a15,
                    leangaviika: a15,
                    "xn--leagaviika-52b": a15,
                    "leaŋgaviika": a15,
                    lesja: a15,
                    levanger: a15,
                    lier: a15,
                    lierne: a15,
                    lillehammer: a15,
                    lillesand: a15,
                    lindesnes: a15,
                    lindas: a15,
                    "xn--linds-pra": a15,
                    "lindås": a15,
                    lom: a15,
                    loppa: a15,
                    lahppi: a15,
                    "xn--lhppi-xqa": a15,
                    "láhppi": a15,
                    lund: a15,
                    lunner: a15,
                    luroy: a15,
                    "xn--lury-ira": a15,
                    "lurøy": a15,
                    luster: a15,
                    lyngdal: a15,
                    lyngen: a15,
                    ivgu: a15,
                    lardal: a15,
                    lerdal: a15,
                    "xn--lrdal-sra": a15,
                    "lærdal": a15,
                    lodingen: a15,
                    "xn--ldingen-q1a": a15,
                    "lødingen": a15,
                    lorenskog: a15,
                    "xn--lrenskog-54a": a15,
                    "lørenskog": a15,
                    loten: a15,
                    "xn--lten-gra": a15,
                    "løten": a15,
                    malvik: a15,
                    masoy: a15,
                    "xn--msy-ula0h": a15,
                    "måsøy": a15,
                    muosat: a15,
                    "xn--muost-0qa": a15,
                    "muosát": a15,
                    mandal: a15,
                    marker: a15,
                    marnardal: a15,
                    masfjorden: a15,
                    meland: a15,
                    meldal: a15,
                    melhus: a15,
                    meloy: a15,
                    "xn--mely-ira": a15,
                    "meløy": a15,
                    meraker: a15,
                    "xn--merker-kua": a15,
                    "meråker": a15,
                    moareke: a15,
                    "xn--moreke-jua": a15,
                    "moåreke": a15,
                    midsund: a15,
                    "midtre-gauldal": a15,
                    modalen: a15,
                    modum: a15,
                    molde: a15,
                    moskenes: a15,
                    moss: a15,
                    mosvik: a15,
                    malselv: a15,
                    "xn--mlselv-iua": a15,
                    "målselv": a15,
                    malatvuopmi: a15,
                    "xn--mlatvuopmi-s4a": a15,
                    "málatvuopmi": a15,
                    namdalseid: a15,
                    aejrie: a15,
                    namsos: a15,
                    namsskogan: a15,
                    naamesjevuemie: a15,
                    "xn--nmesjevuemie-tcba": a15,
                    "nååmesjevuemie": a15,
                    laakesvuemie: a15,
                    nannestad: a15,
                    narvik: a15,
                    narviika: a15,
                    naustdal: a15,
                    "nedre-eiker": a15,
                    akershus: O,
                    buskerud: O,
                    nesna: a15,
                    nesodden: a15,
                    nesseby: a15,
                    unjarga: a15,
                    "xn--unjrga-rta": a15,
                    "unjárga": a15,
                    nesset: a15,
                    nissedal: a15,
                    nittedal: a15,
                    "nord-aurdal": a15,
                    "nord-fron": a15,
                    "nord-odal": a15,
                    norddal: a15,
                    nordkapp: a15,
                    davvenjarga: a15,
                    "xn--davvenjrga-y4a": a15,
                    "davvenjárga": a15,
                    "nordre-land": a15,
                    nordreisa: a15,
                    raisa: a15,
                    "xn--risa-5na": a15,
                    "ráisa": a15,
                    "nore-og-uvdal": a15,
                    notodden: a15,
                    naroy: a15,
                    "xn--nry-yla5g": a15,
                    "nærøy": a15,
                    notteroy: a15,
                    "xn--nttery-byae": a15,
                    "nøtterøy": a15,
                    odda: a15,
                    oksnes: a15,
                    "xn--ksnes-uua": a15,
                    "øksnes": a15,
                    oppdal: a15,
                    oppegard: a15,
                    "xn--oppegrd-ixa": a15,
                    "oppegård": a15,
                    orkdal: a15,
                    orland: a15,
                    "xn--rland-uua": a15,
                    "ørland": a15,
                    orskog: a15,
                    "xn--rskog-uua": a15,
                    "ørskog": a15,
                    orsta: a15,
                    "xn--rsta-fra": a15,
                    "ørsta": a15,
                    hedmark: {
                        $: 0,
                        succ: {
                            os: a15,
                            valer: a15,
                            "xn--vler-qoa": a15,
                            "våler": a15
                        }
                    },
                    hordaland: {
                        $: 0,
                        succ: {
                            os: a15
                        }
                    },
                    osen: a15,
                    osteroy: a15,
                    "xn--ostery-fya": a15,
                    "osterøy": a15,
                    "ostre-toten": a15,
                    "xn--stre-toten-zcb": a15,
                    "østre-toten": a15,
                    overhalla: a15,
                    "ovre-eiker": a15,
                    "xn--vre-eiker-k8a": a15,
                    "øvre-eiker": a15,
                    oyer: a15,
                    "xn--yer-zna": a15,
                    "øyer": a15,
                    oygarden: a15,
                    "xn--ygarden-p1a": a15,
                    "øygarden": a15,
                    "oystre-slidre": a15,
                    "xn--ystre-slidre-ujb": a15,
                    "øystre-slidre": a15,
                    porsanger: a15,
                    porsangu: a15,
                    "xn--porsgu-sta26f": a15,
                    "porsáŋgu": a15,
                    porsgrunn: a15,
                    radoy: a15,
                    "xn--rady-ira": a15,
                    "radøy": a15,
                    rakkestad: a15,
                    rana: a15,
                    ruovat: a15,
                    randaberg: a15,
                    rauma: a15,
                    rendalen: a15,
                    rennebu: a15,
                    rennesoy: a15,
                    "xn--rennesy-v1a": a15,
                    "rennesøy": a15,
                    rindal: a15,
                    ringebu: a15,
                    ringerike: a15,
                    ringsaker: a15,
                    rissa: a15,
                    risor: a15,
                    "xn--risr-ira": a15,
                    "risør": a15,
                    roan: a15,
                    rollag: a15,
                    rygge: a15,
                    ralingen: a15,
                    "xn--rlingen-mxa": a15,
                    "rælingen": a15,
                    rodoy: a15,
                    "xn--rdy-0nab": a15,
                    "rødøy": a15,
                    romskog: a15,
                    "xn--rmskog-bya": a15,
                    "rømskog": a15,
                    roros: a15,
                    "xn--rros-gra": a15,
                    "røros": a15,
                    rost: a15,
                    "xn--rst-0na": a15,
                    "røst": a15,
                    royken: a15,
                    "xn--ryken-vua": a15,
                    "røyken": a15,
                    royrvik: a15,
                    "xn--ryrvik-bya": a15,
                    "røyrvik": a15,
                    rade: a15,
                    "xn--rde-ula": a15,
                    "råde": a15,
                    salangen: a15,
                    siellak: a15,
                    saltdal: a15,
                    salat: a15,
                    "xn--slt-elab": a15,
                    "sálát": a15,
                    "xn--slat-5na": a15,
                    "sálat": a15,
                    samnanger: a15,
                    vestfold: {
                        $: 0,
                        succ: {
                            sande: a15
                        }
                    },
                    sandefjord: a15,
                    sandnes: a15,
                    sandoy: a15,
                    "xn--sandy-yua": a15,
                    "sandøy": a15,
                    sarpsborg: a15,
                    sauda: a15,
                    sauherad: a15,
                    sel: a15,
                    selbu: a15,
                    selje: a15,
                    seljord: a15,
                    sigdal: a15,
                    siljan: a15,
                    sirdal: a15,
                    skaun: a15,
                    skedsmo: a15,
                    ski: a15,
                    skien: a15,
                    skiptvet: a15,
                    skjervoy: a15,
                    "xn--skjervy-v1a": a15,
                    "skjervøy": a15,
                    skierva: a15,
                    "xn--skierv-uta": a15,
                    "skiervá": a15,
                    skjak: a15,
                    "xn--skjk-soa": a15,
                    "skjåk": a15,
                    skodje: a15,
                    skanland: a15,
                    "xn--sknland-fxa": a15,
                    "skånland": a15,
                    skanit: a15,
                    "xn--sknit-yqa": a15,
                    "skánit": a15,
                    smola: a15,
                    "xn--smla-hra": a15,
                    "smøla": a15,
                    snillfjord: a15,
                    snasa: a15,
                    "xn--snsa-roa": a15,
                    "snåsa": a15,
                    snoasa: a15,
                    snaase: a15,
                    "xn--snase-nra": a15,
                    "snåase": a15,
                    sogndal: a15,
                    sokndal: a15,
                    sola: a15,
                    solund: a15,
                    songdalen: a15,
                    sortland: a15,
                    spydeberg: a15,
                    stange: a15,
                    stavanger: a15,
                    steigen: a15,
                    steinkjer: a15,
                    stjordal: a15,
                    "xn--stjrdal-s1a": a15,
                    "stjørdal": a15,
                    stokke: a15,
                    "stor-elvdal": a15,
                    stord: a15,
                    stordal: a15,
                    storfjord: a15,
                    omasvuotna: a15,
                    strand: a15,
                    stranda: a15,
                    stryn: a15,
                    sula: a15,
                    suldal: a15,
                    sund: a15,
                    sunndal: a15,
                    surnadal: a15,
                    sveio: a15,
                    svelvik: a15,
                    sykkylven: a15,
                    sogne: a15,
                    "xn--sgne-gra": a15,
                    "søgne": a15,
                    somna: a15,
                    "xn--smna-gra": a15,
                    "sømna": a15,
                    "sondre-land": a15,
                    "xn--sndre-land-0cb": a15,
                    "søndre-land": a15,
                    "sor-aurdal": a15,
                    "xn--sr-aurdal-l8a": a15,
                    "sør-aurdal": a15,
                    "sor-fron": a15,
                    "xn--sr-fron-q1a": a15,
                    "sør-fron": a15,
                    "sor-odal": a15,
                    "xn--sr-odal-q1a": a15,
                    "sør-odal": a15,
                    "sor-varanger": a15,
                    "xn--sr-varanger-ggb": a15,
                    "sør-varanger": a15,
                    "matta-varjjat": a15,
                    "xn--mtta-vrjjat-k7af": a15,
                    "mátta-várjjat": a15,
                    sorfold: a15,
                    "xn--srfold-bya": a15,
                    "sørfold": a15,
                    sorreisa: a15,
                    "xn--srreisa-q1a": a15,
                    "sørreisa": a15,
                    sorum: a15,
                    "xn--srum-gra": a15,
                    "sørum": a15,
                    tana: a15,
                    deatnu: a15,
                    time: a15,
                    tingvoll: a15,
                    tinn: a15,
                    tjeldsund: a15,
                    dielddanuorri: a15,
                    tjome: a15,
                    "xn--tjme-hra": a15,
                    "tjøme": a15,
                    tokke: a15,
                    tolga: a15,
                    torsken: a15,
                    tranoy: a15,
                    "xn--trany-yua": a15,
                    "tranøy": a15,
                    tromso: a15,
                    "xn--troms-zua": a15,
                    "tromsø": a15,
                    tromsa: a15,
                    romsa: a15,
                    trondheim: a15,
                    troandin: a15,
                    trysil: a15,
                    trana: a15,
                    "xn--trna-woa": a15,
                    "træna": a15,
                    trogstad: a15,
                    "xn--trgstad-r1a": a15,
                    "trøgstad": a15,
                    tvedestrand: a15,
                    tydal: a15,
                    tynset: a15,
                    tysfjord: a15,
                    divtasvuodna: a15,
                    divttasvuotna: a15,
                    tysnes: a15,
                    tysvar: a15,
                    "xn--tysvr-vra": a15,
                    "tysvær": a15,
                    tonsberg: a15,
                    "xn--tnsberg-q1a": a15,
                    "tønsberg": a15,
                    ullensaker: a15,
                    ullensvang: a15,
                    ulvik: a15,
                    utsira: a15,
                    vadso: a15,
                    "xn--vads-jra": a15,
                    "vadsø": a15,
                    cahcesuolo: a15,
                    "xn--hcesuolo-7ya35b": a15,
                    "čáhcesuolo": a15,
                    vaksdal: a15,
                    valle: a15,
                    vang: a15,
                    vanylven: a15,
                    vardo: a15,
                    "xn--vard-jra": a15,
                    "vardø": a15,
                    varggat: a15,
                    "xn--vrggt-xqad": a15,
                    "várggát": a15,
                    vefsn: a15,
                    vaapste: a15,
                    vega: a15,
                    vegarshei: a15,
                    "xn--vegrshei-c0a": a15,
                    "vegårshei": a15,
                    vennesla: a15,
                    verdal: a15,
                    verran: a15,
                    vestby: a15,
                    vestnes: a15,
                    "vestre-slidre": a15,
                    "vestre-toten": a15,
                    vestvagoy: a15,
                    "xn--vestvgy-ixa6o": a15,
                    "vestvågøy": a15,
                    vevelstad: a15,
                    vik: a15,
                    vikna: a15,
                    vindafjord: a15,
                    volda: a15,
                    voss: a15,
                    varoy: a15,
                    "xn--vry-yla5g": a15,
                    "værøy": a15,
                    vagan: a15,
                    "xn--vgan-qoa": a15,
                    "vågan": a15,
                    voagat: a15,
                    vagsoy: a15,
                    "xn--vgsy-qoa0j": a15,
                    "vågsøy": a15,
                    vaga: a15,
                    "xn--vg-yiab": a15,
                    "vågå": a15,
                    ostfold: {
                        $: 0,
                        succ: {
                            valer: a15
                        }
                    },
                    "xn--stfold-9xa": {
                        $: 0,
                        succ: {
                            "xn--vler-qoa": a15
                        }
                    },
                    "østfold": {
                        $: 0,
                        succ: {
                            "våler": a15
                        }
                    },
                    co: o16,
                    blogspot: o16,
                    myspreadshop: o16
                }
            },
            np: r6,
            nr: P,
            nu: {
                $: 1,
                succ: {
                    merseine: o16,
                    mine: o16,
                    shacknet: o16,
                    enterprisecloud: o16
                }
            },
            nz: {
                $: 1,
                succ: {
                    ac: a15,
                    co: s8,
                    cri: a15,
                    geek: a15,
                    gen: a15,
                    govt: a15,
                    health: a15,
                    iwi: a15,
                    kiwi: a15,
                    maori: a15,
                    mil: a15,
                    "xn--mori-qsa": a15,
                    "māori": a15,
                    net: a15,
                    org: a15,
                    parliament: a15,
                    school: a15
                }
            },
            om: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    med: a15,
                    museum: a15,
                    net: a15,
                    org: a15,
                    pro: a15
                }
            },
            onion: a15,
            org: {
                $: 1,
                succ: {
                    altervista: o16,
                    amune: {
                        $: 0,
                        succ: {
                            tele: o16
                        }
                    },
                    pimienta: o16,
                    poivron: o16,
                    potager: o16,
                    sweetpepper: o16,
                    ae: o16,
                    us: o16,
                    certmgr: o16,
                    cdn77: {
                        $: 0,
                        succ: {
                            c: o16,
                            rsc: o16
                        }
                    },
                    "cdn77-secure": {
                        $: 0,
                        succ: {
                            origin: {
                                $: 0,
                                succ: {
                                    ssl: o16
                                }
                            }
                        }
                    },
                    cloudns: o16,
                    duckdns: o16,
                    tunk: o16,
                    dyndns: {
                        $: 2,
                        succ: {
                            go: o16,
                            home: o16
                        }
                    },
                    blogdns: o16,
                    blogsite: o16,
                    boldlygoingnowhere: o16,
                    dnsalias: o16,
                    dnsdojo: o16,
                    doesntexist: o16,
                    dontexist: o16,
                    doomdns: o16,
                    dvrdns: o16,
                    dynalias: o16,
                    endofinternet: o16,
                    endoftheinternet: o16,
                    "from-me": o16,
                    "game-host": o16,
                    gotdns: o16,
                    "hobby-site": o16,
                    homedns: o16,
                    homeftp: o16,
                    homelinux: o16,
                    homeunix: o16,
                    "is-a-bruinsfan": o16,
                    "is-a-candidate": o16,
                    "is-a-celticsfan": o16,
                    "is-a-chef": o16,
                    "is-a-geek": o16,
                    "is-a-knight": o16,
                    "is-a-linux-user": o16,
                    "is-a-patsfan": o16,
                    "is-a-soxfan": o16,
                    "is-found": o16,
                    "is-lost": o16,
                    "is-saved": o16,
                    "is-very-bad": o16,
                    "is-very-evil": o16,
                    "is-very-good": o16,
                    "is-very-nice": o16,
                    "is-very-sweet": o16,
                    "isa-geek": o16,
                    "kicks-ass": o16,
                    misconfused: o16,
                    podzone: o16,
                    readmyblog: o16,
                    selfip: o16,
                    sellsyourhome: o16,
                    servebbs: o16,
                    serveftp: o16,
                    servegame: o16,
                    "stuff-4-sale": o16,
                    webhop: o16,
                    ddnss: o16,
                    accesscam: o16,
                    camdvr: o16,
                    freeddns: o16,
                    mywire: o16,
                    webredirect: o16,
                    eu: {
                        $: 2,
                        succ: {
                            al: o16,
                            asso: o16,
                            at: o16,
                            au: o16,
                            be: o16,
                            bg: o16,
                            ca: o16,
                            cd: o16,
                            ch: o16,
                            cn: o16,
                            cy: o16,
                            cz: o16,
                            de: o16,
                            dk: o16,
                            edu: o16,
                            ee: o16,
                            es: o16,
                            fi: o16,
                            fr: o16,
                            gr: o16,
                            hr: o16,
                            hu: o16,
                            ie: o16,
                            il: o16,
                            in: o16,
                            int: o16,
                            is: o16,
                            it: o16,
                            jp: o16,
                            kr: o16,
                            lt: o16,
                            lu: o16,
                            lv: o16,
                            mc: o16,
                            me: o16,
                            mk: o16,
                            mt: o16,
                            my: o16,
                            net: o16,
                            ng: o16,
                            nl: o16,
                            no: o16,
                            nz: o16,
                            paris: o16,
                            pl: o16,
                            pt: o16,
                            "q-a": o16,
                            ro: o16,
                            ru: o16,
                            se: o16,
                            si: o16,
                            sk: o16,
                            tr: o16,
                            uk: o16,
                            us: o16
                        }
                    },
                    twmail: o16,
                    fedorainfracloud: o16,
                    fedorapeople: o16,
                    fedoraproject: {
                        $: 0,
                        succ: {
                            cloud: o16,
                            os: y,
                            stg: {
                                $: 0,
                                succ: {
                                    os: y
                                }
                            }
                        }
                    },
                    freedesktop: o16,
                    hepforge: o16,
                    "in-dsl": o16,
                    "in-vpn": o16,
                    js: o16,
                    barsy: o16,
                    mayfirst: o16,
                    "mozilla-iot": o16,
                    bmoattachments: o16,
                    dynserv: o16,
                    "now-dns": o16,
                    "cable-modem": o16,
                    collegefan: o16,
                    couchpotatofries: o16,
                    mlbfan: o16,
                    mysecuritycamera: o16,
                    nflfan: o16,
                    "read-books": o16,
                    ufcfan: o16,
                    hopto: o16,
                    myftp: o16,
                    "no-ip": o16,
                    zapto: o16,
                    httpbin: o16,
                    pubtls: o16,
                    "my-firewall": o16,
                    myfirewall: o16,
                    spdns: o16,
                    "small-web": o16,
                    dsmynas: o16,
                    familyds: o16,
                    teckids: l2,
                    tuxfamily: o16,
                    diskstation: o16,
                    hk: o16,
                    wmflabs: o16,
                    toolforge: o16,
                    wmcloud: o16,
                    za: o16
                }
            },
            pa: {
                $: 1,
                succ: {
                    ac: a15,
                    gob: a15,
                    com: a15,
                    org: a15,
                    sld: a15,
                    edu: a15,
                    net: a15,
                    ing: a15,
                    abo: a15,
                    med: a15,
                    nom: a15
                }
            },
            pe: {
                $: 1,
                succ: {
                    edu: a15,
                    gob: a15,
                    nom: a15,
                    mil: a15,
                    org: a15,
                    com: a15,
                    net: a15,
                    blogspot: o16
                }
            },
            pf: {
                $: 1,
                succ: {
                    com: a15,
                    org: a15,
                    edu: a15
                }
            },
            pg: r6,
            ph: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    gov: a15,
                    edu: a15,
                    ngo: a15,
                    mil: a15,
                    i: a15
                }
            },
            pk: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    edu: a15,
                    org: a15,
                    fam: a15,
                    biz: a15,
                    web: a15,
                    gov: a15,
                    gob: a15,
                    gok: a15,
                    gon: a15,
                    gop: a15,
                    gos: a15,
                    info: a15
                }
            },
            pl: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    aid: a15,
                    agro: a15,
                    atm: a15,
                    auto: a15,
                    biz: a15,
                    edu: a15,
                    gmina: a15,
                    gsm: a15,
                    info: a15,
                    mail: a15,
                    miasta: a15,
                    media: a15,
                    mil: a15,
                    nieruchomosci: a15,
                    nom: a15,
                    pc: a15,
                    powiat: a15,
                    priv: a15,
                    realestate: a15,
                    rel: a15,
                    sex: a15,
                    shop: a15,
                    sklep: a15,
                    sos: a15,
                    szkola: a15,
                    targi: a15,
                    tm: a15,
                    tourism: a15,
                    travel: a15,
                    turystyka: a15,
                    gov: {
                        $: 1,
                        succ: {
                            ap: a15,
                            ic: a15,
                            is: a15,
                            us: a15,
                            kmpsp: a15,
                            kppsp: a15,
                            kwpsp: a15,
                            psp: a15,
                            wskr: a15,
                            kwp: a15,
                            mw: a15,
                            ug: a15,
                            um: a15,
                            umig: a15,
                            ugim: a15,
                            upow: a15,
                            uw: a15,
                            starostwo: a15,
                            pa: a15,
                            po: a15,
                            psse: a15,
                            pup: a15,
                            rzgw: a15,
                            sa: a15,
                            so: a15,
                            sr: a15,
                            wsa: a15,
                            sko: a15,
                            uzs: a15,
                            wiih: a15,
                            winb: a15,
                            pinb: a15,
                            wios: a15,
                            witd: a15,
                            wzmiuw: a15,
                            piw: a15,
                            wiw: a15,
                            griw: a15,
                            wif: a15,
                            oum: a15,
                            sdn: a15,
                            zp: a15,
                            uppo: a15,
                            mup: a15,
                            wuoz: a15,
                            konsulat: a15,
                            oirm: a15
                        }
                    },
                    augustow: a15,
                    "babia-gora": a15,
                    bedzin: a15,
                    beskidy: a15,
                    bialowieza: a15,
                    bialystok: a15,
                    bielawa: a15,
                    bieszczady: a15,
                    boleslawiec: a15,
                    bydgoszcz: a15,
                    bytom: a15,
                    cieszyn: a15,
                    czeladz: a15,
                    czest: a15,
                    dlugoleka: a15,
                    elblag: a15,
                    elk: a15,
                    glogow: a15,
                    gniezno: a15,
                    gorlice: a15,
                    grajewo: a15,
                    ilawa: a15,
                    jaworzno: a15,
                    "jelenia-gora": a15,
                    jgora: a15,
                    kalisz: a15,
                    "kazimierz-dolny": a15,
                    karpacz: a15,
                    kartuzy: a15,
                    kaszuby: a15,
                    katowice: a15,
                    kepno: a15,
                    ketrzyn: a15,
                    klodzko: a15,
                    kobierzyce: a15,
                    kolobrzeg: a15,
                    konin: a15,
                    konskowola: a15,
                    kutno: a15,
                    lapy: a15,
                    lebork: a15,
                    legnica: a15,
                    lezajsk: a15,
                    limanowa: a15,
                    lomza: a15,
                    lowicz: a15,
                    lubin: a15,
                    lukow: a15,
                    malbork: a15,
                    malopolska: a15,
                    mazowsze: a15,
                    mazury: a15,
                    mielec: a15,
                    mielno: a15,
                    mragowo: a15,
                    naklo: a15,
                    nowaruda: a15,
                    nysa: a15,
                    olawa: a15,
                    olecko: a15,
                    olkusz: a15,
                    olsztyn: a15,
                    opoczno: a15,
                    opole: a15,
                    ostroda: a15,
                    ostroleka: a15,
                    ostrowiec: a15,
                    ostrowwlkp: a15,
                    pila: a15,
                    pisz: a15,
                    podhale: a15,
                    podlasie: a15,
                    polkowice: a15,
                    pomorze: a15,
                    pomorskie: a15,
                    prochowice: a15,
                    pruszkow: a15,
                    przeworsk: a15,
                    pulawy: a15,
                    radom: a15,
                    "rawa-maz": a15,
                    rybnik: a15,
                    rzeszow: a15,
                    sanok: a15,
                    sejny: a15,
                    slask: a15,
                    slupsk: a15,
                    sosnowiec: a15,
                    "stalowa-wola": a15,
                    skoczow: a15,
                    starachowice: a15,
                    stargard: a15,
                    suwalki: a15,
                    swidnica: a15,
                    swiebodzin: a15,
                    swinoujscie: a15,
                    szczecin: a15,
                    szczytno: a15,
                    tarnobrzeg: a15,
                    tgory: a15,
                    turek: a15,
                    tychy: a15,
                    ustka: a15,
                    walbrzych: a15,
                    warmia: a15,
                    warszawa: a15,
                    waw: a15,
                    wegrow: a15,
                    wielun: a15,
                    wlocl: a15,
                    wloclawek: a15,
                    wodzislaw: a15,
                    wolomin: a15,
                    wroclaw: a15,
                    zachpomor: a15,
                    zagan: a15,
                    zarow: a15,
                    zgora: a15,
                    zgorzelec: a15,
                    beep: o16,
                    "ecommerce-shop": o16,
                    shoparena: o16,
                    homesklep: o16,
                    sdscloud: o16,
                    unicloud: o16,
                    krasnik: o16,
                    leczna: o16,
                    lubartow: o16,
                    lublin: o16,
                    poniatowa: o16,
                    swidnik: o16,
                    co: o16,
                    art: o16,
                    gliwice: o16,
                    krakow: o16,
                    poznan: o16,
                    wroc: o16,
                    zakopane: o16,
                    myspreadshop: o16,
                    gda: o16,
                    gdansk: o16,
                    gdynia: o16,
                    med: o16,
                    sopot: o16
                }
            },
            pm: {
                $: 1,
                succ: {
                    own: o16,
                    name: o16
                }
            },
            pn: {
                $: 1,
                succ: {
                    gov: a15,
                    co: a15,
                    org: a15,
                    edu: a15,
                    net: a15
                }
            },
            post: a15,
            pr: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    gov: a15,
                    edu: a15,
                    isla: a15,
                    pro: a15,
                    biz: a15,
                    info: a15,
                    name: a15,
                    est: a15,
                    prof: a15,
                    ac: a15
                }
            },
            pro: {
                $: 1,
                succ: {
                    aaa: a15,
                    aca: a15,
                    acct: a15,
                    avocat: a15,
                    bar: a15,
                    cpa: a15,
                    eng: a15,
                    jur: a15,
                    law: a15,
                    med: a15,
                    recht: a15,
                    cloudns: o16,
                    dnstrace: {
                        $: 0,
                        succ: {
                            bci: o16
                        }
                    },
                    barsy: o16
                }
            },
            ps: {
                $: 1,
                succ: {
                    edu: a15,
                    gov: a15,
                    sec: a15,
                    plo: a15,
                    com: a15,
                    org: a15,
                    net: a15
                }
            },
            pt: {
                $: 1,
                succ: {
                    net: a15,
                    gov: a15,
                    org: a15,
                    edu: a15,
                    int: a15,
                    publ: a15,
                    com: a15,
                    nome: a15,
                    blogspot: o16
                }
            },
            pw: {
                $: 1,
                succ: {
                    co: a15,
                    ne: a15,
                    or: a15,
                    ed: a15,
                    go: a15,
                    belau: a15,
                    cloudns: o16,
                    x443: o16
                }
            },
            py: {
                $: 1,
                succ: {
                    com: a15,
                    coop: a15,
                    edu: a15,
                    gov: a15,
                    mil: a15,
                    net: a15,
                    org: a15
                }
            },
            qa: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    mil: a15,
                    name: a15,
                    net: a15,
                    org: a15,
                    sch: a15,
                    blogspot: o16
                }
            },
            re: {
                $: 1,
                succ: {
                    asso: a15,
                    com: a15,
                    nom: a15,
                    blogspot: o16
                }
            },
            ro: {
                $: 1,
                succ: {
                    arts: a15,
                    com: a15,
                    firm: a15,
                    info: a15,
                    nom: a15,
                    nt: a15,
                    org: a15,
                    rec: a15,
                    store: a15,
                    tm: a15,
                    www: a15,
                    co: o16,
                    shop: o16,
                    blogspot: o16,
                    barsy: o16
                }
            },
            rs: {
                $: 1,
                succ: {
                    ac: a15,
                    co: a15,
                    edu: a15,
                    gov: a15,
                    in: a15,
                    org: a15,
                    brendly: {
                        $: 0,
                        succ: {
                            shop: o16
                        }
                    },
                    blogspot: o16,
                    ua: o16,
                    ox: o16
                }
            },
            ru: {
                $: 1,
                succ: {
                    ac: o16,
                    edu: o16,
                    gov: o16,
                    int: o16,
                    mil: o16,
                    test: o16,
                    eurodir: o16,
                    adygeya: o16,
                    bashkiria: o16,
                    bir: o16,
                    cbg: o16,
                    com: o16,
                    dagestan: o16,
                    grozny: o16,
                    kalmykia: o16,
                    kustanai: o16,
                    marine: o16,
                    mordovia: o16,
                    msk: o16,
                    mytis: o16,
                    nalchik: o16,
                    nov: o16,
                    pyatigorsk: o16,
                    spb: o16,
                    vladikavkaz: o16,
                    vladimir: o16,
                    blogspot: o16,
                    na4u: o16,
                    mircloud: o16,
                    regruhosting: z,
                    myjino: {
                        $: 2,
                        succ: {
                            hosting: e12,
                            landing: e12,
                            spectrum: e12,
                            vps: e12
                        }
                    },
                    cldmail: {
                        $: 0,
                        succ: {
                            hb: o16
                        }
                    },
                    mcdir: {
                        $: 2,
                        succ: {
                            vps: o16
                        }
                    },
                    mcpre: o16,
                    net: o16,
                    org: o16,
                    pp: o16,
                    lk3: o16,
                    ras: o16
                }
            },
            rw: {
                $: 1,
                succ: {
                    ac: a15,
                    co: a15,
                    coop: a15,
                    gov: a15,
                    mil: a15,
                    net: a15,
                    org: a15
                }
            },
            sa: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    gov: a15,
                    med: a15,
                    pub: a15,
                    edu: a15,
                    sch: a15
                }
            },
            sb: i12,
            sc: i12,
            sd: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    edu: a15,
                    med: a15,
                    tv: a15,
                    gov: a15,
                    info: a15
                }
            },
            se: {
                $: 1,
                succ: {
                    a: a15,
                    ac: a15,
                    b: a15,
                    bd: a15,
                    brand: a15,
                    c: a15,
                    d: a15,
                    e: a15,
                    f: a15,
                    fh: a15,
                    fhsk: a15,
                    fhv: a15,
                    g: a15,
                    h: a15,
                    i: a15,
                    k: a15,
                    komforb: a15,
                    kommunalforbund: a15,
                    komvux: a15,
                    l: a15,
                    lanbib: a15,
                    m: a15,
                    n: a15,
                    naturbruksgymn: a15,
                    o: a15,
                    org: a15,
                    p: a15,
                    parti: a15,
                    pp: a15,
                    press: a15,
                    r: a15,
                    s: a15,
                    t: a15,
                    tm: a15,
                    u: a15,
                    w: a15,
                    x: a15,
                    y: a15,
                    z: a15,
                    com: o16,
                    blogspot: o16,
                    conf: o16,
                    iopsys: o16,
                    itcouldbewor: o16,
                    myspreadshop: o16,
                    paba: {
                        $: 0,
                        succ: {
                            su: o16
                        }
                    }
                }
            },
            sg: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    gov: a15,
                    edu: a15,
                    per: a15,
                    blogspot: o16,
                    enscaled: o16
                }
            },
            sh: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    gov: a15,
                    org: a15,
                    mil: a15,
                    bip: o16,
                    hashbang: o16,
                    platform: {
                        $: 0,
                        succ: {
                            bc: o16,
                            ent: o16,
                            eu: o16,
                            us: o16
                        }
                    },
                    now: o16,
                    vxl: o16,
                    wedeploy: o16
                }
            },
            si: {
                $: 1,
                succ: {
                    gitapp: o16,
                    gitpage: o16,
                    blogspot: o16
                }
            },
            sj: a15,
            sk: s8,
            sl: i12,
            sm: a15,
            sn: {
                $: 1,
                succ: {
                    art: a15,
                    com: a15,
                    edu: a15,
                    gouv: a15,
                    org: a15,
                    perso: a15,
                    univ: a15,
                    blogspot: o16
                }
            },
            so: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    me: a15,
                    net: a15,
                    org: a15,
                    sch: o16
                }
            },
            sr: a15,
            ss: {
                $: 1,
                succ: {
                    biz: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    me: a15,
                    net: a15,
                    org: a15,
                    sch: a15
                }
            },
            st: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    consulado: a15,
                    edu: a15,
                    embaixada: a15,
                    mil: a15,
                    net: a15,
                    org: a15,
                    principe: a15,
                    saotome: a15,
                    store: a15,
                    noho: o16
                }
            },
            su: {
                $: 1,
                succ: {
                    abkhazia: o16,
                    adygeya: o16,
                    aktyubinsk: o16,
                    arkhangelsk: o16,
                    armenia: o16,
                    ashgabad: o16,
                    azerbaijan: o16,
                    balashov: o16,
                    bashkiria: o16,
                    bryansk: o16,
                    bukhara: o16,
                    chimkent: o16,
                    dagestan: o16,
                    "east-kazakhstan": o16,
                    exnet: o16,
                    georgia: o16,
                    grozny: o16,
                    ivanovo: o16,
                    jambyl: o16,
                    kalmykia: o16,
                    kaluga: o16,
                    karacol: o16,
                    karaganda: o16,
                    karelia: o16,
                    khakassia: o16,
                    krasnodar: o16,
                    kurgan: o16,
                    kustanai: o16,
                    lenug: o16,
                    mangyshlak: o16,
                    mordovia: o16,
                    msk: o16,
                    murmansk: o16,
                    nalchik: o16,
                    navoi: o16,
                    "north-kazakhstan": o16,
                    nov: o16,
                    obninsk: o16,
                    penza: o16,
                    pokrovsk: o16,
                    sochi: o16,
                    spb: o16,
                    tashkent: o16,
                    termez: o16,
                    togliatti: o16,
                    troitsk: o16,
                    tselinograd: o16,
                    tula: o16,
                    tuva: o16,
                    vladikavkaz: o16,
                    vladimir: o16,
                    vologda: o16
                }
            },
            sv: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gob: a15,
                    org: a15,
                    red: a15
                }
            },
            sx: n7,
            sy: C,
            sz: {
                $: 1,
                succ: {
                    co: a15,
                    ac: a15,
                    org: a15
                }
            },
            tc: {
                $: 1,
                succ: {
                    ch: o16,
                    me: o16,
                    we: o16
                }
            },
            td: s8,
            tel: a15,
            tf: {
                $: 1,
                succ: {
                    sch: o16
                }
            },
            tg: a15,
            th: {
                $: 1,
                succ: {
                    ac: a15,
                    co: a15,
                    go: a15,
                    in: a15,
                    mi: a15,
                    net: a15,
                    or: a15,
                    online: o16,
                    shop: o16
                }
            },
            tj: {
                $: 1,
                succ: {
                    ac: a15,
                    biz: a15,
                    co: a15,
                    com: a15,
                    edu: a15,
                    go: a15,
                    gov: a15,
                    int: a15,
                    mil: a15,
                    name: a15,
                    net: a15,
                    nic: a15,
                    org: a15,
                    test: a15,
                    web: a15
                }
            },
            tk: a15,
            tl: n7,
            tm: {
                $: 1,
                succ: {
                    com: a15,
                    co: a15,
                    org: a15,
                    net: a15,
                    nom: a15,
                    gov: a15,
                    mil: a15,
                    edu: a15
                }
            },
            tn: {
                $: 1,
                succ: {
                    com: a15,
                    ens: a15,
                    fin: a15,
                    gov: a15,
                    ind: a15,
                    info: a15,
                    intl: a15,
                    mincom: a15,
                    nat: a15,
                    net: a15,
                    org: a15,
                    perso: a15,
                    tourism: a15,
                    orangecloud: o16
                }
            },
            to: {
                $: 1,
                succ: {
                    611: o16,
                    com: a15,
                    gov: a15,
                    net: a15,
                    org: a15,
                    edu: a15,
                    mil: a15,
                    oya: o16,
                    rdv: o16,
                    vpnplus: o16,
                    quickconnect: m2,
                    nyan: o16
                }
            },
            tr: {
                $: 1,
                succ: {
                    av: a15,
                    bbs: a15,
                    bel: a15,
                    biz: a15,
                    com: s8,
                    dr: a15,
                    edu: a15,
                    gen: a15,
                    gov: a15,
                    info: a15,
                    mil: a15,
                    k12: a15,
                    kep: a15,
                    name: a15,
                    net: a15,
                    org: a15,
                    pol: a15,
                    tel: a15,
                    tsk: a15,
                    tv: a15,
                    web: a15,
                    nc: n7
                }
            },
            tt: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    org: a15,
                    net: a15,
                    biz: a15,
                    info: a15,
                    pro: a15,
                    int: a15,
                    coop: a15,
                    jobs: a15,
                    mobi: a15,
                    travel: a15,
                    museum: a15,
                    aero: a15,
                    name: a15,
                    gov: a15,
                    edu: a15
                }
            },
            tv: {
                $: 1,
                succ: {
                    dyndns: o16,
                    "better-than": o16,
                    "on-the-web": o16,
                    "worse-than": o16
                }
            },
            tw: {
                $: 1,
                succ: {
                    edu: a15,
                    gov: a15,
                    mil: a15,
                    com: {
                        $: 1,
                        succ: {
                            mymailer: o16
                        }
                    },
                    net: a15,
                    org: a15,
                    idv: a15,
                    game: a15,
                    ebiz: a15,
                    club: a15,
                    "xn--zf0ao64a": a15,
                    "網路": a15,
                    "xn--uc0atv": a15,
                    "組織": a15,
                    "xn--czrw28b": a15,
                    "商業": a15,
                    url: o16,
                    blogspot: o16
                }
            },
            tz: {
                $: 1,
                succ: {
                    ac: a15,
                    co: a15,
                    go: a15,
                    hotel: a15,
                    info: a15,
                    me: a15,
                    mil: a15,
                    mobi: a15,
                    ne: a15,
                    or: a15,
                    sc: a15,
                    tv: a15
                }
            },
            ua: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    gov: a15,
                    in: a15,
                    net: a15,
                    org: a15,
                    cherkassy: a15,
                    cherkasy: a15,
                    chernigov: a15,
                    chernihiv: a15,
                    chernivtsi: a15,
                    chernovtsy: a15,
                    ck: a15,
                    cn: a15,
                    cr: a15,
                    crimea: a15,
                    cv: a15,
                    dn: a15,
                    dnepropetrovsk: a15,
                    dnipropetrovsk: a15,
                    donetsk: a15,
                    dp: a15,
                    if: a15,
                    "ivano-frankivsk": a15,
                    kh: a15,
                    kharkiv: a15,
                    kharkov: a15,
                    kherson: a15,
                    khmelnitskiy: a15,
                    khmelnytskyi: a15,
                    kiev: a15,
                    kirovograd: a15,
                    km: a15,
                    kr: a15,
                    krym: a15,
                    ks: a15,
                    kv: a15,
                    kyiv: a15,
                    lg: a15,
                    lt: a15,
                    lugansk: a15,
                    lutsk: a15,
                    lv: a15,
                    lviv: a15,
                    mk: a15,
                    mykolaiv: a15,
                    nikolaev: a15,
                    od: a15,
                    odesa: a15,
                    odessa: a15,
                    pl: a15,
                    poltava: a15,
                    rivne: a15,
                    rovno: a15,
                    rv: a15,
                    sb: a15,
                    sebastopol: a15,
                    sevastopol: a15,
                    sm: a15,
                    sumy: a15,
                    te: a15,
                    ternopil: a15,
                    uz: a15,
                    uzhgorod: a15,
                    vinnica: a15,
                    vinnytsia: a15,
                    vn: a15,
                    volyn: a15,
                    yalta: a15,
                    zaporizhzhe: a15,
                    zaporizhzhia: a15,
                    zhitomir: a15,
                    zhytomyr: a15,
                    zp: a15,
                    zt: a15,
                    cc: o16,
                    inf: o16,
                    ltd: o16,
                    cx: o16,
                    biz: o16,
                    co: o16,
                    pp: o16,
                    v: o16
                }
            },
            ug: {
                $: 1,
                succ: {
                    co: a15,
                    or: a15,
                    ac: a15,
                    sc: a15,
                    go: a15,
                    ne: a15,
                    com: a15,
                    org: a15,
                    blogspot: o16
                }
            },
            uk: {
                $: 1,
                succ: {
                    ac: a15,
                    co: {
                        $: 1,
                        succ: {
                            bytemark: {
                                $: 0,
                                succ: {
                                    dh: o16,
                                    vm: o16
                                }
                            },
                            blogspot: o16,
                            layershift: $,
                            barsy: o16,
                            barsyonline: o16,
                            retrosnub: S,
                            "nh-serv": o16,
                            "no-ip": o16,
                            wellbeingzone: o16,
                            adimo: o16,
                            myspreadshop: o16,
                            gwiddle: o16
                        }
                    },
                    gov: {
                        $: 1,
                        succ: {
                            campaign: o16,
                            service: o16,
                            api: o16,
                            homeoffice: o16
                        }
                    },
                    ltd: a15,
                    me: a15,
                    net: a15,
                    nhs: a15,
                    org: {
                        $: 1,
                        succ: {
                            glug: o16,
                            lug: o16,
                            lugs: o16,
                            affinitylottery: o16,
                            raffleentry: o16,
                            weeklylottery: o16
                        }
                    },
                    plc: a15,
                    police: a15,
                    sch: r6,
                    conn: o16,
                    copro: o16,
                    hosp: o16,
                    "independent-commission": o16,
                    "independent-inquest": o16,
                    "independent-inquiry": o16,
                    "independent-panel": o16,
                    "independent-review": o16,
                    "public-inquiry": o16,
                    "royal-commission": o16,
                    pymnt: o16,
                    barsy: o16
                }
            },
            us: {
                $: 1,
                succ: {
                    dni: a15,
                    fed: a15,
                    isa: a15,
                    kids: a15,
                    nsn: a15,
                    ak: B,
                    al: B,
                    ar: B,
                    as: B,
                    az: B,
                    ca: B,
                    co: B,
                    ct: B,
                    dc: B,
                    de: {
                        $: 1,
                        succ: {
                            k12: a15,
                            cc: a15,
                            lib: o16
                        }
                    },
                    fl: B,
                    ga: B,
                    gu: B,
                    hi: E,
                    ia: B,
                    id: B,
                    il: B,
                    in: B,
                    ks: B,
                    ky: B,
                    la: B,
                    ma: {
                        $: 1,
                        succ: {
                            k12: {
                                $: 1,
                                succ: {
                                    pvt: a15,
                                    chtr: a15,
                                    paroch: a15
                                }
                            },
                            cc: a15,
                            lib: a15
                        }
                    },
                    md: B,
                    me: B,
                    mi: {
                        $: 1,
                        succ: {
                            k12: a15,
                            cc: a15,
                            lib: a15,
                            "ann-arbor": a15,
                            cog: a15,
                            dst: a15,
                            eaton: a15,
                            gen: a15,
                            mus: a15,
                            tec: a15,
                            washtenaw: a15
                        }
                    },
                    mn: B,
                    mo: B,
                    ms: B,
                    mt: B,
                    nc: B,
                    nd: E,
                    ne: B,
                    nh: B,
                    nj: B,
                    nm: B,
                    nv: B,
                    ny: B,
                    oh: B,
                    ok: B,
                    or: B,
                    pa: B,
                    pr: B,
                    ri: E,
                    sc: B,
                    sd: E,
                    tn: B,
                    tx: B,
                    ut: B,
                    vi: B,
                    vt: B,
                    va: B,
                    wa: B,
                    wi: B,
                    wv: {
                        $: 1,
                        succ: {
                            cc: a15
                        }
                    },
                    wy: B,
                    graphox: o16,
                    cloudns: o16,
                    drud: o16,
                    "is-by": o16,
                    "land-4-sale": o16,
                    "stuff-4-sale": o16,
                    enscaled: {
                        $: 0,
                        succ: {
                            phx: o16
                        }
                    },
                    mircloud: o16,
                    freeddns: o16,
                    golffan: o16,
                    noip: o16,
                    pointto: o16,
                    platterp: o16
                }
            },
            uy: {
                $: 1,
                succ: {
                    com: s8,
                    edu: a15,
                    gub: a15,
                    mil: a15,
                    net: a15,
                    org: a15
                }
            },
            uz: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    net: a15,
                    org: a15
                }
            },
            va: a15,
            vc: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    gov: a15,
                    mil: a15,
                    edu: a15,
                    gv: {
                        $: 2,
                        succ: {
                            d: o16
                        }
                    },
                    "0e": o16
                }
            },
            ve: {
                $: 1,
                succ: {
                    arts: a15,
                    bib: a15,
                    co: a15,
                    com: a15,
                    e12: a15,
                    edu: a15,
                    firm: a15,
                    gob: a15,
                    gov: a15,
                    info: a15,
                    int: a15,
                    mil: a15,
                    net: a15,
                    nom: a15,
                    org: a15,
                    rar: a15,
                    rec: a15,
                    store: a15,
                    tec: a15,
                    web: a15
                }
            },
            vg: {
                $: 1,
                succ: {
                    at: o16
                }
            },
            vi: {
                $: 1,
                succ: {
                    co: a15,
                    com: a15,
                    k12: a15,
                    net: a15,
                    org: a15
                }
            },
            vn: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    edu: a15,
                    gov: a15,
                    int: a15,
                    ac: a15,
                    biz: a15,
                    info: a15,
                    name: a15,
                    pro: a15,
                    health: a15,
                    blogspot: o16
                }
            },
            vu: {
                $: 1,
                succ: {
                    com: a15,
                    edu: a15,
                    net: a15,
                    org: a15,
                    cn: o16,
                    blog: o16,
                    dev: o16,
                    me: o16
                }
            },
            wf: {
                $: 1,
                succ: {
                    biz: o16,
                    sch: o16
                }
            },
            ws: {
                $: 1,
                succ: {
                    com: a15,
                    net: a15,
                    org: a15,
                    gov: a15,
                    edu: a15,
                    advisor: e12,
                    cloud66: o16,
                    dyndns: o16,
                    mypets: o16
                }
            },
            yt: {
                $: 1,
                succ: {
                    org: o16
                }
            },
            "xn--mgbaam7a8h": a15,
            "امارات": a15,
            "xn--y9a3aq": a15,
            "հայ": a15,
            "xn--54b7fta0cc": a15,
            "বাংলা": a15,
            "xn--90ae": a15,
            "бг": a15,
            "xn--mgbcpq6gpa1a": a15,
            "البحرين": a15,
            "xn--90ais": a15,
            "бел": a15,
            "xn--fiqs8s": a15,
            "中国": a15,
            "xn--fiqz9s": a15,
            "中國": a15,
            "xn--lgbbat1ad8j": a15,
            "الجزائر": a15,
            "xn--wgbh1c": a15,
            "مصر": a15,
            "xn--e1a4c": a15,
            "ею": a15,
            "xn--qxa6a": a15,
            "ευ": a15,
            "xn--mgbah1a3hjkrd": a15,
            "موريتانيا": a15,
            "xn--node": a15,
            "გე": a15,
            "xn--qxam": a15,
            "ελ": a15,
            "xn--j6w193g": {
                $: 1,
                succ: {
                    "xn--55qx5d": a15,
                    "xn--wcvs22d": a15,
                    "xn--mxtq1m": a15,
                    "xn--gmqw5a": a15,
                    "xn--od0alg": a15,
                    "xn--uc0atv": a15
                }
            },
            "香港": {
                $: 1,
                succ: {
                    "公司": a15,
                    "教育": a15,
                    "政府": a15,
                    "個人": a15,
                    "網絡": a15,
                    "組織": a15
                }
            },
            "xn--2scrj9c": a15,
            "ಭಾರತ": a15,
            "xn--3hcrj9c": a15,
            "ଭାରତ": a15,
            "xn--45br5cyl": a15,
            "ভাৰত": a15,
            "xn--h2breg3eve": a15,
            "भारतम्": a15,
            "xn--h2brj9c8c": a15,
            "भारोत": a15,
            "xn--mgbgu82a": a15,
            "ڀارت": a15,
            "xn--rvc1e0am3e": a15,
            "ഭാരതം": a15,
            "xn--h2brj9c": a15,
            "भारत": a15,
            "xn--mgbbh1a": a15,
            "بارت": a15,
            "xn--mgbbh1a71e": a15,
            "بھارت": a15,
            "xn--fpcrj9c3d": a15,
            "భారత్": a15,
            "xn--gecrj9c": a15,
            "ભારત": a15,
            "xn--s9brj9c": a15,
            "ਭਾਰਤ": a15,
            "xn--45brj9c": a15,
            "ভারত": a15,
            "xn--xkc2dl3a5ee0h": a15,
            "இந்தியா": a15,
            "xn--mgba3a4f16a": a15,
            "ایران": a15,
            "xn--mgba3a4fra": a15,
            "ايران": a15,
            "xn--mgbtx2b": a15,
            "عراق": a15,
            "xn--mgbayh7gpa": a15,
            "الاردن": a15,
            "xn--3e0b707e": a15,
            "한국": a15,
            "xn--80ao21a": a15,
            "қаз": a15,
            "xn--q7ce6a": a15,
            "ລາວ": a15,
            "xn--fzc2c9e2c": a15,
            "ලංකා": a15,
            "xn--xkc2al3hye2a": a15,
            "இலங்கை": a15,
            "xn--mgbc0a9azcg": a15,
            "المغرب": a15,
            "xn--d1alf": a15,
            "мкд": a15,
            "xn--l1acc": a15,
            "мон": a15,
            "xn--mix891f": a15,
            "澳門": a15,
            "xn--mix082f": a15,
            "澳门": a15,
            "xn--mgbx4cd0ab": a15,
            "مليسيا": a15,
            "xn--mgb9awbf": a15,
            "عمان": a15,
            "xn--mgbai9azgqp6j": a15,
            "پاکستان": a15,
            "xn--mgbai9a5eva00b": a15,
            "پاكستان": a15,
            "xn--ygbi2ammx": a15,
            "فلسطين": a15,
            "xn--90a3ac": {
                $: 1,
                succ: {
                    "xn--o1ac": a15,
                    "xn--c1avg": a15,
                    "xn--90azh": a15,
                    "xn--d1at": a15,
                    "xn--o1ach": a15,
                    "xn--80au": a15
                }
            },
            "срб": {
                $: 1,
                succ: {
                    "пр": a15,
                    "орг": a15,
                    "обр": a15,
                    "од": a15,
                    "упр": a15,
                    "ак": a15
                }
            },
            "xn--p1ai": a15,
            "рф": a15,
            "xn--wgbl6a": a15,
            "قطر": a15,
            "xn--mgberp4a5d4ar": a15,
            "السعودية": a15,
            "xn--mgberp4a5d4a87g": a15,
            "السعودیة": a15,
            "xn--mgbqly7c0a67fbc": a15,
            "السعودیۃ": a15,
            "xn--mgbqly7cvafr": a15,
            "السعوديه": a15,
            "xn--mgbpl2fh": a15,
            "سودان": a15,
            "xn--yfro4i67o": a15,
            "新加坡": a15,
            "xn--clchc0ea0b2g2a9gcd": a15,
            "சிங்கப்பூர்": a15,
            "xn--ogbpf8fl": a15,
            "سورية": a15,
            "xn--mgbtf8fl": a15,
            "سوريا": a15,
            "xn--o3cw4h": {
                $: 1,
                succ: {
                    "xn--12c1fe0br": a15,
                    "xn--12co0c3b4eva": a15,
                    "xn--h3cuzk1di": a15,
                    "xn--o3cyx2a": a15,
                    "xn--m3ch0j3a": a15,
                    "xn--12cfi8ixb8l": a15
                }
            },
            "ไทย": {
                $: 1,
                succ: {
                    "ศึกษา": a15,
                    "ธุรกิจ": a15,
                    "รัฐบาล": a15,
                    "ทหาร": a15,
                    "เน็ต": a15,
                    "องค์กร": a15
                }
            },
            "xn--pgbs0dh": a15,
            "تونس": a15,
            "xn--kpry57d": a15,
            "台灣": a15,
            "xn--kprw13d": a15,
            "台湾": a15,
            "xn--nnx388a": a15,
            "臺灣": a15,
            "xn--j1amh": a15,
            "укр": a15,
            "xn--mgb2ddes": a15,
            "اليمن": a15,
            xxx: a15,
            ye: C,
            za: {
                $: 0,
                succ: {
                    ac: a15,
                    agric: a15,
                    alt: a15,
                    co: s8,
                    edu: a15,
                    gov: a15,
                    grondar: a15,
                    law: a15,
                    mil: a15,
                    net: a15,
                    ngo: a15,
                    nic: a15,
                    nis: a15,
                    nom: a15,
                    org: a15,
                    school: a15,
                    tm: a15,
                    web: a15
                }
            },
            zm: {
                $: 1,
                succ: {
                    ac: a15,
                    biz: a15,
                    co: a15,
                    com: a15,
                    edu: a15,
                    gov: a15,
                    info: a15,
                    mil: a15,
                    net: a15,
                    org: a15,
                    sch: a15
                }
            },
            zw: {
                $: 1,
                succ: {
                    ac: a15,
                    co: a15,
                    gov: a15,
                    mil: a15,
                    org: a15
                }
            },
            aaa: a15,
            aarp: a15,
            abarth: a15,
            abb: a15,
            abbott: a15,
            abbvie: a15,
            abc: a15,
            able: a15,
            abogado: a15,
            abudhabi: a15,
            academy: {
                $: 1,
                succ: {
                    official: o16
                }
            },
            accenture: a15,
            accountant: a15,
            accountants: a15,
            aco: a15,
            actor: a15,
            adac: a15,
            ads: a15,
            adult: a15,
            aeg: a15,
            aetna: a15,
            afl: a15,
            africa: a15,
            agakhan: a15,
            agency: a15,
            aig: a15,
            airbus: a15,
            airforce: a15,
            airtel: a15,
            akdn: a15,
            alfaromeo: a15,
            alibaba: a15,
            alipay: a15,
            allfinanz: a15,
            allstate: a15,
            ally: a15,
            alsace: a15,
            alstom: a15,
            amazon: a15,
            americanexpress: a15,
            americanfamily: a15,
            amex: a15,
            amfam: a15,
            amica: a15,
            amsterdam: a15,
            analytics: a15,
            android: a15,
            anquan: a15,
            anz: a15,
            aol: a15,
            apartments: a15,
            app: {
                $: 1,
                succ: {
                    beget: e12,
                    clerk: o16,
                    clerkstage: o16,
                    wnext: o16,
                    platform0: o16,
                    deta: o16,
                    ondigitalocean: o16,
                    easypanel: o16,
                    encr: o16,
                    edgecompute: o16,
                    fireweb: o16,
                    onflashdrive: o16,
                    framer: o16,
                    run: {
                        $: 2,
                        succ: {
                            a: o16
                        }
                    },
                    web: o16,
                    hasura: o16,
                    loginline: o16,
                    messerli: o16,
                    netlify: o16,
                    developer: e12,
                    noop: o16,
                    northflank: e12,
                    telebit: o16,
                    typedream: o16,
                    vercel: o16,
                    bookonline: o16
                }
            },
            apple: a15,
            aquarelle: a15,
            arab: a15,
            aramco: a15,
            archi: a15,
            army: a15,
            art: a15,
            arte: a15,
            asda: a15,
            associates: a15,
            athleta: a15,
            attorney: a15,
            auction: a15,
            audi: a15,
            audible: a15,
            audio: a15,
            auspost: a15,
            author: a15,
            auto: a15,
            autos: a15,
            avianca: a15,
            aws: a15,
            axa: a15,
            azure: a15,
            baby: a15,
            baidu: a15,
            banamex: a15,
            bananarepublic: a15,
            band: a15,
            bank: a15,
            bar: a15,
            barcelona: a15,
            barclaycard: a15,
            barclays: a15,
            barefoot: a15,
            bargains: a15,
            baseball: a15,
            basketball: {
                $: 1,
                succ: {
                    aus: o16,
                    nz: o16
                }
            },
            bauhaus: a15,
            bayern: a15,
            bbc: a15,
            bbt: a15,
            bbva: a15,
            bcg: a15,
            bcn: a15,
            beats: a15,
            beauty: a15,
            beer: a15,
            bentley: a15,
            berlin: a15,
            best: a15,
            bestbuy: a15,
            bet: a15,
            bharti: a15,
            bible: a15,
            bid: a15,
            bike: a15,
            bing: a15,
            bingo: a15,
            bio: a15,
            black: a15,
            blackfriday: a15,
            blockbuster: a15,
            blog: a15,
            bloomberg: a15,
            blue: a15,
            bms: a15,
            bmw: a15,
            bnpparibas: a15,
            boats: a15,
            boehringer: a15,
            bofa: a15,
            bom: a15,
            bond: a15,
            boo: a15,
            book: a15,
            booking: a15,
            bosch: a15,
            bostik: a15,
            boston: a15,
            bot: a15,
            boutique: a15,
            box: a15,
            bradesco: a15,
            bridgestone: a15,
            broadway: a15,
            broker: a15,
            brother: a15,
            brussels: a15,
            bugatti: a15,
            build: a15,
            builders: {
                $: 1,
                succ: {
                    cloudsite: o16
                }
            },
            business: c3,
            buy: a15,
            buzz: a15,
            bzh: a15,
            cab: a15,
            cafe: a15,
            cal: a15,
            call: a15,
            calvinklein: a15,
            cam: a15,
            camera: a15,
            camp: a15,
            cancerresearch: a15,
            canon: a15,
            capetown: a15,
            capital: a15,
            capitalone: a15,
            car: a15,
            caravan: a15,
            cards: a15,
            care: a15,
            career: a15,
            careers: a15,
            cars: a15,
            casa: {
                $: 1,
                succ: {
                    nabu: {
                        $: 0,
                        succ: {
                            ui: o16
                        }
                    }
                }
            },
            case: a15,
            cash: a15,
            casino: a15,
            catering: a15,
            catholic: a15,
            cba: a15,
            cbn: a15,
            cbre: a15,
            cbs: a15,
            center: a15,
            ceo: a15,
            cern: a15,
            cfa: a15,
            cfd: a15,
            chanel: a15,
            channel: a15,
            charity: a15,
            chase: a15,
            chat: a15,
            cheap: a15,
            chintai: a15,
            christmas: a15,
            chrome: a15,
            church: a15,
            cipriani: a15,
            circle: a15,
            cisco: a15,
            citadel: a15,
            citi: a15,
            citic: a15,
            city: a15,
            cityeats: a15,
            claims: a15,
            cleaning: a15,
            click: a15,
            clinic: a15,
            clinique: a15,
            clothing: a15,
            cloud: {
                $: 1,
                succ: {
                    banzai: e12,
                    elementor: o16,
                    encoway: {
                        $: 0,
                        succ: {
                            eu: o16
                        }
                    },
                    statics: e12,
                    ravendb: o16,
                    axarnet: {
                        $: 0,
                        succ: {
                            "es-1": o16
                        }
                    },
                    diadem: o16,
                    jelastic: {
                        $: 0,
                        succ: {
                            vip: o16
                        }
                    },
                    jele: o16,
                    "jenv-aruba": {
                        $: 0,
                        succ: {
                            aruba: {
                                $: 0,
                                succ: {
                                    eur: {
                                        $: 0,
                                        succ: {
                                            it1: o16
                                        }
                                    }
                                }
                            },
                            it1: o16
                        }
                    },
                    keliweb: {
                        $: 2,
                        succ: {
                            cs: o16
                        }
                    },
                    oxa: {
                        $: 2,
                        succ: {
                            tn: o16,
                            uk: o16
                        }
                    },
                    primetel: {
                        $: 2,
                        succ: {
                            uk: o16
                        }
                    },
                    reclaim: {
                        $: 0,
                        succ: {
                            ca: o16,
                            uk: o16,
                            us: o16
                        }
                    },
                    trendhosting: {
                        $: 0,
                        succ: {
                            ch: o16,
                            de: o16
                        }
                    },
                    jotelulu: o16,
                    kuleuven: o16,
                    linkyard: o16,
                    magentosite: e12,
                    perspecta: o16,
                    vapor: o16,
                    "on-rancher": e12,
                    scw: {
                        $: 0,
                        succ: {
                            baremetal: {
                                $: 0,
                                succ: {
                                    "fr-par-1": o16,
                                    "fr-par-2": o16,
                                    "nl-ams-1": o16
                                }
                            },
                            "fr-par": {
                                $: 0,
                                succ: {
                                    fnc: {
                                        $: 2,
                                        succ: {
                                            functions: o16
                                        }
                                    },
                                    k8s: u2,
                                    s3: o16,
                                    "s3-website": o16,
                                    whm: o16
                                }
                            },
                            instances: {
                                $: 0,
                                succ: {
                                    priv: o16,
                                    pub: o16
                                }
                            },
                            k8s: o16,
                            "nl-ams": {
                                $: 0,
                                succ: {
                                    k8s: u2,
                                    s3: o16,
                                    "s3-website": o16,
                                    whm: o16
                                }
                            },
                            "pl-waw": {
                                $: 0,
                                succ: {
                                    k8s: u2,
                                    s3: o16,
                                    "s3-website": o16
                                }
                            },
                            scalebook: o16,
                            smartlabeling: o16
                        }
                    },
                    sensiosite: e12,
                    trafficplex: o16,
                    urown: o16,
                    voorloper: o16
                }
            },
            club: {
                $: 1,
                succ: {
                    cloudns: o16,
                    jele: o16,
                    barsy: o16,
                    pony: o16
                }
            },
            clubmed: a15,
            coach: a15,
            codes: {
                $: 1,
                succ: {
                    owo: e12
                }
            },
            coffee: a15,
            college: a15,
            cologne: a15,
            comcast: a15,
            commbank: a15,
            community: {
                $: 1,
                succ: {
                    nog: o16,
                    ravendb: o16,
                    myforum: o16
                }
            },
            company: a15,
            compare: a15,
            computer: a15,
            comsec: a15,
            condos: a15,
            construction: a15,
            consulting: a15,
            contact: a15,
            contractors: a15,
            cooking: a15,
            cookingchannel: a15,
            cool: {
                $: 1,
                succ: {
                    elementor: o16,
                    de: o16
                }
            },
            corsica: a15,
            country: a15,
            coupon: a15,
            coupons: a15,
            courses: a15,
            cpa: a15,
            credit: a15,
            creditcard: a15,
            creditunion: a15,
            cricket: a15,
            crown: a15,
            crs: a15,
            cruise: a15,
            cruises: a15,
            cuisinella: a15,
            cymru: a15,
            cyou: a15,
            dabur: a15,
            dad: a15,
            dance: a15,
            data: a15,
            date: a15,
            dating: a15,
            datsun: a15,
            day: a15,
            dclk: a15,
            dds: a15,
            deal: a15,
            dealer: a15,
            deals: a15,
            degree: a15,
            delivery: a15,
            dell: a15,
            deloitte: a15,
            delta: a15,
            democrat: a15,
            dental: a15,
            dentist: a15,
            desi: a15,
            design: {
                $: 1,
                succ: {
                    bss: o16
                }
            },
            dev: {
                $: 1,
                succ: {
                    lcl: e12,
                    lclstage: e12,
                    stg: e12,
                    stgstage: e12,
                    pages: o16,
                    workers: o16,
                    curv: o16,
                    deno: o16,
                    "deno-staging": o16,
                    deta: o16,
                    fly: o16,
                    githubpreview: o16,
                    gateway: e12,
                    iserv: o16,
                    localcert: {
                        $: 0,
                        succ: {
                            user: e12
                        }
                    },
                    loginline: o16,
                    mediatech: o16,
                    "platter-app": o16,
                    shiftcrypto: o16,
                    vercel: o16,
                    webhare: e12
                }
            },
            dhl: a15,
            diamonds: a15,
            diet: a15,
            digital: {
                $: 1,
                succ: {
                    cloudapps: {
                        $: 2,
                        succ: {
                            london: o16
                        }
                    }
                }
            },
            direct: a15,
            directory: a15,
            discount: a15,
            discover: a15,
            dish: a15,
            diy: a15,
            dnp: a15,
            docs: a15,
            doctor: a15,
            dog: a15,
            domains: a15,
            dot: a15,
            download: a15,
            drive: a15,
            dtv: a15,
            dubai: a15,
            dunlop: a15,
            dupont: a15,
            durban: a15,
            dvag: a15,
            dvr: a15,
            earth: {
                $: 1,
                succ: {
                    dapps: {
                        $: 0,
                        succ: {
                            "*": o16,
                            bzz: e12
                        }
                    }
                }
            },
            eat: a15,
            eco: a15,
            edeka: a15,
            education: c3,
            email: a15,
            emerck: a15,
            energy: a15,
            engineer: a15,
            engineering: a15,
            enterprises: a15,
            epson: a15,
            equipment: a15,
            ericsson: a15,
            erni: a15,
            esq: a15,
            estate: {
                $: 1,
                succ: {
                    compute: e12
                }
            },
            etisalat: a15,
            eurovision: a15,
            eus: {
                $: 1,
                succ: {
                    party: j
                }
            },
            events: {
                $: 1,
                succ: {
                    koobin: o16,
                    co: o16
                }
            },
            exchange: a15,
            expert: a15,
            exposed: a15,
            express: a15,
            extraspace: a15,
            fage: a15,
            fail: a15,
            fairwinds: a15,
            faith: q,
            family: a15,
            fan: a15,
            fans: a15,
            farm: {
                $: 1,
                succ: {
                    storj: o16
                }
            },
            farmers: a15,
            fashion: {
                $: 1,
                succ: {
                    of: o16
                }
            },
            fast: a15,
            fedex: a15,
            feedback: a15,
            ferrari: a15,
            ferrero: a15,
            fiat: a15,
            fidelity: a15,
            fido: a15,
            film: a15,
            final: a15,
            finance: a15,
            financial: c3,
            fire: a15,
            firestone: a15,
            firmdale: a15,
            fish: a15,
            fishing: a15,
            fit: a15,
            fitness: a15,
            flickr: a15,
            flights: a15,
            flir: a15,
            florist: a15,
            flowers: a15,
            fly: a15,
            foo: a15,
            food: a15,
            foodnetwork: a15,
            football: a15,
            ford: a15,
            forex: a15,
            forsale: a15,
            forum: a15,
            foundation: a15,
            fox: a15,
            free: a15,
            fresenius: a15,
            frl: a15,
            frogans: a15,
            frontdoor: a15,
            frontier: a15,
            ftr: a15,
            fujitsu: a15,
            fun: a15,
            fund: a15,
            furniture: a15,
            futbol: a15,
            fyi: a15,
            gal: a15,
            gallery: a15,
            gallo: a15,
            gallup: a15,
            game: a15,
            games: a15,
            gap: a15,
            garden: a15,
            gay: a15,
            gbiz: a15,
            gdn: {
                $: 1,
                succ: {
                    cnpy: o16
                }
            },
            gea: a15,
            gent: a15,
            genting: a15,
            george: a15,
            ggee: a15,
            gift: a15,
            gifts: a15,
            gives: a15,
            giving: a15,
            glass: a15,
            gle: a15,
            global: a15,
            globo: a15,
            gmail: a15,
            gmbh: a15,
            gmo: a15,
            gmx: a15,
            godaddy: a15,
            gold: a15,
            goldpoint: a15,
            golf: a15,
            goo: a15,
            goodyear: a15,
            goog: {
                $: 1,
                succ: {
                    cloud: o16,
                    translate: o16,
                    usercontent: e12
                }
            },
            google: a15,
            gop: a15,
            got: a15,
            grainger: a15,
            graphics: a15,
            gratis: a15,
            green: a15,
            gripe: a15,
            grocery: a15,
            group: {
                $: 1,
                succ: {
                    discourse: o16
                }
            },
            guardian: a15,
            gucci: a15,
            guge: a15,
            guide: a15,
            guitars: a15,
            guru: a15,
            hair: a15,
            hamburg: a15,
            hangout: a15,
            haus: a15,
            hbo: a15,
            hdfc: a15,
            hdfcbank: a15,
            health: {
                $: 1,
                succ: {
                    hra: o16
                }
            },
            healthcare: a15,
            help: a15,
            helsinki: a15,
            here: a15,
            hermes: a15,
            hgtv: a15,
            hiphop: a15,
            hisamitsu: a15,
            hitachi: a15,
            hiv: a15,
            hkt: a15,
            hockey: a15,
            holdings: a15,
            holiday: a15,
            homedepot: a15,
            homegoods: a15,
            homes: a15,
            homesense: a15,
            honda: a15,
            horse: a15,
            hospital: a15,
            host: {
                $: 1,
                succ: {
                    cloudaccess: o16,
                    freesite: o16,
                    easypanel: o16,
                    fastvps: o16,
                    myfast: o16,
                    tempurl: o16,
                    wpmudev: o16,
                    jele: o16,
                    mircloud: o16,
                    pcloud: o16,
                    half: o16
                }
            },
            hosting: {
                $: 1,
                succ: {
                    opencraft: o16
                }
            },
            hot: a15,
            hoteles: a15,
            hotels: a15,
            hotmail: a15,
            house: a15,
            how: a15,
            hsbc: a15,
            hughes: a15,
            hyatt: a15,
            hyundai: a15,
            ibm: a15,
            icbc: a15,
            ice: a15,
            icu: a15,
            ieee: a15,
            ifm: a15,
            ikano: a15,
            imamat: a15,
            imdb: a15,
            immo: a15,
            immobilien: a15,
            inc: a15,
            industries: a15,
            infiniti: a15,
            ing: a15,
            ink: a15,
            institute: a15,
            insurance: a15,
            insure: a15,
            international: a15,
            intuit: a15,
            investments: a15,
            ipiranga: a15,
            irish: a15,
            ismaili: a15,
            ist: a15,
            istanbul: a15,
            itau: a15,
            itv: a15,
            jaguar: a15,
            java: a15,
            jcb: a15,
            jeep: a15,
            jetzt: a15,
            jewelry: a15,
            jio: a15,
            jll: a15,
            jmp: a15,
            jnj: a15,
            joburg: a15,
            jot: a15,
            joy: a15,
            jpmorgan: a15,
            jprs: a15,
            juegos: a15,
            juniper: a15,
            kaufen: a15,
            kddi: a15,
            kerryhotels: a15,
            kerrylogistics: a15,
            kerryproperties: a15,
            kfh: a15,
            kia: a15,
            kids: a15,
            kim: a15,
            kinder: a15,
            kindle: a15,
            kitchen: a15,
            kiwi: a15,
            koeln: a15,
            komatsu: a15,
            kosher: a15,
            kpmg: a15,
            kpn: a15,
            krd: {
                $: 1,
                succ: {
                    co: o16,
                    edu: o16
                }
            },
            kred: a15,
            kuokgroup: a15,
            kyoto: a15,
            lacaixa: a15,
            lamborghini: a15,
            lamer: a15,
            lancaster: a15,
            lancia: a15,
            land: {
                $: 1,
                succ: {
                    static: {
                        $: 2,
                        succ: {
                            dev: o16,
                            sites: o16
                        }
                    }
                }
            },
            landrover: a15,
            lanxess: a15,
            lasalle: a15,
            lat: a15,
            latino: a15,
            latrobe: a15,
            law: a15,
            lawyer: a15,
            lds: a15,
            lease: a15,
            leclerc: a15,
            lefrak: a15,
            legal: a15,
            lego: a15,
            lexus: a15,
            lgbt: a15,
            lidl: a15,
            life: a15,
            lifeinsurance: a15,
            lifestyle: a15,
            lighting: a15,
            like: a15,
            lilly: a15,
            limited: a15,
            limo: a15,
            lincoln: a15,
            linde: a15,
            link: {
                $: 1,
                succ: {
                    cyon: o16,
                    mypep: o16,
                    dweb: e12
                }
            },
            lipsy: a15,
            live: {
                $: 1,
                succ: {
                    hlx: o16
                }
            },
            living: a15,
            llc: a15,
            llp: a15,
            loan: a15,
            loans: a15,
            locker: a15,
            locus: a15,
            loft: a15,
            lol: {
                $: 1,
                succ: {
                    omg: o16
                }
            },
            london: {
                $: 1,
                succ: {
                    in: o16,
                    of: o16
                }
            },
            lotte: a15,
            lotto: a15,
            love: a15,
            lpl: a15,
            lplfinancial: a15,
            ltd: a15,
            ltda: a15,
            lundbeck: a15,
            luxe: a15,
            luxury: a15,
            macys: a15,
            madrid: a15,
            maif: a15,
            maison: a15,
            makeup: a15,
            man: a15,
            management: {
                $: 1,
                succ: {
                    router: o16
                }
            },
            mango: a15,
            map: a15,
            market: a15,
            marketing: {
                $: 1,
                succ: {
                    from: o16,
                    with: o16
                }
            },
            markets: a15,
            marriott: a15,
            marshalls: a15,
            maserati: a15,
            mattel: a15,
            mba: a15,
            mckinsey: a15,
            med: a15,
            media: H,
            meet: a15,
            melbourne: a15,
            meme: a15,
            memorial: a15,
            men: {
                $: 1,
                succ: {
                    for: o16,
                    repair: o16
                }
            },
            menu: D,
            merckmsd: a15,
            miami: a15,
            microsoft: a15,
            mini: a15,
            mint: a15,
            mit: a15,
            mitsubishi: a15,
            mlb: a15,
            mls: a15,
            mma: a15,
            mobile: a15,
            moda: a15,
            moe: a15,
            moi: a15,
            mom: {
                $: 1,
                succ: {
                    and: o16,
                    for: o16
                }
            },
            monash: a15,
            money: a15,
            monster: a15,
            mormon: a15,
            mortgage: a15,
            moscow: a15,
            moto: a15,
            motorcycles: a15,
            mov: a15,
            movie: a15,
            msd: a15,
            mtn: a15,
            mtr: a15,
            music: a15,
            mutual: a15,
            nab: a15,
            nagoya: a15,
            natura: a15,
            navy: a15,
            nba: a15,
            nec: a15,
            netbank: a15,
            netflix: a15,
            network: {
                $: 1,
                succ: {
                    alces: e12,
                    co: o16,
                    arvo: o16,
                    azimuth: o16,
                    tlon: o16
                }
            },
            neustar: a15,
            new: a15,
            news: {
                $: 1,
                succ: {
                    noticeable: o16
                }
            },
            next: a15,
            nextdirect: a15,
            nexus: a15,
            nfl: a15,
            ngo: a15,
            nhk: a15,
            nico: a15,
            nike: a15,
            nikon: a15,
            ninja: a15,
            nissan: a15,
            nissay: a15,
            nokia: a15,
            northwesternmutual: a15,
            norton: a15,
            now: a15,
            nowruz: a15,
            nowtv: a15,
            nra: a15,
            nrw: a15,
            ntt: a15,
            nyc: a15,
            obi: a15,
            observer: a15,
            office: a15,
            okinawa: a15,
            olayan: a15,
            olayangroup: a15,
            oldnavy: a15,
            ollo: a15,
            omega: a15,
            one: {
                $: 1,
                succ: {
                    onred: {
                        $: 2,
                        succ: {
                            staging: o16
                        }
                    },
                    for: o16,
                    under: o16,
                    service: o16,
                    homelink: o16
                }
            },
            ong: a15,
            onl: a15,
            online: {
                $: 1,
                succ: {
                    eero: o16,
                    "eero-stage": o16,
                    barsy: o16
                }
            },
            ooo: a15,
            open: a15,
            oracle: a15,
            orange: {
                $: 1,
                succ: {
                    tech: o16
                }
            },
            organic: a15,
            origins: a15,
            osaka: a15,
            otsuka: a15,
            ott: a15,
            ovh: {
                $: 1,
                succ: {
                    nerdpol: o16
                }
            },
            page: {
                $: 1,
                succ: {
                    hlx: o16,
                    hlx3: o16,
                    translated: o16,
                    codeberg: o16,
                    pdns: o16,
                    plesk: o16,
                    prvcy: o16,
                    rocky: o16,
                    magnet: o16
                }
            },
            panasonic: a15,
            paris: a15,
            pars: a15,
            partners: a15,
            parts: a15,
            party: q,
            passagens: a15,
            pay: a15,
            pccw: a15,
            pet: a15,
            pfizer: a15,
            pharmacy: a15,
            phd: a15,
            philips: a15,
            phone: a15,
            photo: a15,
            photography: a15,
            photos: H,
            physio: a15,
            pics: a15,
            pictet: a15,
            pictures: {
                $: 1,
                succ: {
                    1337: o16
                }
            },
            pid: a15,
            pin: a15,
            ping: a15,
            pink: a15,
            pioneer: a15,
            pizza: a15,
            place: c3,
            play: a15,
            playstation: a15,
            plumbing: a15,
            plus: a15,
            pnc: a15,
            pohl: a15,
            poker: a15,
            politie: a15,
            porn: {
                $: 1,
                succ: {
                    indie: o16
                }
            },
            pramerica: a15,
            praxi: a15,
            press: a15,
            prime: a15,
            prod: a15,
            productions: a15,
            prof: a15,
            progressive: a15,
            promo: a15,
            properties: a15,
            property: a15,
            protection: a15,
            pru: a15,
            prudential: a15,
            pub: D,
            pwc: a15,
            qpon: a15,
            quebec: a15,
            quest: a15,
            racing: a15,
            radio: a15,
            read: a15,
            realestate: a15,
            realtor: a15,
            realty: a15,
            recipes: a15,
            red: a15,
            redstone: a15,
            redumbrella: a15,
            rehab: a15,
            reise: a15,
            reisen: a15,
            reit: a15,
            reliance: a15,
            ren: a15,
            rent: a15,
            rentals: a15,
            repair: a15,
            report: a15,
            republican: a15,
            rest: a15,
            restaurant: a15,
            review: q,
            reviews: a15,
            rexroth: a15,
            rich: a15,
            richardli: a15,
            ricoh: a15,
            ril: a15,
            rio: a15,
            rip: {
                $: 1,
                succ: {
                    clan: o16
                }
            },
            rocher: a15,
            rocks: {
                $: 1,
                succ: {
                    myddns: o16,
                    "lima-city": o16,
                    webspace: o16
                }
            },
            rodeo: a15,
            rogers: a15,
            room: a15,
            rsvp: a15,
            rugby: a15,
            ruhr: a15,
            run: {
                $: 1,
                succ: {
                    hs: o16,
                    development: o16,
                    ravendb: o16,
                    servers: o16,
                    build: e12,
                    code: e12,
                    database: e12,
                    migration: e12,
                    onporter: o16,
                    repl: o16
                }
            },
            rwe: a15,
            ryukyu: a15,
            saarland: a15,
            safe: a15,
            safety: a15,
            sakura: a15,
            sale: {
                $: 1,
                succ: {
                    for: o16
                }
            },
            salon: a15,
            samsclub: a15,
            samsung: a15,
            sandvik: a15,
            sandvikcoromant: a15,
            sanofi: a15,
            sap: a15,
            sarl: a15,
            sas: a15,
            save: a15,
            saxo: a15,
            sbi: a15,
            sbs: a15,
            sca: a15,
            scb: a15,
            schaeffler: a15,
            schmidt: a15,
            scholarships: a15,
            school: a15,
            schule: a15,
            schwarz: a15,
            science: q,
            scot: {
                $: 1,
                succ: {
                    edu: o16,
                    gov: {
                        $: 2,
                        succ: {
                            service: o16
                        }
                    }
                }
            },
            search: a15,
            seat: a15,
            secure: a15,
            security: a15,
            seek: a15,
            select: a15,
            sener: a15,
            services: {
                $: 1,
                succ: {
                    loginline: o16
                }
            },
            ses: a15,
            seven: a15,
            sew: a15,
            sex: a15,
            sexy: a15,
            sfr: a15,
            shangrila: a15,
            sharp: a15,
            shaw: a15,
            shell: a15,
            shia: a15,
            shiksha: a15,
            shoes: a15,
            shop: {
                $: 1,
                succ: {
                    base: o16,
                    hoplix: o16,
                    barsy: o16
                }
            },
            shopping: a15,
            shouji: a15,
            show: a15,
            showtime: a15,
            silk: a15,
            sina: a15,
            singles: a15,
            site: {
                $: 1,
                succ: {
                    cloudera: e12,
                    cyon: o16,
                    fnwk: o16,
                    folionetwork: o16,
                    fastvps: o16,
                    jele: o16,
                    lelux: o16,
                    loginline: o16,
                    barsy: o16,
                    mintere: o16,
                    omniwe: o16,
                    opensocial: o16,
                    platformsh: e12,
                    tst: e12,
                    byen: o16,
                    srht: o16,
                    novecore: o16
                }
            },
            ski: a15,
            skin: a15,
            sky: a15,
            skype: a15,
            sling: a15,
            smart: a15,
            smile: a15,
            sncf: a15,
            soccer: a15,
            social: a15,
            softbank: a15,
            software: a15,
            sohu: a15,
            solar: a15,
            solutions: {
                $: 1,
                succ: {
                    diher: e12
                }
            },
            song: a15,
            sony: a15,
            soy: a15,
            spa: a15,
            space: {
                $: 1,
                succ: {
                    myfast: o16,
                    uber: o16,
                    xs4all: o16
                }
            },
            sport: a15,
            spot: a15,
            srl: a15,
            stada: a15,
            staples: a15,
            star: a15,
            statebank: a15,
            statefarm: a15,
            stc: a15,
            stcgroup: a15,
            stockholm: a15,
            storage: a15,
            store: {
                $: 1,
                succ: {
                    sellfy: o16,
                    shopware: o16,
                    storebase: o16
                }
            },
            stream: a15,
            studio: a15,
            study: a15,
            style: a15,
            sucks: a15,
            supplies: a15,
            supply: a15,
            support: D,
            surf: a15,
            surgery: a15,
            suzuki: a15,
            swatch: a15,
            swiss: a15,
            sydney: a15,
            systems: {
                $: 1,
                succ: {
                    knightpoint: o16
                }
            },
            tab: a15,
            taipei: a15,
            talk: a15,
            taobao: a15,
            target: a15,
            tatamotors: a15,
            tatar: a15,
            tattoo: a15,
            tax: a15,
            taxi: a15,
            tci: a15,
            tdk: a15,
            team: {
                $: 1,
                succ: {
                    discourse: o16,
                    jelastic: o16
                }
            },
            tech: a15,
            technology: c3,
            temasek: a15,
            tennis: a15,
            teva: a15,
            thd: a15,
            theater: a15,
            theatre: a15,
            tiaa: a15,
            tickets: a15,
            tienda: a15,
            tiffany: a15,
            tips: a15,
            tires: a15,
            tirol: a15,
            tjmaxx: a15,
            tjx: a15,
            tkmaxx: a15,
            tmall: a15,
            today: {
                $: 1,
                succ: {
                    prequalifyme: o16
                }
            },
            tokyo: a15,
            tools: a15,
            top: {
                $: 1,
                succ: {
                    "now-dns": o16,
                    ntdll: o16
                }
            },
            toray: a15,
            toshiba: a15,
            total: a15,
            tours: a15,
            town: a15,
            toyota: a15,
            toys: a15,
            trade: q,
            trading: a15,
            training: a15,
            travel: a15,
            travelchannel: a15,
            travelers: a15,
            travelersinsurance: a15,
            trust: a15,
            trv: a15,
            tube: a15,
            tui: a15,
            tunes: a15,
            tushu: a15,
            tvs: a15,
            ubank: a15,
            ubs: a15,
            unicom: a15,
            university: a15,
            uno: a15,
            uol: a15,
            ups: a15,
            vacations: a15,
            vana: a15,
            vanguard: a15,
            vegas: a15,
            ventures: a15,
            verisign: a15,
            versicherung: a15,
            vet: a15,
            viajes: a15,
            video: a15,
            vig: a15,
            viking: a15,
            villas: a15,
            vin: a15,
            vip: a15,
            virgin: a15,
            visa: a15,
            vision: a15,
            viva: a15,
            vivo: a15,
            vlaanderen: a15,
            vodka: a15,
            volkswagen: a15,
            volvo: a15,
            vote: a15,
            voting: a15,
            voto: a15,
            voyage: a15,
            vuelos: a15,
            wales: a15,
            walmart: a15,
            walter: a15,
            wang: a15,
            wanggou: a15,
            watch: a15,
            watches: a15,
            weather: a15,
            weatherchannel: a15,
            webcam: a15,
            weber: a15,
            website: H,
            wedding: a15,
            weibo: a15,
            weir: a15,
            whoswho: a15,
            wien: a15,
            wiki: H,
            williamhill: a15,
            win: {
                $: 1,
                succ: {
                    that: o16
                }
            },
            windows: a15,
            wine: a15,
            winners: a15,
            wme: a15,
            wolterskluwer: a15,
            woodside: a15,
            work: {
                $: 1,
                succ: {
                    from: o16,
                    to: o16
                }
            },
            works: a15,
            world: a15,
            wow: a15,
            wtc: a15,
            wtf: a15,
            xbox: a15,
            xerox: a15,
            xfinity: a15,
            xihuan: a15,
            xin: a15,
            "xn--11b4c3d": a15,
            "कॉम": a15,
            "xn--1ck2e1b": a15,
            "セール": a15,
            "xn--1qqw23a": a15,
            "佛山": a15,
            "xn--30rr7y": a15,
            "慈善": a15,
            "xn--3bst00m": a15,
            "集团": a15,
            "xn--3ds443g": a15,
            "在线": a15,
            "xn--3pxu8k": a15,
            "点看": a15,
            "xn--42c2d9a": a15,
            "คอม": a15,
            "xn--45q11c": a15,
            "八卦": a15,
            "xn--4gbrim": a15,
            "موقع": a15,
            "xn--55qw42g": a15,
            "公益": a15,
            "xn--55qx5d": a15,
            "公司": a15,
            "xn--5su34j936bgsg": a15,
            "香格里拉": a15,
            "xn--5tzm5g": a15,
            "网站": a15,
            "xn--6frz82g": a15,
            "移动": a15,
            "xn--6qq986b3xl": a15,
            "我爱你": a15,
            "xn--80adxhks": a15,
            "москва": a15,
            "xn--80aqecdr1a": a15,
            "католик": a15,
            "xn--80asehdb": a15,
            "онлайн": a15,
            "xn--80aswg": a15,
            "сайт": a15,
            "xn--8y0a063a": a15,
            "联通": a15,
            "xn--9dbq2a": a15,
            "קום": a15,
            "xn--9et52u": a15,
            "时尚": a15,
            "xn--9krt00a": a15,
            "微博": a15,
            "xn--b4w605ferd": a15,
            "淡马锡": a15,
            "xn--bck1b9a5dre4c": a15,
            "ファッション": a15,
            "xn--c1avg": a15,
            "орг": a15,
            "xn--c2br7g": a15,
            "नेट": a15,
            "xn--cck2b3b": a15,
            "ストア": a15,
            "xn--cckwcxetd": a15,
            "アマゾン": a15,
            "xn--cg4bki": a15,
            "삼성": a15,
            "xn--czr694b": a15,
            "商标": a15,
            "xn--czrs0t": a15,
            "商店": a15,
            "xn--czru2d": a15,
            "商城": a15,
            "xn--d1acj3b": a15,
            "дети": a15,
            "xn--eckvdtc9d": a15,
            "ポイント": a15,
            "xn--efvy88h": a15,
            "新闻": a15,
            "xn--fct429k": a15,
            "家電": a15,
            "xn--fhbei": a15,
            "كوم": a15,
            "xn--fiq228c5hs": a15,
            "中文网": a15,
            "xn--fiq64b": a15,
            "中信": a15,
            "xn--fjq720a": a15,
            "娱乐": a15,
            "xn--flw351e": a15,
            "谷歌": a15,
            "xn--fzys8d69uvgm": a15,
            "電訊盈科": a15,
            "xn--g2xx48c": a15,
            "购物": a15,
            "xn--gckr3f0f": a15,
            "クラウド": a15,
            "xn--gk3at1e": a15,
            "通販": a15,
            "xn--hxt814e": a15,
            "网店": a15,
            "xn--i1b6b1a6a2e": a15,
            "संगठन": a15,
            "xn--imr513n": a15,
            "餐厅": a15,
            "xn--io0a7i": a15,
            "网络": a15,
            "xn--j1aef": a15,
            "ком": a15,
            "xn--jlq480n2rg": a15,
            "亚马逊": a15,
            "xn--jlq61u9w7b": a15,
            "诺基亚": a15,
            "xn--jvr189m": a15,
            "食品": a15,
            "xn--kcrx77d1x4a": a15,
            "飞利浦": a15,
            "xn--kput3i": a15,
            "手机": a15,
            "xn--mgba3a3ejt": a15,
            "ارامكو": a15,
            "xn--mgba7c0bbn0a": a15,
            "العليان": a15,
            "xn--mgbaakc7dvf": a15,
            "اتصالات": a15,
            "xn--mgbab2bd": a15,
            "بازار": a15,
            "xn--mgbca7dzdo": a15,
            "ابوظبي": a15,
            "xn--mgbi4ecexp": a15,
            "كاثوليك": a15,
            "xn--mgbt3dhd": a15,
            "همراه": a15,
            "xn--mk1bu44c": a15,
            "닷컴": a15,
            "xn--mxtq1m": a15,
            "政府": a15,
            "xn--ngbc5azd": a15,
            "شبكة": a15,
            "xn--ngbe9e0a": a15,
            "بيتك": a15,
            "xn--ngbrx": a15,
            "عرب": a15,
            "xn--nqv7f": a15,
            "机构": a15,
            "xn--nqv7fs00ema": a15,
            "组织机构": a15,
            "xn--nyqy26a": a15,
            "健康": a15,
            "xn--otu796d": a15,
            "招聘": a15,
            "xn--p1acf": {
                $: 1,
                succ: {
                    "xn--90amc": o16,
                    "xn--j1aef": o16,
                    "xn--j1ael8b": o16,
                    "xn--h1ahn": o16,
                    "xn--j1adp": o16,
                    "xn--c1avg": o16,
                    "xn--80aaa0cvac": o16,
                    "xn--h1aliz": o16,
                    "xn--90a1af": o16,
                    "xn--41a": o16
                }
            },
            "рус": {
                $: 1,
                succ: {
                    "биз": o16,
                    "ком": o16,
                    "крым": o16,
                    "мир": o16,
                    "мск": o16,
                    "орг": o16,
                    "самара": o16,
                    "сочи": o16,
                    "спб": o16,
                    "я": o16
                }
            },
            "xn--pssy2u": a15,
            "大拿": a15,
            "xn--q9jyb4c": a15,
            "みんな": a15,
            "xn--qcka1pmc": a15,
            "グーグル": a15,
            "xn--rhqv96g": a15,
            "世界": a15,
            "xn--rovu88b": a15,
            "書籍": a15,
            "xn--ses554g": a15,
            "网址": a15,
            "xn--t60b56a": a15,
            "닷넷": a15,
            "xn--tckwe": a15,
            "コム": a15,
            "xn--tiq49xqyj": a15,
            "天主教": a15,
            "xn--unup4y": a15,
            "游戏": a15,
            "xn--vermgensberater-ctb": a15,
            "vermögensberater": a15,
            "xn--vermgensberatung-pwb": a15,
            "vermögensberatung": a15,
            "xn--vhquv": a15,
            "企业": a15,
            "xn--vuq861b": a15,
            "信息": a15,
            "xn--w4r85el8fhu5dnra": a15,
            "嘉里大酒店": a15,
            "xn--w4rs40l": a15,
            "嘉里": a15,
            "xn--xhq521b": a15,
            "广东": a15,
            "xn--zfr164b": a15,
            "政务": a15,
            xyz: {
                $: 1,
                succ: {
                    blogsite: o16,
                    localzone: o16,
                    crafting: o16,
                    zapto: o16,
                    telebit: e12
                }
            },
            yachts: a15,
            yahoo: a15,
            yamaxun: a15,
            yandex: a15,
            yodobashi: a15,
            yoga: a15,
            yokohama: a15,
            you: a15,
            youtube: a15,
            yun: a15,
            zappos: a15,
            zara: a15,
            zero: a15,
            zip: a15,
            zone: {
                $: 1,
                succ: {
                    cloud66: o16,
                    hs: o16,
                    triton: e12,
                    lima: o16
                }
            },
            zuerich: a15
        }
    };
}();
function r(a16, o17, i13, e13) {
    let s9 = null, n8 = o17;
    for(; void 0 !== n8 && (0 != (n8.$ & e13) && (s9 = {
        index: i13 + 1,
        isIcann: 1 === n8.$,
        isPrivate: 2 === n8.$
    }), -1 !== i13);){
        const o18 = n8.succ;
        n8 = o18 && (o18[a16[i13]] || o18["*"]), i13 -= 1;
    }
    return s9;
}
function t(a17, o19, i14) {
    if (!0 === (function(a18, o20, i15) {
        if (!1 === o20.allowPrivateDomains && a18.length > 3) {
            const o21 = a18.length - 1, e15 = a18.charCodeAt(o21), s10 = a18.charCodeAt(o21 - 1), n9 = a18.charCodeAt(o21 - 2), r7 = a18.charCodeAt(o21 - 3);
            if (109 === e15 && 111 === s10 && 99 === n9 && 46 === r7) return i15.isIcann = !0, i15.isPrivate = !1, i15.publicSuffix = "com", !0;
            if (103 === e15 && 114 === s10 && 111 === n9 && 46 === r7) return i15.isIcann = !0, i15.isPrivate = !1, i15.publicSuffix = "org", !0;
            if (117 === e15 && 100 === s10 && 101 === n9 && 46 === r7) return i15.isIcann = !0, i15.isPrivate = !1, i15.publicSuffix = "edu", !0;
            if (118 === e15 && 111 === s10 && 103 === n9 && 46 === r7) return i15.isIcann = !0, i15.isPrivate = !1, i15.publicSuffix = "gov", !0;
            if (116 === e15 && 101 === s10 && 110 === n9 && 46 === r7) return i15.isIcann = !0, i15.isPrivate = !1, i15.publicSuffix = "net", !0;
            if (101 === e15 && 100 === s10 && 46 === n9) return i15.isIcann = !0, i15.isPrivate = !1, i15.publicSuffix = "de", !0;
        }
        return !1;
    })(a17, o19, i14)) return;
    const e14 = a17.split("."), t5 = (!0 === o19.allowPrivateDomains ? 2 : 0) | (!0 === o19.allowIcannDomains ? 1 : 0), c4 = r(e14, s, e14.length - 1, t5);
    if (null !== c4) return i14.isIcann = c4.isIcann, i14.isPrivate = c4.isPrivate, void (i14.publicSuffix = e14.slice(c4.index + 1).join("."));
    const u3 = r(e14, n, e14.length - 1, t5);
    if (null !== u3) return i14.isIcann = u3.isIcann, i14.isPrivate = u3.isPrivate, void (i14.publicSuffix = e14.slice(u3.index).join("."));
    i14.isIcann = !1, i14.isPrivate = !1, i14.publicSuffix = e14[e14.length - 1];
}
function u(a19, o22 = {}) {
    return e(a19, 5, t, o22, {
        domain: null,
        domainWithoutSuffix: null,
        hostname: null,
        isIcann: null,
        isIp: null,
        isPrivate: null,
        publicSuffix: null,
        subdomain: null
    });
}
const base = 36;
const damp = 700;
const delimiter = '-';
const regexPunycode = /^xn--/;
const regexNonASCII = /[^\0-\x7E]/;
const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
const errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
};
const baseMinusTMin = 36 - 1;
const floor = Math.floor;
const stringFromCharCode = String.fromCharCode;
function error(type) {
    throw new RangeError(errors[type]);
}
function map(array, fn) {
    const result = [];
    let length = array.length;
    while(length--){
        result[length] = fn(array[length]);
    }
    return result;
}
function mapDomain(string, fn) {
    const parts = string.split('@');
    let result = '';
    if (parts.length > 1) {
        result = parts[0] + '@';
        string = parts[1];
    }
    string = string.replace(regexSeparators, '\x2E');
    const labels = string.split('.');
    const encoded = map(labels, fn).join('.');
    return result + encoded;
}
function ucs2decode(string) {
    const output = [];
    let counter = 0;
    const length = string.length;
    while(counter < length){
        const value = string.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
            const extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
                output.push(value);
                counter--;
            }
        } else {
            output.push(value);
        }
    }
    return output;
}
const ucs2encode = (array)=>String.fromCodePoint(...array)
;
const basicToDigit = function(codePoint) {
    if (codePoint - 48 < 10) {
        return codePoint - 22;
    }
    if (codePoint - 65 < 26) {
        return codePoint - 65;
    }
    if (codePoint - 97 < 26) {
        return codePoint - 97;
    }
    return 36;
};
const digitToBasic = function(digit, flag) {
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};
const adapt = function(delta, numPoints, firstTime) {
    let k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for(; delta > baseMinusTMin * 26 >> 1; k += base){
        delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + 38));
};
const decode = function(input) {
    const output = [];
    const inputLength = input.length;
    let i2 = 0;
    let n1 = 128;
    let bias = 72;
    let basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
        basic = 0;
    }
    for(let j = 0; j < basic; ++j){
        if (input.charCodeAt(j) >= 128) {
            error('not-basic');
        }
        output.push(input.charCodeAt(j));
    }
    for(let index = basic > 0 ? basic + 1 : 0; index < inputLength;){
        let oldi = i2;
        for(let w = 1, k = 36;; k += base){
            if (index >= inputLength) {
                error('invalid-input');
            }
            const digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= 36 || digit > floor((2147483647 - i2) / w)) {
                error('overflow');
            }
            i2 += digit * w;
            const t1 = k <= bias ? 1 : k >= bias + 26 ? 26 : k - bias;
            if (digit < t1) {
                break;
            }
            const baseMinusT = 36 - t1;
            if (w > floor(2147483647 / baseMinusT)) {
                error('overflow');
            }
            w *= baseMinusT;
        }
        const out = output.length + 1;
        bias = adapt(i2 - oldi, out, oldi == 0);
        if (floor(i2 / out) > 2147483647 - n1) {
            error('overflow');
        }
        n1 += floor(i2 / out);
        i2 %= out;
        output.splice(i2++, 0, n1);
    }
    return String.fromCodePoint(...output);
};
const encode = function(input) {
    const output = [];
    input = ucs2decode(input);
    let inputLength = input.length;
    let n2 = 128;
    let delta = 0;
    let bias = 72;
    for (const currentValue of input){
        if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
        }
    }
    let basicLength = output.length;
    let handledCPCount = basicLength;
    if (basicLength) {
        output.push(delimiter);
    }
    while(handledCPCount < inputLength){
        let m = 2147483647;
        for (const currentValue of input){
            if (currentValue >= n2 && currentValue < m) {
                m = currentValue;
            }
        }
        const handledCPCountPlusOne = handledCPCount + 1;
        if (m - n2 > floor((2147483647 - delta) / handledCPCountPlusOne)) {
            error('overflow');
        }
        delta += (m - n2) * handledCPCountPlusOne;
        n2 = m;
        for (const currentValue1 of input){
            if (currentValue1 < n2 && ++delta > 2147483647) {
                error('overflow');
            }
            if (currentValue1 == n2) {
                let q = delta;
                for(let k = 36;; k += base){
                    const t2 = k <= bias ? 1 : k >= bias + 26 ? 26 : k - bias;
                    if (q < t2) {
                        break;
                    }
                    const qMinusT = q - t2;
                    const baseMinusT = 36 - t2;
                    output.push(stringFromCharCode(digitToBasic(t2 + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
            }
        }
        ++delta;
        ++n2;
    }
    return output.join('');
};
const toUnicode = function(input) {
    return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
};
const toASCII = function(input) {
    return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
};
const __default = {
    'version': '2.1.0',
    'ucs2': {
        'decode': ucs2decode,
        'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
};
const isCryptoKey = (key)=>key instanceof CryptoKey
;
const encoder = new TextEncoder();
const decoder = new TextDecoder();
function concat(...buffers) {
    const size = buffers.reduce((acc, { length  })=>acc + length
    , 0);
    const buf = new Uint8Array(size);
    let i3 = 0;
    buffers.forEach((buffer)=>{
        buf.set(buffer, i3);
        i3 += buffer.length;
    });
    return buf;
}
const decodeBase64 = (encoded)=>{
    const binary = atob(encoded);
    const bytes = new Uint8Array(binary.length);
    for(let i4 = 0; i4 < binary.length; i4++){
        bytes[i4] = binary.charCodeAt(i4);
    }
    return bytes;
};
const decode1 = (input)=>{
    let encoded = input;
    if (encoded instanceof Uint8Array) {
        encoded = decoder.decode(encoded);
    }
    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
    try {
        return decodeBase64(encoded);
    } catch  {
        throw new TypeError('The input to be decoded is not correctly encoded.');
    }
};
class JOSEError extends Error {
    static get code() {
        return 'ERR_JOSE_GENERIC';
    }
    code = 'ERR_JOSE_GENERIC';
    constructor(message1){
        super(message1);
        this.name = this.constructor.name;
        Error.captureStackTrace?.(this, this.constructor);
    }
}
class JWTClaimValidationFailed extends JOSEError {
    static get code() {
        return 'ERR_JWT_CLAIM_VALIDATION_FAILED';
    }
    code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';
    claim;
    reason;
    constructor(message2, claim = 'unspecified', reason = 'unspecified'){
        super(message2);
        this.claim = claim;
        this.reason = reason;
    }
}
class JWTExpired extends JOSEError {
    static get code() {
        return 'ERR_JWT_EXPIRED';
    }
    code = 'ERR_JWT_EXPIRED';
    claim;
    reason;
    constructor(message3, claim = 'unspecified', reason = 'unspecified'){
        super(message3);
        this.claim = claim;
        this.reason = reason;
    }
}
class JOSEAlgNotAllowed extends JOSEError {
    static get code() {
        return 'ERR_JOSE_ALG_NOT_ALLOWED';
    }
    code = 'ERR_JOSE_ALG_NOT_ALLOWED';
}
class JOSENotSupported extends JOSEError {
    static get code() {
        return 'ERR_JOSE_NOT_SUPPORTED';
    }
    code = 'ERR_JOSE_NOT_SUPPORTED';
}
class JWSInvalid extends JOSEError {
    static get code() {
        return 'ERR_JWS_INVALID';
    }
    code = 'ERR_JWS_INVALID';
}
class JWTInvalid extends JOSEError {
    static get code() {
        return 'ERR_JWT_INVALID';
    }
    code = 'ERR_JWT_INVALID';
}
class JWSSignatureVerificationFailed extends JOSEError {
    static get code() {
        return 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
    }
    code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
    message = 'signature verification failed';
}
crypto.getRandomValues.bind(crypto);
function isCloudflareWorkers() {
    return typeof WebSocketPair !== 'undefined' || typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers' || typeof EdgeRuntime !== 'undefined' && EdgeRuntime === 'vercel';
}
function unusable(name, prop = 'algorithm.name') {
    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
function isAlgorithm(algorithm, name) {
    return algorithm.name === name;
}
function getHashLength(hash) {
    return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) {
    switch(alg){
        case 'ES256':
            return 'P-256';
        case 'ES384':
            return 'P-384';
        case 'ES512':
            return 'P-521';
        default:
            throw new Error('unreachable');
    }
}
function checkUsage(key, usages) {
    if (usages.length && !usages.some((expected)=>key.usages.includes(expected)
    )) {
        let msg = 'CryptoKey does not support this operation, its usages must include ';
        if (usages.length > 2) {
            const last = usages.pop();
            msg += `one of ${usages.join(', ')}, or ${last}.`;
        } else if (usages.length === 2) {
            msg += `one of ${usages[0]} or ${usages[1]}.`;
        } else {
            msg += `${usages[0]}.`;
        }
        throw new TypeError(msg);
    }
}
function checkSigCryptoKey(key, alg, ...usages) {
    switch(alg){
        case 'HS256':
        case 'HS384':
        case 'HS512':
            {
                if (!isAlgorithm(key.algorithm, 'HMAC')) throw unusable('HMAC');
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
                break;
            }
        case 'RS256':
        case 'RS384':
        case 'RS512':
            {
                if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5')) throw unusable('RSASSA-PKCS1-v1_5');
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
                break;
            }
        case 'PS256':
        case 'PS384':
        case 'PS512':
            {
                if (!isAlgorithm(key.algorithm, 'RSA-PSS')) throw unusable('RSA-PSS');
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
                break;
            }
        case isCloudflareWorkers() && 'EdDSA':
            {
                if (!isAlgorithm(key.algorithm, 'NODE-ED25519')) throw unusable('NODE-ED25519');
                break;
            }
        case 'EdDSA':
            {
                if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') {
                    throw unusable('Ed25519 or Ed448');
                }
                break;
            }
        case 'ES256':
        case 'ES384':
        case 'ES512':
            {
                if (!isAlgorithm(key.algorithm, 'ECDSA')) throw unusable('ECDSA');
                const expected = getNamedCurve(alg);
                const actual = key.algorithm.namedCurve;
                if (actual !== expected) throw unusable(expected, 'algorithm.namedCurve');
                break;
            }
        default:
            throw new TypeError('CryptoKey does not support this operation');
    }
    checkUsage(key, usages);
}
function message(msg, actual, ...types1) {
    if (types1.length > 2) {
        const last = types1.pop();
        msg += `one of type ${types1.join(', ')}, or ${last}.`;
    } else if (types1.length === 2) {
        msg += `one of type ${types1[0]} or ${types1[1]}.`;
    } else {
        msg += `of type ${types1[0]}.`;
    }
    if (actual == null) {
        msg += ` Received ${actual}`;
    } else if (typeof actual === 'function' && actual.name) {
        msg += ` Received function ${actual.name}`;
    } else if (typeof actual === 'object' && actual != null) {
        if (actual.constructor && actual.constructor.name) {
            msg += ` Received an instance of ${actual.constructor.name}`;
        }
    }
    return msg;
}
const __default1 = (actual, ...types2)=>{
    return message('Key must be ', actual, ...types2);
};
function withAlg(alg, actual, ...types3) {
    return message(`Key for the ${alg} algorithm must be `, actual, ...types3);
}
const types = [
    'CryptoKey'
];
const __default2 = (key)=>{
    return isCryptoKey(key);
};
const isDisjoint = (...headers)=>{
    const sources = headers.filter(Boolean);
    if (sources.length === 0 || sources.length === 1) {
        return true;
    }
    let acc;
    for (const header of sources){
        const parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
            acc = new Set(parameters);
            continue;
        }
        for (const parameter of parameters){
            if (acc.has(parameter)) {
                return false;
            }
            acc.add(parameter);
        }
    }
    return true;
};
function isObjectLike(value) {
    return typeof value === 'object' && value !== null;
}
function isObject(input) {
    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {
        return false;
    }
    if (Object.getPrototypeOf(input) === null) {
        return true;
    }
    let proto = input;
    while(Object.getPrototypeOf(proto) !== null){
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(input) === proto;
}
const __default3 = (alg, key)=>{
    if (alg.startsWith('RS') || alg.startsWith('PS')) {
        const { modulusLength  } = key.algorithm;
        if (typeof modulusLength !== 'number' || modulusLength < 2048) {
            throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
        }
    }
};
const findOid = (keyData, oid, from = 0)=>{
    if (from === 0) {
        oid.unshift(oid.length);
        oid.unshift(6);
    }
    let i5 = keyData.indexOf(oid[0], from);
    if (i5 === -1) return false;
    const sub = keyData.subarray(i5, i5 + oid.length);
    if (sub.length !== oid.length) return false;
    return sub.every((value, index)=>value === oid[index]
    ) || findOid(keyData, oid, i5 + 1);
};
function subtleMapping(jwk) {
    let algorithm;
    let keyUsages;
    switch(jwk.kty){
        case 'oct':
            {
                switch(jwk.alg){
                    case 'HS256':
                    case 'HS384':
                    case 'HS512':
                        algorithm = {
                            name: 'HMAC',
                            hash: `SHA-${jwk.alg.slice(-3)}`
                        };
                        keyUsages = [
                            'sign',
                            'verify'
                        ];
                        break;
                    case 'A128CBC-HS256':
                    case 'A192CBC-HS384':
                    case 'A256CBC-HS512':
                        throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);
                    case 'A128GCM':
                    case 'A192GCM':
                    case 'A256GCM':
                    case 'A128GCMKW':
                    case 'A192GCMKW':
                    case 'A256GCMKW':
                        algorithm = {
                            name: 'AES-GCM'
                        };
                        keyUsages = [
                            'encrypt',
                            'decrypt'
                        ];
                        break;
                    case 'A128KW':
                    case 'A192KW':
                    case 'A256KW':
                        algorithm = {
                            name: 'AES-KW'
                        };
                        keyUsages = [
                            'wrapKey',
                            'unwrapKey'
                        ];
                        break;
                    case 'PBES2-HS256+A128KW':
                    case 'PBES2-HS384+A192KW':
                    case 'PBES2-HS512+A256KW':
                        algorithm = {
                            name: 'PBKDF2'
                        };
                        keyUsages = [
                            'deriveBits'
                        ];
                        break;
                    default:
                        throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
                }
                break;
            }
        case 'RSA':
            {
                switch(jwk.alg){
                    case 'PS256':
                    case 'PS384':
                    case 'PS512':
                        algorithm = {
                            name: 'RSA-PSS',
                            hash: `SHA-${jwk.alg.slice(-3)}`
                        };
                        keyUsages = jwk.d ? [
                            'sign'
                        ] : [
                            'verify'
                        ];
                        break;
                    case 'RS256':
                    case 'RS384':
                    case 'RS512':
                        algorithm = {
                            name: 'RSASSA-PKCS1-v1_5',
                            hash: `SHA-${jwk.alg.slice(-3)}`
                        };
                        keyUsages = jwk.d ? [
                            'sign'
                        ] : [
                            'verify'
                        ];
                        break;
                    case 'RSA-OAEP':
                    case 'RSA-OAEP-256':
                    case 'RSA-OAEP-384':
                    case 'RSA-OAEP-512':
                        algorithm = {
                            name: 'RSA-OAEP',
                            hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
                        };
                        keyUsages = jwk.d ? [
                            'decrypt',
                            'unwrapKey'
                        ] : [
                            'encrypt',
                            'wrapKey'
                        ];
                        break;
                    default:
                        throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
                }
                break;
            }
        case 'EC':
            {
                switch(jwk.alg){
                    case 'ES256':
                        algorithm = {
                            name: 'ECDSA',
                            namedCurve: 'P-256'
                        };
                        keyUsages = jwk.d ? [
                            'sign'
                        ] : [
                            'verify'
                        ];
                        break;
                    case 'ES384':
                        algorithm = {
                            name: 'ECDSA',
                            namedCurve: 'P-384'
                        };
                        keyUsages = jwk.d ? [
                            'sign'
                        ] : [
                            'verify'
                        ];
                        break;
                    case 'ES512':
                        algorithm = {
                            name: 'ECDSA',
                            namedCurve: 'P-521'
                        };
                        keyUsages = jwk.d ? [
                            'sign'
                        ] : [
                            'verify'
                        ];
                        break;
                    case 'ECDH-ES':
                    case 'ECDH-ES+A128KW':
                    case 'ECDH-ES+A192KW':
                    case 'ECDH-ES+A256KW':
                        algorithm = {
                            name: 'ECDH',
                            namedCurve: jwk.crv
                        };
                        keyUsages = jwk.d ? [
                            'deriveBits'
                        ] : [];
                        break;
                    default:
                        throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
                }
                break;
            }
        case isCloudflareWorkers() && 'OKP':
            if (jwk.alg !== 'EdDSA') {
                throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            switch(jwk.crv){
                case 'Ed25519':
                    algorithm = {
                        name: 'NODE-ED25519',
                        namedCurve: 'NODE-ED25519'
                    };
                    keyUsages = jwk.d ? [
                        'sign'
                    ] : [
                        'verify'
                    ];
                    break;
                default:
                    throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        case 'OKP':
            {
                switch(jwk.alg){
                    case 'EdDSA':
                        algorithm = {
                            name: jwk.crv
                        };
                        keyUsages = jwk.d ? [
                            'sign'
                        ] : [
                            'verify'
                        ];
                        break;
                    case 'ECDH-ES':
                    case 'ECDH-ES+A128KW':
                    case 'ECDH-ES+A192KW':
                    case 'ECDH-ES+A256KW':
                        algorithm = {
                            name: jwk.crv
                        };
                        keyUsages = jwk.d ? [
                            'deriveBits'
                        ] : [];
                        break;
                    default:
                        throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
                }
                break;
            }
        default:
            throw new JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
    }
    return {
        algorithm,
        keyUsages
    };
}
const parse = async (jwk)=>{
    const { algorithm , keyUsages  } = subtleMapping(jwk);
    const rest = [
        algorithm,
        jwk.ext ?? false,
        jwk.key_ops ?? keyUsages, 
    ];
    if (algorithm.name === 'PBKDF2') {
        return crypto.subtle.importKey('raw', decode1(jwk.k), ...rest);
    }
    const keyData = {
        ...jwk
    };
    delete keyData.alg;
    return crypto.subtle.importKey('jwk', keyData, ...rest);
};
async function importJWK(jwk, alg, octAsKeyObject) {
    if (!isObject(jwk)) {
        throw new TypeError('JWK must be an object');
    }
    alg ||= jwk.alg;
    if (typeof alg !== 'string' || !alg) {
        throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
    }
    switch(jwk.kty){
        case 'oct':
            if (typeof jwk.k !== 'string' || !jwk.k) {
                throw new TypeError('missing "k" (Key Value) Parameter value');
            }
            octAsKeyObject ??= jwk.ext !== true;
            if (octAsKeyObject) {
                return parse({
                    ...jwk,
                    alg,
                    ext: false
                });
            }
            return decode1(jwk.k);
        case 'RSA':
            if (jwk.oth !== undefined) {
                throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
            }
        case 'EC':
        case 'OKP':
            return parse({
                ...jwk,
                alg
            });
        default:
            throw new JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
    }
}
const symmetricTypeCheck = (alg, key)=>{
    if (key instanceof Uint8Array) return;
    if (!__default2(key)) {
        throw new TypeError(withAlg(alg, key, ...types, 'Uint8Array'));
    }
    if (key.type !== 'secret') {
        throw new TypeError(`${types.join(' or ')} instances for symmetric algorithms must be of type "secret"`);
    }
};
const asymmetricTypeCheck = (alg, key, usage)=>{
    if (!__default2(key)) {
        throw new TypeError(withAlg(alg, key, ...types));
    }
    if (key.type === 'secret') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithms must not be of type "secret"`);
    }
    if (usage === 'sign' && key.type === 'public') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm signing must be of type "private"`);
    }
    if (usage === 'decrypt' && key.type === 'public') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm decryption must be of type "private"`);
    }
    if (key.algorithm && usage === 'verify' && key.type === 'private') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm verifying must be of type "public"`);
    }
    if (key.algorithm && usage === 'encrypt' && key.type === 'private') {
        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm encryption must be of type "public"`);
    }
};
const checkKeyType = (alg, key, usage)=>{
    const symmetric = alg.startsWith('HS') || alg === 'dir' || alg.startsWith('PBES2') || /^A\d{3}(?:GCM)?KW$/.test(alg);
    if (symmetric) {
        symmetricTypeCheck(alg, key);
    } else {
        asymmetricTypeCheck(alg, key, usage);
    }
};
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {
        throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
    }
    if (!protectedHeader || protectedHeader.crit === undefined) {
        return new Set();
    }
    if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input)=>typeof input !== 'string' || input.length === 0
    )) {
        throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
    }
    let recognized;
    if (recognizedOption !== undefined) {
        recognized = new Map([
            ...Object.entries(recognizedOption),
            ...recognizedDefault.entries()
        ]);
    } else {
        recognized = recognizedDefault;
    }
    for (const parameter of protectedHeader.crit){
        if (!recognized.has(parameter)) {
            throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
        }
        if (joseHeader[parameter] === undefined) {
            throw new Err(`Extension Header Parameter "${parameter}" is missing`);
        } else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {
            throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
        }
    }
    return new Set(protectedHeader.crit);
}
const validateAlgorithms = (option, algorithms)=>{
    if (algorithms !== undefined && (!Array.isArray(algorithms) || algorithms.some((s1)=>typeof s1 !== 'string'
    ))) {
        throw new TypeError(`"${option}" option must be an array of strings`);
    }
    if (!algorithms) {
        return undefined;
    }
    return new Set(algorithms);
};
Symbol();
function subtleDsa(alg, algorithm) {
    const hash = `SHA-${alg.slice(-3)}`;
    switch(alg){
        case 'HS256':
        case 'HS384':
        case 'HS512':
            return {
                hash,
                name: 'HMAC'
            };
        case 'PS256':
        case 'PS384':
        case 'PS512':
            return {
                hash,
                name: 'RSA-PSS',
                saltLength: alg.slice(-3) >> 3
            };
        case 'RS256':
        case 'RS384':
        case 'RS512':
            return {
                hash,
                name: 'RSASSA-PKCS1-v1_5'
            };
        case 'ES256':
        case 'ES384':
        case 'ES512':
            return {
                hash,
                name: 'ECDSA',
                namedCurve: algorithm.namedCurve
            };
        case isCloudflareWorkers() && 'EdDSA':
            const { namedCurve  } = algorithm;
            return {
                name: namedCurve,
                namedCurve
            };
        case 'EdDSA':
            return {
                name: algorithm.name
            };
        default:
            throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}
function getCryptoKey(alg, key, usage) {
    if (isCryptoKey(key)) {
        checkSigCryptoKey(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) {
        if (!alg.startsWith('HS')) {
            throw new TypeError(__default1(key, ...types));
        }
        return crypto.subtle.importKey('raw', key, {
            hash: `SHA-${alg.slice(-3)}`,
            name: 'HMAC'
        }, false, [
            usage
        ]);
    }
    throw new TypeError(__default1(key, ...types, 'Uint8Array'));
}
const verify = async (alg, key, signature, data)=>{
    const cryptoKey = await getCryptoKey(alg, key, 'verify');
    __default3(alg, cryptoKey);
    const algorithm = subtleDsa(alg, cryptoKey.algorithm);
    try {
        return await crypto.subtle.verify(algorithm, cryptoKey, signature, data);
    } catch  {
        return false;
    }
};
async function flattenedVerify(jws, key, options) {
    if (!isObject(jws)) {
        throw new JWSInvalid('Flattened JWS must be an object');
    }
    if (jws.protected === undefined && jws.header === undefined) {
        throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
    }
    if (jws.protected !== undefined && typeof jws.protected !== 'string') {
        throw new JWSInvalid('JWS Protected Header incorrect type');
    }
    if (jws.payload === undefined) {
        throw new JWSInvalid('JWS Payload missing');
    }
    if (typeof jws.signature !== 'string') {
        throw new JWSInvalid('JWS Signature missing or incorrect type');
    }
    if (jws.header !== undefined && !isObject(jws.header)) {
        throw new JWSInvalid('JWS Unprotected Header incorrect type');
    }
    let parsedProt = {};
    if (jws.protected) {
        try {
            const protectedHeader = decode1(jws.protected);
            parsedProt = JSON.parse(decoder.decode(protectedHeader));
        } catch  {
            throw new JWSInvalid('JWS Protected Header is invalid');
        }
    }
    if (!isDisjoint(parsedProt, jws.header)) {
        throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
    }
    const joseHeader = {
        ...parsedProt,
        ...jws.header
    };
    const extensions1 = validateCrit(JWSInvalid, new Map([
        [
            'b64',
            true
        ]
    ]), options?.crit, parsedProt, joseHeader);
    let b64 = true;
    if (extensions1.has('b64')) {
        b64 = parsedProt.b64;
        if (typeof b64 !== 'boolean') {
            throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
        }
    }
    const { alg  } = joseHeader;
    if (typeof alg !== 'string' || !alg) {
        throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    }
    const algorithms = options && validateAlgorithms('algorithms', options.algorithms);
    if (algorithms && !algorithms.has(alg)) {
        throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
    }
    if (b64) {
        if (typeof jws.payload !== 'string') {
            throw new JWSInvalid('JWS Payload must be a string');
        }
    } else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {
        throw new JWSInvalid('JWS Payload must be a string or an Uint8Array instance');
    }
    let resolvedKey = false;
    if (typeof key === 'function') {
        key = await key(parsedProt, jws);
        resolvedKey = true;
    }
    checkKeyType(alg, key, 'verify');
    const data = concat(encoder.encode(jws.protected ?? ''), encoder.encode('.'), typeof jws.payload === 'string' ? encoder.encode(jws.payload) : jws.payload);
    const signature = decode1(jws.signature);
    const verified = await verify(alg, key, signature, data);
    if (!verified) {
        throw new JWSSignatureVerificationFailed();
    }
    let payload;
    if (b64) {
        payload = decode1(jws.payload);
    } else if (typeof jws.payload === 'string') {
        payload = encoder.encode(jws.payload);
    } else {
        payload = jws.payload;
    }
    const result = {
        payload
    };
    if (jws.protected !== undefined) {
        result.protectedHeader = parsedProt;
    }
    if (jws.header !== undefined) {
        result.unprotectedHeader = jws.header;
    }
    if (resolvedKey) {
        return {
            ...result,
            key
        };
    }
    return result;
}
async function compactVerify(jws, key, options) {
    if (jws instanceof Uint8Array) {
        jws = decoder.decode(jws);
    }
    if (typeof jws !== 'string') {
        throw new JWSInvalid('Compact JWS must be a string or Uint8Array');
    }
    const { 0: protectedHeader , 1: payload , 2: signature , length  } = jws.split('.');
    if (length !== 3) {
        throw new JWSInvalid('Invalid Compact JWS');
    }
    const verified = await flattenedVerify({
        payload,
        protected: protectedHeader,
        signature
    }, key, options);
    const result = {
        payload: verified.payload,
        protectedHeader: verified.protectedHeader
    };
    if (typeof key === 'function') {
        return {
            ...result,
            key: verified.key
        };
    }
    return result;
}
const __default4 = (date)=>Math.floor(date.getTime() / 1000)
;
const hour = 60 * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;
const __default5 = (str)=>{
    const matched = REGEX.exec(str);
    if (!matched) {
        throw new TypeError('Invalid time period format');
    }
    const value = parseFloat(matched[1]);
    const unit = matched[2].toLowerCase();
    switch(unit){
        case 'sec':
        case 'secs':
        case 'second':
        case 'seconds':
        case 's':
            return Math.round(value);
        case 'minute':
        case 'minutes':
        case 'min':
        case 'mins':
        case 'm':
            return Math.round(value * 60);
        case 'hour':
        case 'hours':
        case 'hr':
        case 'hrs':
        case 'h':
            return Math.round(value * hour);
        case 'day':
        case 'days':
        case 'd':
            return Math.round(value * day);
        case 'week':
        case 'weeks':
        case 'w':
            return Math.round(value * week);
        default:
            return Math.round(value * year);
    }
};
const normalizeTyp = (value)=>value.toLowerCase().replace(/^application\//, '')
;
const checkAudiencePresence = (audPayload, audOption)=>{
    if (typeof audPayload === 'string') {
        return audOption.includes(audPayload);
    }
    if (Array.isArray(audPayload)) {
        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
    }
    return false;
};
const __default6 = (protectedHeader, encodedPayload, options = {})=>{
    const { typ  } = options;
    if (typ && (typeof protectedHeader.typ !== 'string' || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
        throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', 'typ', 'check_failed');
    }
    let payload;
    try {
        payload = JSON.parse(decoder.decode(encodedPayload));
    } catch  {}
    if (!isObject(payload)) {
        throw new JWTInvalid('JWT Claims Set must be a top-level JSON object');
    }
    const { issuer  } = options;
    if (issuer && !(Array.isArray(issuer) ? issuer : [
        issuer
    ]).includes(payload.iss)) {
        throw new JWTClaimValidationFailed('unexpected "iss" claim value', 'iss', 'check_failed');
    }
    const { subject  } = options;
    if (subject && payload.sub !== subject) {
        throw new JWTClaimValidationFailed('unexpected "sub" claim value', 'sub', 'check_failed');
    }
    const { audience  } = options;
    if (audience && !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [
        audience
    ] : audience)) {
        throw new JWTClaimValidationFailed('unexpected "aud" claim value', 'aud', 'check_failed');
    }
    let tolerance;
    switch(typeof options.clockTolerance){
        case 'string':
            tolerance = __default5(options.clockTolerance);
            break;
        case 'number':
            tolerance = options.clockTolerance;
            break;
        case 'undefined':
            tolerance = 0;
            break;
        default:
            throw new TypeError('Invalid clockTolerance option type');
    }
    const { currentDate  } = options;
    const now = __default4(currentDate || new Date());
    if ((payload.iat !== undefined || options.maxTokenAge) && typeof payload.iat !== 'number') {
        throw new JWTClaimValidationFailed('"iat" claim must be a number', 'iat', 'invalid');
    }
    if (payload.nbf !== undefined) {
        if (typeof payload.nbf !== 'number') {
            throw new JWTClaimValidationFailed('"nbf" claim must be a number', 'nbf', 'invalid');
        }
        if (payload.nbf > now + tolerance) {
            throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', 'nbf', 'check_failed');
        }
    }
    if (payload.exp !== undefined) {
        if (typeof payload.exp !== 'number') {
            throw new JWTClaimValidationFailed('"exp" claim must be a number', 'exp', 'invalid');
        }
        if (payload.exp <= now - tolerance) {
            throw new JWTExpired('"exp" claim timestamp check failed', 'exp', 'check_failed');
        }
    }
    if (options.maxTokenAge) {
        const age = now - payload.iat;
        const max = typeof options.maxTokenAge === 'number' ? options.maxTokenAge : __default5(options.maxTokenAge);
        if (age - tolerance > max) {
            throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', 'iat', 'check_failed');
        }
        if (age < 0 - tolerance) {
            throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');
        }
    }
    return payload;
};
async function jwtVerify(jwt, key, options) {
    const verified = await compactVerify(jwt, key, options);
    if (verified.protectedHeader.crit?.includes('b64') && verified.protectedHeader.b64 === false) {
        throw new JWTInvalid('JWTs MUST NOT use unencoded payload');
    }
    const payload = __default6(verified.protectedHeader, verified.payload, options);
    const result = {
        payload,
        protectedHeader: verified.protectedHeader
    };
    if (typeof key === 'function') {
        return {
            ...result,
            key: verified.key
        };
    }
    return result;
}
function decodeProtectedHeader(token) {
    let protectedB64u;
    if (typeof token === 'string') {
        const parts = token.split('.');
        if (parts.length === 3 || parts.length === 5) {
            [protectedB64u] = parts;
        }
    } else if (typeof token === 'object' && token) {
        if ('protected' in token) {
            protectedB64u = token.protected;
        } else {
            throw new TypeError('Token does not contain a Protected Header');
        }
    }
    try {
        if (typeof protectedB64u !== 'string' || !protectedB64u) {
            throw new Error();
        }
        const result = JSON.parse(decoder.decode(decode1(protectedB64u)));
        if (!isObject(result)) {
            throw new Error();
        }
        return result;
    } catch  {
        throw new TypeError('Invalid Token or Protected Header formatting');
    }
}
const ARRAY_BUFFER_NAME = "[object ArrayBuffer]";
class BufferSourceConverter {
    static isArrayBuffer(data) {
        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;
    }
    static toArrayBuffer(data) {
        if (this.isArrayBuffer(data)) {
            return data;
        }
        if (data.byteLength === data.buffer.byteLength) {
            return data.buffer;
        }
        return this.toUint8Array(data).slice().buffer;
    }
    static toUint8Array(data) {
        return this.toView(data, Uint8Array);
    }
    static toView(data, type) {
        if (data.constructor === type) {
            return data;
        }
        if (this.isArrayBuffer(data)) {
            return new type(data);
        }
        if (this.isArrayBufferView(data)) {
            return new type(data.buffer, data.byteOffset, data.byteLength);
        }
        throw new TypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");
    }
    static isBufferSource(data) {
        return this.isArrayBufferView(data) || this.isArrayBuffer(data);
    }
    static isArrayBufferView(data) {
        return ArrayBuffer.isView(data) || data && this.isArrayBuffer(data.buffer);
    }
    static isEqual(a1, b) {
        const aView = BufferSourceConverter.toUint8Array(a1);
        const bView = BufferSourceConverter.toUint8Array(b);
        if (aView.length !== bView.byteLength) {
            return false;
        }
        for(let i6 = 0; i6 < aView.length; i6++){
            if (aView[i6] !== bView[i6]) {
                return false;
            }
        }
        return true;
    }
    static concat(...args) {
        if (Array.isArray(args[0])) {
            const buffers = args[0];
            let size = 0;
            for (const buffer of buffers){
                size += buffer.byteLength;
            }
            const res = new Uint8Array(size);
            let offset = 0;
            for (const buffer1 of buffers){
                const view = this.toUint8Array(buffer1);
                res.set(view, offset);
                offset += view.length;
            }
            if (args[1]) {
                return this.toView(res, args[1]);
            }
            return res.buffer;
        } else {
            return this.concat(args);
        }
    }
}
class Utf8Converter {
    static fromString(text) {
        const s2 = unescape(encodeURIComponent(text));
        const uintArray = new Uint8Array(s2.length);
        for(let i7 = 0; i7 < s2.length; i7++){
            uintArray[i7] = s2.charCodeAt(i7);
        }
        return uintArray.buffer;
    }
    static toString(buffer) {
        const buf = BufferSourceConverter.toUint8Array(buffer);
        let encodedString = "";
        for(let i8 = 0; i8 < buf.length; i8++){
            encodedString += String.fromCharCode(buf[i8]);
        }
        const decodedString = decodeURIComponent(escape(encodedString));
        return decodedString;
    }
}
class Utf16Converter {
    static toString(buffer, littleEndian = false) {
        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);
        const dataView1 = new DataView(arrayBuffer);
        let res = "";
        for(let i9 = 0; i9 < arrayBuffer.byteLength; i9 += 2){
            const code = dataView1.getUint16(i9, littleEndian);
            res += String.fromCharCode(code);
        }
        return res;
    }
    static fromString(text, littleEndian = false) {
        const res = new ArrayBuffer(text.length * 2);
        const dataView2 = new DataView(res);
        for(let i10 = 0; i10 < text.length; i10++){
            dataView2.setUint16(i10 * 2, text.charCodeAt(i10), littleEndian);
        }
        return res;
    }
}
class Convert {
    static isHex(data) {
        return typeof data === "string" && /^[a-z0-9]+$/i.test(data);
    }
    static isBase64(data) {
        return typeof data === "string" && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);
    }
    static isBase64Url(data) {
        return typeof data === "string" && /^[a-zA-Z0-9-_]+$/i.test(data);
    }
    static ToString(buffer, enc = "utf8") {
        const buf = BufferSourceConverter.toUint8Array(buffer);
        switch(enc.toLowerCase()){
            case "utf8":
                return this.ToUtf8String(buf);
            case "binary":
                return this.ToBinary(buf);
            case "hex":
                return this.ToHex(buf);
            case "base64":
                return this.ToBase64(buf);
            case "base64url":
                return this.ToBase64Url(buf);
            case "utf16le":
                return Utf16Converter.toString(buf, true);
            case "utf16":
            case "utf16be":
                return Utf16Converter.toString(buf);
            default:
                throw new Error(`Unknown type of encoding '${enc}'`);
        }
    }
    static FromString(str, enc = "utf8") {
        if (!str) {
            return new ArrayBuffer(0);
        }
        switch(enc.toLowerCase()){
            case "utf8":
                return this.FromUtf8String(str);
            case "binary":
                return this.FromBinary(str);
            case "hex":
                return this.FromHex(str);
            case "base64":
                return this.FromBase64(str);
            case "base64url":
                return this.FromBase64Url(str);
            case "utf16le":
                return Utf16Converter.fromString(str, true);
            case "utf16":
            case "utf16be":
                return Utf16Converter.fromString(str);
            default:
                throw new Error(`Unknown type of encoding '${enc}'`);
        }
    }
    static ToBase64(buffer) {
        const buf = BufferSourceConverter.toUint8Array(buffer);
        if (typeof btoa !== "undefined") {
            const binary = this.ToString(buf, "binary");
            return btoa(binary);
        } else {
            return Buffer.from(buf).toString("base64");
        }
    }
    static FromBase64(base641) {
        const formatted = this.formatString(base641);
        if (!formatted) {
            return new ArrayBuffer(0);
        }
        if (!Convert.isBase64(formatted)) {
            throw new TypeError("Argument 'base64Text' is not Base64 encoded");
        }
        if (typeof atob !== "undefined") {
            return this.FromBinary(atob(formatted));
        } else {
            return new Uint8Array(Buffer.from(formatted, "base64")).buffer;
        }
    }
    static FromBase64Url(base64url) {
        const formatted = this.formatString(base64url);
        if (!formatted) {
            return new ArrayBuffer(0);
        }
        if (!Convert.isBase64Url(formatted)) {
            throw new TypeError("Argument 'base64url' is not Base64Url encoded");
        }
        return this.FromBase64(this.Base64Padding(formatted.replace(/\-/g, "+").replace(/\_/g, "/")));
    }
    static ToBase64Url(data) {
        return this.ToBase64(data).replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
    }
    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {
        switch(encoding){
            case "ascii":
                return this.FromBinary(text);
            case "utf8":
                return Utf8Converter.fromString(text);
            case "utf16":
            case "utf16be":
                return Utf16Converter.fromString(text);
            case "utf16le":
            case "usc2":
                return Utf16Converter.fromString(text, true);
            default:
                throw new Error(`Unknown type of encoding '${encoding}'`);
        }
    }
    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {
        switch(encoding){
            case "ascii":
                return this.ToBinary(buffer);
            case "utf8":
                return Utf8Converter.toString(buffer);
            case "utf16":
            case "utf16be":
                return Utf16Converter.toString(buffer);
            case "utf16le":
            case "usc2":
                return Utf16Converter.toString(buffer, true);
            default:
                throw new Error(`Unknown type of encoding '${encoding}'`);
        }
    }
    static FromBinary(text) {
        const stringLength = text.length;
        const resultView = new Uint8Array(stringLength);
        for(let i12 = 0; i12 < stringLength; i12++){
            resultView[i12] = text.charCodeAt(i12);
        }
        return resultView.buffer;
    }
    static ToBinary(buffer) {
        const buf = BufferSourceConverter.toUint8Array(buffer);
        let res = "";
        for(let i13 = 0; i13 < buf.length; i13++){
            res += String.fromCharCode(buf[i13]);
        }
        return res;
    }
    static ToHex(buffer) {
        const buf = BufferSourceConverter.toUint8Array(buffer);
        const splitter = "";
        const res = [];
        const len = buf.length;
        for(let i14 = 0; i14 < len; i14++){
            const __char = buf[i14].toString(16).padStart(2, "0");
            res.push(__char);
        }
        return res.join(splitter);
    }
    static FromHex(hexString) {
        let formatted = this.formatString(hexString);
        if (!formatted) {
            return new ArrayBuffer(0);
        }
        if (!Convert.isHex(formatted)) {
            throw new TypeError("Argument 'hexString' is not HEX encoded");
        }
        if (formatted.length % 2) {
            formatted = `0${formatted}`;
        }
        const res = new Uint8Array(formatted.length / 2);
        for(let i15 = 0; i15 < formatted.length; i15 = i15 + 2){
            const c = formatted.slice(i15, i15 + 2);
            res[i15 / 2] = parseInt(c, 16);
        }
        return res.buffer;
    }
    static ToUtf16String(buffer, littleEndian = false) {
        return Utf16Converter.toString(buffer, littleEndian);
    }
    static FromUtf16String(text, littleEndian = false) {
        return Utf16Converter.fromString(text, littleEndian);
    }
    static Base64Padding(base642) {
        const padCount = 4 - base642.length % 4;
        if (padCount < 4) {
            for(let i16 = 0; i16 < padCount; i16++){
                base642 += "=";
            }
        }
        return base642;
    }
    static formatString(data) {
        return (data === null || data === void 0 ? void 0 : data.replace(/[\n\r\t ]/g, "")) || "";
    }
}
Convert.DEFAULT_UTF8_ENCODING = "utf8";
function getParametersValue(parameters, name, defaultValue) {
    var _a2;
    if (parameters instanceof Object === false) {
        return defaultValue;
    }
    return (_a2 = parameters[name]) !== null && _a2 !== void 0 ? _a2 : defaultValue;
}
function bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = inputBuffer.byteLength - inputOffset, insertSpace = false) {
    let result = "";
    for (const item of new Uint8Array(inputBuffer, inputOffset, inputLength)){
        const str = item.toString(16).toUpperCase();
        if (str.length === 1) {
            result += "0";
        }
        result += str;
        if (insertSpace) {
            result += " ";
        }
    }
    return result.trim();
}
function utilFromBase(inputBuffer, inputBase) {
    let result = 0;
    if (inputBuffer.length === 1) {
        return inputBuffer[0];
    }
    for(let i17 = inputBuffer.length - 1; i17 >= 0; i17--){
        result += inputBuffer[inputBuffer.length - 1 - i17] * Math.pow(2, inputBase * i17);
    }
    return result;
}
function utilToBase(value, base1, reserved = -1) {
    const internalReserved = reserved;
    let internalValue = value;
    let result = 0;
    let biggest = Math.pow(2, base1);
    for(let i18 = 1; i18 < 8; i18++){
        if (value < biggest) {
            let retBuf;
            if (internalReserved < 0) {
                retBuf = new ArrayBuffer(i18);
                result = i18;
            } else {
                if (internalReserved < i18) {
                    return new ArrayBuffer(0);
                }
                retBuf = new ArrayBuffer(internalReserved);
                result = internalReserved;
            }
            const retView = new Uint8Array(retBuf);
            for(let j = i18 - 1; j >= 0; j--){
                const basis = Math.pow(2, j * base1);
                retView[result - j - 1] = Math.floor(internalValue / basis);
                internalValue -= retView[result - j - 1] * basis;
            }
            return retBuf;
        }
        biggest *= Math.pow(2, base1);
    }
    return new ArrayBuffer(0);
}
function utilConcatBuf(...buffers) {
    let outputLength = 0;
    let prevLength = 0;
    for (const buffer of buffers){
        outputLength += buffer.byteLength;
    }
    const retBuf = new ArrayBuffer(outputLength);
    const retView = new Uint8Array(retBuf);
    for (const buffer1 of buffers){
        retView.set(new Uint8Array(buffer1), prevLength);
        prevLength += buffer1.byteLength;
    }
    return retBuf;
}
function utilConcatView(...views) {
    let outputLength = 0;
    let prevLength = 0;
    for (const view of views){
        outputLength += view.length;
    }
    const retBuf = new ArrayBuffer(outputLength);
    const retView = new Uint8Array(retBuf);
    for (const view1 of views){
        retView.set(view1, prevLength);
        prevLength += view1.length;
    }
    return retView;
}
function utilDecodeTC() {
    const buf = new Uint8Array(this.valueHex);
    if (this.valueHex.byteLength >= 2) {
        const condition1 = buf[0] === 255 && buf[1] & 128;
        const condition2 = buf[0] === 0 && (buf[1] & 128) === 0;
        if (condition1 || condition2) {
            this.warnings.push("Needlessly long format");
        }
    }
    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
    const bigIntView = new Uint8Array(bigIntBuffer);
    for(let i19 = 0; i19 < this.valueHex.byteLength; i19++){
        bigIntView[i19] = 0;
    }
    bigIntView[0] = buf[0] & 128;
    const bigInt = utilFromBase(bigIntView, 8);
    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
    const smallIntView = new Uint8Array(smallIntBuffer);
    for(let j = 0; j < this.valueHex.byteLength; j++){
        smallIntView[j] = buf[j];
    }
    smallIntView[0] &= 127;
    const smallInt = utilFromBase(smallIntView, 8);
    return smallInt - bigInt;
}
function utilEncodeTC(value) {
    const modValue = value < 0 ? value * -1 : value;
    let bigInt = 128;
    for(let i20 = 1; i20 < 8; i20++){
        if (modValue <= bigInt) {
            if (value < 0) {
                const smallInt = bigInt - modValue;
                const retBuf = utilToBase(smallInt, 8, i20);
                const retView = new Uint8Array(retBuf);
                retView[0] |= 128;
                return retBuf;
            }
            let retBuf = utilToBase(modValue, 8, i20);
            let retView = new Uint8Array(retBuf);
            if (retView[0] & 128) {
                const tempBuf = retBuf.slice(0);
                const tempView = new Uint8Array(tempBuf);
                retBuf = new ArrayBuffer(retBuf.byteLength + 1);
                retView = new Uint8Array(retBuf);
                for(let k = 0; k < tempBuf.byteLength; k++){
                    retView[k + 1] = tempView[k];
                }
                retView[0] = 0;
            }
            return retBuf;
        }
        bigInt *= Math.pow(2, 8);
    }
    return new ArrayBuffer(0);
}
function isEqualBuffer(inputBuffer1, inputBuffer2) {
    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {
        return false;
    }
    const view1 = new Uint8Array(inputBuffer1);
    const view2 = new Uint8Array(inputBuffer2);
    for(let i21 = 0; i21 < view1.length; i21++){
        if (view1[i21] !== view2[i21]) {
            return false;
        }
    }
    return true;
}
function padNumber(inputNumber, fullLength) {
    const str = inputNumber.toString(10);
    if (fullLength < str.length) {
        return "";
    }
    const dif = fullLength - str.length;
    const padding = new Array(dif);
    for(let i22 = 0; i22 < dif; i22++){
        padding[i22] = "0";
    }
    const paddingString = padding.join("");
    return paddingString.concat(str);
}
const base64Template = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
const base64UrlTemplate = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=";
function toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {
    let i24 = 0;
    let flag1 = 0;
    let flag2 = 0;
    let output = "";
    const template = useUrlTemplate ? base64UrlTemplate : base64Template;
    if (skipLeadingZeros) {
        let nonZeroPosition = 0;
        for(let i23 = 0; i23 < input.length; i23++){
            if (input.charCodeAt(i23) !== 0) {
                nonZeroPosition = i23;
                break;
            }
        }
        input = input.slice(nonZeroPosition);
    }
    while(i24 < input.length){
        const chr1 = input.charCodeAt(i24++);
        if (i24 >= input.length) {
            flag1 = 1;
        }
        const chr2 = input.charCodeAt(i24++);
        if (i24 >= input.length) {
            flag2 = 1;
        }
        const chr3 = input.charCodeAt(i24++);
        const enc1 = chr1 >> 2;
        const enc2 = (chr1 & 3) << 4 | chr2 >> 4;
        let enc3 = (chr2 & 15) << 2 | chr3 >> 6;
        let enc4 = chr3 & 63;
        if (flag1 === 1) {
            enc3 = enc4 = 64;
        } else {
            if (flag2 === 1) {
                enc4 = 64;
            }
        }
        if (skipPadding) {
            if (enc3 === 64) {
                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;
            } else {
                if (enc4 === 64) {
                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;
                } else {
                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;
                }
            }
        } else {
            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;
        }
    }
    return output;
}
function fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {
    const template = useUrlTemplate ? base64UrlTemplate : base64Template;
    function indexOf(toSearch) {
        for(let i25 = 0; i25 < 64; i25++){
            if (template.charAt(i25) === toSearch) return i25;
        }
        return 64;
    }
    function test(incoming) {
        return incoming === 64 ? 0 : incoming;
    }
    let i110 = 0;
    let output = "";
    while(i110 < input.length){
        const enc1 = indexOf(input.charAt(i110++));
        const enc2 = i110 >= input.length ? 0 : indexOf(input.charAt(i110++));
        const enc3 = i110 >= input.length ? 0 : indexOf(input.charAt(i110++));
        const enc4 = i110 >= input.length ? 0 : indexOf(input.charAt(i110++));
        const chr1 = test(enc1) << 2 | test(enc2) >> 4;
        const chr2 = (test(enc2) & 15) << 4 | test(enc3) >> 2;
        const chr3 = (test(enc3) & 3) << 6 | test(enc4);
        output += String.fromCharCode(chr1);
        if (enc3 !== 64) {
            output += String.fromCharCode(chr2);
        }
        if (enc4 !== 64) {
            output += String.fromCharCode(chr3);
        }
    }
    if (cutTailZeros) {
        const outputLength = output.length;
        let nonZeroStart = -1;
        for(let i26 = outputLength - 1; i26 >= 0; i26--){
            if (output.charCodeAt(i26) !== 0) {
                nonZeroStart = i26;
                break;
            }
        }
        if (nonZeroStart !== -1) {
            output = output.slice(0, nonZeroStart + 1);
        } else {
            output = "";
        }
    }
    return output;
}
function arrayBufferToString(buffer) {
    let resultString = "";
    const view = new Uint8Array(buffer);
    for (const element of view){
        resultString += String.fromCharCode(element);
    }
    return resultString;
}
function stringToArrayBuffer(str) {
    const stringLength = str.length;
    const resultBuffer = new ArrayBuffer(stringLength);
    const resultView = new Uint8Array(resultBuffer);
    for(let i27 = 0; i27 < stringLength; i27++){
        resultView[i27] = str.charCodeAt(i27);
    }
    return resultBuffer;
}
const log2 = Math.log(2);
function nearestPowerOf2(length) {
    const base2 = Math.log(length) / log2;
    const floor1 = Math.floor(base2);
    const round = Math.round(base2);
    return floor1 === round ? floor1 : round;
}
function clearProps(object, propsArray) {
    for (const prop of propsArray){
        delete object[prop];
    }
}
function assertBigInt() {
    if (typeof BigInt === "undefined") {
        throw new Error("BigInt is not defined. Your environment doesn't implement BigInt.");
    }
}
function concat1(buffers) {
    let outputLength = 0;
    let prevLength = 0;
    for(let i28 = 0; i28 < buffers.length; i28++){
        const buffer = buffers[i28];
        outputLength += buffer.byteLength;
    }
    const retView = new Uint8Array(outputLength);
    for(let i111 = 0; i111 < buffers.length; i111++){
        const buffer = buffers[i111];
        retView.set(new Uint8Array(buffer), prevLength);
        prevLength += buffer.byteLength;
    }
    return retView.buffer;
}
function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {
    if (!(inputBuffer instanceof Uint8Array)) {
        baseBlock.error = "Wrong parameter: inputBuffer must be 'Uint8Array'";
        return false;
    }
    if (!inputBuffer.byteLength) {
        baseBlock.error = "Wrong parameter: inputBuffer has zero length";
        return false;
    }
    if (inputOffset < 0) {
        baseBlock.error = "Wrong parameter: inputOffset less than zero";
        return false;
    }
    if (inputLength < 0) {
        baseBlock.error = "Wrong parameter: inputLength less than zero";
        return false;
    }
    if (inputBuffer.byteLength - inputOffset - inputLength < 0) {
        baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
        return false;
    }
    return true;
}
class ViewWriter {
    constructor(){
        this.items = [];
    }
    write(buf) {
        this.items.push(buf);
    }
    final() {
        return concat1(this.items);
    }
}
const powers2 = [
    new Uint8Array([
        1
    ])
];
const digitsString = "0123456789";
const NAME = "name";
const VALUE_HEX_VIEW = "valueHexView";
const IS_HEX_ONLY = "isHexOnly";
const ID_BLOCK = "idBlock";
const TAG_CLASS = "tagClass";
const TAG_NUMBER = "tagNumber";
const IS_CONSTRUCTED = "isConstructed";
const FROM_BER = "fromBER";
const TO_BER = "toBER";
const LOCAL = "local";
const EMPTY_STRING = "";
const EMPTY_BUFFER = new ArrayBuffer(0);
const EMPTY_VIEW = new Uint8Array(0);
const END_OF_CONTENT_NAME = "EndOfContent";
const OCTET_STRING_NAME = "OCTET STRING";
const BIT_STRING_NAME = "BIT STRING";
function HexBlock(BaseClass) {
    var _a1;
    return _a1 = class Some extends BaseClass {
        constructor(...args){
            var _a2;
            super(...args);
            const params = args[0] || {};
            this.isHexOnly = (_a2 = params.isHexOnly) !== null && _a2 !== void 0 ? _a2 : false;
            this.valueHexView = params.valueHex ? BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;
        }
        get valueHex() {
            return this.valueHexView.slice().buffer;
        }
        set valueHex(value) {
            this.valueHexView = new Uint8Array(value);
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
            if (!checkBufferParams(this, view, inputOffset, inputLength)) {
                return -1;
            }
            const endLength = inputOffset + inputLength;
            this.valueHexView = view.subarray(inputOffset, endLength);
            if (!this.valueHexView.length) {
                this.warnings.push("Zero buffer length");
                return inputOffset;
            }
            this.blockLength = inputLength;
            return endLength;
        }
        toBER(sizeOnly = false) {
            if (!this.isHexOnly) {
                this.error = "Flag 'isHexOnly' is not set, abort";
                return EMPTY_BUFFER;
            }
            if (sizeOnly) {
                return new ArrayBuffer(this.valueHexView.byteLength);
            }
            return this.valueHexView.byteLength === this.valueHexView.buffer.byteLength ? this.valueHexView.buffer : this.valueHexView.slice().buffer;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                isHexOnly: this.isHexOnly,
                valueHex: Convert.ToHex(this.valueHexView)
            };
        }
    }, _a1.NAME = "hexBlock", _a1;
}
class LocalBaseBlock {
    constructor({ blockLength =0 , error: error1 = EMPTY_STRING , warnings =[] , valueBeforeDecode =EMPTY_VIEW  } = {}){
        this.blockLength = blockLength;
        this.error = error1;
        this.warnings = warnings;
        this.valueBeforeDecodeView = BufferSourceConverter.toUint8Array(valueBeforeDecode);
    }
    static blockName() {
        return this.NAME;
    }
    get valueBeforeDecode() {
        return this.valueBeforeDecodeView.slice().buffer;
    }
    set valueBeforeDecode(value) {
        this.valueBeforeDecodeView = new Uint8Array(value);
    }
    toJSON() {
        return {
            blockName: this.constructor.NAME,
            blockLength: this.blockLength,
            error: this.error,
            warnings: this.warnings,
            valueBeforeDecode: Convert.ToHex(this.valueBeforeDecodeView)
        };
    }
}
LocalBaseBlock.NAME = "baseBlock";
class ValueBlock extends LocalBaseBlock {
    fromBER(inputBuffer, inputOffset, inputLength) {
        throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
    }
    toBER(sizeOnly, writer) {
        throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
    }
}
ValueBlock.NAME = "valueBlock";
class LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {
    constructor({ idBlock ={}  } = {}){
        var _a3, _b, _c, _d;
        super();
        if (idBlock) {
            this.isHexOnly = (_a3 = idBlock.isHexOnly) !== null && _a3 !== void 0 ? _a3 : false;
            this.valueHexView = idBlock.valueHex ? BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;
            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;
            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;
            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;
        } else {
            this.tagClass = -1;
            this.tagNumber = -1;
            this.isConstructed = false;
        }
    }
    toBER(sizeOnly = false) {
        let firstOctet = 0;
        switch(this.tagClass){
            case 1:
                firstOctet |= 0;
                break;
            case 2:
                firstOctet |= 64;
                break;
            case 3:
                firstOctet |= 128;
                break;
            case 4:
                firstOctet |= 192;
                break;
            default:
                this.error = "Unknown tag class";
                return EMPTY_BUFFER;
        }
        if (this.isConstructed) firstOctet |= 32;
        if (this.tagNumber < 31 && !this.isHexOnly) {
            const retView = new Uint8Array(1);
            if (!sizeOnly) {
                let number = this.tagNumber;
                number &= 31;
                firstOctet |= number;
                retView[0] = firstOctet;
            }
            return retView.buffer;
        }
        if (!this.isHexOnly) {
            const encodedBuf = utilToBase(this.tagNumber, 7);
            const encodedView = new Uint8Array(encodedBuf);
            const size = encodedBuf.byteLength;
            const retView = new Uint8Array(size + 1);
            retView[0] = firstOctet | 31;
            if (!sizeOnly) {
                for(let i29 = 0; i29 < size - 1; i29++)retView[i29 + 1] = encodedView[i29] | 128;
                retView[size] = encodedView[size - 1];
            }
            return retView.buffer;
        }
        const retView = new Uint8Array(this.valueHexView.byteLength + 1);
        retView[0] = firstOctet | 31;
        if (!sizeOnly) {
            const curView = this.valueHexView;
            for(let i30 = 0; i30 < curView.length - 1; i30++)retView[i30 + 1] = curView[i30] | 128;
            retView[this.valueHexView.byteLength] = curView[curView.length - 1];
        }
        return retView.buffer;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
            return -1;
        }
        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
        if (intBuffer.length === 0) {
            this.error = "Zero buffer length";
            return -1;
        }
        const tagClassMask = intBuffer[0] & 192;
        switch(tagClassMask){
            case 0:
                this.tagClass = 1;
                break;
            case 64:
                this.tagClass = 2;
                break;
            case 128:
                this.tagClass = 3;
                break;
            case 192:
                this.tagClass = 4;
                break;
            default:
                this.error = "Unknown tag class";
                return -1;
        }
        this.isConstructed = (intBuffer[0] & 32) === 32;
        this.isHexOnly = false;
        const tagNumberMask = intBuffer[0] & 31;
        if (tagNumberMask !== 31) {
            this.tagNumber = tagNumberMask;
            this.blockLength = 1;
        } else {
            let count = 1;
            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);
            let tagNumberBufferMaxLength = 255;
            while(intBuffer[count] & 128){
                intTagNumberBuffer[count - 1] = intBuffer[count] & 127;
                count++;
                if (count >= intBuffer.length) {
                    this.error = "End of input reached before message was fully decoded";
                    return -1;
                }
                if (count === tagNumberBufferMaxLength) {
                    tagNumberBufferMaxLength += 255;
                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);
                    for(let i31 = 0; i31 < intTagNumberBuffer.length; i31++)tempBufferView[i31] = intTagNumberBuffer[i31];
                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);
                }
            }
            this.blockLength = count + 1;
            intTagNumberBuffer[count - 1] = intBuffer[count] & 127;
            const tempBufferView = new Uint8Array(count);
            for(let i32 = 0; i32 < count; i32++)tempBufferView[i32] = intTagNumberBuffer[i32];
            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);
            intTagNumberBuffer.set(tempBufferView);
            if (this.blockLength <= 9) this.tagNumber = utilFromBase(intTagNumberBuffer, 7);
            else {
                this.isHexOnly = true;
                this.warnings.push("Tag too long, represented as hex-coded");
            }
        }
        if (this.tagClass === 1 && this.isConstructed) {
            switch(this.tagNumber){
                case 1:
                case 2:
                case 5:
                case 6:
                case 9:
                case 13:
                case 14:
                case 23:
                case 24:
                case 31:
                case 32:
                case 33:
                case 34:
                    this.error = "Constructed encoding used for primitive type";
                    return -1;
            }
        }
        return inputOffset + this.blockLength;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            tagClass: this.tagClass,
            tagNumber: this.tagNumber,
            isConstructed: this.isConstructed
        };
    }
}
LocalIdentificationBlock.NAME = "identificationBlock";
class LocalLengthBlock extends LocalBaseBlock {
    constructor({ lenBlock ={}  } = {}){
        var _a4, _b, _c;
        super();
        this.isIndefiniteForm = (_a4 = lenBlock.isIndefiniteForm) !== null && _a4 !== void 0 ? _a4 : false;
        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;
        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        const view = BufferSourceConverter.toUint8Array(inputBuffer);
        if (!checkBufferParams(this, view, inputOffset, inputLength)) {
            return -1;
        }
        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);
        if (intBuffer.length === 0) {
            this.error = "Zero buffer length";
            return -1;
        }
        if (intBuffer[0] === 255) {
            this.error = "Length block 0xFF is reserved by standard";
            return -1;
        }
        this.isIndefiniteForm = intBuffer[0] === 128;
        if (this.isIndefiniteForm) {
            this.blockLength = 1;
            return inputOffset + this.blockLength;
        }
        this.longFormUsed = !!(intBuffer[0] & 128);
        if (this.longFormUsed === false) {
            this.length = intBuffer[0];
            this.blockLength = 1;
            return inputOffset + this.blockLength;
        }
        const count = intBuffer[0] & 127;
        if (count > 8) {
            this.error = "Too big integer";
            return -1;
        }
        if (count + 1 > intBuffer.length) {
            this.error = "End of input reached before message was fully decoded";
            return -1;
        }
        const lenOffset = inputOffset + 1;
        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);
        if (lengthBufferView[count - 1] === 0) this.warnings.push("Needlessly long encoded length");
        this.length = utilFromBase(lengthBufferView, 8);
        if (this.longFormUsed && this.length <= 127) this.warnings.push("Unnecessary usage of long length form");
        this.blockLength = count + 1;
        return inputOffset + this.blockLength;
    }
    toBER(sizeOnly = false) {
        let retBuf;
        let retView;
        if (this.length > 127) this.longFormUsed = true;
        if (this.isIndefiniteForm) {
            retBuf = new ArrayBuffer(1);
            if (sizeOnly === false) {
                retView = new Uint8Array(retBuf);
                retView[0] = 128;
            }
            return retBuf;
        }
        if (this.longFormUsed) {
            const encodedBuf = utilToBase(this.length, 8);
            if (encodedBuf.byteLength > 127) {
                this.error = "Too big length";
                return EMPTY_BUFFER;
            }
            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);
            if (sizeOnly) return retBuf;
            const encodedView = new Uint8Array(encodedBuf);
            retView = new Uint8Array(retBuf);
            retView[0] = encodedBuf.byteLength | 128;
            for(let i33 = 0; i33 < encodedBuf.byteLength; i33++)retView[i33 + 1] = encodedView[i33];
            return retBuf;
        }
        retBuf = new ArrayBuffer(1);
        if (sizeOnly === false) {
            retView = new Uint8Array(retBuf);
            retView[0] = this.length;
        }
        return retBuf;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            isIndefiniteForm: this.isIndefiniteForm,
            longFormUsed: this.longFormUsed,
            length: this.length
        };
    }
}
LocalLengthBlock.NAME = "lengthBlock";
const typeStore = {};
class BaseBlock extends LocalBaseBlock {
    constructor({ name =EMPTY_STRING , optional =false , primitiveSchema , ...parameters } = {}, valueBlockType){
        super(parameters);
        this.name = name;
        this.optional = optional;
        if (primitiveSchema) {
            this.primitiveSchema = primitiveSchema;
        }
        this.idBlock = new LocalIdentificationBlock(parameters);
        this.lenBlock = new LocalLengthBlock(parameters);
        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
        if (resultOffset === -1) {
            this.error = this.valueBlock.error;
            return resultOffset;
        }
        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
        return resultOffset;
    }
    toBER(sizeOnly, writer) {
        const _writer = writer || new ViewWriter();
        if (!writer) {
            prepareIndefiniteForm(this);
        }
        const idBlockBuf = this.idBlock.toBER(sizeOnly);
        _writer.write(idBlockBuf);
        if (this.lenBlock.isIndefiniteForm) {
            _writer.write(new Uint8Array([
                128
            ]).buffer);
            this.valueBlock.toBER(sizeOnly, _writer);
            _writer.write(new ArrayBuffer(2));
        } else {
            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);
            this.lenBlock.length = valueBlockBuf.byteLength;
            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);
            _writer.write(lenBlockBuf);
            _writer.write(valueBlockBuf);
        }
        if (!writer) {
            return _writer.final();
        }
        return EMPTY_BUFFER;
    }
    toJSON() {
        const object = {
            ...super.toJSON(),
            idBlock: this.idBlock.toJSON(),
            lenBlock: this.lenBlock.toJSON(),
            valueBlock: this.valueBlock.toJSON(),
            name: this.name,
            optional: this.optional
        };
        if (this.primitiveSchema) object.primitiveSchema = this.primitiveSchema.toJSON();
        return object;
    }
    toString(encoding = "ascii") {
        if (encoding === "ascii") {
            return this.onAsciiEncoding();
        }
        return Convert.ToHex(this.toBER());
    }
    onAsciiEncoding() {
        return `${this.constructor.NAME} : ${Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;
    }
    isEqual(other) {
        if (this === other) {
            return true;
        }
        if (!(other instanceof this.constructor)) {
            return false;
        }
        const thisRaw = this.toBER();
        const otherRaw = other.toBER();
        return isEqualBuffer(thisRaw, otherRaw);
    }
}
BaseBlock.NAME = "BaseBlock";
function prepareIndefiniteForm(baseBlock) {
    if (baseBlock instanceof typeStore.Constructed) {
        for (const value of baseBlock.valueBlock.value){
            if (prepareIndefiniteForm(value)) {
                baseBlock.lenBlock.isIndefiniteForm = true;
            }
        }
    }
    return !!baseBlock.lenBlock.isIndefiniteForm;
}
class BaseStringBlock extends BaseBlock {
    constructor({ value =EMPTY_STRING , ...parameters } = {}, stringValueBlockType){
        super(parameters, stringValueBlockType);
        if (value) {
            this.fromString(value);
        }
    }
    getValue() {
        return this.valueBlock.value;
    }
    setValue(value) {
        this.valueBlock.value = value;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
        if (resultOffset === -1) {
            this.error = this.valueBlock.error;
            return resultOffset;
        }
        this.fromBuffer(this.valueBlock.valueHexView);
        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
        return resultOffset;
    }
    onAsciiEncoding() {
        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;
    }
}
BaseStringBlock.NAME = "BaseStringBlock";
class LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {
    constructor({ isHexOnly =true , ...parameters } = {}){
        super(parameters);
        this.isHexOnly = isHexOnly;
    }
}
LocalPrimitiveValueBlock.NAME = "PrimitiveValueBlock";
var _a$w;
class Primitive extends BaseBlock {
    constructor(parameters = {}){
        super(parameters, LocalPrimitiveValueBlock);
        this.idBlock.isConstructed = false;
    }
}
_a$w = Primitive;
(()=>{
    typeStore.Primitive = _a$w;
})();
Primitive.NAME = "PRIMITIVE";
function localChangeType(inputObject, newType) {
    if (inputObject instanceof newType) {
        return inputObject;
    }
    const newObject = new newType();
    newObject.idBlock = inputObject.idBlock;
    newObject.lenBlock = inputObject.lenBlock;
    newObject.warnings = inputObject.warnings;
    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;
    return newObject;
}
function localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {
    const incomingOffset = inputOffset;
    let returnObject = new BaseBlock({}, ValueBlock);
    const baseBlock = new LocalBaseBlock();
    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {
        returnObject.error = baseBlock.error;
        return {
            offset: -1,
            result: returnObject
        };
    }
    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);
    if (!intBuffer.length) {
        returnObject.error = "Zero buffer length";
        return {
            offset: -1,
            result: returnObject
        };
    }
    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);
    if (returnObject.idBlock.warnings.length) {
        returnObject.warnings.concat(returnObject.idBlock.warnings);
    }
    if (resultOffset === -1) {
        returnObject.error = returnObject.idBlock.error;
        return {
            offset: -1,
            result: returnObject
        };
    }
    inputOffset = resultOffset;
    inputLength -= returnObject.idBlock.blockLength;
    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);
    if (returnObject.lenBlock.warnings.length) {
        returnObject.warnings.concat(returnObject.lenBlock.warnings);
    }
    if (resultOffset === -1) {
        returnObject.error = returnObject.lenBlock.error;
        return {
            offset: -1,
            result: returnObject
        };
    }
    inputOffset = resultOffset;
    inputLength -= returnObject.lenBlock.blockLength;
    if (!returnObject.idBlock.isConstructed && returnObject.lenBlock.isIndefiniteForm) {
        returnObject.error = "Indefinite length form used for primitive encoding form";
        return {
            offset: -1,
            result: returnObject
        };
    }
    let newASN1Type = BaseBlock;
    switch(returnObject.idBlock.tagClass){
        case 1:
            if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {
                returnObject.error = "UNIVERSAL 37 and upper tags are reserved by ASN.1 standard";
                return {
                    offset: -1,
                    result: returnObject
                };
            }
            switch(returnObject.idBlock.tagNumber){
                case 0:
                    if (returnObject.idBlock.isConstructed && returnObject.lenBlock.length > 0) {
                        returnObject.error = "Type [UNIVERSAL 0] is reserved";
                        return {
                            offset: -1,
                            result: returnObject
                        };
                    }
                    newASN1Type = typeStore.EndOfContent;
                    break;
                case 1:
                    newASN1Type = typeStore.Boolean;
                    break;
                case 2:
                    newASN1Type = typeStore.Integer;
                    break;
                case 3:
                    newASN1Type = typeStore.BitString;
                    break;
                case 4:
                    newASN1Type = typeStore.OctetString;
                    break;
                case 5:
                    newASN1Type = typeStore.Null;
                    break;
                case 6:
                    newASN1Type = typeStore.ObjectIdentifier;
                    break;
                case 10:
                    newASN1Type = typeStore.Enumerated;
                    break;
                case 12:
                    newASN1Type = typeStore.Utf8String;
                    break;
                case 13:
                    newASN1Type = typeStore.RelativeObjectIdentifier;
                    break;
                case 14:
                    newASN1Type = typeStore.TIME;
                    break;
                case 15:
                    returnObject.error = "[UNIVERSAL 15] is reserved by ASN.1 standard";
                    return {
                        offset: -1,
                        result: returnObject
                    };
                case 16:
                    newASN1Type = typeStore.Sequence;
                    break;
                case 17:
                    newASN1Type = typeStore.Set;
                    break;
                case 18:
                    newASN1Type = typeStore.NumericString;
                    break;
                case 19:
                    newASN1Type = typeStore.PrintableString;
                    break;
                case 20:
                    newASN1Type = typeStore.TeletexString;
                    break;
                case 21:
                    newASN1Type = typeStore.VideotexString;
                    break;
                case 22:
                    newASN1Type = typeStore.IA5String;
                    break;
                case 23:
                    newASN1Type = typeStore.UTCTime;
                    break;
                case 24:
                    newASN1Type = typeStore.GeneralizedTime;
                    break;
                case 25:
                    newASN1Type = typeStore.GraphicString;
                    break;
                case 26:
                    newASN1Type = typeStore.VisibleString;
                    break;
                case 27:
                    newASN1Type = typeStore.GeneralString;
                    break;
                case 28:
                    newASN1Type = typeStore.UniversalString;
                    break;
                case 29:
                    newASN1Type = typeStore.CharacterString;
                    break;
                case 30:
                    newASN1Type = typeStore.BmpString;
                    break;
                case 31:
                    newASN1Type = typeStore.DATE;
                    break;
                case 32:
                    newASN1Type = typeStore.TimeOfDay;
                    break;
                case 33:
                    newASN1Type = typeStore.DateTime;
                    break;
                case 34:
                    newASN1Type = typeStore.Duration;
                    break;
                default:
                    {
                        const newObject = returnObject.idBlock.isConstructed ? new typeStore.Constructed() : new typeStore.Primitive();
                        newObject.idBlock = returnObject.idBlock;
                        newObject.lenBlock = returnObject.lenBlock;
                        newObject.warnings = returnObject.warnings;
                        returnObject = newObject;
                    }
            }
            break;
        case 2:
        case 3:
        case 4:
        default:
            {
                newASN1Type = returnObject.idBlock.isConstructed ? typeStore.Constructed : typeStore.Primitive;
            }
    }
    returnObject = localChangeType(returnObject, newASN1Type);
    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);
    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);
    return {
        offset: resultOffset,
        result: returnObject
    };
}
function fromBER(inputBuffer) {
    if (!inputBuffer.byteLength) {
        const result = new BaseBlock({}, ValueBlock);
        result.error = "Input buffer has zero length";
        return {
            offset: -1,
            result
        };
    }
    return localFromBER(BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);
}
function checkLen(indefiniteLength, length) {
    if (indefiniteLength) {
        return 1;
    }
    return length;
}
class LocalConstructedValueBlock extends ValueBlock {
    constructor({ value =[] , isIndefiniteForm =false , ...parameters } = {}){
        super(parameters);
        this.value = value;
        this.isIndefiniteForm = isIndefiniteForm;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        const view = BufferSourceConverter.toUint8Array(inputBuffer);
        if (!checkBufferParams(this, view, inputOffset, inputLength)) {
            return -1;
        }
        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);
        if (this.valueBeforeDecodeView.length === 0) {
            this.warnings.push("Zero buffer length");
            return inputOffset;
        }
        let currentOffset = inputOffset;
        while(checkLen(this.isIndefiniteForm, inputLength) > 0){
            const returnObject = localFromBER(view, currentOffset, inputLength);
            if (returnObject.offset === -1) {
                this.error = returnObject.result.error;
                this.warnings.concat(returnObject.result.warnings);
                return -1;
            }
            currentOffset = returnObject.offset;
            this.blockLength += returnObject.result.blockLength;
            inputLength -= returnObject.result.blockLength;
            this.value.push(returnObject.result);
            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {
                break;
            }
        }
        if (this.isIndefiniteForm) {
            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {
                this.value.pop();
            } else {
                this.warnings.push("No EndOfContent block encoded");
            }
        }
        return currentOffset;
    }
    toBER(sizeOnly, writer) {
        const _writer = writer || new ViewWriter();
        for(let i34 = 0; i34 < this.value.length; i34++){
            this.value[i34].toBER(sizeOnly, _writer);
        }
        if (!writer) {
            return _writer.final();
        }
        return EMPTY_BUFFER;
    }
    toJSON() {
        const object = {
            ...super.toJSON(),
            isIndefiniteForm: this.isIndefiniteForm,
            value: []
        };
        for (const value of this.value){
            object.value.push(value.toJSON());
        }
        return object;
    }
}
LocalConstructedValueBlock.NAME = "ConstructedValueBlock";
var _a$v;
class Constructed extends BaseBlock {
    constructor(parameters = {}){
        super(parameters, LocalConstructedValueBlock);
        this.idBlock.isConstructed = true;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
        if (resultOffset === -1) {
            this.error = this.valueBlock.error;
            return resultOffset;
        }
        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
        return resultOffset;
    }
    onAsciiEncoding() {
        const values = [];
        for (const value of this.valueBlock.value){
            values.push(value.toString("ascii").split("\n").map((o1)=>`  ${o1}`
            ).join("\n"));
        }
        const blockName = this.idBlock.tagClass === 3 ? `[${this.idBlock.tagNumber}]` : this.constructor.NAME;
        return values.length ? `${blockName} :\n${values.join("\n")}` : `${blockName} :`;
    }
}
_a$v = Constructed;
(()=>{
    typeStore.Constructed = _a$v;
})();
Constructed.NAME = "CONSTRUCTED";
class LocalEndOfContentValueBlock extends ValueBlock {
    fromBER(inputBuffer, inputOffset, inputLength) {
        return inputOffset;
    }
    toBER(sizeOnly) {
        return EMPTY_BUFFER;
    }
}
LocalEndOfContentValueBlock.override = "EndOfContentValueBlock";
var _a$u;
class EndOfContent extends BaseBlock {
    constructor(parameters = {}){
        super(parameters, LocalEndOfContentValueBlock);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 0;
    }
}
_a$u = EndOfContent;
(()=>{
    typeStore.EndOfContent = _a$u;
})();
EndOfContent.NAME = END_OF_CONTENT_NAME;
var _a$t;
class Null extends BaseBlock {
    constructor(parameters = {}){
        super(parameters, ValueBlock);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 5;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        if (this.lenBlock.length > 0) this.warnings.push("Non-zero length of value block for Null type");
        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
        this.blockLength += inputLength;
        if (inputOffset + inputLength > inputBuffer.byteLength) {
            this.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
            return -1;
        }
        return inputOffset + inputLength;
    }
    toBER(sizeOnly, writer) {
        const retBuf = new ArrayBuffer(2);
        if (!sizeOnly) {
            const retView = new Uint8Array(retBuf);
            retView[0] = 5;
            retView[1] = 0;
        }
        if (writer) {
            writer.write(retBuf);
        }
        return retBuf;
    }
    onAsciiEncoding() {
        return `${this.constructor.NAME}`;
    }
}
_a$t = Null;
(()=>{
    typeStore.Null = _a$t;
})();
Null.NAME = "NULL";
class LocalBooleanValueBlock extends HexBlock(ValueBlock) {
    constructor({ value , ...parameters } = {}){
        super(parameters);
        if (parameters.valueHex) {
            this.valueHexView = BufferSourceConverter.toUint8Array(parameters.valueHex);
        } else {
            this.valueHexView = new Uint8Array(1);
        }
        if (value) {
            this.value = value;
        }
    }
    get value() {
        for (const octet of this.valueHexView){
            if (octet > 0) {
                return true;
            }
        }
        return false;
    }
    set value(value) {
        this.valueHexView[0] = value ? 255 : 0;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
            return -1;
        }
        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);
        if (inputLength > 1) this.warnings.push("Boolean value encoded in more then 1 octet");
        this.isHexOnly = true;
        utilDecodeTC.call(this);
        this.blockLength = inputLength;
        return inputOffset + inputLength;
    }
    toBER() {
        return this.valueHexView.slice();
    }
    toJSON() {
        return {
            ...super.toJSON(),
            value: this.value
        };
    }
}
LocalBooleanValueBlock.NAME = "BooleanValueBlock";
var _a$s;
class Boolean1 extends BaseBlock {
    constructor(parameters = {}){
        super(parameters, LocalBooleanValueBlock);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 1;
    }
    getValue() {
        return this.valueBlock.value;
    }
    setValue(value) {
        this.valueBlock.value = value;
    }
    onAsciiEncoding() {
        return `${this.constructor.NAME} : ${this.getValue}`;
    }
}
_a$s = Boolean1;
(()=>{
    typeStore.Boolean = _a$s;
})();
Boolean1.NAME = "BOOLEAN";
class LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {
    constructor({ isConstructed =false , ...parameters } = {}){
        super(parameters);
        this.isConstructed = isConstructed;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        let resultOffset = 0;
        if (this.isConstructed) {
            this.isHexOnly = false;
            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
            if (resultOffset === -1) return resultOffset;
            for(let i35 = 0; i35 < this.value.length; i35++){
                const currentBlockName = this.value[i35].constructor.NAME;
                if (currentBlockName === END_OF_CONTENT_NAME) {
                    if (this.isIndefiniteForm) break;
                    else {
                        this.error = "EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only";
                        return -1;
                    }
                }
                if (currentBlockName !== OCTET_STRING_NAME) {
                    this.error = "OCTET STRING may consists of OCTET STRINGs only";
                    return -1;
                }
            }
        } else {
            this.isHexOnly = true;
            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
            this.blockLength = inputLength;
        }
        return resultOffset;
    }
    toBER(sizeOnly, writer) {
        if (this.isConstructed) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
        return sizeOnly ? new ArrayBuffer(this.valueHexView.byteLength) : this.valueHexView.slice().buffer;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            isConstructed: this.isConstructed
        };
    }
}
LocalOctetStringValueBlock.NAME = "OctetStringValueBlock";
var _a$r;
class OctetString extends BaseBlock {
    constructor({ idBlock ={} , lenBlock ={} , ...parameters } = {}){
        var _b, _c;
        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
        super({
            idBlock: {
                isConstructed: parameters.isConstructed,
                ...idBlock
            },
            lenBlock: {
                ...lenBlock,
                isIndefiniteForm: !!parameters.isIndefiniteForm
            },
            ...parameters
        }, LocalOctetStringValueBlock);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 4;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        this.valueBlock.isConstructed = this.idBlock.isConstructed;
        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
        if (inputLength === 0) {
            if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
            if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
            return inputOffset;
        }
        if (!this.valueBlock.isConstructed) {
            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
            const buf = view.subarray(inputOffset, inputOffset + inputLength);
            try {
                if (buf.byteLength) {
                    const asn = localFromBER(buf, 0, buf.byteLength);
                    if (asn.offset !== -1 && asn.offset === inputLength) {
                        this.valueBlock.value = [
                            asn.result
                        ];
                    }
                }
            } catch (e) {}
        }
        return super.fromBER(inputBuffer, inputOffset, inputLength);
    }
    onAsciiEncoding() {
        if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
            return Constructed.prototype.onAsciiEncoding.call(this);
        }
        return `${this.constructor.NAME} : ${Convert.ToHex(this.valueBlock.valueHexView)}`;
    }
    getValue() {
        if (!this.idBlock.isConstructed) {
            return this.valueBlock.valueHexView.slice().buffer;
        }
        const array = [];
        for (const content of this.valueBlock.value){
            if (content instanceof OctetString) {
                array.push(content.valueBlock.valueHexView);
            }
        }
        return BufferSourceConverter.concat(array);
    }
}
_a$r = OctetString;
(()=>{
    typeStore.OctetString = _a$r;
})();
OctetString.NAME = OCTET_STRING_NAME;
class LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {
    constructor({ unusedBits =0 , isConstructed =false , ...parameters } = {}){
        super(parameters);
        this.unusedBits = unusedBits;
        this.isConstructed = isConstructed;
        this.blockLength = this.valueHexView.byteLength;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        if (!inputLength) {
            return inputOffset;
        }
        let resultOffset = -1;
        if (this.isConstructed) {
            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
            if (resultOffset === -1) return resultOffset;
            for (const value of this.value){
                const currentBlockName = value.constructor.NAME;
                if (currentBlockName === END_OF_CONTENT_NAME) {
                    if (this.isIndefiniteForm) break;
                    else {
                        this.error = "EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only";
                        return -1;
                    }
                }
                if (currentBlockName !== BIT_STRING_NAME) {
                    this.error = "BIT STRING may consists of BIT STRINGs only";
                    return -1;
                }
                const valueBlock = value.valueBlock;
                if (this.unusedBits > 0 && valueBlock.unusedBits > 0) {
                    this.error = "Using of \"unused bits\" inside constructive BIT STRING allowed for least one only";
                    return -1;
                }
                this.unusedBits = valueBlock.unusedBits;
            }
            return resultOffset;
        }
        const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
            return -1;
        }
        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
        this.unusedBits = intBuffer[0];
        if (this.unusedBits > 7) {
            this.error = "Unused bits for BitString must be in range 0-7";
            return -1;
        }
        if (!this.unusedBits) {
            const buf = intBuffer.subarray(1);
            try {
                if (buf.byteLength) {
                    const asn = localFromBER(buf, 0, buf.byteLength);
                    if (asn.offset !== -1 && asn.offset === inputLength - 1) {
                        this.value = [
                            asn.result
                        ];
                    }
                }
            } catch (e) {}
        }
        this.valueHexView = intBuffer.subarray(1);
        this.blockLength = intBuffer.length;
        return inputOffset + inputLength;
    }
    toBER(sizeOnly, writer) {
        if (this.isConstructed) {
            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
        }
        if (sizeOnly) {
            return new ArrayBuffer(this.valueHexView.byteLength + 1);
        }
        if (!this.valueHexView.byteLength) {
            return EMPTY_BUFFER;
        }
        const retView = new Uint8Array(this.valueHexView.length + 1);
        retView[0] = this.unusedBits;
        retView.set(this.valueHexView, 1);
        return retView.buffer;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            unusedBits: this.unusedBits,
            isConstructed: this.isConstructed
        };
    }
}
LocalBitStringValueBlock.NAME = "BitStringValueBlock";
var _a$q;
class BitString extends BaseBlock {
    constructor({ idBlock ={} , lenBlock ={} , ...parameters } = {}){
        var _b, _c;
        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
        super({
            idBlock: {
                isConstructed: parameters.isConstructed,
                ...idBlock
            },
            lenBlock: {
                ...lenBlock,
                isIndefiniteForm: !!parameters.isIndefiniteForm
            },
            ...parameters
        }, LocalBitStringValueBlock);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 3;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        this.valueBlock.isConstructed = this.idBlock.isConstructed;
        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
        return super.fromBER(inputBuffer, inputOffset, inputLength);
    }
    onAsciiEncoding() {
        if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
            return Constructed.prototype.onAsciiEncoding.call(this);
        } else {
            const bits = [];
            const valueHex = this.valueBlock.valueHexView;
            for (const __byte of valueHex){
                bits.push(__byte.toString(2).padStart(8, "0"));
            }
            const bitsStr = bits.join("");
            return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;
        }
    }
}
_a$q = BitString;
(()=>{
    typeStore.BitString = _a$q;
})();
BitString.NAME = BIT_STRING_NAME;
var _a$p;
function viewAdd(first, second) {
    const c = new Uint8Array([
        0
    ]);
    const firstView = new Uint8Array(first);
    const secondView = new Uint8Array(second);
    let firstViewCopy = firstView.slice(0);
    const firstViewCopyLength = firstViewCopy.length - 1;
    const secondViewCopy = secondView.slice(0);
    const secondViewCopyLength = secondViewCopy.length - 1;
    let value = 0;
    const max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;
    let counter = 0;
    for(let i36 = max; i36 >= 0; i36--, counter++){
        switch(true){
            case counter < secondViewCopy.length:
                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];
                break;
            default:
                value = firstViewCopy[firstViewCopyLength - counter] + c[0];
        }
        c[0] = value / 10;
        switch(true){
            case counter >= firstViewCopy.length:
                firstViewCopy = utilConcatView(new Uint8Array([
                    value % 10
                ]), firstViewCopy);
                break;
            default:
                firstViewCopy[firstViewCopyLength - counter] = value % 10;
        }
    }
    if (c[0] > 0) firstViewCopy = utilConcatView(c, firstViewCopy);
    return firstViewCopy;
}
function power2(n3) {
    if (n3 >= powers2.length) {
        for(let p = powers2.length; p <= n3; p++){
            const c = new Uint8Array([
                0
            ]);
            let digits = powers2[p - 1].slice(0);
            for(let i37 = digits.length - 1; i37 >= 0; i37--){
                const newValue = new Uint8Array([
                    (digits[i37] << 1) + c[0]
                ]);
                c[0] = newValue[0] / 10;
                digits[i37] = newValue[0] % 10;
            }
            if (c[0] > 0) digits = utilConcatView(c, digits);
            powers2.push(digits);
        }
    }
    return powers2[n3];
}
function viewSub(first, second) {
    let b = 0;
    const firstView = new Uint8Array(first);
    const secondView = new Uint8Array(second);
    const firstViewCopy = firstView.slice(0);
    const firstViewCopyLength = firstViewCopy.length - 1;
    const secondViewCopy = secondView.slice(0);
    const secondViewCopyLength = secondViewCopy.length - 1;
    let value;
    let counter = 0;
    for(let i38 = secondViewCopyLength; i38 >= 0; i38--, counter++){
        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;
        switch(true){
            case value < 0:
                b = 1;
                firstViewCopy[firstViewCopyLength - counter] = value + 10;
                break;
            default:
                b = 0;
                firstViewCopy[firstViewCopyLength - counter] = value;
        }
    }
    if (b > 0) {
        for(let i39 = firstViewCopyLength - secondViewCopyLength + 1; i39 >= 0; i39--, counter++){
            value = firstViewCopy[firstViewCopyLength - counter] - b;
            if (value < 0) {
                b = 1;
                firstViewCopy[firstViewCopyLength - counter] = value + 10;
            } else {
                b = 0;
                firstViewCopy[firstViewCopyLength - counter] = value;
                break;
            }
        }
    }
    return firstViewCopy.slice();
}
class LocalIntegerValueBlock extends HexBlock(ValueBlock) {
    constructor({ value , ...parameters } = {}){
        super(parameters);
        this._valueDec = 0;
        if (parameters.valueHex) {
            this.setValueHex();
        }
        if (value !== undefined) {
            this.valueDec = value;
        }
    }
    setValueHex() {
        if (this.valueHexView.length >= 4) {
            this.warnings.push("Too big Integer for decoding, hex only");
            this.isHexOnly = true;
            this._valueDec = 0;
        } else {
            this.isHexOnly = false;
            if (this.valueHexView.length > 0) {
                this._valueDec = utilDecodeTC.call(this);
            }
        }
    }
    set valueDec(v) {
        this._valueDec = v;
        this.isHexOnly = false;
        this.valueHexView = new Uint8Array(utilEncodeTC(v));
    }
    get valueDec() {
        return this._valueDec;
    }
    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {
        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);
        if (offset === -1) return offset;
        const view = this.valueHexView;
        if (view[0] === 0 && (view[1] & 128) !== 0) {
            this.valueHexView = view.subarray(1);
        } else {
            if (expectedLength !== 0) {
                if (view.length < expectedLength) {
                    if (expectedLength - view.length > 1) expectedLength = view.length + 1;
                    this.valueHexView = view.subarray(expectedLength - view.length);
                }
            }
        }
        return offset;
    }
    toDER(sizeOnly = false) {
        const view = this.valueHexView;
        switch(true){
            case (view[0] & 128) !== 0:
                {
                    const updatedView = new Uint8Array(this.valueHexView.length + 1);
                    updatedView[0] = 0;
                    updatedView.set(view, 1);
                    this.valueHexView = updatedView;
                }
                break;
            case view[0] === 0 && (view[1] & 128) === 0:
                {
                    this.valueHexView = this.valueHexView.subarray(1);
                }
                break;
        }
        return this.toBER(sizeOnly);
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
        if (resultOffset === -1) {
            return resultOffset;
        }
        this.setValueHex();
        return resultOffset;
    }
    toBER(sizeOnly) {
        return sizeOnly ? new ArrayBuffer(this.valueHexView.length) : this.valueHexView.slice().buffer;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            valueDec: this.valueDec
        };
    }
    toString() {
        const firstBit = this.valueHexView.length * 8 - 1;
        let digits = new Uint8Array(this.valueHexView.length * 8 / 3);
        let bitNumber = 0;
        let currentByte;
        const asn1View = this.valueHexView;
        let result = "";
        let flag = false;
        for(let byteNumber = asn1View.byteLength - 1; byteNumber >= 0; byteNumber--){
            currentByte = asn1View[byteNumber];
            for(let i40 = 0; i40 < 8; i40++){
                if ((currentByte & 1) === 1) {
                    switch(bitNumber){
                        case firstBit:
                            digits = viewSub(power2(bitNumber), digits);
                            result = "-";
                            break;
                        default:
                            digits = viewAdd(digits, power2(bitNumber));
                    }
                }
                bitNumber++;
                currentByte >>= 1;
            }
        }
        for(let i41 = 0; i41 < digits.length; i41++){
            if (digits[i41]) flag = true;
            if (flag) result += digitsString.charAt(digits[i41]);
        }
        if (flag === false) result += digitsString.charAt(0);
        return result;
    }
}
_a$p = LocalIntegerValueBlock;
LocalIntegerValueBlock.NAME = "IntegerValueBlock";
(()=>{
    Object.defineProperty(_a$p.prototype, "valueHex", {
        set: function(v) {
            this.valueHexView = new Uint8Array(v);
            this.setValueHex();
        },
        get: function() {
            return this.valueHexView.slice().buffer;
        }
    });
})();
var _a$o;
class Integer extends BaseBlock {
    constructor(parameters = {}){
        super(parameters, LocalIntegerValueBlock);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 2;
    }
    toBigInt() {
        assertBigInt();
        return BigInt(this.valueBlock.toString());
    }
    static fromBigInt(value) {
        assertBigInt();
        const bigIntValue = BigInt(value);
        const writer = new ViewWriter();
        const hex = bigIntValue.toString(16).replace(/^-/, "");
        const view = new Uint8Array(Convert.FromHex(hex));
        if (bigIntValue < 0) {
            const first = new Uint8Array(view.length + (view[0] & 128 ? 1 : 0));
            first[0] |= 128;
            const firstInt = BigInt(`0x${Convert.ToHex(first)}`);
            const secondInt = firstInt + bigIntValue;
            const second = BufferSourceConverter.toUint8Array(Convert.FromHex(secondInt.toString(16)));
            second[0] |= 128;
            writer.write(second);
        } else {
            if (view[0] & 128) {
                writer.write(new Uint8Array([
                    0
                ]));
            }
            writer.write(view);
        }
        const res = new Integer({
            valueHex: writer.final()
        });
        return res;
    }
    convertToDER() {
        const integer = new Integer({
            valueHex: this.valueBlock.valueHexView
        });
        integer.valueBlock.toDER();
        return integer;
    }
    convertFromDER() {
        return new Integer({
            valueHex: this.valueBlock.valueHexView[0] === 0 ? this.valueBlock.valueHexView.subarray(1) : this.valueBlock.valueHexView
        });
    }
    onAsciiEncoding() {
        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;
    }
}
_a$o = Integer;
(()=>{
    typeStore.Integer = _a$o;
})();
Integer.NAME = "INTEGER";
var _a$n;
class Enumerated extends Integer {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 10;
    }
}
_a$n = Enumerated;
(()=>{
    typeStore.Enumerated = _a$n;
})();
Enumerated.NAME = "ENUMERATED";
class LocalSidValueBlock extends HexBlock(ValueBlock) {
    constructor({ valueDec =-1 , isFirstSid =false , ...parameters } = {}){
        super(parameters);
        this.valueDec = valueDec;
        this.isFirstSid = isFirstSid;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        if (!inputLength) {
            return inputOffset;
        }
        const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
            return -1;
        }
        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
        this.valueHexView = new Uint8Array(inputLength);
        for(let i42 = 0; i42 < inputLength; i42++){
            this.valueHexView[i42] = intBuffer[i42] & 127;
            this.blockLength++;
            if ((intBuffer[i42] & 128) === 0) break;
        }
        const tempView = new Uint8Array(this.blockLength);
        for(let i2 = 0; i2 < this.blockLength; i2++){
            tempView[i2] = this.valueHexView[i2];
        }
        this.valueHexView = tempView;
        if ((intBuffer[this.blockLength - 1] & 128) !== 0) {
            this.error = "End of input reached before message was fully decoded";
            return -1;
        }
        if (this.valueHexView[0] === 0) this.warnings.push("Needlessly long format of SID encoding");
        if (this.blockLength <= 8) this.valueDec = utilFromBase(this.valueHexView, 7);
        else {
            this.isHexOnly = true;
            this.warnings.push("Too big SID for decoding, hex only");
        }
        return inputOffset + this.blockLength;
    }
    set valueBigInt(value) {
        assertBigInt();
        let bits = BigInt(value).toString(2);
        while(bits.length % 7){
            bits = "0" + bits;
        }
        const bytes = new Uint8Array(bits.length / 7);
        for(let i43 = 0; i43 < bytes.length; i43++){
            bytes[i43] = parseInt(bits.slice(i43 * 7, i43 * 7 + 7), 2) + (i43 + 1 < bytes.length ? 128 : 0);
        }
        this.fromBER(bytes.buffer, 0, bytes.length);
    }
    toBER(sizeOnly) {
        if (this.isHexOnly) {
            if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
            const curView = this.valueHexView;
            const retView = new Uint8Array(this.blockLength);
            for(let i44 = 0; i44 < this.blockLength - 1; i44++)retView[i44] = curView[i44] | 128;
            retView[this.blockLength - 1] = curView[this.blockLength - 1];
            return retView.buffer;
        }
        const encodedBuf = utilToBase(this.valueDec, 7);
        if (encodedBuf.byteLength === 0) {
            this.error = "Error during encoding SID value";
            return EMPTY_BUFFER;
        }
        const retView = new Uint8Array(encodedBuf.byteLength);
        if (!sizeOnly) {
            const encodedView = new Uint8Array(encodedBuf);
            const len = encodedBuf.byteLength - 1;
            for(let i45 = 0; i45 < len; i45++)retView[i45] = encodedView[i45] | 128;
            retView[len] = encodedView[len];
        }
        return retView;
    }
    toString() {
        let result = "";
        if (this.isHexOnly) result = Convert.ToHex(this.valueHexView);
        else {
            if (this.isFirstSid) {
                let sidValue = this.valueDec;
                if (this.valueDec <= 39) result = "0.";
                else {
                    if (this.valueDec <= 79) {
                        result = "1.";
                        sidValue -= 40;
                    } else {
                        result = "2.";
                        sidValue -= 80;
                    }
                }
                result += sidValue.toString();
            } else result = this.valueDec.toString();
        }
        return result;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            valueDec: this.valueDec,
            isFirstSid: this.isFirstSid
        };
    }
}
LocalSidValueBlock.NAME = "sidBlock";
class LocalObjectIdentifierValueBlock extends ValueBlock {
    constructor({ value =EMPTY_STRING , ...parameters } = {}){
        super(parameters);
        this.value = [];
        if (value) {
            this.fromString(value);
        }
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        let resultOffset = inputOffset;
        while(inputLength > 0){
            const sidBlock = new LocalSidValueBlock();
            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
            if (resultOffset === -1) {
                this.blockLength = 0;
                this.error = sidBlock.error;
                return resultOffset;
            }
            if (this.value.length === 0) sidBlock.isFirstSid = true;
            this.blockLength += sidBlock.blockLength;
            inputLength -= sidBlock.blockLength;
            this.value.push(sidBlock);
        }
        return resultOffset;
    }
    toBER(sizeOnly) {
        const retBuffers = [];
        for(let i46 = 0; i46 < this.value.length; i46++){
            const valueBuf = this.value[i46].toBER(sizeOnly);
            if (valueBuf.byteLength === 0) {
                this.error = this.value[i46].error;
                return EMPTY_BUFFER;
            }
            retBuffers.push(valueBuf);
        }
        return concat1(retBuffers);
    }
    fromString(string) {
        this.value = [];
        let pos1 = 0;
        let pos2 = 0;
        let sid = "";
        let flag = false;
        do {
            pos2 = string.indexOf(".", pos1);
            if (pos2 === -1) sid = string.substring(pos1);
            else sid = string.substring(pos1, pos2);
            pos1 = pos2 + 1;
            if (flag) {
                const sidBlock = this.value[0];
                let plus = 0;
                switch(sidBlock.valueDec){
                    case 0:
                        break;
                    case 1:
                        plus = 40;
                        break;
                    case 2:
                        plus = 80;
                        break;
                    default:
                        this.value = [];
                        return;
                }
                const parsedSID = parseInt(sid, 10);
                if (isNaN(parsedSID)) return;
                sidBlock.valueDec = parsedSID + plus;
                flag = false;
            } else {
                const sidBlock = new LocalSidValueBlock();
                if (sid > Number.MAX_SAFE_INTEGER) {
                    assertBigInt();
                    const sidValue = BigInt(sid);
                    sidBlock.valueBigInt = sidValue;
                } else {
                    sidBlock.valueDec = parseInt(sid, 10);
                    if (isNaN(sidBlock.valueDec)) return;
                }
                if (!this.value.length) {
                    sidBlock.isFirstSid = true;
                    flag = true;
                }
                this.value.push(sidBlock);
            }
        }while (pos2 !== -1)
    }
    toString() {
        let result = "";
        let isHexOnly = false;
        for(let i47 = 0; i47 < this.value.length; i47++){
            isHexOnly = this.value[i47].isHexOnly;
            let sidStr = this.value[i47].toString();
            if (i47 !== 0) result = `${result}.`;
            if (isHexOnly) {
                sidStr = `{${sidStr}}`;
                if (this.value[i47].isFirstSid) result = `2.{${sidStr} - 80}`;
                else result += sidStr;
            } else result += sidStr;
        }
        return result;
    }
    toJSON() {
        const object = {
            ...super.toJSON(),
            value: this.toString(),
            sidArray: []
        };
        for(let i48 = 0; i48 < this.value.length; i48++){
            object.sidArray.push(this.value[i48].toJSON());
        }
        return object;
    }
}
LocalObjectIdentifierValueBlock.NAME = "ObjectIdentifierValueBlock";
var _a$m;
class ObjectIdentifier extends BaseBlock {
    constructor(parameters = {}){
        super(parameters, LocalObjectIdentifierValueBlock);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 6;
    }
    getValue() {
        return this.valueBlock.toString();
    }
    setValue(value) {
        this.valueBlock.fromString(value);
    }
    onAsciiEncoding() {
        return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            value: this.getValue()
        };
    }
}
_a$m = ObjectIdentifier;
(()=>{
    typeStore.ObjectIdentifier = _a$m;
})();
ObjectIdentifier.NAME = "OBJECT IDENTIFIER";
class LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {
    constructor({ valueDec =0 , ...parameters } = {}){
        super(parameters);
        this.valueDec = valueDec;
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        if (inputLength === 0) return inputOffset;
        const inputView = BufferSourceConverter.toUint8Array(inputBuffer);
        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) return -1;
        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
        this.valueHexView = new Uint8Array(inputLength);
        for(let i49 = 0; i49 < inputLength; i49++){
            this.valueHexView[i49] = intBuffer[i49] & 127;
            this.blockLength++;
            if ((intBuffer[i49] & 128) === 0) break;
        }
        const tempView = new Uint8Array(this.blockLength);
        for(let i3 = 0; i3 < this.blockLength; i3++)tempView[i3] = this.valueHexView[i3];
        this.valueHexView = tempView;
        if ((intBuffer[this.blockLength - 1] & 128) !== 0) {
            this.error = "End of input reached before message was fully decoded";
            return -1;
        }
        if (this.valueHexView[0] === 0) this.warnings.push("Needlessly long format of SID encoding");
        if (this.blockLength <= 8) this.valueDec = utilFromBase(this.valueHexView, 7);
        else {
            this.isHexOnly = true;
            this.warnings.push("Too big SID for decoding, hex only");
        }
        return inputOffset + this.blockLength;
    }
    toBER(sizeOnly) {
        if (this.isHexOnly) {
            if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
            const curView = this.valueHexView;
            const retView = new Uint8Array(this.blockLength);
            for(let i50 = 0; i50 < this.blockLength - 1; i50++)retView[i50] = curView[i50] | 128;
            retView[this.blockLength - 1] = curView[this.blockLength - 1];
            return retView.buffer;
        }
        const encodedBuf = utilToBase(this.valueDec, 7);
        if (encodedBuf.byteLength === 0) {
            this.error = "Error during encoding SID value";
            return EMPTY_BUFFER;
        }
        const retView = new Uint8Array(encodedBuf.byteLength);
        if (!sizeOnly) {
            const encodedView = new Uint8Array(encodedBuf);
            const len = encodedBuf.byteLength - 1;
            for(let i51 = 0; i51 < len; i51++)retView[i51] = encodedView[i51] | 128;
            retView[len] = encodedView[len];
        }
        return retView.buffer;
    }
    toString() {
        let result = "";
        if (this.isHexOnly) result = Convert.ToHex(this.valueHexView);
        else {
            result = this.valueDec.toString();
        }
        return result;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            valueDec: this.valueDec
        };
    }
}
LocalRelativeSidValueBlock.NAME = "relativeSidBlock";
class LocalRelativeObjectIdentifierValueBlock extends ValueBlock {
    constructor({ value =EMPTY_STRING , ...parameters } = {}){
        super(parameters);
        this.value = [];
        if (value) {
            this.fromString(value);
        }
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        let resultOffset = inputOffset;
        while(inputLength > 0){
            const sidBlock = new LocalRelativeSidValueBlock();
            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
            if (resultOffset === -1) {
                this.blockLength = 0;
                this.error = sidBlock.error;
                return resultOffset;
            }
            this.blockLength += sidBlock.blockLength;
            inputLength -= sidBlock.blockLength;
            this.value.push(sidBlock);
        }
        return resultOffset;
    }
    toBER(sizeOnly, writer) {
        const retBuffers = [];
        for(let i52 = 0; i52 < this.value.length; i52++){
            const valueBuf = this.value[i52].toBER(sizeOnly);
            if (valueBuf.byteLength === 0) {
                this.error = this.value[i52].error;
                return EMPTY_BUFFER;
            }
            retBuffers.push(valueBuf);
        }
        return concat1(retBuffers);
    }
    fromString(string) {
        this.value = [];
        let pos1 = 0;
        let pos2 = 0;
        let sid = "";
        do {
            pos2 = string.indexOf(".", pos1);
            if (pos2 === -1) sid = string.substring(pos1);
            else sid = string.substring(pos1, pos2);
            pos1 = pos2 + 1;
            const sidBlock = new LocalRelativeSidValueBlock();
            sidBlock.valueDec = parseInt(sid, 10);
            if (isNaN(sidBlock.valueDec)) return true;
            this.value.push(sidBlock);
        }while (pos2 !== -1)
        return true;
    }
    toString() {
        let result = "";
        let isHexOnly = false;
        for(let i53 = 0; i53 < this.value.length; i53++){
            isHexOnly = this.value[i53].isHexOnly;
            let sidStr = this.value[i53].toString();
            if (i53 !== 0) result = `${result}.`;
            if (isHexOnly) {
                sidStr = `{${sidStr}}`;
                result += sidStr;
            } else result += sidStr;
        }
        return result;
    }
    toJSON() {
        const object = {
            ...super.toJSON(),
            value: this.toString(),
            sidArray: []
        };
        for(let i54 = 0; i54 < this.value.length; i54++)object.sidArray.push(this.value[i54].toJSON());
        return object;
    }
}
LocalRelativeObjectIdentifierValueBlock.NAME = "RelativeObjectIdentifierValueBlock";
var _a$l;
class RelativeObjectIdentifier extends BaseBlock {
    constructor(parameters = {}){
        super(parameters, LocalRelativeObjectIdentifierValueBlock);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 13;
    }
    getValue() {
        return this.valueBlock.toString();
    }
    setValue(value) {
        this.valueBlock.fromString(value);
    }
    onAsciiEncoding() {
        return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            value: this.getValue()
        };
    }
}
_a$l = RelativeObjectIdentifier;
(()=>{
    typeStore.RelativeObjectIdentifier = _a$l;
})();
RelativeObjectIdentifier.NAME = "RelativeObjectIdentifier";
var _a$k;
class Sequence extends Constructed {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 16;
    }
}
_a$k = Sequence;
(()=>{
    typeStore.Sequence = _a$k;
})();
Sequence.NAME = "SEQUENCE";
var _a$j;
class Set1 extends Constructed {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 17;
    }
}
_a$j = Set1;
(()=>{
    typeStore.Set = _a$j;
})();
Set1.NAME = "SET";
class LocalStringValueBlock extends HexBlock(ValueBlock) {
    constructor({ ...parameters } = {}){
        super(parameters);
        this.isHexOnly = true;
        this.value = EMPTY_STRING;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            value: this.value
        };
    }
}
LocalStringValueBlock.NAME = "StringValueBlock";
class LocalSimpleStringValueBlock extends LocalStringValueBlock {
}
LocalSimpleStringValueBlock.NAME = "SimpleStringValueBlock";
class LocalSimpleStringBlock extends BaseStringBlock {
    constructor({ ...parameters } = {}){
        super(parameters, LocalSimpleStringValueBlock);
    }
    fromBuffer(inputBuffer) {
        this.valueBlock.value = String.fromCharCode.apply(null, BufferSourceConverter.toUint8Array(inputBuffer));
    }
    fromString(inputString) {
        const strLen = inputString.length;
        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);
        for(let i55 = 0; i55 < strLen; i55++)view[i55] = inputString.charCodeAt(i55);
        this.valueBlock.value = inputString;
    }
}
LocalSimpleStringBlock.NAME = "SIMPLE STRING";
class LocalUtf8StringValueBlock extends LocalSimpleStringBlock {
    fromBuffer(inputBuffer) {
        this.valueBlock.valueHexView = BufferSourceConverter.toUint8Array(inputBuffer);
        try {
            this.valueBlock.value = Convert.ToUtf8String(inputBuffer);
        } catch (ex) {
            this.warnings.push(`Error during "decodeURIComponent": ${ex}, using raw string`);
            this.valueBlock.value = Convert.ToBinary(inputBuffer);
        }
    }
    fromString(inputString) {
        this.valueBlock.valueHexView = new Uint8Array(Convert.FromUtf8String(inputString));
        this.valueBlock.value = inputString;
    }
}
LocalUtf8StringValueBlock.NAME = "Utf8StringValueBlock";
var _a$i;
class Utf8String extends LocalUtf8StringValueBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 12;
    }
}
_a$i = Utf8String;
(()=>{
    typeStore.Utf8String = _a$i;
})();
Utf8String.NAME = "UTF8String";
class LocalBmpStringValueBlock extends LocalSimpleStringBlock {
    fromBuffer(inputBuffer) {
        this.valueBlock.value = Convert.ToUtf16String(inputBuffer);
        this.valueBlock.valueHexView = BufferSourceConverter.toUint8Array(inputBuffer);
    }
    fromString(inputString) {
        this.valueBlock.value = inputString;
        this.valueBlock.valueHexView = new Uint8Array(Convert.FromUtf16String(inputString));
    }
}
LocalBmpStringValueBlock.NAME = "BmpStringValueBlock";
var _a$h;
class BmpString extends LocalBmpStringValueBlock {
    constructor({ ...parameters } = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 30;
    }
}
_a$h = BmpString;
(()=>{
    typeStore.BmpString = _a$h;
})();
BmpString.NAME = "BMPString";
class LocalUniversalStringValueBlock extends LocalSimpleStringBlock {
    fromBuffer(inputBuffer) {
        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);
        const valueView = new Uint8Array(copyBuffer);
        for(let i56 = 0; i56 < valueView.length; i56 += 4){
            valueView[i56] = valueView[i56 + 3];
            valueView[i56 + 1] = valueView[i56 + 2];
            valueView[i56 + 2] = 0;
            valueView[i56 + 3] = 0;
        }
        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));
    }
    fromString(inputString) {
        const strLength = inputString.length;
        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);
        for(let i57 = 0; i57 < strLength; i57++){
            const codeBuf = utilToBase(inputString.charCodeAt(i57), 8);
            const codeView = new Uint8Array(codeBuf);
            if (codeView.length > 4) continue;
            const dif = 4 - codeView.length;
            for(let j = codeView.length - 1; j >= 0; j--)valueHexView[i57 * 4 + j + dif] = codeView[j];
        }
        this.valueBlock.value = inputString;
    }
}
LocalUniversalStringValueBlock.NAME = "UniversalStringValueBlock";
var _a$g;
class UniversalString extends LocalUniversalStringValueBlock {
    constructor({ ...parameters } = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 28;
    }
}
_a$g = UniversalString;
(()=>{
    typeStore.UniversalString = _a$g;
})();
UniversalString.NAME = "UniversalString";
var _a$f;
class NumericString extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 18;
    }
}
_a$f = NumericString;
(()=>{
    typeStore.NumericString = _a$f;
})();
NumericString.NAME = "NumericString";
var _a$e;
class PrintableString extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 19;
    }
}
_a$e = PrintableString;
(()=>{
    typeStore.PrintableString = _a$e;
})();
PrintableString.NAME = "PrintableString";
var _a$d;
class TeletexString extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 20;
    }
}
_a$d = TeletexString;
(()=>{
    typeStore.TeletexString = _a$d;
})();
TeletexString.NAME = "TeletexString";
var _a$c;
class VideotexString extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 21;
    }
}
_a$c = VideotexString;
(()=>{
    typeStore.VideotexString = _a$c;
})();
VideotexString.NAME = "VideotexString";
var _a$b;
class IA5String extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 22;
    }
}
_a$b = IA5String;
(()=>{
    typeStore.IA5String = _a$b;
})();
IA5String.NAME = "IA5String";
var _a$a;
class GraphicString extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 25;
    }
}
_a$a = GraphicString;
(()=>{
    typeStore.GraphicString = _a$a;
})();
GraphicString.NAME = "GraphicString";
var _a$9;
class VisibleString extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 26;
    }
}
_a$9 = VisibleString;
(()=>{
    typeStore.VisibleString = _a$9;
})();
VisibleString.NAME = "VisibleString";
var _a$8;
class GeneralString extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 27;
    }
}
_a$8 = GeneralString;
(()=>{
    typeStore.GeneralString = _a$8;
})();
GeneralString.NAME = "GeneralString";
var _a$7;
class CharacterString extends LocalSimpleStringBlock {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 29;
    }
}
_a$7 = CharacterString;
(()=>{
    typeStore.CharacterString = _a$7;
})();
CharacterString.NAME = "CharacterString";
var _a$6;
class UTCTime extends VisibleString {
    constructor({ value , valueDate , ...parameters } = {}){
        super(parameters);
        this.year = 0;
        this.month = 0;
        this.day = 0;
        this.hour = 0;
        this.minute = 0;
        this.second = 0;
        if (value) {
            this.fromString(value);
            this.valueBlock.valueHexView = new Uint8Array(value.length);
            for(let i58 = 0; i58 < value.length; i58++)this.valueBlock.valueHexView[i58] = value.charCodeAt(i58);
        }
        if (valueDate) {
            this.fromDate(valueDate);
            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());
        }
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 23;
    }
    fromBuffer(inputBuffer) {
        this.fromString(String.fromCharCode.apply(null, BufferSourceConverter.toUint8Array(inputBuffer)));
    }
    toBuffer() {
        const str = this.toString();
        const buffer = new ArrayBuffer(str.length);
        const view = new Uint8Array(buffer);
        for(let i59 = 0; i59 < str.length; i59++)view[i59] = str.charCodeAt(i59);
        return buffer;
    }
    fromDate(inputDate) {
        this.year = inputDate.getUTCFullYear();
        this.month = inputDate.getUTCMonth() + 1;
        this.day = inputDate.getUTCDate();
        this.hour = inputDate.getUTCHours();
        this.minute = inputDate.getUTCMinutes();
        this.second = inputDate.getUTCSeconds();
    }
    toDate() {
        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));
    }
    fromString(inputString) {
        const parser = /(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/ig;
        const parserArray = parser.exec(inputString);
        if (parserArray === null) {
            this.error = "Wrong input string for conversion";
            return;
        }
        const year1 = parseInt(parserArray[1], 10);
        if (year1 >= 50) this.year = 1900 + year1;
        else this.year = 2000 + year1;
        this.month = parseInt(parserArray[2], 10);
        this.day = parseInt(parserArray[3], 10);
        this.hour = parseInt(parserArray[4], 10);
        this.minute = parseInt(parserArray[5], 10);
        this.second = parseInt(parserArray[6], 10);
    }
    toString(encoding = "iso") {
        if (encoding === "iso") {
            const outputArray = new Array(7);
            outputArray[0] = padNumber(this.year < 2000 ? this.year - 1900 : this.year - 2000, 2);
            outputArray[1] = padNumber(this.month, 2);
            outputArray[2] = padNumber(this.day, 2);
            outputArray[3] = padNumber(this.hour, 2);
            outputArray[4] = padNumber(this.minute, 2);
            outputArray[5] = padNumber(this.second, 2);
            outputArray[6] = "Z";
            return outputArray.join("");
        }
        return super.toString(encoding);
    }
    onAsciiEncoding() {
        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            year: this.year,
            month: this.month,
            day: this.day,
            hour: this.hour,
            minute: this.minute,
            second: this.second
        };
    }
}
_a$6 = UTCTime;
(()=>{
    typeStore.UTCTime = _a$6;
})();
UTCTime.NAME = "UTCTime";
var _a$5;
class GeneralizedTime extends UTCTime {
    constructor(parameters = {}){
        var _b;
        super(parameters);
        (_b = this.millisecond) !== null && _b !== void 0 ? _b : this.millisecond = 0;
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 24;
    }
    fromDate(inputDate) {
        super.fromDate(inputDate);
        this.millisecond = inputDate.getUTCMilliseconds();
    }
    toDate() {
        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));
    }
    fromString(inputString) {
        let isUTC = false;
        let timeString = "";
        let dateTimeString = "";
        let fractionPart = 0;
        let parser;
        let hourDifference = 0;
        let minuteDifference = 0;
        if (inputString[inputString.length - 1] === "Z") {
            timeString = inputString.substring(0, inputString.length - 1);
            isUTC = true;
        } else {
            const number = new Number(inputString[inputString.length - 1]);
            if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
            timeString = inputString;
        }
        if (isUTC) {
            if (timeString.indexOf("+") !== -1) throw new Error("Wrong input string for conversion");
            if (timeString.indexOf("-") !== -1) throw new Error("Wrong input string for conversion");
        } else {
            let multiplier = 1;
            let differencePosition = timeString.indexOf("+");
            let differenceString = "";
            if (differencePosition === -1) {
                differencePosition = timeString.indexOf("-");
                multiplier = -1;
            }
            if (differencePosition !== -1) {
                differenceString = timeString.substring(differencePosition + 1);
                timeString = timeString.substring(0, differencePosition);
                if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error("Wrong input string for conversion");
                let number = parseInt(differenceString.substring(0, 2), 10);
                if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
                hourDifference = multiplier * number;
                if (differenceString.length === 4) {
                    number = parseInt(differenceString.substring(2, 4), 10);
                    if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
                    minuteDifference = multiplier * number;
                }
            }
        }
        let fractionPointPosition = timeString.indexOf(".");
        if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(",");
        if (fractionPointPosition !== -1) {
            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);
            if (isNaN(fractionPartCheck.valueOf())) throw new Error("Wrong input string for conversion");
            fractionPart = fractionPartCheck.valueOf();
            dateTimeString = timeString.substring(0, fractionPointPosition);
        } else dateTimeString = timeString;
        switch(true){
            case dateTimeString.length === 8:
                parser = /(\d{4})(\d{2})(\d{2})/ig;
                if (fractionPointPosition !== -1) throw new Error("Wrong input string for conversion");
                break;
            case dateTimeString.length === 10:
                parser = /(\d{4})(\d{2})(\d{2})(\d{2})/ig;
                if (fractionPointPosition !== -1) {
                    let fractionResult = 60 * fractionPart;
                    this.minute = Math.floor(fractionResult);
                    fractionResult = 60 * (fractionResult - this.minute);
                    this.second = Math.floor(fractionResult);
                    fractionResult = 1000 * (fractionResult - this.second);
                    this.millisecond = Math.floor(fractionResult);
                }
                break;
            case dateTimeString.length === 12:
                parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
                if (fractionPointPosition !== -1) {
                    let fractionResult = 60 * fractionPart;
                    this.second = Math.floor(fractionResult);
                    fractionResult = 1000 * (fractionResult - this.second);
                    this.millisecond = Math.floor(fractionResult);
                }
                break;
            case dateTimeString.length === 14:
                parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
                if (fractionPointPosition !== -1) {
                    const fractionResult = 1000 * fractionPart;
                    this.millisecond = Math.floor(fractionResult);
                }
                break;
            default:
                throw new Error("Wrong input string for conversion");
        }
        const parserArray = parser.exec(dateTimeString);
        if (parserArray === null) throw new Error("Wrong input string for conversion");
        for(let j = 1; j < parserArray.length; j++){
            switch(j){
                case 1:
                    this.year = parseInt(parserArray[j], 10);
                    break;
                case 2:
                    this.month = parseInt(parserArray[j], 10);
                    break;
                case 3:
                    this.day = parseInt(parserArray[j], 10);
                    break;
                case 4:
                    this.hour = parseInt(parserArray[j], 10) + hourDifference;
                    break;
                case 5:
                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;
                    break;
                case 6:
                    this.second = parseInt(parserArray[j], 10);
                    break;
                default:
                    throw new Error("Wrong input string for conversion");
            }
        }
        if (isUTC === false) {
            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
            this.year = tempDate.getUTCFullYear();
            this.month = tempDate.getUTCMonth();
            this.day = tempDate.getUTCDay();
            this.hour = tempDate.getUTCHours();
            this.minute = tempDate.getUTCMinutes();
            this.second = tempDate.getUTCSeconds();
            this.millisecond = tempDate.getUTCMilliseconds();
        }
    }
    toString(encoding = "iso") {
        if (encoding === "iso") {
            const outputArray = [];
            outputArray.push(padNumber(this.year, 4));
            outputArray.push(padNumber(this.month, 2));
            outputArray.push(padNumber(this.day, 2));
            outputArray.push(padNumber(this.hour, 2));
            outputArray.push(padNumber(this.minute, 2));
            outputArray.push(padNumber(this.second, 2));
            if (this.millisecond !== 0) {
                outputArray.push(".");
                outputArray.push(padNumber(this.millisecond, 3));
            }
            outputArray.push("Z");
            return outputArray.join("");
        }
        return super.toString(encoding);
    }
    toJSON() {
        return {
            ...super.toJSON(),
            millisecond: this.millisecond
        };
    }
}
_a$5 = GeneralizedTime;
(()=>{
    typeStore.GeneralizedTime = _a$5;
})();
GeneralizedTime.NAME = "GeneralizedTime";
var _a$4;
class DATE extends Utf8String {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 31;
    }
}
_a$4 = DATE;
(()=>{
    typeStore.DATE = _a$4;
})();
DATE.NAME = "DATE";
var _a$3;
class TimeOfDay extends Utf8String {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 32;
    }
}
_a$3 = TimeOfDay;
(()=>{
    typeStore.TimeOfDay = _a$3;
})();
TimeOfDay.NAME = "TimeOfDay";
var _a$2;
class DateTime extends Utf8String {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 33;
    }
}
_a$2 = DateTime;
(()=>{
    typeStore.DateTime = _a$2;
})();
DateTime.NAME = "DateTime";
var _a$1;
class Duration extends Utf8String {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 34;
    }
}
_a$1 = Duration;
(()=>{
    typeStore.Duration = _a$1;
})();
Duration.NAME = "Duration";
var _a;
class TIME extends Utf8String {
    constructor(parameters = {}){
        super(parameters);
        this.idBlock.tagClass = 1;
        this.idBlock.tagNumber = 14;
    }
}
_a = TIME;
(()=>{
    typeStore.TIME = _a;
})();
TIME.NAME = "TIME";
class Any {
    constructor({ name =EMPTY_STRING , optional =false  } = {}){
        this.name = name;
        this.optional = optional;
    }
}
class Choice extends Any {
    constructor({ value =[] , ...parameters } = {}){
        super(parameters);
        this.value = value;
    }
}
class Repeated extends Any {
    constructor({ value =new Any() , local =false , ...parameters } = {}){
        super(parameters);
        this.value = value;
        this.local = local;
    }
}
class RawData {
    constructor({ data =EMPTY_VIEW  } = {}){
        this.dataView = BufferSourceConverter.toUint8Array(data);
    }
    get data() {
        return this.dataView.slice().buffer;
    }
    set data(value) {
        this.dataView = BufferSourceConverter.toUint8Array(value);
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
        const endLength = inputOffset + inputLength;
        this.dataView = BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);
        return endLength;
    }
    toBER(sizeOnly) {
        return this.dataView.slice().buffer;
    }
}
function compareSchema(root, inputData, inputSchema) {
    if (inputSchema instanceof Choice) {
        for(let j = 0; j < inputSchema.value.length; j++){
            const result = compareSchema(root, inputData, inputSchema.value[j]);
            if (result.verified) {
                return {
                    verified: true,
                    result: root
                };
            }
        }
        {
            const _result = {
                verified: false,
                result: {
                    error: "Wrong values for Choice type"
                }
            };
            if (inputSchema.hasOwnProperty(NAME)) _result.name = inputSchema.name;
            return _result;
        }
    }
    if (inputSchema instanceof Any) {
        if (inputSchema.hasOwnProperty(NAME)) root[inputSchema.name] = inputData;
        return {
            verified: true,
            result: root
        };
    }
    if (root instanceof Object === false) {
        return {
            verified: false,
            result: {
                error: "Wrong root object"
            }
        };
    }
    if (inputData instanceof Object === false) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 data"
            }
        };
    }
    if (inputSchema instanceof Object === false) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 schema"
            }
        };
    }
    if (ID_BLOCK in inputSchema === false) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 schema"
            }
        };
    }
    if (FROM_BER in inputSchema.idBlock === false) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 schema"
            }
        };
    }
    if (TO_BER in inputSchema.idBlock === false) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 schema"
            }
        };
    }
    const encodedId = inputSchema.idBlock.toBER(false);
    if (encodedId.byteLength === 0) {
        return {
            verified: false,
            result: {
                error: "Error encoding idBlock for ASN.1 schema"
            }
        };
    }
    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);
    if (decodedOffset === -1) {
        return {
            verified: false,
            result: {
                error: "Error decoding idBlock for ASN.1 schema"
            }
        };
    }
    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 schema"
            }
        };
    }
    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {
        return {
            verified: false,
            result: root
        };
    }
    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 schema"
            }
        };
    }
    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {
        return {
            verified: false,
            result: root
        };
    }
    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 schema"
            }
        };
    }
    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {
        return {
            verified: false,
            result: root
        };
    }
    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {
        return {
            verified: false,
            result: {
                error: "Wrong ASN.1 schema"
            }
        };
    }
    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {
        return {
            verified: false,
            result: root
        };
    }
    if (inputSchema.idBlock.isHexOnly) {
        if (VALUE_HEX_VIEW in inputSchema.idBlock === false) {
            return {
                verified: false,
                result: {
                    error: "Wrong ASN.1 schema"
                }
            };
        }
        const schemaView = inputSchema.idBlock.valueHexView;
        const asn1View = inputData.idBlock.valueHexView;
        if (schemaView.length !== asn1View.length) {
            return {
                verified: false,
                result: root
            };
        }
        for(let i60 = 0; i60 < schemaView.length; i60++){
            if (schemaView[i60] !== asn1View[1]) {
                return {
                    verified: false,
                    result: root
                };
            }
        }
    }
    if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
        if (inputSchema.name) root[inputSchema.name] = inputData;
    }
    if (inputSchema instanceof typeStore.Constructed) {
        let admission = 0;
        let result = {
            verified: false,
            result: {
                error: "Unknown error"
            }
        };
        let maxLength = inputSchema.valueBlock.value.length;
        if (maxLength > 0) {
            if (inputSchema.valueBlock.value[0] instanceof Repeated) {
                maxLength = inputData.valueBlock.value.length;
            }
        }
        if (maxLength === 0) {
            return {
                verified: true,
                result: root
            };
        }
        if (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {
            let _optional = true;
            for(let i61 = 0; i61 < inputSchema.valueBlock.value.length; i61++)_optional = _optional && (inputSchema.valueBlock.value[i61].optional || false);
            if (_optional) {
                return {
                    verified: true,
                    result: root
                };
            }
            if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) delete root[inputSchema.name];
            }
            root.error = "Inconsistent object length";
            return {
                verified: false,
                result: root
            };
        }
        for(let i62 = 0; i62 < maxLength; i62++){
            if (i62 - admission >= inputData.valueBlock.value.length) {
                if (inputSchema.valueBlock.value[i62].optional === false) {
                    const _result = {
                        verified: false,
                        result: root
                    };
                    root.error = "Inconsistent length between ASN.1 data and schema";
                    if (inputSchema.name) {
                        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                        if (inputSchema.name) {
                            delete root[inputSchema.name];
                            _result.name = inputSchema.name;
                        }
                    }
                    return _result;
                }
            } else {
                if (inputSchema.valueBlock.value[0] instanceof Repeated) {
                    result = compareSchema(root, inputData.valueBlock.value[i62], inputSchema.valueBlock.value[0].value);
                    if (result.verified === false) {
                        if (inputSchema.valueBlock.value[0].optional) admission++;
                        else {
                            if (inputSchema.name) {
                                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                                if (inputSchema.name) delete root[inputSchema.name];
                            }
                            return result;
                        }
                    }
                    if (NAME in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {
                        let arrayRoot = {};
                        if (LOCAL in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local) arrayRoot = inputData;
                        else arrayRoot = root;
                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === "undefined") arrayRoot[inputSchema.valueBlock.value[0].name] = [];
                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i62]);
                    }
                } else {
                    result = compareSchema(root, inputData.valueBlock.value[i62 - admission], inputSchema.valueBlock.value[i62]);
                    if (result.verified === false) {
                        if (inputSchema.valueBlock.value[i62].optional) admission++;
                        else {
                            if (inputSchema.name) {
                                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                                if (inputSchema.name) delete root[inputSchema.name];
                            }
                            return result;
                        }
                    }
                }
            }
        }
        if (result.verified === false) {
            const _result = {
                verified: false,
                result: root
            };
            if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) {
                    delete root[inputSchema.name];
                    _result.name = inputSchema.name;
                }
            }
            return _result;
        }
        return {
            verified: true,
            result: root
        };
    }
    if (inputSchema.primitiveSchema && VALUE_HEX_VIEW in inputData.valueBlock) {
        const asn1 = localFromBER(inputData.valueBlock.valueHexView);
        if (asn1.offset === -1) {
            const _result = {
                verified: false,
                result: asn1.result
            };
            if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) {
                    delete root[inputSchema.name];
                    _result.name = inputSchema.name;
                }
            }
            return _result;
        }
        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);
    }
    return {
        verified: true,
        result: root
    };
}
class ByteStream {
    constructor(parameters = {}){
        if ("view" in parameters) {
            this.fromUint8Array(parameters.view);
        } else if ("buffer" in parameters) {
            this.fromArrayBuffer(parameters.buffer);
        } else if ("string" in parameters) {
            this.fromString(parameters.string);
        } else if ("hexstring" in parameters) {
            this.fromHexString(parameters.hexstring);
        } else {
            if ("length" in parameters && parameters.length > 0) {
                this.length = parameters.length;
                if (parameters.stub) {
                    for(let i63 = 0; i63 < this._view.length; i63++){
                        this._view[i63] = parameters.stub;
                    }
                }
            } else {
                this.length = 0;
            }
        }
    }
    set buffer(value) {
        this._buffer = value;
        this._view = new Uint8Array(this._buffer);
    }
    get buffer() {
        return this._buffer;
    }
    set view(value) {
        this._buffer = new ArrayBuffer(value.length);
        this._view = new Uint8Array(this._buffer);
        this._view.set(value);
    }
    get view() {
        return this._view;
    }
    get length() {
        return this.view.byteLength;
    }
    set length(value) {
        this._buffer = new ArrayBuffer(value);
        this._view = new Uint8Array(this._buffer);
    }
    clear() {
        this._buffer = new ArrayBuffer(0);
        this._view = new Uint8Array(this._buffer);
    }
    fromArrayBuffer(array) {
        this._buffer = array;
        this._view = new Uint8Array(this._buffer);
    }
    fromUint8Array(array) {
        this.fromArrayBuffer(new Uint8Array(array).buffer);
    }
    fromString(string) {
        const stringLength = string.length;
        this.length = stringLength;
        for(let i64 = 0; i64 < stringLength; i64++)this.view[i64] = string.charCodeAt(i64);
    }
    toString(start = 0, length = this.view.length - start) {
        let result = "";
        if (start >= this.view.length || start < 0) {
            start = 0;
        }
        if (length >= this.view.length || length < 0) {
            length = this.view.length - start;
        }
        for(let i65 = start; i65 < start + length; i65++)result += String.fromCharCode(this.view[i65]);
        return result;
    }
    fromHexString(hexString) {
        const stringLength = hexString.length;
        this.buffer = new ArrayBuffer(stringLength >> 1);
        this.view = new Uint8Array(this.buffer);
        const hexMap = new Map();
        hexMap.set("0", 0);
        hexMap.set("1", 1);
        hexMap.set("2", 2);
        hexMap.set("3", 3);
        hexMap.set("4", 4);
        hexMap.set("5", 5);
        hexMap.set("6", 6);
        hexMap.set("7", 7);
        hexMap.set("8", 8);
        hexMap.set("9", 9);
        hexMap.set("A", 10);
        hexMap.set("a", 10);
        hexMap.set("B", 11);
        hexMap.set("b", 11);
        hexMap.set("C", 12);
        hexMap.set("c", 12);
        hexMap.set("D", 13);
        hexMap.set("d", 13);
        hexMap.set("E", 14);
        hexMap.set("e", 14);
        hexMap.set("F", 15);
        hexMap.set("f", 15);
        let j = 0;
        let temp = 0;
        for(let i66 = 0; i66 < stringLength; i66++){
            if (!(i66 % 2)) {
                temp = hexMap.get(hexString.charAt(i66)) << 4;
            } else {
                temp |= hexMap.get(hexString.charAt(i66));
                this.view[j] = temp;
                j++;
            }
        }
    }
    toHexString(start = 0, length = this.view.length - start) {
        let result = "";
        if (start >= this.view.length || start < 0) {
            start = 0;
        }
        if (length >= this.view.length || length < 0) {
            length = this.view.length - start;
        }
        for(let i67 = start; i67 < start + length; i67++){
            const str = this.view[i67].toString(16).toUpperCase();
            result = result + (str.length == 1 ? "0" : "") + str;
        }
        return result;
    }
    copy(start = 0, length = this.length - start) {
        if (!start && !this.length) {
            return new ByteStream();
        }
        if (start < 0 || start > this.length - 1) {
            throw new Error(`Wrong start position: ${start}`);
        }
        const stream = new ByteStream({
            buffer: this._buffer.slice(start, start + length)
        });
        return stream;
    }
    slice(start = 0, end = this.length) {
        if (!start && !this.length) {
            return new ByteStream();
        }
        if (start < 0 || start > this.length - 1) {
            throw new Error(`Wrong start position: ${start}`);
        }
        const stream = new ByteStream({
            buffer: this._buffer.slice(start, end)
        });
        return stream;
    }
    realloc(size) {
        const buffer = new ArrayBuffer(size);
        const view = new Uint8Array(buffer);
        if (size > this._view.length) view.set(this._view);
        else {
            view.set(new Uint8Array(this._buffer, 0, size));
        }
        this._buffer = buffer;
        this._view = new Uint8Array(this._buffer);
    }
    append(stream) {
        const initialSize = this.length;
        const streamViewLength = stream.length;
        const subarrayView = stream._view.subarray();
        this.realloc(initialSize + streamViewLength);
        this._view.set(subarrayView, initialSize);
    }
    insert(stream, start = 0, length = this.length - start) {
        if (start > this.length - 1) return false;
        if (length > this.length - start) {
            length = this.length - start;
        }
        if (length > stream.length) {
            length = stream.length;
        }
        if (length == stream.length) this._view.set(stream._view, start);
        else {
            this._view.set(stream._view.subarray(0, length), start);
        }
        return true;
    }
    isEqual(stream) {
        if (this.length != stream.length) return false;
        for(let i68 = 0; i68 < stream.length; i68++){
            if (this.view[i68] != stream.view[i68]) return false;
        }
        return true;
    }
    isEqualView(view) {
        if (view.length != this.view.length) return false;
        for(let i69 = 0; i69 < view.length; i69++){
            if (this.view[i69] != view[i69]) return false;
        }
        return true;
    }
    findPattern(pattern, start_, length_, backward_) {
        const { start , length , backward  } = this.prepareFindParameters(start_, length_, backward_);
        const patternLength = pattern.length;
        if (patternLength > length) {
            return -1;
        }
        const patternArray = [];
        for(let i70 = 0; i70 < patternLength; i70++)patternArray.push(pattern.view[i70]);
        for(let i112 = 0; i112 <= length - patternLength; i112++){
            let equal = true;
            const equalStart = backward ? start - patternLength - i112 : start + i112;
            for(let j = 0; j < patternLength; j++){
                if (this.view[j + equalStart] != patternArray[j]) {
                    equal = false;
                    break;
                }
            }
            if (equal) {
                return backward ? start - patternLength - i112 : start + patternLength + i112;
            }
        }
        return -1;
    }
    findFirstIn(patterns, start_, length_, backward_) {
        const { start , length , backward  } = this.prepareFindParameters(start_, length_, backward_);
        const result = {
            id: -1,
            position: backward ? 0 : start + length,
            length: 0
        };
        for(let i71 = 0; i71 < patterns.length; i71++){
            const position2 = this.findPattern(patterns[i71], start, length, backward);
            if (position2 != -1) {
                let valid = false;
                const patternLength = patterns[i71].length;
                if (backward) {
                    if (position2 - patternLength >= result.position - result.length) valid = true;
                } else {
                    if (position2 - patternLength <= result.position - result.length) valid = true;
                }
                if (valid) {
                    result.position = position2;
                    result.id = i71;
                    result.length = patternLength;
                }
            }
        }
        return result;
    }
    findAllIn(patterns, start_, length_) {
        let { start , length  } = this.prepareFindParameters(start_, length_);
        const result = [];
        let patternFound = {
            id: -1,
            position: start
        };
        do {
            const position3 = patternFound.position;
            patternFound = this.findFirstIn(patterns, patternFound.position, length);
            if (patternFound.id == -1) {
                break;
            }
            length -= patternFound.position - position3;
            result.push({
                id: patternFound.id,
                position: patternFound.position
            });
        }while (true)
        return result;
    }
    findAllPatternIn(pattern, start_, length_) {
        const { start , length  } = this.prepareFindParameters(start_, length_);
        const result = [];
        const patternLength = pattern.length;
        if (patternLength > length) {
            return -1;
        }
        const patternArray = Array.from(pattern.view);
        for(let i72 = 0; i72 <= length - patternLength; i72++){
            let equal = true;
            const equalStart = start + i72;
            for(let j = 0; j < patternLength; j++){
                if (this.view[j + equalStart] != patternArray[j]) {
                    equal = false;
                    break;
                }
            }
            if (equal) {
                result.push(start + patternLength + i72);
                i72 += patternLength - 1;
            }
        }
        return result;
    }
    findFirstNotIn(patterns, start_, length_, backward_) {
        let { start , length , backward  } = this.prepareFindParameters(start_, length_, backward_);
        const result = {
            left: {
                id: -1,
                position: start
            },
            right: {
                id: -1,
                position: 0
            },
            value: new ByteStream()
        };
        let currentLength = length;
        while(currentLength > 0){
            result.right = this.findFirstIn(patterns, backward ? start - length + currentLength : start + length - currentLength, currentLength, backward);
            if (result.right.id == -1) {
                length = currentLength;
                if (backward) {
                    start -= length;
                } else {
                    start = result.left.position;
                }
                result.value = new ByteStream({
                    buffer: this._buffer.slice(start, start + length)
                });
                break;
            }
            if (result.right.position != (backward ? result.left.position - patterns[result.right.id].length : result.left.position + patterns[result.right.id].length)) {
                if (backward) {
                    start = result.right.position + patterns[result.right.id].length;
                    length = result.left.position - result.right.position - patterns[result.right.id].length;
                } else {
                    start = result.left.position;
                    length = result.right.position - result.left.position - patterns[result.right.id].length;
                }
                result.value = new ByteStream({
                    buffer: this._buffer.slice(start, start + length)
                });
                break;
            }
            result.left = result.right;
            currentLength -= patterns[result.right.id].length;
        }
        if (backward) {
            const temp = result.right;
            result.right = result.left;
            result.left = temp;
        }
        return result;
    }
    findAllNotIn(patterns, start_, length_) {
        let { start , length  } = this.prepareFindParameters(start_, length_);
        const result = [];
        let patternFound = {
            left: {
                id: -1,
                position: start
            },
            right: {
                id: -1,
                position: start
            },
            value: new ByteStream()
        };
        do {
            const position4 = patternFound.right.position;
            patternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);
            length -= patternFound.right.position - position4;
            result.push({
                left: {
                    id: patternFound.left.id,
                    position: patternFound.left.position
                },
                right: {
                    id: patternFound.right.id,
                    position: patternFound.right.position
                },
                value: patternFound.value
            });
        }while (patternFound.right.id != -1)
        return result;
    }
    findFirstSequence(patterns, start_, length_, backward_) {
        let { start , length , backward  } = this.prepareFindParameters(start_, length_, backward_);
        const firstIn = this.skipNotPatterns(patterns, start, length, backward);
        if (firstIn == -1) {
            return {
                position: -1,
                value: new ByteStream()
            };
        }
        const firstNotIn = this.skipPatterns(patterns, firstIn, length - (backward ? start - firstIn : firstIn - start), backward);
        if (backward) {
            start = firstNotIn;
            length = firstIn - firstNotIn;
        } else {
            start = firstIn;
            length = firstNotIn - firstIn;
        }
        const value = new ByteStream({
            buffer: this._buffer.slice(start, start + length)
        });
        return {
            position: firstNotIn,
            value
        };
    }
    findAllSequences(patterns, start_, length_) {
        let { start , length  } = this.prepareFindParameters(start_, length_);
        const result = [];
        let patternFound = {
            position: start,
            value: new ByteStream()
        };
        do {
            const position5 = patternFound.position;
            patternFound = this.findFirstSequence(patterns, patternFound.position, length);
            if (patternFound.position != -1) {
                length -= patternFound.position - position5;
                result.push({
                    position: patternFound.position,
                    value: patternFound.value
                });
            }
        }while (patternFound.position != -1)
        return result;
    }
    findPairedPatterns(leftPattern, rightPattern, start_, length_) {
        const result = [];
        if (leftPattern.isEqual(rightPattern)) return result;
        const { start , length  } = this.prepareFindParameters(start_, length_);
        let currentPositionLeft = 0;
        const leftPatterns = this.findAllPatternIn(leftPattern, start, length);
        if (!Array.isArray(leftPatterns) || leftPatterns.length == 0) {
            return result;
        }
        const rightPatterns = this.findAllPatternIn(rightPattern, start, length);
        if (!Array.isArray(rightPatterns) || rightPatterns.length == 0) {
            return result;
        }
        while(currentPositionLeft < leftPatterns.length){
            if (rightPatterns.length == 0) {
                break;
            }
            if (leftPatterns[0] == rightPatterns[0]) {
                result.push({
                    left: leftPatterns[0],
                    right: rightPatterns[0]
                });
                leftPatterns.splice(0, 1);
                rightPatterns.splice(0, 1);
                continue;
            }
            if (leftPatterns[currentPositionLeft] > rightPatterns[0]) {
                break;
            }
            while(leftPatterns[currentPositionLeft] < rightPatterns[0]){
                currentPositionLeft++;
                if (currentPositionLeft >= leftPatterns.length) {
                    break;
                }
            }
            result.push({
                left: leftPatterns[currentPositionLeft - 1],
                right: rightPatterns[0]
            });
            leftPatterns.splice(currentPositionLeft - 1, 1);
            rightPatterns.splice(0, 1);
            currentPositionLeft = 0;
        }
        result.sort((a2, b)=>a2.left - b.left
        );
        return result;
    }
    findPairedArrays(inputLeftPatterns, inputRightPatterns, start_, length_) {
        const { start , length  } = this.prepareFindParameters(start_, length_);
        const result = [];
        let currentPositionLeft = 0;
        const leftPatterns = this.findAllIn(inputLeftPatterns, start, length);
        if (leftPatterns.length == 0) return result;
        const rightPatterns = this.findAllIn(inputRightPatterns, start, length);
        if (rightPatterns.length == 0) return result;
        while(currentPositionLeft < leftPatterns.length){
            if (rightPatterns.length == 0) {
                break;
            }
            if (leftPatterns[0].position == rightPatterns[0].position) {
                result.push({
                    left: leftPatterns[0],
                    right: rightPatterns[0]
                });
                leftPatterns.splice(0, 1);
                rightPatterns.splice(0, 1);
                continue;
            }
            if (leftPatterns[currentPositionLeft].position > rightPatterns[0].position) {
                break;
            }
            while(leftPatterns[currentPositionLeft].position < rightPatterns[0].position){
                currentPositionLeft++;
                if (currentPositionLeft >= leftPatterns.length) {
                    break;
                }
            }
            result.push({
                left: leftPatterns[currentPositionLeft - 1],
                right: rightPatterns[0]
            });
            leftPatterns.splice(currentPositionLeft - 1, 1);
            rightPatterns.splice(0, 1);
            currentPositionLeft = 0;
        }
        result.sort((a3, b)=>a3.left.position - b.left.position
        );
        return result;
    }
    replacePattern(searchPattern, replacePattern, start_, length_, findAllResult = null) {
        let result = [];
        let i73;
        const output = {
            status: -1,
            searchPatternPositions: [],
            replacePatternPositions: []
        };
        const { start , length  } = this.prepareFindParameters(start_, length_);
        if (findAllResult == null) {
            result = this.findAllIn([
                searchPattern
            ], start, length);
            if (result.length == 0) {
                return output;
            }
        } else {
            result = findAllResult;
        }
        output.searchPatternPositions.push(...Array.from(result, (element)=>element.position
        ));
        const patternDifference = searchPattern.length - replacePattern.length;
        const changedBuffer = new ArrayBuffer(this.view.length - result.length * patternDifference);
        const changedView = new Uint8Array(changedBuffer);
        changedView.set(new Uint8Array(this.buffer, 0, start));
        for(i73 = 0; i73 < result.length; i73++){
            const currentPosition = i73 == 0 ? start : result[i73 - 1].position;
            changedView.set(new Uint8Array(this.buffer, currentPosition, result[i73].position - searchPattern.length - currentPosition), currentPosition - i73 * patternDifference);
            changedView.set(replacePattern.view, result[i73].position - searchPattern.length - i73 * patternDifference);
            output.replacePatternPositions.push(result[i73].position - searchPattern.length - i73 * patternDifference);
        }
        i73--;
        changedView.set(new Uint8Array(this.buffer, result[i73].position, this.length - result[i73].position), result[i73].position - searchPattern.length + replacePattern.length - i73 * patternDifference);
        this.buffer = changedBuffer;
        this.view = new Uint8Array(this.buffer);
        output.status = 1;
        return output;
    }
    skipPatterns(patterns, start_, length_, backward_) {
        const { start , length , backward  } = this.prepareFindParameters(start_, length_, backward_);
        let result = start;
        for(let k = 0; k < patterns.length; k++){
            const patternLength = patterns[k].length;
            const equalStart = backward ? result - patternLength : result;
            let equal = true;
            for(let j = 0; j < patternLength; j++){
                if (this.view[j + equalStart] != patterns[k].view[j]) {
                    equal = false;
                    break;
                }
            }
            if (equal) {
                k = -1;
                if (backward) {
                    result -= patternLength;
                    if (result <= 0) return result;
                } else {
                    result += patternLength;
                    if (result >= start + length) return result;
                }
            }
        }
        return result;
    }
    skipNotPatterns(patterns, start_, length_, backward_) {
        const { start , length , backward  } = this.prepareFindParameters(start_, length_, backward_);
        let result = -1;
        for(let i74 = 0; i74 < length; i74++){
            for(let k = 0; k < patterns.length; k++){
                const patternLength = patterns[k].length;
                const equalStart = backward ? start - i74 - patternLength : start + i74;
                let equal = true;
                for(let j = 0; j < patternLength; j++){
                    if (this.view[j + equalStart] != patterns[k].view[j]) {
                        equal = false;
                        break;
                    }
                }
                if (equal) {
                    result = backward ? start - i74 : start + i74;
                    break;
                }
            }
            if (result != -1) {
                break;
            }
        }
        return result;
    }
    prepareFindParameters(start = null, length = null, backward = false) {
        if (start === null) {
            start = backward ? this.length : 0;
        }
        if (start > this.length) {
            start = this.length;
        }
        if (backward) {
            if (length === null) {
                length = start;
            }
            if (length > start) {
                length = start;
            }
        } else {
            if (length === null) {
                length = this.length - start;
            }
            if (length > this.length - start) {
                length = this.length - start;
            }
        }
        return {
            start,
            length,
            backward
        };
    }
}
class SeqStream {
    constructor(parameters = {}){
        this._stream = new ByteStream();
        this._length = 0;
        this._start = 0;
        this.backward = false;
        this.appendBlock = 0;
        this.prevLength = 0;
        this.prevStart = 0;
        if ("view" in parameters) {
            this.stream = new ByteStream({
                view: parameters.view
            });
        } else if ("buffer" in parameters) {
            this.stream = new ByteStream({
                buffer: parameters.buffer
            });
        } else if ("string" in parameters) {
            this.stream = new ByteStream({
                string: parameters.string
            });
        } else if ("hexstring" in parameters) {
            this.stream = new ByteStream({
                hexstring: parameters.hexstring
            });
        } else if ("stream" in parameters) {
            this.stream = parameters.stream.slice();
        } else {
            this.stream = new ByteStream();
        }
        if ("backward" in parameters && parameters.backward) {
            this.backward = parameters.backward;
            this._start = this.stream.length;
        }
        if ("length" in parameters && parameters.length > 0) {
            this._length = parameters.length;
        }
        if ("start" in parameters && parameters.start && parameters.start > 0) {
            this._start = parameters.start;
        }
        if ("appendBlock" in parameters && parameters.appendBlock && parameters.appendBlock > 0) {
            this.appendBlock = parameters.appendBlock;
        }
    }
    set stream(value) {
        this._stream = value;
        this.prevLength = this._length;
        this._length = value.length;
        this.prevStart = this._start;
        this._start = 0;
    }
    get stream() {
        return this._stream;
    }
    set length(value) {
        this.prevLength = this._length;
        this._length = value;
    }
    get length() {
        if (this.appendBlock) {
            return this.start;
        }
        return this._length;
    }
    set start(value) {
        if (value > this.stream.length) return;
        this.prevStart = this._start;
        this.prevLength = this._length;
        this._length -= this.backward ? this._start - value : value - this._start;
        this._start = value;
    }
    get start() {
        return this._start;
    }
    get buffer() {
        return this._stream.buffer.slice(0, this._length);
    }
    resetPosition() {
        this._start = this.prevStart;
        this._length = this.prevLength;
    }
    findPattern(pattern, gap = null) {
        if (gap == null || gap > this.length) {
            gap = this.length;
        }
        const result = this.stream.findPattern(pattern, this.start, this.length, this.backward);
        if (result == -1) return result;
        if (this.backward) {
            if (result < this.start - pattern.length - gap) {
                return -1;
            }
        } else {
            if (result > this.start + pattern.length + gap) {
                return -1;
            }
        }
        this.start = result;
        return result;
    }
    findFirstIn(patterns, gap = null) {
        if (gap == null || gap > this.length) {
            gap = this.length;
        }
        const result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);
        if (result.id == -1) return result;
        if (this.backward) {
            if (result.position < this.start - patterns[result.id].length - gap) {
                return {
                    id: -1,
                    position: this.backward ? 0 : this.start + this.length
                };
            }
        } else {
            if (result.position > this.start + patterns[result.id].length + gap) {
                return {
                    id: -1,
                    position: this.backward ? 0 : this.start + this.length
                };
            }
        }
        this.start = result.position;
        return result;
    }
    findAllIn(patterns) {
        const start = this.backward ? this.start - this.length : this.start;
        return this.stream.findAllIn(patterns, start, this.length);
    }
    findFirstNotIn(patterns, gap = null) {
        if (gap == null || gap > this._length) {
            gap = this._length;
        }
        const result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);
        if (result.left.id == -1 && result.right.id == -1) {
            return result;
        }
        if (this.backward) {
            if (result.right.id != -1) {
                if (result.right.position < this._start - patterns[result.right.id].length - gap) {
                    return {
                        left: {
                            id: -1,
                            position: this._start
                        },
                        right: {
                            id: -1,
                            position: 0
                        },
                        value: new ByteStream()
                    };
                }
            }
        } else {
            if (result.left.id != -1) {
                if (result.left.position > this._start + patterns[result.left.id].length + gap) {
                    return {
                        left: {
                            id: -1,
                            position: this._start
                        },
                        right: {
                            id: -1,
                            position: 0
                        },
                        value: new ByteStream()
                    };
                }
            }
        }
        if (this.backward) {
            if (result.left.id == -1) {
                this.start = 0;
            } else {
                this.start = result.left.position;
            }
        } else {
            if (result.right.id == -1) {
                this.start = this._start + this._length;
            } else {
                this.start = result.right.position;
            }
        }
        return result;
    }
    findAllNotIn(patterns) {
        const start = this.backward ? this._start - this._length : this._start;
        return this._stream.findAllNotIn(patterns, start, this._length);
    }
    findFirstSequence(patterns, length = null, gap = null) {
        if (length == null || length > this._length) {
            length = this._length;
        }
        if (gap == null || gap > length) {
            gap = length;
        }
        const result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);
        if (result.value.length == 0) {
            return result;
        }
        if (this.backward) {
            if (result.position < this._start - result.value.length - gap) {
                return {
                    position: -1,
                    value: new ByteStream()
                };
            }
        } else {
            if (result.position > this._start + result.value.length + gap) {
                return {
                    position: -1,
                    value: new ByteStream()
                };
            }
        }
        this.start = result.position;
        return result;
    }
    findAllSequences(patterns) {
        const start = this.backward ? this.start - this.length : this.start;
        return this.stream.findAllSequences(patterns, start, this.length);
    }
    findPairedPatterns(leftPattern, rightPattern, gap = null) {
        if (gap == null || gap > this.length) {
            gap = this.length;
        }
        const start = this.backward ? this.start - this.length : this.start;
        const result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);
        if (result.length) {
            if (this.backward) {
                if (result[0].right < this.start - rightPattern.length - gap) {
                    return [];
                }
            } else {
                if (result[0].left > this.start + leftPattern.length + gap) {
                    return [];
                }
            }
        }
        return result;
    }
    findPairedArrays(leftPatterns, rightPatterns, gap = null) {
        if (gap == null || gap > this.length) {
            gap = this.length;
        }
        const start = this.backward ? this.start - this.length : this.start;
        const result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);
        if (result.length) {
            if (this.backward) {
                if (result[0].right.position < this.start - rightPatterns[result[0].right.id].length - gap) {
                    return [];
                }
            } else {
                if (result[0].left.position > this.start + leftPatterns[result[0].left.id].length + gap) {
                    return [];
                }
            }
        }
        return result;
    }
    replacePattern(searchPattern, replacePattern) {
        const start = this.backward ? this.start - this.length : this.start;
        return this.stream.replacePattern(searchPattern, replacePattern, start, this.length);
    }
    skipPatterns(patterns) {
        const result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);
        this.start = result;
        return result;
    }
    skipNotPatterns(patterns) {
        const result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);
        if (result == -1) return -1;
        this.start = result;
        return result;
    }
    append(stream) {
        this.beforeAppend(stream.length);
        this._stream.view.set(stream.view, this._start);
        this._length += stream.length * 2;
        this.start = this._start + stream.length;
        this.prevLength -= stream.length * 2;
    }
    appendView(view) {
        this.beforeAppend(view.length);
        this._stream.view.set(view, this._start);
        this._length += view.length * 2;
        this.start = this._start + view.length;
        this.prevLength -= view.length * 2;
    }
    appendChar(__char) {
        this.beforeAppend(1);
        this._stream.view[this._start] = __char;
        this._length += 2;
        this.start = this._start + 1;
        this.prevLength -= 2;
    }
    appendUint16(number) {
        this.beforeAppend(2);
        const value = new Uint16Array([
            number
        ]);
        const view = new Uint8Array(value.buffer);
        this.stream.view[this._start] = view[1];
        this._stream.view[this._start + 1] = view[0];
        this._length += 4;
        this.start = this._start + 2;
        this.prevLength -= 4;
    }
    appendUint24(number) {
        this.beforeAppend(3);
        const value = new Uint32Array([
            number
        ]);
        const view = new Uint8Array(value.buffer);
        this._stream.view[this._start] = view[2];
        this._stream.view[this._start + 1] = view[1];
        this._stream.view[this._start + 2] = view[0];
        this._length += 6;
        this.start = this._start + 3;
        this.prevLength -= 6;
    }
    appendUint32(number) {
        this.beforeAppend(4);
        const value = new Uint32Array([
            number
        ]);
        const view = new Uint8Array(value.buffer);
        this._stream.view[this._start] = view[3];
        this._stream.view[this._start + 1] = view[2];
        this._stream.view[this._start + 2] = view[1];
        this._stream.view[this._start + 3] = view[0];
        this._length += 8;
        this.start = this._start + 4;
        this.prevLength -= 8;
    }
    appendInt16(number) {
        this.beforeAppend(2);
        const value = new Int16Array([
            number
        ]);
        const view = new Uint8Array(value.buffer);
        this._stream.view[this._start] = view[1];
        this._stream.view[this._start + 1] = view[0];
        this._length += 4;
        this.start = this._start + 2;
        this.prevLength -= 4;
    }
    appendInt32(number) {
        this.beforeAppend(4);
        const value = new Int32Array([
            number
        ]);
        const view = new Uint8Array(value.buffer);
        this._stream.view[this._start] = view[3];
        this._stream.view[this._start + 1] = view[2];
        this._stream.view[this._start + 2] = view[1];
        this._stream.view[this._start + 3] = view[0];
        this._length += 8;
        this.start = this._start + 4;
        this.prevLength -= 8;
    }
    getBlock(size, changeLength = true) {
        if (this._length <= 0) {
            return new Uint8Array(0);
        }
        if (this._length < size) {
            size = this._length;
        }
        let result;
        if (this.backward) {
            const view = this._stream.view.subarray(this._length - size, this._length);
            result = new Uint8Array(size);
            for(let i75 = 0; i75 < size; i75++){
                result[size - 1 - i75] = view[i75];
            }
        } else {
            result = this._stream.view.subarray(this._start, this._start + size);
        }
        if (changeLength) {
            this.start += this.backward ? -1 * size : size;
        }
        return result;
    }
    getUint16(changeLength = true) {
        const block = this.getBlock(2, changeLength);
        if (block.length < 2) return 0;
        return block[0] << 8 | block[1];
    }
    getInt16(changeLength = true) {
        const num = this.getUint16(changeLength);
        if (num & 32768) {
            return -(32768 - (num ^ 32768));
        }
        return num;
    }
    getUint24(changeLength = true) {
        const block = this.getBlock(4, changeLength);
        if (block.length < 3) return 0;
        return block[0] << 16 | block[1] << 8 | block[2];
    }
    getUint32(changeLength = true) {
        const block = this.getBlock(4, changeLength);
        if (block.length < 4) return 0;
        return block[0] * 16777216 + (block[1] << 16) + (block[2] << 8) + block[3];
    }
    getInt32(changeLength = true) {
        const num = this.getUint32(changeLength);
        if (num & 2147483648) {
            return -(2147483648 - (num ^ 2147483648));
        }
        return num;
    }
    beforeAppend(size) {
        if (this._start + size > this._stream.length) {
            if (size > this.appendBlock) {
                this.appendBlock = size + SeqStream.APPEND_BLOCK;
            }
            this._stream.realloc(this._stream.length + this.appendBlock);
        }
    }
}
SeqStream.APPEND_BLOCK = 1000;
const bitsToStringArray = [
    "00000000",
    "00000001",
    "00000010",
    "00000011",
    "00000100",
    "00000101",
    "00000110",
    "00000111",
    "00001000",
    "00001001",
    "00001010",
    "00001011",
    "00001100",
    "00001101",
    "00001110",
    "00001111",
    "00010000",
    "00010001",
    "00010010",
    "00010011",
    "00010100",
    "00010101",
    "00010110",
    "00010111",
    "00011000",
    "00011001",
    "00011010",
    "00011011",
    "00011100",
    "00011101",
    "00011110",
    "00011111",
    "00100000",
    "00100001",
    "00100010",
    "00100011",
    "00100100",
    "00100101",
    "00100110",
    "00100111",
    "00101000",
    "00101001",
    "00101010",
    "00101011",
    "00101100",
    "00101101",
    "00101110",
    "00101111",
    "00110000",
    "00110001",
    "00110010",
    "00110011",
    "00110100",
    "00110101",
    "00110110",
    "00110111",
    "00111000",
    "00111001",
    "00111010",
    "00111011",
    "00111100",
    "00111101",
    "00111110",
    "00111111",
    "01000000",
    "01000001",
    "01000010",
    "01000011",
    "01000100",
    "01000101",
    "01000110",
    "01000111",
    "01001000",
    "01001001",
    "01001010",
    "01001011",
    "01001100",
    "01001101",
    "01001110",
    "01001111",
    "01010000",
    "01010001",
    "01010010",
    "01010011",
    "01010100",
    "01010101",
    "01010110",
    "01010111",
    "01011000",
    "01011001",
    "01011010",
    "01011011",
    "01011100",
    "01011101",
    "01011110",
    "01011111",
    "01100000",
    "01100001",
    "01100010",
    "01100011",
    "01100100",
    "01100101",
    "01100110",
    "01100111",
    "01101000",
    "01101001",
    "01101010",
    "01101011",
    "01101100",
    "01101101",
    "01101110",
    "01101111",
    "01110000",
    "01110001",
    "01110010",
    "01110011",
    "01110100",
    "01110101",
    "01110110",
    "01110111",
    "01111000",
    "01111001",
    "01111010",
    "01111011",
    "01111100",
    "01111101",
    "01111110",
    "01111111",
    "10000000",
    "10000001",
    "10000010",
    "10000011",
    "10000100",
    "10000101",
    "10000110",
    "10000111",
    "10001000",
    "10001001",
    "10001010",
    "10001011",
    "10001100",
    "10001101",
    "10001110",
    "10001111",
    "10010000",
    "10010001",
    "10010010",
    "10010011",
    "10010100",
    "10010101",
    "10010110",
    "10010111",
    "10011000",
    "10011001",
    "10011010",
    "10011011",
    "10011100",
    "10011101",
    "10011110",
    "10011111",
    "10100000",
    "10100001",
    "10100010",
    "10100011",
    "10100100",
    "10100101",
    "10100110",
    "10100111",
    "10101000",
    "10101001",
    "10101010",
    "10101011",
    "10101100",
    "10101101",
    "10101110",
    "10101111",
    "10110000",
    "10110001",
    "10110010",
    "10110011",
    "10110100",
    "10110101",
    "10110110",
    "10110111",
    "10111000",
    "10111001",
    "10111010",
    "10111011",
    "10111100",
    "10111101",
    "10111110",
    "10111111",
    "11000000",
    "11000001",
    "11000010",
    "11000011",
    "11000100",
    "11000101",
    "11000110",
    "11000111",
    "11001000",
    "11001001",
    "11001010",
    "11001011",
    "11001100",
    "11001101",
    "11001110",
    "11001111",
    "11010000",
    "11010001",
    "11010010",
    "11010011",
    "11010100",
    "11010101",
    "11010110",
    "11010111",
    "11011000",
    "11011001",
    "11011010",
    "11011011",
    "11011100",
    "11011101",
    "11011110",
    "11011111",
    "11100000",
    "11100001",
    "11100010",
    "11100011",
    "11100100",
    "11100101",
    "11100110",
    "11100111",
    "11101000",
    "11101001",
    "11101010",
    "11101011",
    "11101100",
    "11101101",
    "11101110",
    "11101111",
    "11110000",
    "11110001",
    "11110010",
    "11110011",
    "11110100",
    "11110101",
    "11110110",
    "11110111",
    "11111000",
    "11111001",
    "11111010",
    "11111011",
    "11111100",
    "11111101",
    "11111110",
    "11111111"
];
class BitStream {
    constructor(parameters){
        this.buffer = new ArrayBuffer(0);
        this.view = new Uint8Array(this.buffer);
        this.bitsCount = 0;
        if (parameters) {
            if ("byteStream" in parameters) {
                this.fromByteStream(parameters.byteStream);
            }
            if ("view" in parameters) {
                this.fromUint8Array(parameters.view);
            }
            if ("buffer" in parameters) {
                this.fromArrayBuffer(parameters.buffer);
            }
            if ("string" in parameters) {
                this.fromString(parameters.string);
            }
            if ("uint32" in parameters) {
                this.fromUint32(parameters.uint32);
            }
            if ("bitsCount" in parameters && parameters.bitsCount) {
                this.bitsCount = parameters.bitsCount;
            }
        }
    }
    clear() {
        this.buffer = new ArrayBuffer(0);
        this.view = new Uint8Array(this.buffer);
        this.bitsCount = 0;
    }
    fromByteStream(stream) {
        this.fromUint8Array(stream.view);
    }
    fromArrayBuffer(array) {
        this.buffer = array;
        this.view = new Uint8Array(array);
        this.bitsCount = this.view.length << 3;
    }
    fromUint8Array(array) {
        this.fromArrayBuffer(new Uint8Array(array).buffer);
    }
    fromString(string) {
        const stringLength = string.length;
        this.buffer = new ArrayBuffer((stringLength >> 3) + (stringLength % 8 ? 1 : 0));
        this.view = new Uint8Array(this.buffer);
        this.bitsCount = (stringLength >> 3) + 1 << 3;
        let byteIndex = 0;
        for(let i76 = 0; i76 < stringLength; i76++){
            if (string[i76] == "1") this.view[byteIndex] |= 1 << 7 - i76 % 8;
            if (i76 && (i76 + 1) % 8 == 0) byteIndex++;
        }
        if (stringLength % 8) this.shiftRight(8 - stringLength % 8);
        this.bitsCount = stringLength;
    }
    fromUint32(uint32) {
        this.buffer = new ArrayBuffer(4);
        this.view = new Uint8Array(this.buffer);
        const value = new Uint32Array([
            uint32
        ]);
        const view = new Uint8Array(value.buffer);
        for(let i77 = 3; i77 >= 0; i77--)this.view[i77] = view[3 - i77];
        this.bitsCount = 32;
    }
    toString(start, length) {
        if (start == null) {
            start = 0;
        }
        if (start >= this.view.length || start < 0) {
            start = 0;
        }
        if (length == null) {
            length = this.view.length - start;
        }
        if (length >= this.view.length || length < 0) {
            length = this.view.length - start;
        }
        const result = [];
        for(let i78 = start; i78 < start + length; i78++){
            result.push(bitsToStringArray[this.view[i78]]);
        }
        return result.join("").substring((this.view.length << 3) - this.bitsCount);
    }
    shiftRight(shift, needShrink = true) {
        if (this.view.length == 0) {
            return;
        }
        if (shift < 0 || shift > 8) {
            throw new Error("The \"shift\" parameter must be in range 0-8");
        }
        if (shift > this.bitsCount) {
            throw new Error("The \"shift\" parameter can not be bigger than \"this.bitsCount\"");
        }
        const shiftMask = 255 >> 8 - shift;
        this.view[this.view.length - 1] >>= shift;
        for(let i79 = this.view.length - 2; i79 >= 0; i79--){
            this.view[i79 + 1] |= (this.view[i79] & shiftMask) << 8 - shift;
            this.view[i79] >>= shift;
        }
        this.bitsCount -= shift;
        if (this.bitsCount == 0) {
            this.clear();
        }
        if (needShrink) {
            this.shrink();
        }
    }
    shiftLeft(shift) {
        if (this.view.length == 0) {
            return;
        }
        if (shift < 0 || shift > 8) {
            throw new Error("The \"shift\" parameter must be in range 0-8");
        }
        if (shift > this.bitsCount) {
            throw new Error("The \"shift\" parameter can not be bigger than \"this.bitsCount\"");
        }
        const bitsOffset = this.bitsCount & 7;
        if (bitsOffset > shift) {
            this.view[0] &= 255 >> bitsOffset + shift;
        } else {
            const view = this.view.slice(1);
            view[0] &= 255 >> shift - bitsOffset;
            this.buffer = view.buffer;
            this.view = view;
        }
        this.bitsCount -= shift;
        if (this.bitsCount == 0) {
            this.clear();
        }
    }
    slice(start = 0, end = 0) {
        let valueShift = 0;
        if (this.bitsCount % 8) {
            valueShift = 8 - this.bitsCount % 8;
        }
        start += valueShift;
        end += valueShift;
        const maxEnd = (this.view.length << 3) - 1;
        if (start < 0 || start > maxEnd) {
            return new BitStream();
        }
        if (!end) {
            end = maxEnd;
        }
        if (end < 0 || end > maxEnd) {
            return new BitStream();
        }
        if (end - start + 1 > this.bitsCount) {
            return new BitStream();
        }
        const startIndex = start >> 3;
        const startOffset = start & 7;
        const endIndex = end >> 3;
        const endOffset = end & 7;
        const bitsLength = endIndex - startIndex == 0 ? 1 : endIndex - startIndex + 1;
        const result = new BitStream({
            buffer: this.buffer.slice(startIndex, startIndex + bitsLength),
            bitsCount: bitsLength << 3
        });
        result.view[0] &= 255 >> startOffset;
        result.view[bitsLength] &= 255 << 7 - endOffset;
        if (7 - endOffset) {
            result.shiftRight(7 - endOffset, false);
        }
        result.bitsCount = end - start + 1;
        result.shrink();
        return result;
    }
    copy(start = 0, length = 0) {
        const maxEnd = (this.view.length << 3) - 1;
        if (start < 0 || start > maxEnd) {
            return new BitStream();
        }
        if (!length) {
            length = (this.view.length << 3) - start - 1;
        }
        if (length > this.bitsCount) {
            return new BitStream();
        }
        return this.slice(start, start + length - 1);
    }
    shrink() {
        const currentLength = (this.bitsCount >> 3) + (this.bitsCount % 8 ? 1 : 0);
        if (currentLength < this.view.length) {
            const view = this.view.slice(this.view.length - currentLength, this.view.length - currentLength + currentLength);
            this.view = view;
            this.buffer = view.buffer;
        }
    }
    reverseBytes() {
        for(let i80 = 0; i80 < this.view.length; i80++){
            this.view[i80] = (this.view[i80] * 2050 & 139536 | this.view[i80] * 32800 & 558144) * 65793 >> 16;
        }
        if (this.bitsCount % 8) {
            const currentLength = (this.bitsCount >> 3) + (this.bitsCount % 8 ? 1 : 0);
            this.view[this.view.length - currentLength] >>= 8 - (this.bitsCount & 7);
        }
    }
    reverseValue() {
        const initialValue = this.toString();
        const initialValueLength = initialValue.length;
        const reversedValue = new Array(initialValueLength);
        for(let i81 = 0; i81 < initialValueLength; i81++){
            reversedValue[initialValueLength - 1 - i81] = initialValue[i81];
        }
        this.fromString(reversedValue.join(""));
    }
    getNumberValue() {
        const byteLength = this.view.length - 1;
        if (byteLength > 3) {
            return -1;
        }
        if (byteLength == -1) {
            return 0;
        }
        const value = new Uint32Array(1);
        const view = new Uint8Array(value.buffer);
        for(let i82 = byteLength; i82 >= 0; i82--){
            view[byteLength - i82] = this.view[i82];
        }
        return value[0];
    }
    findPattern(pattern, start, length, backward) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPattern = new ByteStream({
            string: pattern.toString()
        });
        return stringStream.findPattern(stringPattern, start, length, backward);
    }
    findFirstIn(patterns, start, length, backward) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPatterns = new Array(patterns.length);
        for(let i83 = 0; i83 < patterns.length; i83++){
            stringPatterns[i83] = new ByteStream({
                string: patterns[i83].toString()
            });
        }
        return stringStream.findFirstIn(stringPatterns, start, length, backward);
    }
    findAllIn(patterns, start, length) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPatterns = new Array(patterns.length);
        for(let i84 = 0; i84 < patterns.length; i84++){
            stringPatterns[i84] = new ByteStream({
                string: patterns[i84].toString()
            });
        }
        return stringStream.findAllIn(stringPatterns, start, length);
    }
    findAllPatternIn(pattern, start, length) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPattern = new ByteStream({
            string: pattern.toString()
        });
        return stringStream.findAllPatternIn(stringPattern, start, length);
    }
    findFirstNotIn(patterns, start, length, backward) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPatterns = new Array(patterns.length);
        for(let i85 = 0; i85 < patterns.length; i85++){
            stringPatterns[i85] = new ByteStream({
                string: patterns[i85].toString()
            });
        }
        return stringStream.findFirstNotIn(stringPatterns, start, length, backward);
    }
    findAllNotIn(patterns, start, length) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPatterns = new Array(patterns.length);
        for(let i86 = 0; i86 < patterns.length; i86++){
            stringPatterns[i86] = new ByteStream({
                string: patterns[i86].toString()
            });
        }
        return stringStream.findAllNotIn(stringPatterns, start, length);
    }
    findFirstSequence(patterns, start, length, backward) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPatterns = new Array(patterns.length);
        for(let i87 = 0; i87 < patterns.length; i87++){
            stringPatterns[i87] = new ByteStream({
                string: patterns[i87].toString()
            });
        }
        return stringStream.findFirstSequence(stringPatterns, start, length, backward);
    }
    findAllSequences(patterns, start, length) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPatterns = new Array(patterns.length);
        for(let i88 = 0; i88 < patterns.length; i88++){
            stringPatterns[i88] = new ByteStream({
                string: patterns[i88].toString()
            });
        }
        return stringStream.findAllSequences(stringPatterns, start, length);
    }
    findPairedPatterns(leftPattern, rightPattern, start, length) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringLeftPattern = new ByteStream({
            string: leftPattern.toString()
        });
        const stringRightPattern = new ByteStream({
            string: rightPattern.toString()
        });
        return stringStream.findPairedPatterns(stringLeftPattern, stringRightPattern, start, length);
    }
    findPairedArrays(inputLeftPatterns, inputRightPatterns, start, length) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringLeftPatterns = new Array(inputLeftPatterns.length);
        for(let i89 = 0; i89 < inputLeftPatterns.length; i89++){
            stringLeftPatterns[i89] = new ByteStream({
                string: inputLeftPatterns[i89].toString()
            });
        }
        const stringRightPatterns = new Array(inputRightPatterns.length);
        for(let i113 = 0; i113 < inputRightPatterns.length; i113++){
            stringRightPatterns[i113] = new ByteStream({
                string: inputRightPatterns[i113].toString()
            });
        }
        return stringStream.findPairedArrays(stringLeftPatterns, stringRightPatterns, start, length);
    }
    replacePattern(searchPattern, replacePattern, start, length) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringSearchPattern = new ByteStream({
            string: searchPattern.toString()
        });
        const stringReplacePattern = new ByteStream({
            string: replacePattern.toString()
        });
        if (stringStream.replacePattern(stringSearchPattern, stringReplacePattern, start, length)) {
            this.fromString(stringStream.toString());
            return true;
        }
        return false;
    }
    skipPatterns(patterns, start, length, backward) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPatterns = new Array(patterns.length);
        for(let i90 = 0; i90 < patterns.length; i90++){
            stringPatterns[i90] = new ByteStream({
                string: patterns[i90].toString()
            });
        }
        return stringStream.skipPatterns(stringPatterns, start, length, backward);
    }
    skipNotPatterns(patterns, start, length, backward) {
        const stringStream = new ByteStream({
            string: this.toString()
        });
        const stringPatterns = new Array(patterns.length);
        for(let i91 = 0; i91 < patterns.length; i91++){
            stringPatterns[i91] = new ByteStream({
                string: patterns[i91].toString()
            });
        }
        return stringStream.skipNotPatterns(stringPatterns, start, length, backward);
    }
    append(stream) {
        this.fromString([
            this.toString(),
            stream.toString()
        ].join(""));
    }
}
const EMPTY_BUFFER1 = new ArrayBuffer(0);
const EMPTY_STRING1 = "";
class ArgumentError extends TypeError {
    constructor(){
        super(...arguments);
        this.name = ArgumentError.NAME;
    }
    static isType(value, type) {
        if (typeof type === "string") {
            if (type === "Array" && Array.isArray(value)) {
                return true;
            } else if (type === "ArrayBuffer" && value instanceof ArrayBuffer) {
                return true;
            } else if (type === "ArrayBufferView" && ArrayBuffer.isView(value)) {
                return true;
            } else if (typeof value === type) {
                return true;
            }
        } else if (value instanceof type) {
            return true;
        }
        return false;
    }
    static assert(value, name, ...types4) {
        for (const type of types4){
            if (this.isType(value, type)) {
                return;
            }
        }
        const typeNames = types4.map((o2)=>o2 instanceof Function && "name" in o2 ? o2.name : `${o2}`
        );
        throw new ArgumentError(`Parameter '${name}' is not of type ${typeNames.length > 1 ? `(${typeNames.join(" or ")})` : typeNames[0]}`);
    }
}
ArgumentError.NAME = "ArgumentError";
class ParameterError extends TypeError {
    constructor(field, target1 = null, message4){
        super();
        this.name = ParameterError.NAME;
        this.field = field;
        if (target1) {
            this.target = target1;
        }
        if (message4) {
            this.message = message4;
        } else {
            this.message = `Absent mandatory parameter '${field}' ${target1 ? ` in '${target1}'` : EMPTY_STRING1}`;
        }
    }
    static assert(...args) {
        let target2 = null;
        let params;
        let fields;
        if (typeof args[0] === "string") {
            target2 = args[0];
            params = args[1];
            fields = args.slice(2);
        } else {
            params = args[0];
            fields = args.slice(1);
        }
        ArgumentError.assert(params, "parameters", "object");
        for (const field of fields){
            const value = params[field];
            if (value === undefined || value === null) {
                throw new ParameterError(field, target2);
            }
        }
    }
    static assertEmpty(value, name, target3) {
        if (value === undefined || value === null) {
            throw new ParameterError(name, target3);
        }
    }
}
ParameterError.NAME = "ParameterError";
class AsnError extends Error {
    static assertSchema(asn1, target4) {
        if (!asn1.verified) {
            throw new Error(`Object's schema was not verified against input data for ${target4}`);
        }
    }
    static assert(asn, target5) {
        if (asn.offset === -1) {
            throw new AsnError(`Error during parsing of ASN.1 data. Data is not correct for '${target5}'.`);
        }
    }
    constructor(message5){
        super(message5);
        this.name = "AsnError";
    }
}
class PkiObject {
    static blockName() {
        return this.CLASS_NAME;
    }
    static fromBER(raw) {
        const asn1 = fromBER(raw);
        AsnError.assert(asn1, this.name);
        try {
            return new this({
                schema: asn1.result
            });
        } catch (e) {
            throw new AsnError(`Cannot create '${this.CLASS_NAME}' from ASN.1 object`);
        }
    }
    static defaultValues(memberName) {
        throw new Error(`Invalid member name for ${this.CLASS_NAME} class: ${memberName}`);
    }
    static schema(parameters = {}) {
        throw new Error(`Method '${this.CLASS_NAME}.schema' should be overridden`);
    }
    get className() {
        return this.constructor.CLASS_NAME;
    }
    toString(encoding = "hex") {
        let schema;
        try {
            schema = this.toSchema();
        } catch  {
            schema = this.toSchema(true);
        }
        return Convert.ToString(schema.toBER(), encoding);
    }
}
PkiObject.CLASS_NAME = "PkiObject";
function stringPrep(inputString) {
    let isSpace = false;
    let cutResult = EMPTY_STRING1;
    const result = inputString.trim();
    for(let i92 = 0; i92 < result.length; i92++){
        if (result.charCodeAt(i92) === 32) {
            if (isSpace === false) isSpace = true;
        } else {
            if (isSpace) {
                cutResult += " ";
                isSpace = false;
            }
            cutResult += result[i92];
        }
    }
    return cutResult.toLowerCase();
}
const TYPE$5 = "type";
const VALUE$6 = "value";
class AttributeTypeAndValue extends PkiObject {
    constructor(parameters = {}){
        super();
        this.type = getParametersValue(parameters, TYPE$5, AttributeTypeAndValue.defaultValues(TYPE$5));
        this.value = getParametersValue(parameters, VALUE$6, AttributeTypeAndValue.defaultValues(VALUE$6));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TYPE$5:
                return EMPTY_STRING1;
            case VALUE$6:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.type || EMPTY_STRING1
                }),
                new Any({
                    name: names.value || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            TYPE$5,
            "typeValue"
        ]);
        const asn1 = compareSchema(schema, schema, AttributeTypeAndValue.schema({
            names: {
                type: TYPE$5,
                value: "typeValue"
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.type = asn1.result.type.valueBlock.toString();
        this.value = asn1.result.typeValue;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.type
                }),
                this.value
            ]
        });
    }
    toJSON() {
        const _object = {
            type: this.type
        };
        if (Object.keys(this.value).length !== 0) {
            _object.value = this.value.toJSON();
        } else {
            _object.value = this.value;
        }
        return _object;
    }
    isEqual(compareTo) {
        const stringBlockNames = [
            Utf8String.blockName(),
            BmpString.blockName(),
            UniversalString.blockName(),
            NumericString.blockName(),
            PrintableString.blockName(),
            TeletexString.blockName(),
            VideotexString.blockName(),
            IA5String.blockName(),
            GraphicString.blockName(),
            VisibleString.blockName(),
            GeneralString.blockName(),
            CharacterString.blockName()
        ];
        if (compareTo instanceof ArrayBuffer) {
            return BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo);
        }
        if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {
            if (this.type !== compareTo.type) return false;
            const isStringPair = [
                false,
                false
            ];
            const thisName = this.value.constructor.blockName();
            for (const name of stringBlockNames){
                if (thisName === name) {
                    isStringPair[0] = true;
                }
                if (compareTo.value.constructor.blockName() === name) {
                    isStringPair[1] = true;
                }
            }
            if (isStringPair[0] !== isStringPair[1]) {
                return false;
            }
            const isString = isStringPair[0] && isStringPair[1];
            if (isString) {
                const value1 = stringPrep(this.value.valueBlock.value);
                const value2 = stringPrep(compareTo.value.valueBlock.value);
                if (value1.localeCompare(value2) !== 0) return false;
            } else {
                if (!BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo.value.valueBeforeDecodeView)) return false;
            }
            return true;
        }
        return false;
    }
}
AttributeTypeAndValue.CLASS_NAME = "AttributeTypeAndValue";
const TYPE_AND_VALUES = "typesAndValues";
const VALUE_BEFORE_DECODE = "valueBeforeDecode";
const RDN = "RDN";
class RelativeDistinguishedNames extends PkiObject {
    constructor(parameters = {}){
        super();
        this.typesAndValues = getParametersValue(parameters, TYPE_AND_VALUES, RelativeDistinguishedNames.defaultValues(TYPE_AND_VALUES));
        this.valueBeforeDecode = getParametersValue(parameters, VALUE_BEFORE_DECODE, RelativeDistinguishedNames.defaultValues(VALUE_BEFORE_DECODE));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TYPE_AND_VALUES:
                return [];
            case VALUE_BEFORE_DECODE:
                return EMPTY_BUFFER1;
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case TYPE_AND_VALUES:
                return memberValue.length === 0;
            case VALUE_BEFORE_DECODE:
                return memberValue.byteLength === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.repeatedSequence || EMPTY_STRING1,
                    value: new Set1({
                        value: [
                            new Repeated({
                                name: names.repeatedSet || EMPTY_STRING1,
                                value: AttributeTypeAndValue.schema(names.typeAndValue || {})
                            })
                        ]
                    })
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            RDN,
            TYPE_AND_VALUES
        ]);
        const asn1 = compareSchema(schema, schema, RelativeDistinguishedNames.schema({
            names: {
                blockName: RDN,
                repeatedSet: TYPE_AND_VALUES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (TYPE_AND_VALUES in asn1.result) {
            this.typesAndValues = Array.from(asn1.result.typesAndValues, (element)=>new AttributeTypeAndValue({
                    schema: element
                })
            );
        }
        this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecodeView.slice().buffer;
    }
    toSchema() {
        if (this.valueBeforeDecode.byteLength === 0) {
            return new Sequence({
                value: [
                    new Set1({
                        value: Array.from(this.typesAndValues, (o3)=>o3.toSchema()
                        )
                    })
                ]
            });
        }
        const asn1 = fromBER(this.valueBeforeDecode);
        AsnError.assert(asn1, "RelativeDistinguishedNames");
        if (!(asn1.result instanceof Sequence)) {
            throw new Error("ASN.1 result should be SEQUENCE");
        }
        return asn1.result;
    }
    toJSON() {
        return {
            typesAndValues: Array.from(this.typesAndValues, (o4)=>o4.toJSON()
            )
        };
    }
    isEqual(compareTo) {
        if (compareTo instanceof RelativeDistinguishedNames) {
            if (this.typesAndValues.length !== compareTo.typesAndValues.length) return false;
            for (const [index, typeAndValue] of this.typesAndValues.entries()){
                if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false) return false;
            }
            return true;
        }
        if (compareTo instanceof ArrayBuffer) {
            return isEqualBuffer(this.valueBeforeDecode, compareTo);
        }
        return false;
    }
}
RelativeDistinguishedNames.CLASS_NAME = "RelativeDistinguishedNames";
const TYPE$4 = "type";
const VALUE$5 = "value";
function builtInStandardAttributes(parameters = {}, optional = false) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
        optional,
        value: [
            new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 2,
                    tagNumber: 1
                },
                name: names.country_name || EMPTY_STRING1,
                value: [
                    new Choice({
                        value: [
                            new NumericString(),
                            new PrintableString()
                        ]
                    })
                ]
            }),
            new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 2,
                    tagNumber: 2
                },
                name: names.administration_domain_name || EMPTY_STRING1,
                value: [
                    new Choice({
                        value: [
                            new NumericString(),
                            new PrintableString()
                        ]
                    })
                ]
            }),
            new Primitive({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                name: names.network_address || EMPTY_STRING1,
                isHexOnly: true
            }),
            new Primitive({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                name: names.terminal_identifier || EMPTY_STRING1,
                isHexOnly: true
            }),
            new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                },
                name: names.private_domain_name || EMPTY_STRING1,
                value: [
                    new Choice({
                        value: [
                            new NumericString(),
                            new PrintableString()
                        ]
                    })
                ]
            }),
            new Primitive({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 3
                },
                name: names.organization_name || EMPTY_STRING1,
                isHexOnly: true
            }),
            new Primitive({
                optional: true,
                name: names.numeric_user_identifier || EMPTY_STRING1,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 4
                },
                isHexOnly: true
            }),
            new Constructed({
                optional: true,
                name: names.personal_name || EMPTY_STRING1,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 5
                },
                value: [
                    new Primitive({
                        idBlock: {
                            tagClass: 3,
                            tagNumber: 0
                        },
                        isHexOnly: true
                    }),
                    new Primitive({
                        optional: true,
                        idBlock: {
                            tagClass: 3,
                            tagNumber: 1
                        },
                        isHexOnly: true
                    }),
                    new Primitive({
                        optional: true,
                        idBlock: {
                            tagClass: 3,
                            tagNumber: 2
                        },
                        isHexOnly: true
                    }),
                    new Primitive({
                        optional: true,
                        idBlock: {
                            tagClass: 3,
                            tagNumber: 3
                        },
                        isHexOnly: true
                    })
                ]
            }),
            new Constructed({
                optional: true,
                name: names.organizational_unit_names || EMPTY_STRING1,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 6
                },
                value: [
                    new Repeated({
                        value: new PrintableString()
                    })
                ]
            })
        ]
    });
}
function builtInDomainDefinedAttributes(optional = false) {
    return new Sequence({
        optional,
        value: [
            new PrintableString(),
            new PrintableString()
        ]
    });
}
function extensionAttributes(optional = false) {
    return new Set1({
        optional,
        value: [
            new Primitive({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                isHexOnly: true
            }),
            new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: [
                    new Any()
                ]
            })
        ]
    });
}
class GeneralName extends PkiObject {
    constructor(parameters = {}){
        super();
        this.type = getParametersValue(parameters, TYPE$4, GeneralName.defaultValues(TYPE$4));
        this.value = getParametersValue(parameters, VALUE$5, GeneralName.defaultValues(VALUE$5));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TYPE$4:
                return 9;
            case VALUE$5:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case TYPE$4:
                return memberValue === GeneralName.defaultValues(memberName);
            case VALUE$5:
                return Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Choice({
            value: [
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    name: names.blockName || EMPTY_STRING1,
                    value: [
                        new ObjectIdentifier(),
                        new Constructed({
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 0
                            },
                            value: [
                                new Any()
                            ]
                        })
                    ]
                }),
                new Primitive({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    }
                }),
                new Primitive({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    }
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 3
                    },
                    name: names.blockName || EMPTY_STRING1,
                    value: [
                        builtInStandardAttributes(names.builtInStandardAttributes || {}, false),
                        builtInDomainDefinedAttributes(true),
                        extensionAttributes(true)
                    ]
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 4
                    },
                    name: names.blockName || EMPTY_STRING1,
                    value: [
                        RelativeDistinguishedNames.schema(names.directoryName || {})
                    ]
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 5
                    },
                    name: names.blockName || EMPTY_STRING1,
                    value: [
                        new Constructed({
                            optional: true,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 0
                            },
                            value: [
                                new Choice({
                                    value: [
                                        new TeletexString(),
                                        new PrintableString(),
                                        new UniversalString(),
                                        new Utf8String(),
                                        new BmpString()
                                    ]
                                })
                            ]
                        }),
                        new Constructed({
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 1
                            },
                            value: [
                                new Choice({
                                    value: [
                                        new TeletexString(),
                                        new PrintableString(),
                                        new UniversalString(),
                                        new Utf8String(),
                                        new BmpString()
                                    ]
                                })
                            ]
                        })
                    ]
                }),
                new Primitive({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 6
                    }
                }),
                new Primitive({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 7
                    }
                }),
                new Primitive({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 8
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            "blockName",
            "otherName",
            "rfc822Name",
            "dNSName",
            "x400Address",
            "directoryName",
            "ediPartyName",
            "uniformResourceIdentifier",
            "iPAddress",
            "registeredID"
        ]);
        const asn1 = compareSchema(schema, schema, GeneralName.schema({
            names: {
                blockName: "blockName",
                otherName: "otherName",
                rfc822Name: "rfc822Name",
                dNSName: "dNSName",
                x400Address: "x400Address",
                directoryName: {
                    names: {
                        blockName: "directoryName"
                    }
                },
                ediPartyName: "ediPartyName",
                uniformResourceIdentifier: "uniformResourceIdentifier",
                iPAddress: "iPAddress",
                registeredID: "registeredID"
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.type = asn1.result.blockName.idBlock.tagNumber;
        switch(this.type){
            case 0:
                this.value = asn1.result.blockName;
                break;
            case 1:
            case 2:
            case 6:
                {
                    const value = asn1.result.blockName;
                    value.idBlock.tagClass = 1;
                    value.idBlock.tagNumber = 22;
                    const valueBER = value.toBER(false);
                    const asnValue = fromBER(valueBER);
                    AsnError.assert(asnValue, "GeneralName value");
                    this.value = asnValue.result.valueBlock.value;
                }
                break;
            case 3:
                this.value = asn1.result.blockName;
                break;
            case 4:
                this.value = new RelativeDistinguishedNames({
                    schema: asn1.result.directoryName
                });
                break;
            case 5:
                this.value = asn1.result.ediPartyName;
                break;
            case 7:
                this.value = new OctetString({
                    valueHex: asn1.result.blockName.valueBlock.valueHex
                });
                break;
            case 8:
                {
                    const value = asn1.result.blockName;
                    value.idBlock.tagClass = 1;
                    value.idBlock.tagNumber = 6;
                    const valueBER = value.toBER(false);
                    const asnValue = fromBER(valueBER);
                    AsnError.assert(asnValue, "GeneralName registeredID");
                    this.value = asnValue.result.valueBlock.toString();
                }
                break;
        }
    }
    toSchema() {
        switch(this.type){
            case 0:
            case 3:
            case 5:
                return new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: this.type
                    },
                    value: [
                        this.value
                    ]
                });
            case 1:
            case 2:
            case 6:
                {
                    const value = new IA5String({
                        value: this.value
                    });
                    value.idBlock.tagClass = 3;
                    value.idBlock.tagNumber = this.type;
                    return value;
                }
            case 4:
                return new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 4
                    },
                    value: [
                        this.value.toSchema()
                    ]
                });
            case 7:
                {
                    const value = this.value;
                    value.idBlock.tagClass = 3;
                    value.idBlock.tagNumber = this.type;
                    return value;
                }
            case 8:
                {
                    const value = new ObjectIdentifier({
                        value: this.value
                    });
                    value.idBlock.tagClass = 3;
                    value.idBlock.tagNumber = this.type;
                    return value;
                }
            default:
                return GeneralName.schema();
        }
    }
    toJSON() {
        const _object = {
            type: this.type,
            value: EMPTY_STRING1
        };
        if (typeof this.value === "string") _object.value = this.value;
        else {
            try {
                _object.value = this.value.toJSON();
            } catch (ex) {}
        }
        return _object;
    }
}
GeneralName.CLASS_NAME = "GeneralName";
const ACCESS_METHOD = "accessMethod";
const ACCESS_LOCATION = "accessLocation";
const CLEAR_PROPS$1v = [
    ACCESS_METHOD,
    ACCESS_LOCATION
];
class AccessDescription extends PkiObject {
    constructor(parameters = {}){
        super();
        this.accessMethod = getParametersValue(parameters, ACCESS_METHOD, AccessDescription.defaultValues(ACCESS_METHOD));
        this.accessLocation = getParametersValue(parameters, ACCESS_LOCATION, AccessDescription.defaultValues(ACCESS_LOCATION));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ACCESS_METHOD:
                return EMPTY_STRING1;
            case ACCESS_LOCATION:
                return new GeneralName();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.accessMethod || EMPTY_STRING1
                }),
                GeneralName.schema(names.accessLocation || {})
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1v);
        const asn1 = compareSchema(schema, schema, AccessDescription.schema({
            names: {
                accessMethod: ACCESS_METHOD,
                accessLocation: {
                    names: {
                        blockName: ACCESS_LOCATION
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.accessMethod = asn1.result.accessMethod.valueBlock.toString();
        this.accessLocation = new GeneralName({
            schema: asn1.result.accessLocation
        });
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.accessMethod
                }),
                this.accessLocation.toSchema()
            ]
        });
    }
    toJSON() {
        return {
            accessMethod: this.accessMethod,
            accessLocation: this.accessLocation.toJSON()
        };
    }
}
AccessDescription.CLASS_NAME = "AccessDescription";
const SECONDS = "seconds";
const MILLIS = "millis";
const MICROS = "micros";
class Accuracy extends PkiObject {
    constructor(parameters = {}){
        super();
        if (SECONDS in parameters) {
            this.seconds = getParametersValue(parameters, SECONDS, Accuracy.defaultValues(SECONDS));
        }
        if (MILLIS in parameters) {
            this.millis = getParametersValue(parameters, MILLIS, Accuracy.defaultValues(MILLIS));
        }
        if (MICROS in parameters) {
            this.micros = getParametersValue(parameters, MICROS, Accuracy.defaultValues(MICROS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case SECONDS:
            case MILLIS:
            case MICROS:
                return 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case SECONDS:
            case MILLIS:
            case MICROS:
                return memberValue === Accuracy.defaultValues(memberName);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            optional: true,
            value: [
                new Integer({
                    optional: true,
                    name: names.seconds || EMPTY_STRING1
                }),
                new Primitive({
                    name: names.millis || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    }
                }),
                new Primitive({
                    name: names.micros || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            SECONDS,
            MILLIS,
            MICROS
        ]);
        const asn1 = compareSchema(schema, schema, Accuracy.schema({
            names: {
                seconds: SECONDS,
                millis: MILLIS,
                micros: MICROS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if ("seconds" in asn1.result) {
            this.seconds = asn1.result.seconds.valueBlock.valueDec;
        }
        if ("millis" in asn1.result) {
            const intMillis = new Integer({
                valueHex: asn1.result.millis.valueBlock.valueHex
            });
            this.millis = intMillis.valueBlock.valueDec;
        }
        if ("micros" in asn1.result) {
            const intMicros = new Integer({
                valueHex: asn1.result.micros.valueBlock.valueHex
            });
            this.micros = intMicros.valueBlock.valueDec;
        }
    }
    toSchema() {
        const outputArray = [];
        if (this.seconds !== undefined) outputArray.push(new Integer({
            value: this.seconds
        }));
        if (this.millis !== undefined) {
            const intMillis = new Integer({
                value: this.millis
            });
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                valueHex: intMillis.valueBlock.valueHexView
            }));
        }
        if (this.micros !== undefined) {
            const intMicros = new Integer({
                value: this.micros
            });
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                valueHex: intMicros.valueBlock.valueHexView
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const _object = {};
        if (this.seconds !== undefined) _object.seconds = this.seconds;
        if (this.millis !== undefined) _object.millis = this.millis;
        if (this.micros !== undefined) _object.micros = this.micros;
        return _object;
    }
}
Accuracy.CLASS_NAME = "Accuracy";
const ALGORITHM_ID = "algorithmId";
const ALGORITHM_PARAMS = "algorithmParams";
const ALGORITHM$2 = "algorithm";
const PARAMS = "params";
const CLEAR_PROPS$1u = [
    ALGORITHM$2,
    PARAMS
];
class AlgorithmIdentifier extends PkiObject {
    constructor(parameters = {}){
        super();
        this.algorithmId = getParametersValue(parameters, ALGORITHM_ID, AlgorithmIdentifier.defaultValues(ALGORITHM_ID));
        if (ALGORITHM_PARAMS in parameters) {
            this.algorithmParams = getParametersValue(parameters, ALGORITHM_PARAMS, AlgorithmIdentifier.defaultValues(ALGORITHM_PARAMS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ALGORITHM_ID:
                return EMPTY_STRING1;
            case ALGORITHM_PARAMS:
                return new Any();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case ALGORITHM_ID:
                return memberValue === EMPTY_STRING1;
            case ALGORITHM_PARAMS:
                return memberValue instanceof Any;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            optional: names.optional || false,
            value: [
                new ObjectIdentifier({
                    name: names.algorithmIdentifier || EMPTY_STRING1
                }),
                new Any({
                    name: names.algorithmParams || EMPTY_STRING1,
                    optional: true
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1u);
        const asn1 = compareSchema(schema, schema, AlgorithmIdentifier.schema({
            names: {
                algorithmIdentifier: ALGORITHM$2,
                algorithmParams: PARAMS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.algorithmId = asn1.result.algorithm.valueBlock.toString();
        if (PARAMS in asn1.result) {
            this.algorithmParams = asn1.result.params;
        }
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new ObjectIdentifier({
            value: this.algorithmId
        }));
        if (this.algorithmParams && !(this.algorithmParams instanceof Any)) {
            outputArray.push(this.algorithmParams);
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const object = {
            algorithmId: this.algorithmId
        };
        if (this.algorithmParams && !(this.algorithmParams instanceof Any)) {
            object.algorithmParams = this.algorithmParams.toJSON();
        }
        return object;
    }
    isEqual(algorithmIdentifier) {
        if (!(algorithmIdentifier instanceof AlgorithmIdentifier)) {
            return false;
        }
        if (this.algorithmId !== algorithmIdentifier.algorithmId) {
            return false;
        }
        if (this.algorithmParams) {
            if (algorithmIdentifier.algorithmParams) {
                return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);
            }
            return false;
        }
        if (algorithmIdentifier.algorithmParams) {
            return false;
        }
        return true;
    }
}
AlgorithmIdentifier.CLASS_NAME = "AlgorithmIdentifier";
const ALT_NAMES = "altNames";
const CLEAR_PROPS$1t = [
    ALT_NAMES
];
class AltName extends PkiObject {
    constructor(parameters = {}){
        super();
        this.altNames = getParametersValue(parameters, ALT_NAMES, AltName.defaultValues(ALT_NAMES));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ALT_NAMES:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.altNames || EMPTY_STRING1,
                    value: GeneralName.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1t);
        const asn1 = compareSchema(schema, schema, AltName.schema({
            names: {
                altNames: ALT_NAMES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (ALT_NAMES in asn1.result) {
            this.altNames = Array.from(asn1.result.altNames, (element)=>new GeneralName({
                    schema: element
                })
            );
        }
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.altNames, (o5)=>o5.toSchema()
            )
        });
    }
    toJSON() {
        return {
            altNames: Array.from(this.altNames, (o6)=>o6.toJSON()
            )
        };
    }
}
AltName.CLASS_NAME = "AltName";
const TYPE$3 = "type";
const VALUES$1 = "values";
const CLEAR_PROPS$1s = [
    TYPE$3,
    VALUES$1
];
class Attribute extends PkiObject {
    constructor(parameters = {}){
        super();
        this.type = getParametersValue(parameters, TYPE$3, Attribute.defaultValues(TYPE$3));
        this.values = getParametersValue(parameters, VALUES$1, Attribute.defaultValues(VALUES$1));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TYPE$3:
                return EMPTY_STRING1;
            case VALUES$1:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case TYPE$3:
                return memberValue === EMPTY_STRING1;
            case VALUES$1:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.type || EMPTY_STRING1
                }),
                new Set1({
                    name: names.setName || EMPTY_STRING1,
                    value: [
                        new Repeated({
                            name: names.values || EMPTY_STRING1,
                            value: new Any()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1s);
        const asn1 = compareSchema(schema, schema, Attribute.schema({
            names: {
                type: TYPE$3,
                values: VALUES$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.type = asn1.result.type.valueBlock.toString();
        this.values = asn1.result.values;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.type
                }),
                new Set1({
                    value: this.values
                })
            ]
        });
    }
    toJSON() {
        return {
            type: this.type,
            values: Array.from(this.values, (o7)=>o7.toJSON()
            )
        };
    }
}
Attribute.CLASS_NAME = "Attribute";
const NOT_BEFORE_TIME = "notBeforeTime";
const NOT_AFTER_TIME = "notAfterTime";
const CLEAR_PROPS$1r = [
    NOT_BEFORE_TIME,
    NOT_AFTER_TIME
];
class AttCertValidityPeriod extends PkiObject {
    constructor(parameters = {}){
        super();
        this.notBeforeTime = getParametersValue(parameters, NOT_BEFORE_TIME, AttCertValidityPeriod.defaultValues(NOT_BEFORE_TIME));
        this.notAfterTime = getParametersValue(parameters, NOT_AFTER_TIME, AttCertValidityPeriod.defaultValues(NOT_AFTER_TIME));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case NOT_BEFORE_TIME:
            case NOT_AFTER_TIME:
                return new Date(0, 0, 0);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new GeneralizedTime({
                    name: names.notBeforeTime || EMPTY_STRING1
                }),
                new GeneralizedTime({
                    name: names.notAfterTime || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1r);
        const asn1 = compareSchema(schema, schema, AttCertValidityPeriod.schema({
            names: {
                notBeforeTime: NOT_BEFORE_TIME,
                notAfterTime: NOT_AFTER_TIME
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.notBeforeTime = asn1.result.notBeforeTime.toDate();
        this.notAfterTime = asn1.result.notAfterTime.toDate();
    }
    toSchema() {
        return new Sequence({
            value: [
                new GeneralizedTime({
                    valueDate: this.notBeforeTime
                }),
                new GeneralizedTime({
                    valueDate: this.notAfterTime
                })
            ]
        });
    }
    toJSON() {
        return {
            notBeforeTime: this.notBeforeTime,
            notAfterTime: this.notAfterTime
        };
    }
}
AttCertValidityPeriod.CLASS_NAME = "AttCertValidityPeriod";
const NAMES = "names";
const GENERAL_NAMES = "generalNames";
class GeneralNames extends PkiObject {
    constructor(parameters = {}){
        super();
        this.names = getParametersValue(parameters, NAMES, GeneralNames.defaultValues(NAMES));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case "names":
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}, optional = false) {
        const names = getParametersValue(parameters, NAMES, {});
        return new Sequence({
            optional,
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.generalNames || EMPTY_STRING1,
                    value: GeneralName.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            NAMES,
            GENERAL_NAMES
        ]);
        const asn1 = compareSchema(schema, schema, GeneralNames.schema({
            names: {
                blockName: NAMES,
                generalNames: GENERAL_NAMES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.names = Array.from(asn1.result.generalNames, (element)=>new GeneralName({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.names, (o8)=>o8.toSchema()
            )
        });
    }
    toJSON() {
        return {
            names: Array.from(this.names, (o9)=>o9.toJSON()
            )
        };
    }
}
GeneralNames.CLASS_NAME = "GeneralNames";
const id_SubjectDirectoryAttributes = "2.5.29.9";
const id_SubjectKeyIdentifier = "2.5.29.14";
const id_KeyUsage = "2.5.29.15";
const id_PrivateKeyUsagePeriod = "2.5.29.16";
const id_SubjectAltName = "2.5.29.17";
const id_IssuerAltName = "2.5.29.18";
const id_BasicConstraints = "2.5.29.19";
const id_CRLNumber = "2.5.29.20";
const id_BaseCRLNumber = "2.5.29.27";
const id_CRLReason = "2.5.29.21";
const id_InvalidityDate = "2.5.29.24";
const id_IssuingDistributionPoint = "2.5.29.28";
const id_CertificateIssuer = "2.5.29.29";
const id_NameConstraints = "2.5.29.30";
const id_CRLDistributionPoints = "2.5.29.31";
const id_FreshestCRL = "2.5.29.46";
const id_CertificatePolicies = "2.5.29.32";
const id_AnyPolicy = "2.5.29.32.0";
const id_MicrosoftAppPolicies = "1.3.6.1.4.1.311.21.10";
const id_PolicyMappings = "2.5.29.33";
const id_AuthorityKeyIdentifier = "2.5.29.35";
const id_PolicyConstraints = "2.5.29.36";
const id_ExtKeyUsage = "2.5.29.37";
const id_InhibitAnyPolicy = "2.5.29.54";
const id_AuthorityInfoAccess = "1.3.6.1.5.5.7.1.1";
const id_SubjectInfoAccess = "1.3.6.1.5.5.7.1.11";
const id_SignedCertificateTimestampList = "1.3.6.1.4.1.11129.2.4.2";
const id_MicrosoftCertTemplateV2 = "1.3.6.1.4.1.311.21.7";
const id_MicrosoftCaVersion = "1.3.6.1.4.1.311.21.1";
const id_QCStatements = "1.3.6.1.5.5.7.1.3";
const id_ContentType_Data = "1.2.840.113549.1.7.1";
const id_ContentType_SignedData = "1.2.840.113549.1.7.2";
const id_ContentType_EnvelopedData = "1.2.840.113549.1.7.3";
const id_ContentType_EncryptedData = "1.2.840.113549.1.7.6";
const id_eContentType_TSTInfo = "1.2.840.113549.1.9.16.1.4";
const id_CertBag_X509Certificate = "1.2.840.113549.1.9.22.1";
const id_CertBag_SDSICertificate = "1.2.840.113549.1.9.22.2";
const id_CertBag_AttributeCertificate = "1.2.840.113549.1.9.22.3";
const id_CRLBag_X509CRL = "1.2.840.113549.1.9.23.1";
const id_pkix = "1.3.6.1.5.5.7";
const id_ad = `${id_pkix}.48`;
const id_PKIX_OCSP_Basic = `${id_ad}.1.1`;
`${id_ad}.2`;
`${id_ad}.1`;
const KEY_IDENTIFIER$1 = "keyIdentifier";
const AUTHORITY_CERT_ISSUER = "authorityCertIssuer";
const AUTHORITY_CERT_SERIAL_NUMBER = "authorityCertSerialNumber";
const CLEAR_PROPS$1q = [
    KEY_IDENTIFIER$1,
    AUTHORITY_CERT_ISSUER,
    AUTHORITY_CERT_SERIAL_NUMBER
];
class AuthorityKeyIdentifier extends PkiObject {
    constructor(parameters = {}){
        super();
        if (KEY_IDENTIFIER$1 in parameters) {
            this.keyIdentifier = getParametersValue(parameters, KEY_IDENTIFIER$1, AuthorityKeyIdentifier.defaultValues(KEY_IDENTIFIER$1));
        }
        if (AUTHORITY_CERT_ISSUER in parameters) {
            this.authorityCertIssuer = getParametersValue(parameters, AUTHORITY_CERT_ISSUER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_ISSUER));
        }
        if (AUTHORITY_CERT_SERIAL_NUMBER in parameters) {
            this.authorityCertSerialNumber = getParametersValue(parameters, AUTHORITY_CERT_SERIAL_NUMBER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_SERIAL_NUMBER));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case KEY_IDENTIFIER$1:
                return new OctetString();
            case AUTHORITY_CERT_ISSUER:
                return [];
            case AUTHORITY_CERT_SERIAL_NUMBER:
                return new Integer();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Primitive({
                    name: names.keyIdentifier || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    }
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new Repeated({
                            name: names.authorityCertIssuer || EMPTY_STRING1,
                            value: GeneralName.schema()
                        })
                    ]
                }),
                new Primitive({
                    name: names.authorityCertSerialNumber || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1q);
        const asn1 = compareSchema(schema, schema, AuthorityKeyIdentifier.schema({
            names: {
                keyIdentifier: KEY_IDENTIFIER$1,
                authorityCertIssuer: AUTHORITY_CERT_ISSUER,
                authorityCertSerialNumber: AUTHORITY_CERT_SERIAL_NUMBER
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (KEY_IDENTIFIER$1 in asn1.result) this.keyIdentifier = new OctetString({
            valueHex: asn1.result.keyIdentifier.valueBlock.valueHex
        });
        if (AUTHORITY_CERT_ISSUER in asn1.result) this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, (o10)=>new GeneralName({
                schema: o10
            })
        );
        if (AUTHORITY_CERT_SERIAL_NUMBER in asn1.result) this.authorityCertSerialNumber = new Integer({
            valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex
        });
    }
    toSchema() {
        const outputArray = [];
        if (this.keyIdentifier) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                valueHex: this.keyIdentifier.valueBlock.valueHexView
            }));
        }
        if (this.authorityCertIssuer) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: Array.from(this.authorityCertIssuer, (o11)=>o11.toSchema()
                )
            }));
        }
        if (this.authorityCertSerialNumber) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                },
                valueHex: this.authorityCertSerialNumber.valueBlock.valueHexView
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const object = {};
        if (this.keyIdentifier) {
            object.keyIdentifier = this.keyIdentifier.toJSON();
        }
        if (this.authorityCertIssuer) {
            object.authorityCertIssuer = Array.from(this.authorityCertIssuer, (o12)=>o12.toJSON()
            );
        }
        if (this.authorityCertSerialNumber) {
            object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();
        }
        return object;
    }
}
AuthorityKeyIdentifier.CLASS_NAME = "AuthorityKeyIdentifier";
const PATH_LENGTH_CONSTRAINT = "pathLenConstraint";
const CA = "cA";
class BasicConstraints extends PkiObject {
    constructor(parameters = {}){
        super();
        this.cA = getParametersValue(parameters, CA, false);
        if (PATH_LENGTH_CONSTRAINT in parameters) {
            this.pathLenConstraint = getParametersValue(parameters, PATH_LENGTH_CONSTRAINT, 0);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CA:
                return false;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Boolean1({
                    optional: true,
                    name: names.cA || EMPTY_STRING1
                }),
                new Integer({
                    optional: true,
                    name: names.pathLenConstraint || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            CA,
            PATH_LENGTH_CONSTRAINT
        ]);
        const asn1 = compareSchema(schema, schema, BasicConstraints.schema({
            names: {
                cA: CA,
                pathLenConstraint: PATH_LENGTH_CONSTRAINT
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (CA in asn1.result) {
            this.cA = asn1.result.cA.valueBlock.value;
        }
        if (PATH_LENGTH_CONSTRAINT in asn1.result) {
            if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) {
                this.pathLenConstraint = asn1.result.pathLenConstraint;
            } else {
                this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;
            }
        }
    }
    toSchema() {
        const outputArray = [];
        if (this.cA !== BasicConstraints.defaultValues(CA)) outputArray.push(new Boolean1({
            value: this.cA
        }));
        if (PATH_LENGTH_CONSTRAINT in this) {
            if (this.pathLenConstraint instanceof Integer) {
                outputArray.push(this.pathLenConstraint);
            } else {
                outputArray.push(new Integer({
                    value: this.pathLenConstraint
                }));
            }
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const object = {};
        if (this.cA !== BasicConstraints.defaultValues(CA)) {
            object.cA = this.cA;
        }
        if (PATH_LENGTH_CONSTRAINT in this) {
            if (this.pathLenConstraint instanceof Integer) {
                object.pathLenConstraint = this.pathLenConstraint.toJSON();
            } else {
                object.pathLenConstraint = this.pathLenConstraint;
            }
        }
        return object;
    }
}
BasicConstraints.CLASS_NAME = "BasicConstraints";
const CERTIFICATE_INDEX = "certificateIndex";
const KEY_INDEX = "keyIndex";
class CAVersion extends PkiObject {
    constructor(parameters = {}){
        super();
        this.certificateIndex = getParametersValue(parameters, CERTIFICATE_INDEX, CAVersion.defaultValues(CERTIFICATE_INDEX));
        this.keyIndex = getParametersValue(parameters, KEY_INDEX, CAVersion.defaultValues(KEY_INDEX));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CERTIFICATE_INDEX:
            case KEY_INDEX:
                return 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema() {
        return new Integer();
    }
    fromSchema(schema) {
        if (schema.constructor.blockName() !== Integer.blockName()) {
            throw new Error("Object's schema was not verified against input data for CAVersion");
        }
        let value = schema.valueBlock.valueHex.slice(0);
        const valueView = new Uint8Array(value);
        switch(true){
            case value.byteLength < 4:
                {
                    const tempValue = new ArrayBuffer(4);
                    const tempValueView = new Uint8Array(tempValue);
                    tempValueView.set(valueView, 4 - value.byteLength);
                    value = tempValue.slice(0);
                }
                break;
            case value.byteLength > 4:
                {
                    const tempValue = new ArrayBuffer(4);
                    const tempValueView = new Uint8Array(tempValue);
                    tempValueView.set(valueView.slice(0, 4));
                    value = tempValue.slice(0);
                }
                break;
        }
        const keyIndexBuffer = value.slice(0, 2);
        const keyIndexView8 = new Uint8Array(keyIndexBuffer);
        let temp = keyIndexView8[0];
        keyIndexView8[0] = keyIndexView8[1];
        keyIndexView8[1] = temp;
        const keyIndexView16 = new Uint16Array(keyIndexBuffer);
        this.keyIndex = keyIndexView16[0];
        const certificateIndexBuffer = value.slice(2);
        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);
        temp = certificateIndexView8[0];
        certificateIndexView8[0] = certificateIndexView8[1];
        certificateIndexView8[1] = temp;
        const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);
        this.certificateIndex = certificateIndexView16[0];
    }
    toSchema() {
        const certificateIndexBuffer = new ArrayBuffer(2);
        const certificateIndexView = new Uint16Array(certificateIndexBuffer);
        certificateIndexView[0] = this.certificateIndex;
        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);
        let temp = certificateIndexView8[0];
        certificateIndexView8[0] = certificateIndexView8[1];
        certificateIndexView8[1] = temp;
        const keyIndexBuffer = new ArrayBuffer(2);
        const keyIndexView = new Uint16Array(keyIndexBuffer);
        keyIndexView[0] = this.keyIndex;
        const keyIndexView8 = new Uint8Array(keyIndexBuffer);
        temp = keyIndexView8[0];
        keyIndexView8[0] = keyIndexView8[1];
        keyIndexView8[1] = temp;
        return new Integer({
            valueHex: utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)
        });
    }
    toJSON() {
        return {
            certificateIndex: this.certificateIndex,
            keyIndex: this.keyIndex
        };
    }
}
CAVersion.CLASS_NAME = "CAVersion";
const POLICY_QUALIFIER_ID = "policyQualifierId";
const QUALIFIER = "qualifier";
const CLEAR_PROPS$1p = [
    POLICY_QUALIFIER_ID,
    QUALIFIER
];
class PolicyQualifierInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.policyQualifierId = getParametersValue(parameters, POLICY_QUALIFIER_ID, PolicyQualifierInfo.defaultValues(POLICY_QUALIFIER_ID));
        this.qualifier = getParametersValue(parameters, QUALIFIER, PolicyQualifierInfo.defaultValues(QUALIFIER));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case POLICY_QUALIFIER_ID:
                return EMPTY_STRING1;
            case QUALIFIER:
                return new Any();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.policyQualifierId || EMPTY_STRING1
                }),
                new Any({
                    name: names.qualifier || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1p);
        const asn1 = compareSchema(schema, schema, PolicyQualifierInfo.schema({
            names: {
                policyQualifierId: POLICY_QUALIFIER_ID,
                qualifier: QUALIFIER
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();
        this.qualifier = asn1.result.qualifier;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.policyQualifierId
                }),
                this.qualifier
            ]
        });
    }
    toJSON() {
        return {
            policyQualifierId: this.policyQualifierId,
            qualifier: this.qualifier.toJSON()
        };
    }
}
PolicyQualifierInfo.CLASS_NAME = "PolicyQualifierInfo";
const POLICY_IDENTIFIER = "policyIdentifier";
const POLICY_QUALIFIERS = "policyQualifiers";
const CLEAR_PROPS$1o = [
    POLICY_IDENTIFIER,
    POLICY_QUALIFIERS
];
class PolicyInformation extends PkiObject {
    constructor(parameters = {}){
        super();
        this.policyIdentifier = getParametersValue(parameters, POLICY_IDENTIFIER, PolicyInformation.defaultValues(POLICY_IDENTIFIER));
        if (POLICY_QUALIFIERS in parameters) {
            this.policyQualifiers = getParametersValue(parameters, POLICY_QUALIFIERS, PolicyInformation.defaultValues(POLICY_QUALIFIERS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case POLICY_IDENTIFIER:
                return EMPTY_STRING1;
            case POLICY_QUALIFIERS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.policyIdentifier || EMPTY_STRING1
                }),
                new Sequence({
                    optional: true,
                    value: [
                        new Repeated({
                            name: names.policyQualifiers || EMPTY_STRING1,
                            value: PolicyQualifierInfo.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1o);
        const asn1 = compareSchema(schema, schema, PolicyInformation.schema({
            names: {
                policyIdentifier: POLICY_IDENTIFIER,
                policyQualifiers: POLICY_QUALIFIERS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();
        if (POLICY_QUALIFIERS in asn1.result) {
            this.policyQualifiers = Array.from(asn1.result.policyQualifiers, (element)=>new PolicyQualifierInfo({
                    schema: element
                })
            );
        }
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new ObjectIdentifier({
            value: this.policyIdentifier
        }));
        if (this.policyQualifiers) {
            outputArray.push(new Sequence({
                value: Array.from(this.policyQualifiers, (o13)=>o13.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            policyIdentifier: this.policyIdentifier
        };
        if (this.policyQualifiers) res.policyQualifiers = Array.from(this.policyQualifiers, (o14)=>o14.toJSON()
        );
        return res;
    }
}
PolicyInformation.CLASS_NAME = "PolicyInformation";
const CERTIFICATE_POLICIES = "certificatePolicies";
const CLEAR_PROPS$1n = [
    CERTIFICATE_POLICIES
];
class CertificatePolicies extends PkiObject {
    constructor(parameters = {}){
        super();
        this.certificatePolicies = getParametersValue(parameters, CERTIFICATE_POLICIES, CertificatePolicies.defaultValues(CERTIFICATE_POLICIES));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CERTIFICATE_POLICIES:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.certificatePolicies || EMPTY_STRING1,
                    value: PolicyInformation.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1n);
        const asn1 = compareSchema(schema, schema, CertificatePolicies.schema({
            names: {
                certificatePolicies: CERTIFICATE_POLICIES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.certificatePolicies = Array.from(asn1.result.certificatePolicies, (element)=>new PolicyInformation({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.certificatePolicies, (o15)=>o15.toSchema()
            )
        });
    }
    toJSON() {
        return {
            certificatePolicies: Array.from(this.certificatePolicies, (o16)=>o16.toJSON()
            )
        };
    }
}
CertificatePolicies.CLASS_NAME = "CertificatePolicies";
const TEMPLATE_ID = "templateID";
const TEMPLATE_MAJOR_VERSION = "templateMajorVersion";
const TEMPLATE_MINOR_VERSION = "templateMinorVersion";
const CLEAR_PROPS$1m = [
    TEMPLATE_ID,
    TEMPLATE_MAJOR_VERSION,
    TEMPLATE_MINOR_VERSION
];
class CertificateTemplate extends PkiObject {
    constructor(parameters = {}){
        super();
        this.templateID = getParametersValue(parameters, TEMPLATE_ID, CertificateTemplate.defaultValues(TEMPLATE_ID));
        if (TEMPLATE_MAJOR_VERSION in parameters) {
            this.templateMajorVersion = getParametersValue(parameters, TEMPLATE_MAJOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MAJOR_VERSION));
        }
        if (TEMPLATE_MINOR_VERSION in parameters) {
            this.templateMinorVersion = getParametersValue(parameters, TEMPLATE_MINOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MINOR_VERSION));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TEMPLATE_ID:
                return EMPTY_STRING1;
            case TEMPLATE_MAJOR_VERSION:
            case TEMPLATE_MINOR_VERSION:
                return 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.templateID || EMPTY_STRING1
                }),
                new Integer({
                    name: names.templateMajorVersion || EMPTY_STRING1,
                    optional: true
                }),
                new Integer({
                    name: names.templateMinorVersion || EMPTY_STRING1,
                    optional: true
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1m);
        const asn1 = compareSchema(schema, schema, CertificateTemplate.schema({
            names: {
                templateID: TEMPLATE_ID,
                templateMajorVersion: TEMPLATE_MAJOR_VERSION,
                templateMinorVersion: TEMPLATE_MINOR_VERSION
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.templateID = asn1.result.templateID.valueBlock.toString();
        if (TEMPLATE_MAJOR_VERSION in asn1.result) {
            this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;
        }
        if (TEMPLATE_MINOR_VERSION in asn1.result) {
            this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;
        }
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new ObjectIdentifier({
            value: this.templateID
        }));
        if (TEMPLATE_MAJOR_VERSION in this) {
            outputArray.push(new Integer({
                value: this.templateMajorVersion
            }));
        }
        if (TEMPLATE_MINOR_VERSION in this) {
            outputArray.push(new Integer({
                value: this.templateMinorVersion
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            templateID: this.templateID
        };
        if (TEMPLATE_MAJOR_VERSION in this) res.templateMajorVersion = this.templateMajorVersion;
        if (TEMPLATE_MINOR_VERSION in this) res.templateMinorVersion = this.templateMinorVersion;
        return res;
    }
}
const DISTRIBUTION_POINT$1 = "distributionPoint";
const DISTRIBUTION_POINT_NAMES$1 = "distributionPointNames";
const REASONS = "reasons";
const CRL_ISSUER = "cRLIssuer";
const CRL_ISSUER_NAMES = "cRLIssuerNames";
const CLEAR_PROPS$1l = [
    DISTRIBUTION_POINT$1,
    DISTRIBUTION_POINT_NAMES$1,
    REASONS,
    CRL_ISSUER,
    CRL_ISSUER_NAMES
];
class DistributionPoint extends PkiObject {
    constructor(parameters = {}){
        super();
        if (DISTRIBUTION_POINT$1 in parameters) {
            this.distributionPoint = getParametersValue(parameters, DISTRIBUTION_POINT$1, DistributionPoint.defaultValues(DISTRIBUTION_POINT$1));
        }
        if (REASONS in parameters) {
            this.reasons = getParametersValue(parameters, REASONS, DistributionPoint.defaultValues(REASONS));
        }
        if (CRL_ISSUER in parameters) {
            this.cRLIssuer = getParametersValue(parameters, CRL_ISSUER, DistributionPoint.defaultValues(CRL_ISSUER));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case DISTRIBUTION_POINT$1:
                return [];
            case REASONS:
                return new BitString();
            case CRL_ISSUER:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Choice({
                            value: [
                                new Constructed({
                                    name: names.distributionPoint || EMPTY_STRING1,
                                    optional: true,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: 0
                                    },
                                    value: [
                                        new Repeated({
                                            name: names.distributionPointNames || EMPTY_STRING1,
                                            value: GeneralName.schema()
                                        })
                                    ]
                                }),
                                new Constructed({
                                    name: names.distributionPoint || EMPTY_STRING1,
                                    optional: true,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: 1
                                    },
                                    value: RelativeDistinguishedNames.schema().valueBlock.value
                                })
                            ]
                        })
                    ]
                }),
                new Primitive({
                    name: names.reasons || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    }
                }),
                new Constructed({
                    name: names.cRLIssuer || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    value: [
                        new Repeated({
                            name: names.cRLIssuerNames || EMPTY_STRING1,
                            value: GeneralName.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1l);
        const asn1 = compareSchema(schema, schema, DistributionPoint.schema({
            names: {
                distributionPoint: DISTRIBUTION_POINT$1,
                distributionPointNames: DISTRIBUTION_POINT_NAMES$1,
                reasons: REASONS,
                cRLIssuer: CRL_ISSUER,
                cRLIssuerNames: CRL_ISSUER_NAMES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (DISTRIBUTION_POINT$1 in asn1.result) {
            if (asn1.result.distributionPoint.idBlock.tagNumber === 0) {
                this.distributionPoint = Array.from(asn1.result.distributionPointNames, (element)=>new GeneralName({
                        schema: element
                    })
                );
            }
            if (asn1.result.distributionPoint.idBlock.tagNumber === 1) {
                this.distributionPoint = new RelativeDistinguishedNames({
                    schema: new Sequence({
                        value: asn1.result.distributionPoint.valueBlock.value
                    })
                });
            }
        }
        if (REASONS in asn1.result) {
            this.reasons = new BitString({
                valueHex: asn1.result.reasons.valueBlock.valueHex
            });
        }
        if (CRL_ISSUER in asn1.result) {
            this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, (element)=>new GeneralName({
                    schema: element
                })
            );
        }
    }
    toSchema() {
        const outputArray = [];
        if (this.distributionPoint) {
            let internalValue;
            if (this.distributionPoint instanceof Array) {
                internalValue = new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: Array.from(this.distributionPoint, (o17)=>o17.toSchema()
                    )
                });
            } else {
                internalValue = new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        this.distributionPoint.toSchema()
                    ]
                });
            }
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    internalValue
                ]
            }));
        }
        if (this.reasons) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                valueHex: this.reasons.valueBlock.valueHexView
            }));
        }
        if (this.cRLIssuer) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                },
                value: Array.from(this.cRLIssuer, (o18)=>o18.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const object = {};
        if (this.distributionPoint) {
            if (this.distributionPoint instanceof Array) {
                object.distributionPoint = Array.from(this.distributionPoint, (o19)=>o19.toJSON()
                );
            } else {
                object.distributionPoint = this.distributionPoint.toJSON();
            }
        }
        if (this.reasons) {
            object.reasons = this.reasons.toJSON();
        }
        if (this.cRLIssuer) {
            object.cRLIssuer = Array.from(this.cRLIssuer, (o20)=>o20.toJSON()
            );
        }
        return object;
    }
}
DistributionPoint.CLASS_NAME = "DistributionPoint";
const DISTRIBUTION_POINTS = "distributionPoints";
const CLEAR_PROPS$1k = [
    DISTRIBUTION_POINTS
];
class CRLDistributionPoints extends PkiObject {
    constructor(parameters = {}){
        super();
        this.distributionPoints = getParametersValue(parameters, DISTRIBUTION_POINTS, CRLDistributionPoints.defaultValues(DISTRIBUTION_POINTS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case DISTRIBUTION_POINTS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.distributionPoints || EMPTY_STRING1,
                    value: DistributionPoint.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1k);
        const asn1 = compareSchema(schema, schema, CRLDistributionPoints.schema({
            names: {
                distributionPoints: DISTRIBUTION_POINTS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.distributionPoints = Array.from(asn1.result.distributionPoints, (element)=>new DistributionPoint({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.distributionPoints, (o21)=>o21.toSchema()
            )
        });
    }
    toJSON() {
        return {
            distributionPoints: Array.from(this.distributionPoints, (o22)=>o22.toJSON()
            )
        };
    }
}
CRLDistributionPoints.CLASS_NAME = "CRLDistributionPoints";
const KEY_PURPOSES = "keyPurposes";
const CLEAR_PROPS$1j = [
    KEY_PURPOSES
];
class ExtKeyUsage extends PkiObject {
    constructor(parameters = {}){
        super();
        this.keyPurposes = getParametersValue(parameters, KEY_PURPOSES, ExtKeyUsage.defaultValues(KEY_PURPOSES));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case KEY_PURPOSES:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.keyPurposes || EMPTY_STRING1,
                    value: new ObjectIdentifier()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1j);
        const asn1 = compareSchema(schema, schema, ExtKeyUsage.schema({
            names: {
                keyPurposes: KEY_PURPOSES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.keyPurposes = Array.from(asn1.result.keyPurposes, (element)=>element.valueBlock.toString()
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.keyPurposes, (element)=>new ObjectIdentifier({
                    value: element
                })
            )
        });
    }
    toJSON() {
        return {
            keyPurposes: Array.from(this.keyPurposes)
        };
    }
}
ExtKeyUsage.CLASS_NAME = "ExtKeyUsage";
const ACCESS_DESCRIPTIONS = "accessDescriptions";
class InfoAccess extends PkiObject {
    constructor(parameters = {}){
        super();
        this.accessDescriptions = getParametersValue(parameters, ACCESS_DESCRIPTIONS, InfoAccess.defaultValues(ACCESS_DESCRIPTIONS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ACCESS_DESCRIPTIONS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.accessDescriptions || EMPTY_STRING1,
                    value: AccessDescription.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            ACCESS_DESCRIPTIONS
        ]);
        const asn1 = compareSchema(schema, schema, InfoAccess.schema({
            names: {
                accessDescriptions: ACCESS_DESCRIPTIONS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.accessDescriptions = Array.from(asn1.result.accessDescriptions, (element)=>new AccessDescription({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.accessDescriptions, (o23)=>o23.toSchema()
            )
        });
    }
    toJSON() {
        return {
            accessDescriptions: Array.from(this.accessDescriptions, (o24)=>o24.toJSON()
            )
        };
    }
}
InfoAccess.CLASS_NAME = "InfoAccess";
const DISTRIBUTION_POINT = "distributionPoint";
const DISTRIBUTION_POINT_NAMES = "distributionPointNames";
const ONLY_CONTAINS_USER_CERTS = "onlyContainsUserCerts";
const ONLY_CONTAINS_CA_CERTS = "onlyContainsCACerts";
const ONLY_SOME_REASON = "onlySomeReasons";
const INDIRECT_CRL = "indirectCRL";
const ONLY_CONTAINS_ATTRIBUTE_CERTS = "onlyContainsAttributeCerts";
const CLEAR_PROPS$1i = [
    DISTRIBUTION_POINT,
    DISTRIBUTION_POINT_NAMES,
    ONLY_CONTAINS_USER_CERTS,
    ONLY_CONTAINS_CA_CERTS,
    ONLY_SOME_REASON,
    INDIRECT_CRL,
    ONLY_CONTAINS_ATTRIBUTE_CERTS
];
class IssuingDistributionPoint extends PkiObject {
    constructor(parameters = {}){
        super();
        if (DISTRIBUTION_POINT in parameters) {
            this.distributionPoint = getParametersValue(parameters, DISTRIBUTION_POINT, IssuingDistributionPoint.defaultValues(DISTRIBUTION_POINT));
        }
        this.onlyContainsUserCerts = getParametersValue(parameters, ONLY_CONTAINS_USER_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS));
        this.onlyContainsCACerts = getParametersValue(parameters, ONLY_CONTAINS_CA_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS));
        if (ONLY_SOME_REASON in parameters) {
            this.onlySomeReasons = getParametersValue(parameters, ONLY_SOME_REASON, IssuingDistributionPoint.defaultValues(ONLY_SOME_REASON));
        }
        this.indirectCRL = getParametersValue(parameters, INDIRECT_CRL, IssuingDistributionPoint.defaultValues(INDIRECT_CRL));
        this.onlyContainsAttributeCerts = getParametersValue(parameters, ONLY_CONTAINS_ATTRIBUTE_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case DISTRIBUTION_POINT:
                return [];
            case ONLY_CONTAINS_USER_CERTS:
                return false;
            case ONLY_CONTAINS_CA_CERTS:
                return false;
            case ONLY_SOME_REASON:
                return 0;
            case INDIRECT_CRL:
                return false;
            case ONLY_CONTAINS_ATTRIBUTE_CERTS:
                return false;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Choice({
                            value: [
                                new Constructed({
                                    name: names.distributionPoint || EMPTY_STRING1,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: 0
                                    },
                                    value: [
                                        new Repeated({
                                            name: names.distributionPointNames || EMPTY_STRING1,
                                            value: GeneralName.schema()
                                        })
                                    ]
                                }),
                                new Constructed({
                                    name: names.distributionPoint || EMPTY_STRING1,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: 1
                                    },
                                    value: RelativeDistinguishedNames.schema().valueBlock.value
                                })
                            ]
                        })
                    ]
                }),
                new Primitive({
                    name: names.onlyContainsUserCerts || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    }
                }),
                new Primitive({
                    name: names.onlyContainsCACerts || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    }
                }),
                new Primitive({
                    name: names.onlySomeReasons || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 3
                    }
                }),
                new Primitive({
                    name: names.indirectCRL || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 4
                    }
                }),
                new Primitive({
                    name: names.onlyContainsAttributeCerts || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 5
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1i);
        const asn1 = compareSchema(schema, schema, IssuingDistributionPoint.schema({
            names: {
                distributionPoint: DISTRIBUTION_POINT,
                distributionPointNames: DISTRIBUTION_POINT_NAMES,
                onlyContainsUserCerts: ONLY_CONTAINS_USER_CERTS,
                onlyContainsCACerts: ONLY_CONTAINS_CA_CERTS,
                onlySomeReasons: ONLY_SOME_REASON,
                indirectCRL: INDIRECT_CRL,
                onlyContainsAttributeCerts: ONLY_CONTAINS_ATTRIBUTE_CERTS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (DISTRIBUTION_POINT in asn1.result) {
            switch(true){
                case asn1.result.distributionPoint.idBlock.tagNumber === 0:
                    this.distributionPoint = Array.from(asn1.result.distributionPointNames, (element)=>new GeneralName({
                            schema: element
                        })
                    );
                    break;
                case asn1.result.distributionPoint.idBlock.tagNumber === 1:
                    {
                        this.distributionPoint = new RelativeDistinguishedNames({
                            schema: new Sequence({
                                value: asn1.result.distributionPoint.valueBlock.value
                            })
                        });
                    }
                    break;
                default:
                    throw new Error("Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}");
            }
        }
        if (ONLY_CONTAINS_USER_CERTS in asn1.result) {
            const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);
            this.onlyContainsUserCerts = view[0] !== 0;
        }
        if (ONLY_CONTAINS_CA_CERTS in asn1.result) {
            const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);
            this.onlyContainsCACerts = view[0] !== 0;
        }
        if (ONLY_SOME_REASON in asn1.result) {
            const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);
            this.onlySomeReasons = view[0];
        }
        if (INDIRECT_CRL in asn1.result) {
            const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);
            this.indirectCRL = view[0] !== 0;
        }
        if (ONLY_CONTAINS_ATTRIBUTE_CERTS in asn1.result) {
            const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);
            this.onlyContainsAttributeCerts = view[0] !== 0;
        }
    }
    toSchema() {
        const outputArray = [];
        if (this.distributionPoint) {
            let value;
            if (this.distributionPoint instanceof Array) {
                value = new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: Array.from(this.distributionPoint, (o25)=>o25.toSchema()
                    )
                });
            } else {
                value = this.distributionPoint.toSchema();
                value.idBlock.tagClass = 3;
                value.idBlock.tagNumber = 1;
            }
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    value
                ]
            }));
        }
        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                valueHex: new Uint8Array([
                    255
                ]).buffer
            }));
        }
        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                },
                valueHex: new Uint8Array([
                    255
                ]).buffer
            }));
        }
        if (this.onlySomeReasons !== undefined) {
            const buffer = new ArrayBuffer(1);
            const view = new Uint8Array(buffer);
            view[0] = this.onlySomeReasons;
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 3
                },
                valueHex: buffer
            }));
        }
        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 4
                },
                valueHex: new Uint8Array([
                    255
                ]).buffer
            }));
        }
        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 5
                },
                valueHex: new Uint8Array([
                    255
                ]).buffer
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const obj = {};
        if (this.distributionPoint) {
            if (this.distributionPoint instanceof Array) {
                obj.distributionPoint = Array.from(this.distributionPoint, (o26)=>o26.toJSON()
                );
            } else {
                obj.distributionPoint = this.distributionPoint.toJSON();
            }
        }
        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {
            obj.onlyContainsUserCerts = this.onlyContainsUserCerts;
        }
        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {
            obj.onlyContainsCACerts = this.onlyContainsCACerts;
        }
        if (ONLY_SOME_REASON in this) {
            obj.onlySomeReasons = this.onlySomeReasons;
        }
        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {
            obj.indirectCRL = this.indirectCRL;
        }
        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {
            obj.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;
        }
        return obj;
    }
}
IssuingDistributionPoint.CLASS_NAME = "IssuingDistributionPoint";
const BASE = "base";
const MINIMUM = "minimum";
const MAXIMUM = "maximum";
const CLEAR_PROPS$1h = [
    BASE,
    MINIMUM,
    MAXIMUM
];
class GeneralSubtree extends PkiObject {
    constructor(parameters = {}){
        super();
        this.base = getParametersValue(parameters, BASE, GeneralSubtree.defaultValues(BASE));
        this.minimum = getParametersValue(parameters, MINIMUM, GeneralSubtree.defaultValues(MINIMUM));
        if (MAXIMUM in parameters) {
            this.maximum = getParametersValue(parameters, MAXIMUM, GeneralSubtree.defaultValues(MAXIMUM));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case BASE:
                return new GeneralName();
            case MINIMUM:
                return 0;
            case MAXIMUM:
                return 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                GeneralName.schema(names.base || {}),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Integer({
                            name: names.minimum || EMPTY_STRING1
                        })
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new Integer({
                            name: names.maximum || EMPTY_STRING1
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1h);
        const asn1 = compareSchema(schema, schema, GeneralSubtree.schema({
            names: {
                base: {
                    names: {
                        blockName: BASE
                    }
                },
                minimum: MINIMUM,
                maximum: MAXIMUM
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.base = new GeneralName({
            schema: asn1.result.base
        });
        if (MINIMUM in asn1.result) {
            if (asn1.result.minimum.valueBlock.isHexOnly) this.minimum = asn1.result.minimum;
            else this.minimum = asn1.result.minimum.valueBlock.valueDec;
        }
        if (MAXIMUM in asn1.result) {
            if (asn1.result.maximum.valueBlock.isHexOnly) this.maximum = asn1.result.maximum;
            else this.maximum = asn1.result.maximum.valueBlock.valueDec;
        }
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.base.toSchema());
        if (this.minimum !== 0) {
            let valueMinimum = 0;
            if (this.minimum instanceof Integer) {
                valueMinimum = this.minimum;
            } else {
                valueMinimum = new Integer({
                    value: this.minimum
                });
            }
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    valueMinimum
                ]
            }));
        }
        if (MAXIMUM in this) {
            let valueMaximum = 0;
            if (this.maximum instanceof Integer) {
                valueMaximum = this.maximum;
            } else {
                valueMaximum = new Integer({
                    value: this.maximum
                });
            }
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: [
                    valueMaximum
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            base: this.base.toJSON()
        };
        if (this.minimum !== 0) {
            if (typeof this.minimum === "number") {
                res.minimum = this.minimum;
            } else {
                res.minimum = this.minimum.toJSON();
            }
        }
        if (this.maximum !== undefined) {
            if (typeof this.maximum === "number") {
                res.maximum = this.maximum;
            } else {
                res.maximum = this.maximum.toJSON();
            }
        }
        return res;
    }
}
GeneralSubtree.CLASS_NAME = "GeneralSubtree";
const PERMITTED_SUBTREES = "permittedSubtrees";
const EXCLUDED_SUBTREES = "excludedSubtrees";
const CLEAR_PROPS$1g = [
    PERMITTED_SUBTREES,
    EXCLUDED_SUBTREES
];
class NameConstraints extends PkiObject {
    constructor(parameters = {}){
        super();
        if (PERMITTED_SUBTREES in parameters) {
            this.permittedSubtrees = getParametersValue(parameters, PERMITTED_SUBTREES, NameConstraints.defaultValues(PERMITTED_SUBTREES));
        }
        if (EXCLUDED_SUBTREES in parameters) {
            this.excludedSubtrees = getParametersValue(parameters, EXCLUDED_SUBTREES, NameConstraints.defaultValues(EXCLUDED_SUBTREES));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case PERMITTED_SUBTREES:
            case EXCLUDED_SUBTREES:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Repeated({
                            name: names.permittedSubtrees || EMPTY_STRING1,
                            value: GeneralSubtree.schema()
                        })
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new Repeated({
                            name: names.excludedSubtrees || EMPTY_STRING1,
                            value: GeneralSubtree.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1g);
        const asn1 = compareSchema(schema, schema, NameConstraints.schema({
            names: {
                permittedSubtrees: PERMITTED_SUBTREES,
                excludedSubtrees: EXCLUDED_SUBTREES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (PERMITTED_SUBTREES in asn1.result) this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, (element)=>new GeneralSubtree({
                schema: element
            })
        );
        if (EXCLUDED_SUBTREES in asn1.result) this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, (element)=>new GeneralSubtree({
                schema: element
            })
        );
    }
    toSchema() {
        const outputArray = [];
        if (this.permittedSubtrees) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: Array.from(this.permittedSubtrees, (o27)=>o27.toSchema()
                )
            }));
        }
        if (this.excludedSubtrees) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: Array.from(this.excludedSubtrees, (o28)=>o28.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const object = {};
        if (this.permittedSubtrees) {
            object.permittedSubtrees = Array.from(this.permittedSubtrees, (o29)=>o29.toJSON()
            );
        }
        if (this.excludedSubtrees) {
            object.excludedSubtrees = Array.from(this.excludedSubtrees, (o30)=>o30.toJSON()
            );
        }
        return object;
    }
}
NameConstraints.CLASS_NAME = "NameConstraints";
const REQUIRE_EXPLICIT_POLICY = "requireExplicitPolicy";
const INHIBIT_POLICY_MAPPING = "inhibitPolicyMapping";
const CLEAR_PROPS$1f = [
    REQUIRE_EXPLICIT_POLICY,
    INHIBIT_POLICY_MAPPING
];
class PolicyConstraints extends PkiObject {
    constructor(parameters = {}){
        super();
        if (REQUIRE_EXPLICIT_POLICY in parameters) {
            this.requireExplicitPolicy = getParametersValue(parameters, REQUIRE_EXPLICIT_POLICY, PolicyConstraints.defaultValues(REQUIRE_EXPLICIT_POLICY));
        }
        if (INHIBIT_POLICY_MAPPING in parameters) {
            this.inhibitPolicyMapping = getParametersValue(parameters, INHIBIT_POLICY_MAPPING, PolicyConstraints.defaultValues(INHIBIT_POLICY_MAPPING));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case REQUIRE_EXPLICIT_POLICY:
                return 0;
            case INHIBIT_POLICY_MAPPING:
                return 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Primitive({
                    name: names.requireExplicitPolicy || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    }
                }),
                new Primitive({
                    name: names.inhibitPolicyMapping || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1f);
        const asn1 = compareSchema(schema, schema, PolicyConstraints.schema({
            names: {
                requireExplicitPolicy: REQUIRE_EXPLICIT_POLICY,
                inhibitPolicyMapping: INHIBIT_POLICY_MAPPING
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (REQUIRE_EXPLICIT_POLICY in asn1.result) {
            const field1 = asn1.result.requireExplicitPolicy;
            field1.idBlock.tagClass = 1;
            field1.idBlock.tagNumber = 2;
            const ber1 = field1.toBER(false);
            const int1 = fromBER(ber1);
            AsnError.assert(int1, "Integer");
            this.requireExplicitPolicy = int1.result.valueBlock.valueDec;
        }
        if (INHIBIT_POLICY_MAPPING in asn1.result) {
            const field2 = asn1.result.inhibitPolicyMapping;
            field2.idBlock.tagClass = 1;
            field2.idBlock.tagNumber = 2;
            const ber2 = field2.toBER(false);
            const int2 = fromBER(ber2);
            AsnError.assert(int2, "Integer");
            this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;
        }
    }
    toSchema() {
        const outputArray = [];
        if (REQUIRE_EXPLICIT_POLICY in this) {
            const int1 = new Integer({
                value: this.requireExplicitPolicy
            });
            int1.idBlock.tagClass = 3;
            int1.idBlock.tagNumber = 0;
            outputArray.push(int1);
        }
        if (INHIBIT_POLICY_MAPPING in this) {
            const int2 = new Integer({
                value: this.inhibitPolicyMapping
            });
            int2.idBlock.tagClass = 3;
            int2.idBlock.tagNumber = 1;
            outputArray.push(int2);
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {};
        if (REQUIRE_EXPLICIT_POLICY in this) {
            res.requireExplicitPolicy = this.requireExplicitPolicy;
        }
        if (INHIBIT_POLICY_MAPPING in this) {
            res.inhibitPolicyMapping = this.inhibitPolicyMapping;
        }
        return res;
    }
}
PolicyConstraints.CLASS_NAME = "PolicyConstraints";
const ISSUER_DOMAIN_POLICY = "issuerDomainPolicy";
const SUBJECT_DOMAIN_POLICY = "subjectDomainPolicy";
const CLEAR_PROPS$1e = [
    ISSUER_DOMAIN_POLICY,
    SUBJECT_DOMAIN_POLICY
];
class PolicyMapping extends PkiObject {
    constructor(parameters = {}){
        super();
        this.issuerDomainPolicy = getParametersValue(parameters, ISSUER_DOMAIN_POLICY, PolicyMapping.defaultValues(ISSUER_DOMAIN_POLICY));
        this.subjectDomainPolicy = getParametersValue(parameters, SUBJECT_DOMAIN_POLICY, PolicyMapping.defaultValues(SUBJECT_DOMAIN_POLICY));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ISSUER_DOMAIN_POLICY:
                return EMPTY_STRING1;
            case SUBJECT_DOMAIN_POLICY:
                return EMPTY_STRING1;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.issuerDomainPolicy || EMPTY_STRING1
                }),
                new ObjectIdentifier({
                    name: names.subjectDomainPolicy || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1e);
        const asn1 = compareSchema(schema, schema, PolicyMapping.schema({
            names: {
                issuerDomainPolicy: ISSUER_DOMAIN_POLICY,
                subjectDomainPolicy: SUBJECT_DOMAIN_POLICY
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();
        this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.issuerDomainPolicy
                }),
                new ObjectIdentifier({
                    value: this.subjectDomainPolicy
                })
            ]
        });
    }
    toJSON() {
        return {
            issuerDomainPolicy: this.issuerDomainPolicy,
            subjectDomainPolicy: this.subjectDomainPolicy
        };
    }
}
PolicyMapping.CLASS_NAME = "PolicyMapping";
const MAPPINGS = "mappings";
const CLEAR_PROPS$1d = [
    MAPPINGS
];
class PolicyMappings extends PkiObject {
    constructor(parameters = {}){
        super();
        this.mappings = getParametersValue(parameters, MAPPINGS, PolicyMappings.defaultValues(MAPPINGS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case MAPPINGS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.mappings || EMPTY_STRING1,
                    value: PolicyMapping.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1d);
        const asn1 = compareSchema(schema, schema, PolicyMappings.schema({
            names: {
                mappings: MAPPINGS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.mappings = Array.from(asn1.result.mappings, (element)=>new PolicyMapping({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.mappings, (o31)=>o31.toSchema()
            )
        });
    }
    toJSON() {
        return {
            mappings: Array.from(this.mappings, (o32)=>o32.toJSON()
            )
        };
    }
}
PolicyMappings.CLASS_NAME = "PolicyMappings";
const NOT_BEFORE$1 = "notBefore";
const NOT_AFTER$1 = "notAfter";
const CLEAR_PROPS$1c = [
    NOT_BEFORE$1,
    NOT_AFTER$1
];
class PrivateKeyUsagePeriod extends PkiObject {
    constructor(parameters = {}){
        super();
        if (NOT_BEFORE$1 in parameters) {
            this.notBefore = getParametersValue(parameters, NOT_BEFORE$1, PrivateKeyUsagePeriod.defaultValues(NOT_BEFORE$1));
        }
        if (NOT_AFTER$1 in parameters) {
            this.notAfter = getParametersValue(parameters, NOT_AFTER$1, PrivateKeyUsagePeriod.defaultValues(NOT_AFTER$1));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case NOT_BEFORE$1:
                return new Date();
            case NOT_AFTER$1:
                return new Date();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Primitive({
                    name: names.notBefore || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    }
                }),
                new Primitive({
                    name: names.notAfter || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1c);
        const asn1 = compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({
            names: {
                notBefore: NOT_BEFORE$1,
                notAfter: NOT_AFTER$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (NOT_BEFORE$1 in asn1.result) {
            const localNotBefore = new GeneralizedTime();
            localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);
            this.notBefore = localNotBefore.toDate();
        }
        if (NOT_AFTER$1 in asn1.result) {
            const localNotAfter = new GeneralizedTime({
                valueHex: asn1.result.notAfter.valueBlock.valueHex
            });
            localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);
            this.notAfter = localNotAfter.toDate();
        }
    }
    toSchema() {
        const outputArray = [];
        if (NOT_BEFORE$1 in this) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                valueHex: new GeneralizedTime({
                    valueDate: this.notBefore
                }).valueBlock.valueHexView
            }));
        }
        if (NOT_AFTER$1 in this) {
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                valueHex: new GeneralizedTime({
                    valueDate: this.notAfter
                }).valueBlock.valueHexView
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {};
        if (this.notBefore) {
            res.notBefore = this.notBefore;
        }
        if (this.notAfter) {
            res.notAfter = this.notAfter;
        }
        return res;
    }
}
PrivateKeyUsagePeriod.CLASS_NAME = "PrivateKeyUsagePeriod";
const ID = "id";
const TYPE$2 = "type";
const VALUES = "values";
const QC_STATEMENT_CLEAR_PROPS = [
    ID,
    TYPE$2
];
const QC_STATEMENTS_CLEAR_PROPS = [
    VALUES
];
class QCStatement extends PkiObject {
    constructor(parameters = {}){
        super();
        this.id = getParametersValue(parameters, ID, QCStatement.defaultValues(ID));
        if (TYPE$2 in parameters) {
            this.type = getParametersValue(parameters, TYPE$2, QCStatement.defaultValues(TYPE$2));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ID:
                return EMPTY_STRING1;
            case TYPE$2:
                return new Null();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case ID:
                return memberValue === EMPTY_STRING1;
            case TYPE$2:
                return memberValue instanceof Null;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.id || EMPTY_STRING1
                }),
                new Any({
                    name: names.type || EMPTY_STRING1,
                    optional: true
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, QC_STATEMENT_CLEAR_PROPS);
        const asn1 = compareSchema(schema, schema, QCStatement.schema({
            names: {
                id: ID,
                type: TYPE$2
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.id = asn1.result.id.valueBlock.toString();
        if (TYPE$2 in asn1.result) this.type = asn1.result.type;
    }
    toSchema() {
        const value = [
            new ObjectIdentifier({
                value: this.id
            })
        ];
        if (TYPE$2 in this) value.push(this.type);
        return new Sequence({
            value
        });
    }
    toJSON() {
        const object = {
            id: this.id
        };
        if (this.type) {
            object.type = this.type.toJSON();
        }
        return object;
    }
}
QCStatement.CLASS_NAME = "QCStatement";
class QCStatements extends PkiObject {
    constructor(parameters = {}){
        super();
        this.values = getParametersValue(parameters, VALUES, QCStatements.defaultValues(VALUES));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VALUES:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VALUES:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.values || EMPTY_STRING1,
                    value: QCStatement.schema(names.value || {})
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, QC_STATEMENTS_CLEAR_PROPS);
        const asn1 = compareSchema(schema, schema, QCStatements.schema({
            names: {
                values: VALUES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.values = Array.from(asn1.result.values, (element)=>new QCStatement({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.values, (o33)=>o33.toSchema()
            )
        });
    }
    toJSON() {
        return {
            values: Array.from(this.values, (o34)=>o34.toJSON()
            )
        };
    }
}
QCStatements.CLASS_NAME = "QCStatements";
var _a1;
class ECNamedCurves {
    static register(name, id, size) {
        this.namedCurves[name.toLowerCase()] = this.namedCurves[id] = {
            name,
            id,
            size
        };
    }
    static find(nameOrId) {
        return this.namedCurves[nameOrId.toLowerCase()] || null;
    }
}
_a1 = ECNamedCurves;
ECNamedCurves.namedCurves = {};
(()=>{
    _a1.register("P-256", "1.2.840.10045.3.1.7", 32);
    _a1.register("P-384", "1.3.132.0.34", 48);
    _a1.register("P-521", "1.3.132.0.35", 66);
    _a1.register("brainpoolP256r1", "1.3.36.3.3.2.8.1.1.7", 32);
    _a1.register("brainpoolP384r1", "1.3.36.3.3.2.8.1.1.11", 48);
    _a1.register("brainpoolP512r1", "1.3.36.3.3.2.8.1.1.13", 64);
})();
const X = "x";
const Y = "y";
const NAMED_CURVE$1 = "namedCurve";
class ECPublicKey extends PkiObject {
    constructor(parameters = {}){
        super();
        this.x = getParametersValue(parameters, X, ECPublicKey.defaultValues(X));
        this.y = getParametersValue(parameters, Y, ECPublicKey.defaultValues(Y));
        this.namedCurve = getParametersValue(parameters, NAMED_CURVE$1, ECPublicKey.defaultValues(NAMED_CURVE$1));
        if (parameters.json) {
            this.fromJSON(parameters.json);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case X:
            case Y:
                return EMPTY_BUFFER1;
            case NAMED_CURVE$1:
                return EMPTY_STRING1;
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case X:
            case Y:
                return memberValue instanceof ArrayBuffer && isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName));
            case NAMED_CURVE$1:
                return typeof memberValue === "string" && memberValue === ECPublicKey.defaultValues(memberName);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema() {
        return new RawData();
    }
    fromSchema(schema1) {
        const view = BufferSourceConverter.toUint8Array(schema1);
        if (view[0] !== 4) {
            throw new Error("Object's schema was not verified against input data for ECPublicKey");
        }
        const namedCurve = ECNamedCurves.find(this.namedCurve);
        if (!namedCurve) {
            throw new Error(`Incorrect curve OID: ${this.namedCurve}`);
        }
        const coordinateLength = namedCurve.size;
        if (view.byteLength !== coordinateLength * 2 + 1) {
            throw new Error("Object's schema was not verified against input data for ECPublicKey");
        }
        this.namedCurve = namedCurve.name;
        this.x = view.slice(1, coordinateLength + 1).buffer;
        this.y = view.slice(1 + coordinateLength, coordinateLength * 2 + 1).buffer;
    }
    toSchema() {
        return new RawData({
            data: utilConcatBuf(new Uint8Array([
                4
            ]).buffer, this.x, this.y)
        });
    }
    toJSON() {
        const namedCurve = ECNamedCurves.find(this.namedCurve);
        return {
            crv: namedCurve ? namedCurve.name : this.namedCurve,
            x: toBase64(arrayBufferToString(this.x), true, true, false),
            y: toBase64(arrayBufferToString(this.y), true, true, false)
        };
    }
    fromJSON(json) {
        ParameterError.assert("json", json, "crv", "x", "y");
        let coordinateLength = 0;
        const namedCurve = ECNamedCurves.find(json.crv);
        if (namedCurve) {
            this.namedCurve = namedCurve.id;
            coordinateLength = namedCurve.size;
        }
        const xConvertBuffer = stringToArrayBuffer(fromBase64(json.x, true));
        if (xConvertBuffer.byteLength < coordinateLength) {
            this.x = new ArrayBuffer(coordinateLength);
            const view = new Uint8Array(this.x);
            const convertBufferView = new Uint8Array(xConvertBuffer);
            view.set(convertBufferView, 1);
        } else {
            this.x = xConvertBuffer.slice(0, coordinateLength);
        }
        const yConvertBuffer = stringToArrayBuffer(fromBase64(json.y, true));
        if (yConvertBuffer.byteLength < coordinateLength) {
            this.y = new ArrayBuffer(coordinateLength);
            const view = new Uint8Array(this.y);
            const convertBufferView = new Uint8Array(yConvertBuffer);
            view.set(convertBufferView, 1);
        } else {
            this.y = yConvertBuffer.slice(0, coordinateLength);
        }
    }
}
ECPublicKey.CLASS_NAME = "ECPublicKey";
const MODULUS$1 = "modulus";
const PUBLIC_EXPONENT$1 = "publicExponent";
const CLEAR_PROPS$1b = [
    MODULUS$1,
    PUBLIC_EXPONENT$1
];
class RSAPublicKey extends PkiObject {
    constructor(parameters = {}){
        super();
        this.modulus = getParametersValue(parameters, MODULUS$1, RSAPublicKey.defaultValues(MODULUS$1));
        this.publicExponent = getParametersValue(parameters, PUBLIC_EXPONENT$1, RSAPublicKey.defaultValues(PUBLIC_EXPONENT$1));
        if (parameters.json) {
            this.fromJSON(parameters.json);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case MODULUS$1:
                return new Integer();
            case PUBLIC_EXPONENT$1:
                return new Integer();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.modulus || EMPTY_STRING1
                }),
                new Integer({
                    name: names.publicExponent || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1b);
        const asn1 = compareSchema(schema, schema, RSAPublicKey.schema({
            names: {
                modulus: MODULUS$1,
                publicExponent: PUBLIC_EXPONENT$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.modulus = asn1.result.modulus.convertFromDER(256);
        this.publicExponent = asn1.result.publicExponent;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.modulus.convertToDER(),
                this.publicExponent
            ]
        });
    }
    toJSON() {
        return {
            n: Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),
            e: Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView)
        };
    }
    fromJSON(json) {
        ParameterError.assert("json", json, "n", "e");
        const array = stringToArrayBuffer(fromBase64(json.n, true));
        this.modulus = new Integer({
            valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength)))
        });
        this.publicExponent = new Integer({
            valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3)
        });
    }
}
RSAPublicKey.CLASS_NAME = "RSAPublicKey";
const ALGORITHM$1 = "algorithm";
const SUBJECT_PUBLIC_KEY = "subjectPublicKey";
const CLEAR_PROPS$1a = [
    ALGORITHM$1,
    SUBJECT_PUBLIC_KEY
];
class PublicKeyInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.algorithm = getParametersValue(parameters, ALGORITHM$1, PublicKeyInfo.defaultValues(ALGORITHM$1));
        this.subjectPublicKey = getParametersValue(parameters, SUBJECT_PUBLIC_KEY, PublicKeyInfo.defaultValues(SUBJECT_PUBLIC_KEY));
        const parsedKey = getParametersValue(parameters, "parsedKey", null);
        if (parsedKey) {
            this.parsedKey = parsedKey;
        }
        if (parameters.json) {
            this.fromJSON(parameters.json);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    get parsedKey() {
        if (this._parsedKey === undefined) {
            switch(this.algorithm.algorithmId){
                case "1.2.840.10045.2.1":
                    if ("algorithmParams" in this.algorithm) {
                        if (this.algorithm.algorithmParams.constructor.blockName() === ObjectIdentifier.blockName()) {
                            try {
                                this._parsedKey = new ECPublicKey({
                                    namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),
                                    schema: this.subjectPublicKey.valueBlock.valueHexView
                                });
                            } catch (ex) {}
                        }
                    }
                    break;
                case "1.2.840.113549.1.1.1":
                    {
                        const publicKeyASN1 = fromBER(this.subjectPublicKey.valueBlock.valueHexView);
                        if (publicKeyASN1.offset !== -1) {
                            try {
                                this._parsedKey = new RSAPublicKey({
                                    schema: publicKeyASN1.result
                                });
                            } catch (ex) {}
                        }
                    }
                    break;
            }
            this._parsedKey || (this._parsedKey = null);
        }
        return this._parsedKey || undefined;
    }
    set parsedKey(value) {
        this._parsedKey = value;
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ALGORITHM$1:
                return new AlgorithmIdentifier();
            case SUBJECT_PUBLIC_KEY:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.algorithm || {}),
                new BitString({
                    name: names.subjectPublicKey || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1a);
        const asn1 = compareSchema(schema, schema, PublicKeyInfo.schema({
            names: {
                algorithm: {
                    names: {
                        blockName: ALGORITHM$1
                    }
                },
                subjectPublicKey: SUBJECT_PUBLIC_KEY
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.algorithm = new AlgorithmIdentifier({
            schema: asn1.result.algorithm
        });
        this.subjectPublicKey = asn1.result.subjectPublicKey;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.algorithm.toSchema(),
                this.subjectPublicKey
            ]
        });
    }
    toJSON() {
        if (!this.parsedKey) {
            return {
                algorithm: this.algorithm.toJSON(),
                subjectPublicKey: this.subjectPublicKey.toJSON()
            };
        }
        const jwk = {};
        switch(this.algorithm.algorithmId){
            case "1.2.840.10045.2.1":
                jwk.kty = "EC";
                break;
            case "1.2.840.113549.1.1.1":
                jwk.kty = "RSA";
                break;
        }
        const publicKeyJWK = this.parsedKey.toJSON();
        Object.assign(jwk, publicKeyJWK);
        return jwk;
    }
    fromJSON(json) {
        if ("kty" in json) {
            switch(json.kty.toUpperCase()){
                case "EC":
                    this.parsedKey = new ECPublicKey({
                        json
                    });
                    this.algorithm = new AlgorithmIdentifier({
                        algorithmId: "1.2.840.10045.2.1",
                        algorithmParams: new ObjectIdentifier({
                            value: this.parsedKey.namedCurve
                        })
                    });
                    break;
                case "RSA":
                    this.parsedKey = new RSAPublicKey({
                        json
                    });
                    this.algorithm = new AlgorithmIdentifier({
                        algorithmId: "1.2.840.113549.1.1.1",
                        algorithmParams: new Null()
                    });
                    break;
                default:
                    throw new Error(`Invalid value for "kty" parameter: ${json.kty}`);
            }
            this.subjectPublicKey = new BitString({
                valueHex: this.parsedKey.toSchema().toBER(false)
            });
        }
    }
    async importKey(publicKey, crypto = getCrypto(true)) {
        try {
            if (!publicKey) {
                throw new Error("Need to provide publicKey input parameter");
            }
            const exportedKey = await crypto.exportKey("spki", publicKey);
            const asn1 = fromBER(exportedKey);
            try {
                this.fromSchema(asn1.result);
            } catch (exception) {
                throw new Error("Error during initializing object from schema");
            }
        } catch (e1) {
            const message6 = e1 instanceof Error ? e1.message : `${e1}`;
            throw new Error(`Error during exporting public key: ${message6}`);
        }
    }
}
PublicKeyInfo.CLASS_NAME = "PublicKeyInfo";
const VERSION$l = "version";
const PRIVATE_KEY$1 = "privateKey";
const NAMED_CURVE = "namedCurve";
const PUBLIC_KEY$1 = "publicKey";
const CLEAR_PROPS$19 = [
    VERSION$l,
    PRIVATE_KEY$1,
    NAMED_CURVE,
    PUBLIC_KEY$1
];
class ECPrivateKey extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$l, ECPrivateKey.defaultValues(VERSION$l));
        this.privateKey = getParametersValue(parameters, PRIVATE_KEY$1, ECPrivateKey.defaultValues(PRIVATE_KEY$1));
        if (NAMED_CURVE in parameters) {
            this.namedCurve = getParametersValue(parameters, NAMED_CURVE, ECPrivateKey.defaultValues(NAMED_CURVE));
        }
        if (PUBLIC_KEY$1 in parameters) {
            this.publicKey = getParametersValue(parameters, PUBLIC_KEY$1, ECPrivateKey.defaultValues(PUBLIC_KEY$1));
        }
        if (parameters.json) {
            this.fromJSON(parameters.json);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$l:
                return 1;
            case PRIVATE_KEY$1:
                return new OctetString();
            case NAMED_CURVE:
                return EMPTY_STRING1;
            case PUBLIC_KEY$1:
                return new ECPublicKey();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$l:
                return memberValue === ECPrivateKey.defaultValues(memberName);
            case PRIVATE_KEY$1:
                return memberValue.isEqual(ECPrivateKey.defaultValues(memberName));
            case NAMED_CURVE:
                return memberValue === EMPTY_STRING1;
            case PUBLIC_KEY$1:
                return ECPublicKey.compareWithDefault(NAMED_CURVE, memberValue.namedCurve) && ECPublicKey.compareWithDefault("x", memberValue.x) && ECPublicKey.compareWithDefault("y", memberValue.y);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                new OctetString({
                    name: names.privateKey || EMPTY_STRING1
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new ObjectIdentifier({
                            name: names.namedCurve || EMPTY_STRING1
                        })
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new BitString({
                            name: names.publicKey || EMPTY_STRING1
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$19);
        const asn1 = compareSchema(schema, schema, ECPrivateKey.schema({
            names: {
                version: VERSION$l,
                privateKey: PRIVATE_KEY$1,
                namedCurve: NAMED_CURVE,
                publicKey: PUBLIC_KEY$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        this.privateKey = asn1.result.privateKey;
        if (NAMED_CURVE in asn1.result) {
            this.namedCurve = asn1.result.namedCurve.valueBlock.toString();
        }
        if (PUBLIC_KEY$1 in asn1.result) {
            const publicKeyData = {
                schema: asn1.result.publicKey.valueBlock.valueHex
            };
            if (NAMED_CURVE in this) {
                publicKeyData.namedCurve = this.namedCurve;
            }
            this.publicKey = new ECPublicKey(publicKeyData);
        }
    }
    toSchema() {
        const outputArray = [
            new Integer({
                value: this.version
            }),
            this.privateKey
        ];
        if (this.namedCurve) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    new ObjectIdentifier({
                        value: this.namedCurve
                    })
                ]
            }));
        }
        if (this.publicKey) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: [
                    new BitString({
                        valueHex: this.publicKey.toSchema().toBER(false)
                    })
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        if (!this.namedCurve || ECPrivateKey.compareWithDefault(NAMED_CURVE, this.namedCurve)) {
            throw new Error("Not enough information for making JSON: absent \"namedCurve\" value");
        }
        const curve = ECNamedCurves.find(this.namedCurve);
        const privateKeyJSON = {
            crv: curve ? curve.name : this.namedCurve,
            d: Convert.ToBase64Url(this.privateKey.valueBlock.valueHexView)
        };
        if (this.publicKey) {
            const publicKeyJSON = this.publicKey.toJSON();
            privateKeyJSON.x = publicKeyJSON.x;
            privateKeyJSON.y = publicKeyJSON.y;
        }
        return privateKeyJSON;
    }
    fromJSON(json) {
        ParameterError.assert("json", json, "crv", "d");
        let coordinateLength = 0;
        const curve = ECNamedCurves.find(json.crv);
        if (curve) {
            this.namedCurve = curve.id;
            coordinateLength = curve.size;
        }
        const convertBuffer = Convert.FromBase64Url(json.d);
        if (convertBuffer.byteLength < coordinateLength) {
            const buffer = new ArrayBuffer(coordinateLength);
            const view = new Uint8Array(buffer);
            const convertBufferView = new Uint8Array(convertBuffer);
            view.set(convertBufferView, 1);
            this.privateKey = new OctetString({
                valueHex: buffer
            });
        } else {
            this.privateKey = new OctetString({
                valueHex: convertBuffer.slice(0, coordinateLength)
            });
        }
        if (json.x && json.y) {
            this.publicKey = new ECPublicKey({
                json
            });
        }
    }
}
ECPrivateKey.CLASS_NAME = "ECPrivateKey";
const PRIME = "prime";
const EXPONENT = "exponent";
const COEFFICIENT$1 = "coefficient";
const CLEAR_PROPS$18 = [
    PRIME,
    EXPONENT,
    COEFFICIENT$1
];
class OtherPrimeInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.prime = getParametersValue(parameters, PRIME, OtherPrimeInfo.defaultValues(PRIME));
        this.exponent = getParametersValue(parameters, EXPONENT, OtherPrimeInfo.defaultValues(EXPONENT));
        this.coefficient = getParametersValue(parameters, COEFFICIENT$1, OtherPrimeInfo.defaultValues(COEFFICIENT$1));
        if (parameters.json) {
            this.fromJSON(parameters.json);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case PRIME:
                return new Integer();
            case EXPONENT:
                return new Integer();
            case COEFFICIENT$1:
                return new Integer();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.prime || EMPTY_STRING1
                }),
                new Integer({
                    name: names.exponent || EMPTY_STRING1
                }),
                new Integer({
                    name: names.coefficient || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$18);
        const asn1 = compareSchema(schema, schema, OtherPrimeInfo.schema({
            names: {
                prime: PRIME,
                exponent: EXPONENT,
                coefficient: COEFFICIENT$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.prime = asn1.result.prime.convertFromDER();
        this.exponent = asn1.result.exponent.convertFromDER();
        this.coefficient = asn1.result.coefficient.convertFromDER();
    }
    toSchema() {
        return new Sequence({
            value: [
                this.prime.convertToDER(),
                this.exponent.convertToDER(),
                this.coefficient.convertToDER()
            ]
        });
    }
    toJSON() {
        return {
            r: Convert.ToBase64Url(this.prime.valueBlock.valueHexView),
            d: Convert.ToBase64Url(this.exponent.valueBlock.valueHexView),
            t: Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView)
        };
    }
    fromJSON(json) {
        ParameterError.assert("json", json, "r", "d", "r");
        this.prime = new Integer({
            valueHex: Convert.FromBase64Url(json.r)
        });
        this.exponent = new Integer({
            valueHex: Convert.FromBase64Url(json.d)
        });
        this.coefficient = new Integer({
            valueHex: Convert.FromBase64Url(json.t)
        });
    }
}
OtherPrimeInfo.CLASS_NAME = "OtherPrimeInfo";
const VERSION$k = "version";
const MODULUS = "modulus";
const PUBLIC_EXPONENT = "publicExponent";
const PRIVATE_EXPONENT = "privateExponent";
const PRIME1 = "prime1";
const PRIME2 = "prime2";
const EXPONENT1 = "exponent1";
const EXPONENT2 = "exponent2";
const COEFFICIENT = "coefficient";
const OTHER_PRIME_INFOS = "otherPrimeInfos";
const CLEAR_PROPS$17 = [
    VERSION$k,
    MODULUS,
    PUBLIC_EXPONENT,
    PRIVATE_EXPONENT,
    PRIME1,
    PRIME2,
    EXPONENT1,
    EXPONENT2,
    COEFFICIENT,
    OTHER_PRIME_INFOS
];
class RSAPrivateKey extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$k, RSAPrivateKey.defaultValues(VERSION$k));
        this.modulus = getParametersValue(parameters, MODULUS, RSAPrivateKey.defaultValues(MODULUS));
        this.publicExponent = getParametersValue(parameters, PUBLIC_EXPONENT, RSAPrivateKey.defaultValues(PUBLIC_EXPONENT));
        this.privateExponent = getParametersValue(parameters, PRIVATE_EXPONENT, RSAPrivateKey.defaultValues(PRIVATE_EXPONENT));
        this.prime1 = getParametersValue(parameters, PRIME1, RSAPrivateKey.defaultValues(PRIME1));
        this.prime2 = getParametersValue(parameters, PRIME2, RSAPrivateKey.defaultValues(PRIME2));
        this.exponent1 = getParametersValue(parameters, EXPONENT1, RSAPrivateKey.defaultValues(EXPONENT1));
        this.exponent2 = getParametersValue(parameters, EXPONENT2, RSAPrivateKey.defaultValues(EXPONENT2));
        this.coefficient = getParametersValue(parameters, COEFFICIENT, RSAPrivateKey.defaultValues(COEFFICIENT));
        if (OTHER_PRIME_INFOS in parameters) {
            this.otherPrimeInfos = getParametersValue(parameters, OTHER_PRIME_INFOS, RSAPrivateKey.defaultValues(OTHER_PRIME_INFOS));
        }
        if (parameters.json) {
            this.fromJSON(parameters.json);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$k:
                return 0;
            case MODULUS:
                return new Integer();
            case PUBLIC_EXPONENT:
                return new Integer();
            case PRIVATE_EXPONENT:
                return new Integer();
            case PRIME1:
                return new Integer();
            case PRIME2:
                return new Integer();
            case EXPONENT1:
                return new Integer();
            case EXPONENT2:
                return new Integer();
            case COEFFICIENT:
                return new Integer();
            case OTHER_PRIME_INFOS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                new Integer({
                    name: names.modulus || EMPTY_STRING1
                }),
                new Integer({
                    name: names.publicExponent || EMPTY_STRING1
                }),
                new Integer({
                    name: names.privateExponent || EMPTY_STRING1
                }),
                new Integer({
                    name: names.prime1 || EMPTY_STRING1
                }),
                new Integer({
                    name: names.prime2 || EMPTY_STRING1
                }),
                new Integer({
                    name: names.exponent1 || EMPTY_STRING1
                }),
                new Integer({
                    name: names.exponent2 || EMPTY_STRING1
                }),
                new Integer({
                    name: names.coefficient || EMPTY_STRING1
                }),
                new Sequence({
                    optional: true,
                    value: [
                        new Repeated({
                            name: names.otherPrimeInfosName || EMPTY_STRING1,
                            value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$17);
        const asn1 = compareSchema(schema, schema, RSAPrivateKey.schema({
            names: {
                version: VERSION$k,
                modulus: MODULUS,
                publicExponent: PUBLIC_EXPONENT,
                privateExponent: PRIVATE_EXPONENT,
                prime1: PRIME1,
                prime2: PRIME2,
                exponent1: EXPONENT1,
                exponent2: EXPONENT2,
                coefficient: COEFFICIENT,
                otherPrimeInfo: {
                    names: {
                        blockName: OTHER_PRIME_INFOS
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        this.modulus = asn1.result.modulus.convertFromDER(256);
        this.publicExponent = asn1.result.publicExponent;
        this.privateExponent = asn1.result.privateExponent.convertFromDER(256);
        this.prime1 = asn1.result.prime1.convertFromDER(128);
        this.prime2 = asn1.result.prime2.convertFromDER(128);
        this.exponent1 = asn1.result.exponent1.convertFromDER(128);
        this.exponent2 = asn1.result.exponent2.convertFromDER(128);
        this.coefficient = asn1.result.coefficient.convertFromDER(128);
        if (OTHER_PRIME_INFOS in asn1.result) this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, (element)=>new OtherPrimeInfo({
                schema: element
            })
        );
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.version
        }));
        outputArray.push(this.modulus.convertToDER());
        outputArray.push(this.publicExponent);
        outputArray.push(this.privateExponent.convertToDER());
        outputArray.push(this.prime1.convertToDER());
        outputArray.push(this.prime2.convertToDER());
        outputArray.push(this.exponent1.convertToDER());
        outputArray.push(this.exponent2.convertToDER());
        outputArray.push(this.coefficient.convertToDER());
        if (this.otherPrimeInfos) {
            outputArray.push(new Sequence({
                value: Array.from(this.otherPrimeInfos, (o35)=>o35.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const jwk = {
            n: Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),
            e: Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),
            d: Convert.ToBase64Url(this.privateExponent.valueBlock.valueHexView),
            p: Convert.ToBase64Url(this.prime1.valueBlock.valueHexView),
            q: Convert.ToBase64Url(this.prime2.valueBlock.valueHexView),
            dp: Convert.ToBase64Url(this.exponent1.valueBlock.valueHexView),
            dq: Convert.ToBase64Url(this.exponent2.valueBlock.valueHexView),
            qi: Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView)
        };
        if (this.otherPrimeInfos) {
            jwk.oth = Array.from(this.otherPrimeInfos, (o36)=>o36.toJSON()
            );
        }
        return jwk;
    }
    fromJSON(json) {
        ParameterError.assert("json", json, "n", "e", "d", "p", "q", "dp", "dq", "qi");
        this.modulus = new Integer({
            valueHex: Convert.FromBase64Url(json.n)
        });
        this.publicExponent = new Integer({
            valueHex: Convert.FromBase64Url(json.e)
        });
        this.privateExponent = new Integer({
            valueHex: Convert.FromBase64Url(json.d)
        });
        this.prime1 = new Integer({
            valueHex: Convert.FromBase64Url(json.p)
        });
        this.prime2 = new Integer({
            valueHex: Convert.FromBase64Url(json.q)
        });
        this.exponent1 = new Integer({
            valueHex: Convert.FromBase64Url(json.dp)
        });
        this.exponent2 = new Integer({
            valueHex: Convert.FromBase64Url(json.dq)
        });
        this.coefficient = new Integer({
            valueHex: Convert.FromBase64Url(json.qi)
        });
        if (json.oth) {
            this.otherPrimeInfos = Array.from(json.oth, (element)=>new OtherPrimeInfo({
                    json: element
                })
            );
        }
    }
}
RSAPrivateKey.CLASS_NAME = "RSAPrivateKey";
const VERSION$j = "version";
const PRIVATE_KEY_ALGORITHM = "privateKeyAlgorithm";
const PRIVATE_KEY = "privateKey";
const ATTRIBUTES$5 = "attributes";
const PARSED_KEY = "parsedKey";
const CLEAR_PROPS$16 = [
    VERSION$j,
    PRIVATE_KEY_ALGORITHM,
    PRIVATE_KEY,
    ATTRIBUTES$5
];
class PrivateKeyInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$j, PrivateKeyInfo.defaultValues(VERSION$j));
        this.privateKeyAlgorithm = getParametersValue(parameters, PRIVATE_KEY_ALGORITHM, PrivateKeyInfo.defaultValues(PRIVATE_KEY_ALGORITHM));
        this.privateKey = getParametersValue(parameters, PRIVATE_KEY, PrivateKeyInfo.defaultValues(PRIVATE_KEY));
        if (ATTRIBUTES$5 in parameters) {
            this.attributes = getParametersValue(parameters, ATTRIBUTES$5, PrivateKeyInfo.defaultValues(ATTRIBUTES$5));
        }
        if (PARSED_KEY in parameters) {
            this.parsedKey = getParametersValue(parameters, PARSED_KEY, PrivateKeyInfo.defaultValues(PARSED_KEY));
        }
        if (parameters.json) {
            this.fromJSON(parameters.json);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$j:
                return 0;
            case PRIVATE_KEY_ALGORITHM:
                return new AlgorithmIdentifier();
            case PRIVATE_KEY:
                return new OctetString();
            case ATTRIBUTES$5:
                return [];
            case PARSED_KEY:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),
                new OctetString({
                    name: names.privateKey || EMPTY_STRING1
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Repeated({
                            name: names.attributes || EMPTY_STRING1,
                            value: Attribute.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$16);
        const asn1 = compareSchema(schema, schema, PrivateKeyInfo.schema({
            names: {
                version: VERSION$j,
                privateKeyAlgorithm: {
                    names: {
                        blockName: PRIVATE_KEY_ALGORITHM
                    }
                },
                privateKey: PRIVATE_KEY,
                attributes: ATTRIBUTES$5
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        this.privateKeyAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.privateKeyAlgorithm
        });
        this.privateKey = asn1.result.privateKey;
        if (ATTRIBUTES$5 in asn1.result) this.attributes = Array.from(asn1.result.attributes, (element)=>new Attribute({
                schema: element
            })
        );
        switch(this.privateKeyAlgorithm.algorithmId){
            case "1.2.840.113549.1.1.1":
                {
                    const privateKeyASN1 = fromBER(this.privateKey.valueBlock.valueHexView);
                    if (privateKeyASN1.offset !== -1) this.parsedKey = new RSAPrivateKey({
                        schema: privateKeyASN1.result
                    });
                }
                break;
            case "1.2.840.10045.2.1":
                if ("algorithmParams" in this.privateKeyAlgorithm) {
                    if (this.privateKeyAlgorithm.algorithmParams instanceof ObjectIdentifier) {
                        const privateKeyASN1 = fromBER(this.privateKey.valueBlock.valueHexView);
                        if (privateKeyASN1.offset !== -1) {
                            this.parsedKey = new ECPrivateKey({
                                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),
                                schema: privateKeyASN1.result
                            });
                        }
                    }
                }
                break;
        }
    }
    toSchema() {
        const outputArray = [
            new Integer({
                value: this.version
            }),
            this.privateKeyAlgorithm.toSchema(),
            this.privateKey
        ];
        if (this.attributes) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: Array.from(this.attributes, (o37)=>o37.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        if (!this.parsedKey) {
            const object = {
                version: this.version,
                privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),
                privateKey: this.privateKey.toJSON()
            };
            if (this.attributes) {
                object.attributes = Array.from(this.attributes, (o38)=>o38.toJSON()
                );
            }
            return object;
        }
        const jwk = {};
        switch(this.privateKeyAlgorithm.algorithmId){
            case "1.2.840.10045.2.1":
                jwk.kty = "EC";
                break;
            case "1.2.840.113549.1.1.1":
                jwk.kty = "RSA";
                break;
        }
        const publicKeyJWK = this.parsedKey.toJSON();
        Object.assign(jwk, publicKeyJWK);
        return jwk;
    }
    fromJSON(json) {
        if ("kty" in json) {
            switch(json.kty.toUpperCase()){
                case "EC":
                    this.parsedKey = new ECPrivateKey({
                        json
                    });
                    this.privateKeyAlgorithm = new AlgorithmIdentifier({
                        algorithmId: "1.2.840.10045.2.1",
                        algorithmParams: new ObjectIdentifier({
                            value: this.parsedKey.namedCurve
                        })
                    });
                    break;
                case "RSA":
                    this.parsedKey = new RSAPrivateKey({
                        json
                    });
                    this.privateKeyAlgorithm = new AlgorithmIdentifier({
                        algorithmId: "1.2.840.113549.1.1.1",
                        algorithmParams: new Null()
                    });
                    break;
                default:
                    throw new Error(`Invalid value for "kty" parameter: ${json.kty}`);
            }
            this.privateKey = new OctetString({
                valueHex: this.parsedKey.toSchema().toBER(false)
            });
        }
    }
}
PrivateKeyInfo.CLASS_NAME = "PrivateKeyInfo";
const CONTENT_TYPE$1 = "contentType";
const CONTENT_ENCRYPTION_ALGORITHM = "contentEncryptionAlgorithm";
const ENCRYPTED_CONTENT = "encryptedContent";
const CLEAR_PROPS$15 = [
    CONTENT_TYPE$1,
    CONTENT_ENCRYPTION_ALGORITHM,
    ENCRYPTED_CONTENT
];
class EncryptedContentInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.contentType = getParametersValue(parameters, CONTENT_TYPE$1, EncryptedContentInfo.defaultValues(CONTENT_TYPE$1));
        this.contentEncryptionAlgorithm = getParametersValue(parameters, CONTENT_ENCRYPTION_ALGORITHM, EncryptedContentInfo.defaultValues(CONTENT_ENCRYPTION_ALGORITHM));
        if (ENCRYPTED_CONTENT in parameters && parameters.encryptedContent) {
            this.encryptedContent = parameters.encryptedContent;
            if (this.encryptedContent.idBlock.tagClass === 1 && this.encryptedContent.idBlock.tagNumber === 4) {
                if (this.encryptedContent.idBlock.isConstructed === false) {
                    const constrString = new OctetString({
                        idBlock: {
                            isConstructed: true
                        },
                        isConstructed: true
                    });
                    let offset = 0;
                    const valueHex = this.encryptedContent.valueBlock.valueHexView.slice().buffer;
                    let length = valueHex.byteLength;
                    while(length > 0){
                        const pieceView = new Uint8Array(valueHex, offset, offset + 1024 > valueHex.byteLength ? valueHex.byteLength - offset : 1024);
                        const _array = new ArrayBuffer(pieceView.length);
                        const _view = new Uint8Array(_array);
                        for(let i93 = 0; i93 < _view.length; i93++)_view[i93] = pieceView[i93];
                        constrString.valueBlock.value.push(new OctetString({
                            valueHex: _array
                        }));
                        length -= pieceView.length;
                        offset += pieceView.length;
                    }
                    this.encryptedContent = constrString;
                }
            }
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CONTENT_TYPE$1:
                return EMPTY_STRING1;
            case CONTENT_ENCRYPTION_ALGORITHM:
                return new AlgorithmIdentifier();
            case ENCRYPTED_CONTENT:
                return new OctetString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case CONTENT_TYPE$1:
                return memberValue === EMPTY_STRING1;
            case CONTENT_ENCRYPTION_ALGORITHM:
                return memberValue.algorithmId === EMPTY_STRING1 && "algorithmParams" in memberValue === false;
            case ENCRYPTED_CONTENT:
                return memberValue.isEqual(EncryptedContentInfo.defaultValues(ENCRYPTED_CONTENT));
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.contentType || EMPTY_STRING1
                }),
                AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),
                new Choice({
                    value: [
                        new Constructed({
                            name: names.encryptedContent || EMPTY_STRING1,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 0
                            },
                            value: [
                                new Repeated({
                                    value: new OctetString()
                                })
                            ]
                        }),
                        new Primitive({
                            name: names.encryptedContent || EMPTY_STRING1,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 0
                            }
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$15);
        const asn1 = compareSchema(schema, schema, EncryptedContentInfo.schema({
            names: {
                contentType: CONTENT_TYPE$1,
                contentEncryptionAlgorithm: {
                    names: {
                        blockName: CONTENT_ENCRYPTION_ALGORITHM
                    }
                },
                encryptedContent: ENCRYPTED_CONTENT
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.contentType = asn1.result.contentType.valueBlock.toString();
        this.contentEncryptionAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.contentEncryptionAlgorithm
        });
        if (ENCRYPTED_CONTENT in asn1.result) {
            this.encryptedContent = asn1.result.encryptedContent;
            this.encryptedContent.idBlock.tagClass = 1;
            this.encryptedContent.idBlock.tagNumber = 4;
        }
    }
    toSchema() {
        const sequenceLengthBlock = {
            isIndefiniteForm: false
        };
        const outputArray = [];
        outputArray.push(new ObjectIdentifier({
            value: this.contentType
        }));
        outputArray.push(this.contentEncryptionAlgorithm.toSchema());
        if (this.encryptedContent) {
            sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;
            const encryptedValue = this.encryptedContent;
            encryptedValue.idBlock.tagClass = 3;
            encryptedValue.idBlock.tagNumber = 0;
            encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;
            outputArray.push(encryptedValue);
        }
        return new Sequence({
            lenBlock: sequenceLengthBlock,
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            contentType: this.contentType,
            contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()
        };
        if (this.encryptedContent) {
            res.encryptedContent = this.encryptedContent.toJSON();
        }
        return res;
    }
    getEncryptedContent() {
        if (!this.encryptedContent) {
            throw new Error("Parameter 'encryptedContent' is undefined");
        }
        return OctetString.prototype.getValue.call(this.encryptedContent);
    }
}
EncryptedContentInfo.CLASS_NAME = "EncryptedContentInfo";
const HASH_ALGORITHM$4 = "hashAlgorithm";
const MASK_GEN_ALGORITHM$1 = "maskGenAlgorithm";
const SALT_LENGTH = "saltLength";
const TRAILER_FIELD = "trailerField";
const CLEAR_PROPS$14 = [
    HASH_ALGORITHM$4,
    MASK_GEN_ALGORITHM$1,
    SALT_LENGTH,
    TRAILER_FIELD
];
class RSASSAPSSParams extends PkiObject {
    constructor(parameters = {}){
        super();
        this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM$4, RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4));
        this.maskGenAlgorithm = getParametersValue(parameters, MASK_GEN_ALGORITHM$1, RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1));
        this.saltLength = getParametersValue(parameters, SALT_LENGTH, RSASSAPSSParams.defaultValues(SALT_LENGTH));
        this.trailerField = getParametersValue(parameters, TRAILER_FIELD, RSASSAPSSParams.defaultValues(TRAILER_FIELD));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case HASH_ALGORITHM$4:
                return new AlgorithmIdentifier({
                    algorithmId: "1.3.14.3.2.26",
                    algorithmParams: new Null()
                });
            case MASK_GEN_ALGORITHM$1:
                return new AlgorithmIdentifier({
                    algorithmId: "1.2.840.113549.1.1.8",
                    algorithmParams: new AlgorithmIdentifier({
                        algorithmId: "1.3.14.3.2.26",
                        algorithmParams: new Null()
                    }).toSchema()
                });
            case SALT_LENGTH:
                return 20;
            case TRAILER_FIELD:
                return 1;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    optional: true,
                    value: [
                        AlgorithmIdentifier.schema(names.hashAlgorithm || {})
                    ]
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    optional: true,
                    value: [
                        AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})
                    ]
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    optional: true,
                    value: [
                        new Integer({
                            name: names.saltLength || EMPTY_STRING1
                        })
                    ]
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 3
                    },
                    optional: true,
                    value: [
                        new Integer({
                            name: names.trailerField || EMPTY_STRING1
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$14);
        const asn1 = compareSchema(schema, schema, RSASSAPSSParams.schema({
            names: {
                hashAlgorithm: {
                    names: {
                        blockName: HASH_ALGORITHM$4
                    }
                },
                maskGenAlgorithm: {
                    names: {
                        blockName: MASK_GEN_ALGORITHM$1
                    }
                },
                saltLength: SALT_LENGTH,
                trailerField: TRAILER_FIELD
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (HASH_ALGORITHM$4 in asn1.result) this.hashAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.hashAlgorithm
        });
        if (MASK_GEN_ALGORITHM$1 in asn1.result) this.maskGenAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.maskGenAlgorithm
        });
        if (SALT_LENGTH in asn1.result) this.saltLength = asn1.result.saltLength.valueBlock.valueDec;
        if (TRAILER_FIELD in asn1.result) this.trailerField = asn1.result.trailerField.valueBlock.valueDec;
    }
    toSchema() {
        const outputArray = [];
        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    this.hashAlgorithm.toSchema()
                ]
            }));
        }
        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: [
                    this.maskGenAlgorithm.toSchema()
                ]
            }));
        }
        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                },
                value: [
                    new Integer({
                        value: this.saltLength
                    })
                ]
            }));
        }
        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 3
                },
                value: [
                    new Integer({
                        value: this.trailerField
                    })
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {};
        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {
            res.hashAlgorithm = this.hashAlgorithm.toJSON();
        }
        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {
            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();
        }
        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {
            res.saltLength = this.saltLength;
        }
        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {
            res.trailerField = this.trailerField;
        }
        return res;
    }
}
RSASSAPSSParams.CLASS_NAME = "RSASSAPSSParams";
const SALT = "salt";
const ITERATION_COUNT = "iterationCount";
const KEY_LENGTH = "keyLength";
const PRF = "prf";
const CLEAR_PROPS$13 = [
    SALT,
    ITERATION_COUNT,
    KEY_LENGTH,
    PRF
];
class PBKDF2Params extends PkiObject {
    constructor(parameters = {}){
        super();
        this.salt = getParametersValue(parameters, SALT, PBKDF2Params.defaultValues(SALT));
        this.iterationCount = getParametersValue(parameters, ITERATION_COUNT, PBKDF2Params.defaultValues(ITERATION_COUNT));
        if (KEY_LENGTH in parameters) {
            this.keyLength = getParametersValue(parameters, KEY_LENGTH, PBKDF2Params.defaultValues(KEY_LENGTH));
        }
        if (PRF in parameters) {
            this.prf = getParametersValue(parameters, PRF, PBKDF2Params.defaultValues(PRF));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case SALT:
                return {};
            case ITERATION_COUNT:
                return -1;
            case KEY_LENGTH:
                return 0;
            case PRF:
                return new AlgorithmIdentifier({
                    algorithmId: "1.3.14.3.2.26",
                    algorithmParams: new Null()
                });
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Choice({
                    value: [
                        new OctetString({
                            name: names.saltPrimitive || EMPTY_STRING1
                        }),
                        AlgorithmIdentifier.schema(names.saltConstructed || {})
                    ]
                }),
                new Integer({
                    name: names.iterationCount || EMPTY_STRING1
                }),
                new Integer({
                    name: names.keyLength || EMPTY_STRING1,
                    optional: true
                }),
                AlgorithmIdentifier.schema(names.prf || {
                    names: {
                        optional: true
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$13);
        const asn1 = compareSchema(schema, schema, PBKDF2Params.schema({
            names: {
                saltPrimitive: SALT,
                saltConstructed: {
                    names: {
                        blockName: SALT
                    }
                },
                iterationCount: ITERATION_COUNT,
                keyLength: KEY_LENGTH,
                prf: {
                    names: {
                        blockName: PRF,
                        optional: true
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.salt = asn1.result.salt;
        this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;
        if (KEY_LENGTH in asn1.result) this.keyLength = asn1.result.keyLength.valueBlock.valueDec;
        if (PRF in asn1.result) this.prf = new AlgorithmIdentifier({
            schema: asn1.result.prf
        });
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.salt);
        outputArray.push(new Integer({
            value: this.iterationCount
        }));
        if (KEY_LENGTH in this) {
            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength) outputArray.push(new Integer({
                value: this.keyLength
            }));
        }
        if (this.prf) {
            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false) outputArray.push(this.prf.toSchema());
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            salt: this.salt.toJSON(),
            iterationCount: this.iterationCount
        };
        if (KEY_LENGTH in this) {
            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength) res.keyLength = this.keyLength;
        }
        if (this.prf) {
            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false) res.prf = this.prf.toJSON();
        }
        return res;
    }
}
PBKDF2Params.CLASS_NAME = "PBKDF2Params";
const KEY_DERIVATION_FUNC = "keyDerivationFunc";
const ENCRYPTION_SCHEME = "encryptionScheme";
const CLEAR_PROPS$12 = [
    KEY_DERIVATION_FUNC,
    ENCRYPTION_SCHEME
];
class PBES2Params extends PkiObject {
    constructor(parameters = {}){
        super();
        this.keyDerivationFunc = getParametersValue(parameters, KEY_DERIVATION_FUNC, PBES2Params.defaultValues(KEY_DERIVATION_FUNC));
        this.encryptionScheme = getParametersValue(parameters, ENCRYPTION_SCHEME, PBES2Params.defaultValues(ENCRYPTION_SCHEME));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case KEY_DERIVATION_FUNC:
                return new AlgorithmIdentifier();
            case ENCRYPTION_SCHEME:
                return new AlgorithmIdentifier();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.keyDerivationFunc || {}),
                AlgorithmIdentifier.schema(names.encryptionScheme || {})
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$12);
        const asn1 = compareSchema(schema, schema, PBES2Params.schema({
            names: {
                keyDerivationFunc: {
                    names: {
                        blockName: KEY_DERIVATION_FUNC
                    }
                },
                encryptionScheme: {
                    names: {
                        blockName: ENCRYPTION_SCHEME
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.keyDerivationFunc = new AlgorithmIdentifier({
            schema: asn1.result.keyDerivationFunc
        });
        this.encryptionScheme = new AlgorithmIdentifier({
            schema: asn1.result.encryptionScheme
        });
    }
    toSchema() {
        return new Sequence({
            value: [
                this.keyDerivationFunc.toSchema(),
                this.encryptionScheme.toSchema()
            ]
        });
    }
    toJSON() {
        return {
            keyDerivationFunc: this.keyDerivationFunc.toJSON(),
            encryptionScheme: this.encryptionScheme.toJSON()
        };
    }
}
PBES2Params.CLASS_NAME = "PBES2Params";
class AbstractCryptoEngine {
    constructor(parameters){
        this.crypto = parameters.crypto;
        this.subtle = "webkitSubtle" in parameters.crypto ? parameters.crypto.webkitSubtle : parameters.crypto.subtle;
        this.name = getParametersValue(parameters, "name", EMPTY_STRING1);
    }
    async encrypt(...args) {
        return this.subtle.encrypt(...args);
    }
    async decrypt(...args) {
        return this.subtle.decrypt(...args);
    }
    sign(...args) {
        return this.subtle.sign(...args);
    }
    async verify(...args) {
        return this.subtle.verify(...args);
    }
    async digest(...args) {
        return this.subtle.digest(...args);
    }
    async generateKey(...args) {
        return this.subtle.generateKey(...args);
    }
    async deriveKey(...args) {
        return this.subtle.deriveKey(...args);
    }
    async deriveBits(...args) {
        return this.subtle.deriveBits(...args);
    }
    async wrapKey(...args) {
        return this.subtle.wrapKey(...args);
    }
    async unwrapKey(...args) {
        return this.subtle.unwrapKey(...args);
    }
    exportKey(...args) {
        return this.subtle.exportKey(...args);
    }
    importKey(...args) {
        return this.subtle.importKey(...args);
    }
    getRandomValues(array) {
        return this.crypto.getRandomValues(array);
    }
}
async function makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount) {
    let u1;
    let v;
    const result = [];
    switch(hashAlgorithm.toUpperCase()){
        case "SHA-1":
            u1 = 20;
            v = 64;
            break;
        case "SHA-256":
            u1 = 32;
            v = 64;
            break;
        case "SHA-384":
            u1 = 48;
            v = 128;
            break;
        case "SHA-512":
            u1 = 64;
            v = 128;
            break;
        default:
            throw new Error("Unsupported hashing algorithm");
    }
    const passwordViewInitial = new Uint8Array(password);
    const passwordTransformed = new ArrayBuffer(password.byteLength * 2 + 2);
    const passwordTransformedView = new Uint8Array(passwordTransformed);
    for(let i94 = 0; i94 < passwordViewInitial.length; i94++){
        passwordTransformedView[i94 * 2] = 0;
        passwordTransformedView[i94 * 2 + 1] = passwordViewInitial[i94];
    }
    passwordTransformedView[passwordTransformedView.length - 2] = 0;
    passwordTransformedView[passwordTransformedView.length - 1] = 0;
    password = passwordTransformed.slice(0);
    const D = new ArrayBuffer(v);
    const dView = new Uint8Array(D);
    for(let i114 = 0; i114 < D.byteLength; i114++)dView[i114] = 3;
    const saltLength = salt.byteLength;
    const sLen = v * Math.ceil(saltLength / v);
    const S = new ArrayBuffer(sLen);
    const sView = new Uint8Array(S);
    const saltView = new Uint8Array(salt);
    for(let i2 = 0; i2 < sLen; i2++)sView[i2] = saltView[i2 % saltLength];
    const passwordLength = password.byteLength;
    const pLen = v * Math.ceil(passwordLength / v);
    const P = new ArrayBuffer(pLen);
    const pView = new Uint8Array(P);
    const passwordView = new Uint8Array(password);
    for(let i3 = 0; i3 < pLen; i3++)pView[i3] = passwordView[i3 % passwordLength];
    const sPlusPLength = S.byteLength + P.byteLength;
    let I = new ArrayBuffer(sPlusPLength);
    let iView = new Uint8Array(I);
    iView.set(sView);
    iView.set(pView, sView.length);
    const c = Math.ceil((keyLength >> 3) / u1);
    let internalSequence = Promise.resolve(I);
    for(let i4 = 0; i4 <= c; i4++){
        internalSequence = internalSequence.then((_I)=>{
            const dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);
            const dAndIView = new Uint8Array(dAndI);
            dAndIView.set(dView);
            dAndIView.set(iView, dView.length);
            return dAndI;
        });
        for(let j2 = 0; j2 < iterationCount; j2++)internalSequence = internalSequence.then((roundBuffer)=>cryptoEngine.digest({
                name: hashAlgorithm
            }, new Uint8Array(roundBuffer))
        );
        internalSequence = internalSequence.then((roundBuffer)=>{
            const B = new ArrayBuffer(v);
            const bView = new Uint8Array(B);
            for(let j = 0; j < B.byteLength; j++)bView[j] = roundBuffer[j % roundBuffer.byteLength];
            const k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);
            const iRound = [];
            let sliceStart = 0;
            let sliceLength = v;
            for(let j1 = 0; j1 < k; j1++){
                const chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));
                sliceStart += v;
                if (sliceStart + v > I.byteLength) sliceLength = I.byteLength - sliceStart;
                let x = 511;
                for(let l = B.byteLength - 1; l >= 0; l--){
                    x >>= 8;
                    x += bView[l] + chunk[l];
                    chunk[l] = x & 255;
                }
                iRound.push(...chunk);
            }
            I = new ArrayBuffer(iRound.length);
            iView = new Uint8Array(I);
            iView.set(iRound);
            result.push(...new Uint8Array(roundBuffer));
            return I;
        });
    }
    internalSequence = internalSequence.then(()=>{
        const resultBuffer = new ArrayBuffer(keyLength >> 3);
        const resultView = new Uint8Array(resultBuffer);
        resultView.set(new Uint8Array(result).slice(0, keyLength >> 3));
        return resultBuffer;
    });
    return internalSequence;
}
function prepareAlgorithm(data) {
    const res = typeof data === "string" ? {
        name: data
    } : data;
    if ("hash" in res) {
        return {
            ...res,
            hash: prepareAlgorithm(res.hash)
        };
    }
    return res;
}
class CryptoEngine extends AbstractCryptoEngine {
    async importKey(format, keyData, algorithm, extractable, keyUsages) {
        var _a11, _b, _c, _d, _e, _f;
        let jwk = {};
        const alg = prepareAlgorithm(algorithm);
        switch(format.toLowerCase()){
            case "raw":
                return this.subtle.importKey("raw", keyData, algorithm, extractable, keyUsages);
            case "spki":
                {
                    const asn1 = fromBER(BufferSourceConverter.toArrayBuffer(keyData));
                    AsnError.assert(asn1, "keyData");
                    const publicKeyInfo = new PublicKeyInfo();
                    try {
                        publicKeyInfo.fromSchema(asn1.result);
                    } catch  {
                        throw new ArgumentError("Incorrect keyData");
                    }
                    switch(alg.name.toUpperCase()){
                        case "RSA-PSS":
                            {
                                if (!alg.hash) {
                                    throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
                                }
                                switch(alg.hash.name.toUpperCase()){
                                    case "SHA-1":
                                        jwk.alg = "PS1";
                                        break;
                                    case "SHA-256":
                                        jwk.alg = "PS256";
                                        break;
                                    case "SHA-384":
                                        jwk.alg = "PS384";
                                        break;
                                    case "SHA-512":
                                        jwk.alg = "PS512";
                                        break;
                                    default:
                                        throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
                                }
                            }
                        case "RSASSA-PKCS1-V1_5":
                            {
                                keyUsages = [
                                    "verify"
                                ];
                                jwk.kty = "RSA";
                                jwk.ext = extractable;
                                jwk.key_ops = keyUsages;
                                if (publicKeyInfo.algorithm.algorithmId !== "1.2.840.113549.1.1.1") throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);
                                if (!jwk.alg) {
                                    if (!alg.hash) {
                                        throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
                                    }
                                    switch(alg.hash.name.toUpperCase()){
                                        case "SHA-1":
                                            jwk.alg = "RS1";
                                            break;
                                        case "SHA-256":
                                            jwk.alg = "RS256";
                                            break;
                                        case "SHA-384":
                                            jwk.alg = "RS384";
                                            break;
                                        case "SHA-512":
                                            jwk.alg = "RS512";
                                            break;
                                        default:
                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
                                    }
                                }
                                const publicKeyJSON = publicKeyInfo.toJSON();
                                Object.assign(jwk, publicKeyJSON);
                            }
                            break;
                        case "ECDSA":
                            keyUsages = [
                                "verify"
                            ];
                        case "ECDH":
                            {
                                jwk = {
                                    kty: "EC",
                                    ext: extractable,
                                    key_ops: keyUsages
                                };
                                if (publicKeyInfo.algorithm.algorithmId !== "1.2.840.10045.2.1") {
                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);
                                }
                                const publicKeyJSON = publicKeyInfo.toJSON();
                                Object.assign(jwk, publicKeyJSON);
                            }
                            break;
                        case "RSA-OAEP":
                            {
                                jwk.kty = "RSA";
                                jwk.ext = extractable;
                                jwk.key_ops = keyUsages;
                                if (this.name.toLowerCase() === "safari") jwk.alg = "RSA-OAEP";
                                else {
                                    if (!alg.hash) {
                                        throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
                                    }
                                    switch(alg.hash.name.toUpperCase()){
                                        case "SHA-1":
                                            jwk.alg = "RSA-OAEP";
                                            break;
                                        case "SHA-256":
                                            jwk.alg = "RSA-OAEP-256";
                                            break;
                                        case "SHA-384":
                                            jwk.alg = "RSA-OAEP-384";
                                            break;
                                        case "SHA-512":
                                            jwk.alg = "RSA-OAEP-512";
                                            break;
                                        default:
                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
                                    }
                                }
                                const publicKeyJSON = publicKeyInfo.toJSON();
                                Object.assign(jwk, publicKeyJSON);
                            }
                            break;
                        case "RSAES-PKCS1-V1_5":
                            {
                                jwk.kty = "RSA";
                                jwk.ext = extractable;
                                jwk.key_ops = keyUsages;
                                jwk.alg = "PS1";
                                const publicKeyJSON = publicKeyInfo.toJSON();
                                Object.assign(jwk, publicKeyJSON);
                            }
                            break;
                        default:
                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);
                    }
                }
                break;
            case "pkcs8":
                {
                    const privateKeyInfo = new PrivateKeyInfo();
                    const asn1 = fromBER(BufferSourceConverter.toArrayBuffer(keyData));
                    AsnError.assert(asn1, "keyData");
                    try {
                        privateKeyInfo.fromSchema(asn1.result);
                    } catch (ex) {
                        throw new Error("Incorrect keyData");
                    }
                    if (!privateKeyInfo.parsedKey) throw new Error("Incorrect keyData");
                    switch(alg.name.toUpperCase()){
                        case "RSA-PSS":
                            {
                                switch((_a11 = alg.hash) === null || _a11 === void 0 ? void 0 : _a11.name.toUpperCase()){
                                    case "SHA-1":
                                        jwk.alg = "PS1";
                                        break;
                                    case "SHA-256":
                                        jwk.alg = "PS256";
                                        break;
                                    case "SHA-384":
                                        jwk.alg = "PS384";
                                        break;
                                    case "SHA-512":
                                        jwk.alg = "PS512";
                                        break;
                                    default:
                                        throw new Error(`Incorrect hash algorithm: ${(_b = alg.hash) === null || _b === void 0 ? void 0 : _b.name.toUpperCase()}`);
                                }
                            }
                        case "RSASSA-PKCS1-V1_5":
                            {
                                keyUsages = [
                                    "sign"
                                ];
                                jwk.kty = "RSA";
                                jwk.ext = extractable;
                                jwk.key_ops = keyUsages;
                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== "1.2.840.113549.1.1.1") throw new Error(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);
                                if ("alg" in jwk === false) {
                                    switch((_c = alg.hash) === null || _c === void 0 ? void 0 : _c.name.toUpperCase()){
                                        case "SHA-1":
                                            jwk.alg = "RS1";
                                            break;
                                        case "SHA-256":
                                            jwk.alg = "RS256";
                                            break;
                                        case "SHA-384":
                                            jwk.alg = "RS384";
                                            break;
                                        case "SHA-512":
                                            jwk.alg = "RS512";
                                            break;
                                        default:
                                            throw new Error(`Incorrect hash algorithm: ${(_d = alg.hash) === null || _d === void 0 ? void 0 : _d.name.toUpperCase()}`);
                                    }
                                }
                                const privateKeyJSON = privateKeyInfo.toJSON();
                                Object.assign(jwk, privateKeyJSON);
                            }
                            break;
                        case "ECDSA":
                            keyUsages = [
                                "sign"
                            ];
                        case "ECDH":
                            {
                                jwk = {
                                    kty: "EC",
                                    ext: extractable,
                                    key_ops: keyUsages
                                };
                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== "1.2.840.10045.2.1") throw new Error(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);
                                const privateKeyJSON = privateKeyInfo.toJSON();
                                Object.assign(jwk, privateKeyJSON);
                            }
                            break;
                        case "RSA-OAEP":
                            {
                                jwk.kty = "RSA";
                                jwk.ext = extractable;
                                jwk.key_ops = keyUsages;
                                if (this.name.toLowerCase() === "safari") jwk.alg = "RSA-OAEP";
                                else {
                                    switch((_e = alg.hash) === null || _e === void 0 ? void 0 : _e.name.toUpperCase()){
                                        case "SHA-1":
                                            jwk.alg = "RSA-OAEP";
                                            break;
                                        case "SHA-256":
                                            jwk.alg = "RSA-OAEP-256";
                                            break;
                                        case "SHA-384":
                                            jwk.alg = "RSA-OAEP-384";
                                            break;
                                        case "SHA-512":
                                            jwk.alg = "RSA-OAEP-512";
                                            break;
                                        default:
                                            throw new Error(`Incorrect hash algorithm: ${(_f = alg.hash) === null || _f === void 0 ? void 0 : _f.name.toUpperCase()}`);
                                    }
                                }
                                const privateKeyJSON = privateKeyInfo.toJSON();
                                Object.assign(jwk, privateKeyJSON);
                            }
                            break;
                        case "RSAES-PKCS1-V1_5":
                            {
                                keyUsages = [
                                    "decrypt"
                                ];
                                jwk.kty = "RSA";
                                jwk.ext = extractable;
                                jwk.key_ops = keyUsages;
                                jwk.alg = "PS1";
                                const privateKeyJSON = privateKeyInfo.toJSON();
                                Object.assign(jwk, privateKeyJSON);
                            }
                            break;
                        default:
                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);
                    }
                }
                break;
            case "jwk":
                jwk = keyData;
                break;
            default:
                throw new Error(`Incorrect format: ${format}`);
        }
        if (this.name.toLowerCase() === "safari") {
            try {
                return this.subtle.importKey("jwk", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);
            } catch  {
                return this.subtle.importKey("jwk", jwk, algorithm, extractable, keyUsages);
            }
        }
        return this.subtle.importKey("jwk", jwk, algorithm, extractable, keyUsages);
    }
    async exportKey(format, key) {
        let jwk = await this.subtle.exportKey("jwk", key);
        if (this.name.toLowerCase() === "safari") {
            if (jwk instanceof ArrayBuffer) {
                jwk = JSON.parse(arrayBufferToString(jwk));
            }
        }
        switch(format.toLowerCase()){
            case "raw":
                return this.subtle.exportKey("raw", key);
            case "spki":
                {
                    const publicKeyInfo = new PublicKeyInfo();
                    try {
                        publicKeyInfo.fromJSON(jwk);
                    } catch (ex) {
                        throw new Error("Incorrect key data");
                    }
                    return publicKeyInfo.toSchema().toBER(false);
                }
            case "pkcs8":
                {
                    const privateKeyInfo = new PrivateKeyInfo();
                    try {
                        privateKeyInfo.fromJSON(jwk);
                    } catch (ex) {
                        throw new Error("Incorrect key data");
                    }
                    return privateKeyInfo.toSchema().toBER(false);
                }
            case "jwk":
                return jwk;
            default:
                throw new Error(`Incorrect format: ${format}`);
        }
    }
    async convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {
        if (inputFormat.toLowerCase() === outputFormat.toLowerCase()) {
            return keyData;
        }
        const key = await this.importKey(inputFormat, keyData, algorithm, extractable, keyUsages);
        return this.exportKey(outputFormat, key);
    }
    getAlgorithmByOID(oid, safety = false, target6) {
        switch(oid){
            case "1.2.840.113549.1.1.1":
                return {
                    name: "RSAES-PKCS1-v1_5"
                };
            case "1.2.840.113549.1.1.5":
                return {
                    name: "RSASSA-PKCS1-v1_5",
                    hash: {
                        name: "SHA-1"
                    }
                };
            case "1.2.840.113549.1.1.11":
                return {
                    name: "RSASSA-PKCS1-v1_5",
                    hash: {
                        name: "SHA-256"
                    }
                };
            case "1.2.840.113549.1.1.12":
                return {
                    name: "RSASSA-PKCS1-v1_5",
                    hash: {
                        name: "SHA-384"
                    }
                };
            case "1.2.840.113549.1.1.13":
                return {
                    name: "RSASSA-PKCS1-v1_5",
                    hash: {
                        name: "SHA-512"
                    }
                };
            case "1.2.840.113549.1.1.10":
                return {
                    name: "RSA-PSS"
                };
            case "1.2.840.113549.1.1.7":
                return {
                    name: "RSA-OAEP"
                };
            case "1.2.840.10045.2.1":
            case "1.2.840.10045.4.1":
                return {
                    name: "ECDSA",
                    hash: {
                        name: "SHA-1"
                    }
                };
            case "1.2.840.10045.4.3.2":
                return {
                    name: "ECDSA",
                    hash: {
                        name: "SHA-256"
                    }
                };
            case "1.2.840.10045.4.3.3":
                return {
                    name: "ECDSA",
                    hash: {
                        name: "SHA-384"
                    }
                };
            case "1.2.840.10045.4.3.4":
                return {
                    name: "ECDSA",
                    hash: {
                        name: "SHA-512"
                    }
                };
            case "1.3.133.16.840.63.0.2":
                return {
                    name: "ECDH",
                    kdf: "SHA-1"
                };
            case "1.3.132.1.11.1":
                return {
                    name: "ECDH",
                    kdf: "SHA-256"
                };
            case "1.3.132.1.11.2":
                return {
                    name: "ECDH",
                    kdf: "SHA-384"
                };
            case "1.3.132.1.11.3":
                return {
                    name: "ECDH",
                    kdf: "SHA-512"
                };
            case "2.16.840.1.101.3.4.1.2":
                return {
                    name: "AES-CBC",
                    length: 128
                };
            case "2.16.840.1.101.3.4.1.22":
                return {
                    name: "AES-CBC",
                    length: 192
                };
            case "2.16.840.1.101.3.4.1.42":
                return {
                    name: "AES-CBC",
                    length: 256
                };
            case "2.16.840.1.101.3.4.1.6":
                return {
                    name: "AES-GCM",
                    length: 128
                };
            case "2.16.840.1.101.3.4.1.26":
                return {
                    name: "AES-GCM",
                    length: 192
                };
            case "2.16.840.1.101.3.4.1.46":
                return {
                    name: "AES-GCM",
                    length: 256
                };
            case "2.16.840.1.101.3.4.1.4":
                return {
                    name: "AES-CFB",
                    length: 128
                };
            case "2.16.840.1.101.3.4.1.24":
                return {
                    name: "AES-CFB",
                    length: 192
                };
            case "2.16.840.1.101.3.4.1.44":
                return {
                    name: "AES-CFB",
                    length: 256
                };
            case "2.16.840.1.101.3.4.1.5":
                return {
                    name: "AES-KW",
                    length: 128
                };
            case "2.16.840.1.101.3.4.1.25":
                return {
                    name: "AES-KW",
                    length: 192
                };
            case "2.16.840.1.101.3.4.1.45":
                return {
                    name: "AES-KW",
                    length: 256
                };
            case "1.2.840.113549.2.7":
                return {
                    name: "HMAC",
                    hash: {
                        name: "SHA-1"
                    }
                };
            case "1.2.840.113549.2.9":
                return {
                    name: "HMAC",
                    hash: {
                        name: "SHA-256"
                    }
                };
            case "1.2.840.113549.2.10":
                return {
                    name: "HMAC",
                    hash: {
                        name: "SHA-384"
                    }
                };
            case "1.2.840.113549.2.11":
                return {
                    name: "HMAC",
                    hash: {
                        name: "SHA-512"
                    }
                };
            case "1.2.840.113549.1.9.16.3.5":
                return {
                    name: "DH"
                };
            case "1.3.14.3.2.26":
                return {
                    name: "SHA-1"
                };
            case "2.16.840.1.101.3.4.2.1":
                return {
                    name: "SHA-256"
                };
            case "2.16.840.1.101.3.4.2.2":
                return {
                    name: "SHA-384"
                };
            case "2.16.840.1.101.3.4.2.3":
                return {
                    name: "SHA-512"
                };
            case "1.2.840.113549.1.5.12":
                return {
                    name: "PBKDF2"
                };
            case "1.2.840.10045.3.1.7":
                return {
                    name: "P-256"
                };
            case "1.3.132.0.34":
                return {
                    name: "P-384"
                };
            case "1.3.132.0.35":
                return {
                    name: "P-521"
                };
        }
        if (safety) {
            throw new Error(`Unsupported algorithm identifier ${target6 ? `for ${target6} ` : EMPTY_STRING1}: ${oid}`);
        }
        return {};
    }
    getOIDByAlgorithm(algorithm, safety = false, target7) {
        let result = EMPTY_STRING1;
        switch(algorithm.name.toUpperCase()){
            case "RSAES-PKCS1-V1_5":
                result = "1.2.840.113549.1.1.1";
                break;
            case "RSASSA-PKCS1-V1_5":
                switch(algorithm.hash.name.toUpperCase()){
                    case "SHA-1":
                        result = "1.2.840.113549.1.1.5";
                        break;
                    case "SHA-256":
                        result = "1.2.840.113549.1.1.11";
                        break;
                    case "SHA-384":
                        result = "1.2.840.113549.1.1.12";
                        break;
                    case "SHA-512":
                        result = "1.2.840.113549.1.1.13";
                        break;
                }
                break;
            case "RSA-PSS":
                result = "1.2.840.113549.1.1.10";
                break;
            case "RSA-OAEP":
                result = "1.2.840.113549.1.1.7";
                break;
            case "ECDSA":
                switch(algorithm.hash.name.toUpperCase()){
                    case "SHA-1":
                        result = "1.2.840.10045.4.1";
                        break;
                    case "SHA-256":
                        result = "1.2.840.10045.4.3.2";
                        break;
                    case "SHA-384":
                        result = "1.2.840.10045.4.3.3";
                        break;
                    case "SHA-512":
                        result = "1.2.840.10045.4.3.4";
                        break;
                }
                break;
            case "ECDH":
                switch(algorithm.kdf.toUpperCase()){
                    case "SHA-1":
                        result = "1.3.133.16.840.63.0.2";
                        break;
                    case "SHA-256":
                        result = "1.3.132.1.11.1";
                        break;
                    case "SHA-384":
                        result = "1.3.132.1.11.2";
                        break;
                    case "SHA-512":
                        result = "1.3.132.1.11.3";
                        break;
                }
                break;
            case "AES-CTR":
                break;
            case "AES-CBC":
                switch(algorithm.length){
                    case 128:
                        result = "2.16.840.1.101.3.4.1.2";
                        break;
                    case 192:
                        result = "2.16.840.1.101.3.4.1.22";
                        break;
                    case 256:
                        result = "2.16.840.1.101.3.4.1.42";
                        break;
                }
                break;
            case "AES-CMAC":
                break;
            case "AES-GCM":
                switch(algorithm.length){
                    case 128:
                        result = "2.16.840.1.101.3.4.1.6";
                        break;
                    case 192:
                        result = "2.16.840.1.101.3.4.1.26";
                        break;
                    case 256:
                        result = "2.16.840.1.101.3.4.1.46";
                        break;
                }
                break;
            case "AES-CFB":
                switch(algorithm.length){
                    case 128:
                        result = "2.16.840.1.101.3.4.1.4";
                        break;
                    case 192:
                        result = "2.16.840.1.101.3.4.1.24";
                        break;
                    case 256:
                        result = "2.16.840.1.101.3.4.1.44";
                        break;
                }
                break;
            case "AES-KW":
                switch(algorithm.length){
                    case 128:
                        result = "2.16.840.1.101.3.4.1.5";
                        break;
                    case 192:
                        result = "2.16.840.1.101.3.4.1.25";
                        break;
                    case 256:
                        result = "2.16.840.1.101.3.4.1.45";
                        break;
                }
                break;
            case "HMAC":
                switch(algorithm.hash.name.toUpperCase()){
                    case "SHA-1":
                        result = "1.2.840.113549.2.7";
                        break;
                    case "SHA-256":
                        result = "1.2.840.113549.2.9";
                        break;
                    case "SHA-384":
                        result = "1.2.840.113549.2.10";
                        break;
                    case "SHA-512":
                        result = "1.2.840.113549.2.11";
                        break;
                }
                break;
            case "DH":
                result = "1.2.840.113549.1.9.16.3.5";
                break;
            case "SHA-1":
                result = "1.3.14.3.2.26";
                break;
            case "SHA-256":
                result = "2.16.840.1.101.3.4.2.1";
                break;
            case "SHA-384":
                result = "2.16.840.1.101.3.4.2.2";
                break;
            case "SHA-512":
                result = "2.16.840.1.101.3.4.2.3";
                break;
            case "CONCAT":
                break;
            case "HKDF":
                break;
            case "PBKDF2":
                result = "1.2.840.113549.1.5.12";
                break;
            case "P-256":
                result = "1.2.840.10045.3.1.7";
                break;
            case "P-384":
                result = "1.3.132.0.34";
                break;
            case "P-521":
                result = "1.3.132.0.35";
                break;
        }
        if (!result && safety) {
            throw new Error(`Unsupported algorithm ${target7 ? `for ${target7} ` : EMPTY_STRING1}: ${algorithm.name}`);
        }
        return result;
    }
    getAlgorithmParameters(algorithmName, operation) {
        let result = {
            algorithm: {},
            usages: []
        };
        switch(algorithmName.toUpperCase()){
            case "RSAES-PKCS1-V1_5":
            case "RSASSA-PKCS1-V1_5":
                switch(operation.toLowerCase()){
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "RSASSA-PKCS1-v1_5",
                                modulusLength: 2048,
                                publicExponent: new Uint8Array([
                                    1,
                                    0,
                                    1
                                ]),
                                hash: {
                                    name: "SHA-256"
                                }
                            },
                            usages: [
                                "sign",
                                "verify"
                            ]
                        };
                        break;
                    case "verify":
                    case "sign":
                    case "importkey":
                        result = {
                            algorithm: {
                                name: "RSASSA-PKCS1-v1_5",
                                hash: {
                                    name: "SHA-256"
                                }
                            },
                            usages: [
                                "verify"
                            ]
                        };
                        break;
                    case "exportkey":
                    default:
                        return {
                            algorithm: {
                                name: "RSASSA-PKCS1-v1_5"
                            },
                            usages: []
                        };
                }
                break;
            case "RSA-PSS":
                switch(operation.toLowerCase()){
                    case "sign":
                    case "verify":
                        result = {
                            algorithm: {
                                name: "RSA-PSS",
                                hash: {
                                    name: "SHA-1"
                                },
                                saltLength: 20
                            },
                            usages: [
                                "sign",
                                "verify"
                            ]
                        };
                        break;
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "RSA-PSS",
                                modulusLength: 2048,
                                publicExponent: new Uint8Array([
                                    1,
                                    0,
                                    1
                                ]),
                                hash: {
                                    name: "SHA-1"
                                }
                            },
                            usages: [
                                "sign",
                                "verify"
                            ]
                        };
                        break;
                    case "importkey":
                        result = {
                            algorithm: {
                                name: "RSA-PSS",
                                hash: {
                                    name: "SHA-1"
                                }
                            },
                            usages: [
                                "verify"
                            ]
                        };
                        break;
                    case "exportkey":
                    default:
                        return {
                            algorithm: {
                                name: "RSA-PSS"
                            },
                            usages: []
                        };
                }
                break;
            case "RSA-OAEP":
                switch(operation.toLowerCase()){
                    case "encrypt":
                    case "decrypt":
                        result = {
                            algorithm: {
                                name: "RSA-OAEP"
                            },
                            usages: [
                                "encrypt",
                                "decrypt"
                            ]
                        };
                        break;
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "RSA-OAEP",
                                modulusLength: 2048,
                                publicExponent: new Uint8Array([
                                    1,
                                    0,
                                    1
                                ]),
                                hash: {
                                    name: "SHA-256"
                                }
                            },
                            usages: [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey"
                            ]
                        };
                        break;
                    case "importkey":
                        result = {
                            algorithm: {
                                name: "RSA-OAEP",
                                hash: {
                                    name: "SHA-256"
                                }
                            },
                            usages: [
                                "encrypt"
                            ]
                        };
                        break;
                    case "exportkey":
                    default:
                        return {
                            algorithm: {
                                name: "RSA-OAEP"
                            },
                            usages: []
                        };
                }
                break;
            case "ECDSA":
                switch(operation.toLowerCase()){
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "ECDSA",
                                namedCurve: "P-256"
                            },
                            usages: [
                                "sign",
                                "verify"
                            ]
                        };
                        break;
                    case "importkey":
                        result = {
                            algorithm: {
                                name: "ECDSA",
                                namedCurve: "P-256"
                            },
                            usages: [
                                "verify"
                            ]
                        };
                        break;
                    case "verify":
                    case "sign":
                        result = {
                            algorithm: {
                                name: "ECDSA",
                                hash: {
                                    name: "SHA-256"
                                }
                            },
                            usages: [
                                "sign"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "ECDSA"
                            },
                            usages: []
                        };
                }
                break;
            case "ECDH":
                switch(operation.toLowerCase()){
                    case "exportkey":
                    case "importkey":
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "ECDH",
                                namedCurve: "P-256"
                            },
                            usages: [
                                "deriveKey",
                                "deriveBits"
                            ]
                        };
                        break;
                    case "derivekey":
                    case "derivebits":
                        result = {
                            algorithm: {
                                name: "ECDH",
                                namedCurve: "P-256",
                                public: []
                            },
                            usages: [
                                "encrypt",
                                "decrypt"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "ECDH"
                            },
                            usages: []
                        };
                }
                break;
            case "AES-CTR":
                switch(operation.toLowerCase()){
                    case "importkey":
                    case "exportkey":
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "AES-CTR",
                                length: 256
                            },
                            usages: [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey"
                            ]
                        };
                        break;
                    case "decrypt":
                    case "encrypt":
                        result = {
                            algorithm: {
                                name: "AES-CTR",
                                counter: new Uint8Array(16),
                                length: 10
                            },
                            usages: [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "AES-CTR"
                            },
                            usages: []
                        };
                }
                break;
            case "AES-CBC":
                switch(operation.toLowerCase()){
                    case "importkey":
                    case "exportkey":
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "AES-CBC",
                                length: 256
                            },
                            usages: [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey"
                            ]
                        };
                        break;
                    case "decrypt":
                    case "encrypt":
                        result = {
                            algorithm: {
                                name: "AES-CBC",
                                iv: this.getRandomValues(new Uint8Array(16))
                            },
                            usages: [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "AES-CBC"
                            },
                            usages: []
                        };
                }
                break;
            case "AES-GCM":
                switch(operation.toLowerCase()){
                    case "importkey":
                    case "exportkey":
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "AES-GCM",
                                length: 256
                            },
                            usages: [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey"
                            ]
                        };
                        break;
                    case "decrypt":
                    case "encrypt":
                        result = {
                            algorithm: {
                                name: "AES-GCM",
                                iv: this.getRandomValues(new Uint8Array(16))
                            },
                            usages: [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "AES-GCM"
                            },
                            usages: []
                        };
                }
                break;
            case "AES-KW":
                switch(operation.toLowerCase()){
                    case "importkey":
                    case "exportkey":
                    case "generatekey":
                    case "wrapkey":
                    case "unwrapkey":
                        result = {
                            algorithm: {
                                name: "AES-KW",
                                length: 256
                            },
                            usages: [
                                "wrapKey",
                                "unwrapKey"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "AES-KW"
                            },
                            usages: []
                        };
                }
                break;
            case "HMAC":
                switch(operation.toLowerCase()){
                    case "sign":
                    case "verify":
                        result = {
                            algorithm: {
                                name: "HMAC"
                            },
                            usages: [
                                "sign",
                                "verify"
                            ]
                        };
                        break;
                    case "importkey":
                    case "exportkey":
                    case "generatekey":
                        result = {
                            algorithm: {
                                name: "HMAC",
                                length: 32,
                                hash: {
                                    name: "SHA-256"
                                }
                            },
                            usages: [
                                "sign",
                                "verify"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "HMAC"
                            },
                            usages: []
                        };
                }
                break;
            case "HKDF":
                switch(operation.toLowerCase()){
                    case "derivekey":
                        result = {
                            algorithm: {
                                name: "HKDF",
                                hash: "SHA-256",
                                salt: new Uint8Array([]),
                                info: new Uint8Array([])
                            },
                            usages: [
                                "encrypt",
                                "decrypt"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "HKDF"
                            },
                            usages: []
                        };
                }
                break;
            case "PBKDF2":
                switch(operation.toLowerCase()){
                    case "derivekey":
                        result = {
                            algorithm: {
                                name: "PBKDF2",
                                hash: {
                                    name: "SHA-256"
                                },
                                salt: new Uint8Array([]),
                                iterations: 10000
                            },
                            usages: [
                                "encrypt",
                                "decrypt"
                            ]
                        };
                        break;
                    default:
                        return {
                            algorithm: {
                                name: "PBKDF2"
                            },
                            usages: []
                        };
                }
                break;
        }
        return result;
    }
    getHashAlgorithm(signatureAlgorithm) {
        let result = EMPTY_STRING1;
        switch(signatureAlgorithm.algorithmId){
            case "1.2.840.10045.4.1":
            case "1.2.840.113549.1.1.5":
                result = "SHA-1";
                break;
            case "1.2.840.10045.4.3.2":
            case "1.2.840.113549.1.1.11":
                result = "SHA-256";
                break;
            case "1.2.840.10045.4.3.3":
            case "1.2.840.113549.1.1.12":
                result = "SHA-384";
                break;
            case "1.2.840.10045.4.3.4":
            case "1.2.840.113549.1.1.13":
                result = "SHA-512";
                break;
            case "1.2.840.113549.1.1.10":
                {
                    try {
                        const params = new RSASSAPSSParams({
                            schema: signatureAlgorithm.algorithmParams
                        });
                        if (params.hashAlgorithm) {
                            const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);
                            if ("name" in algorithm) {
                                result = algorithm.name;
                            } else {
                                return EMPTY_STRING1;
                            }
                        } else result = "SHA-1";
                    } catch  {}
                }
                break;
        }
        return result;
    }
    async encryptEncryptedContentInfo(parameters) {
        ParameterError.assert(parameters, "password", "contentEncryptionAlgorithm", "hmacHashAlgorithm", "iterationCount", "contentToEncrypt", "contentToEncrypt", "contentType");
        const contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm, true, "contentEncryptionAlgorithm");
        const pbkdf2OID = this.getOIDByAlgorithm({
            name: "PBKDF2"
        }, true, "PBKDF2");
        const hmacOID = this.getOIDByAlgorithm({
            name: "HMAC",
            hash: {
                name: parameters.hmacHashAlgorithm
            }
        }, true, "hmacHashAlgorithm");
        const ivBuffer = new ArrayBuffer(16);
        const ivView = new Uint8Array(ivBuffer);
        this.getRandomValues(ivView);
        const saltBuffer = new ArrayBuffer(64);
        const saltView = new Uint8Array(saltBuffer);
        this.getRandomValues(saltView);
        const contentView = new Uint8Array(parameters.contentToEncrypt);
        const pbkdf2Params = new PBKDF2Params({
            salt: new OctetString({
                valueHex: saltBuffer
            }),
            iterationCount: parameters.iterationCount,
            prf: new AlgorithmIdentifier({
                algorithmId: hmacOID,
                algorithmParams: new Null()
            })
        });
        const passwordView = new Uint8Array(parameters.password);
        const pbkdfKey = await this.importKey("raw", passwordView, "PBKDF2", false, [
            "deriveKey"
        ]);
        const derivedKey = await this.deriveKey({
            name: "PBKDF2",
            hash: {
                name: parameters.hmacHashAlgorithm
            },
            salt: saltView,
            iterations: parameters.iterationCount
        }, pbkdfKey, parameters.contentEncryptionAlgorithm, false, [
            "encrypt"
        ]);
        const encryptedData = await this.encrypt({
            name: parameters.contentEncryptionAlgorithm.name,
            iv: ivView
        }, derivedKey, contentView);
        const pbes2Parameters = new PBES2Params({
            keyDerivationFunc: new AlgorithmIdentifier({
                algorithmId: pbkdf2OID,
                algorithmParams: pbkdf2Params.toSchema()
            }),
            encryptionScheme: new AlgorithmIdentifier({
                algorithmId: contentEncryptionOID,
                algorithmParams: new OctetString({
                    valueHex: ivBuffer
                })
            })
        });
        return new EncryptedContentInfo({
            contentType: parameters.contentType,
            contentEncryptionAlgorithm: new AlgorithmIdentifier({
                algorithmId: "1.2.840.113549.1.5.13",
                algorithmParams: pbes2Parameters.toSchema()
            }),
            encryptedContent: new OctetString({
                valueHex: encryptedData
            })
        });
    }
    async decryptEncryptedContentInfo(parameters) {
        ParameterError.assert(parameters, "password", "encryptedContentInfo");
        if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== "1.2.840.113549.1.5.13") throw new Error(`Unknown "contentEncryptionAlgorithm": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);
        let pbes2Parameters;
        try {
            pbes2Parameters = new PBES2Params({
                schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams
            });
        } catch (ex) {
            throw new Error("Incorrectly encoded \"pbes2Parameters\"");
        }
        let pbkdf2Params;
        try {
            pbkdf2Params = new PBKDF2Params({
                schema: pbes2Parameters.keyDerivationFunc.algorithmParams
            });
        } catch (ex1) {
            throw new Error("Incorrectly encoded \"pbkdf2Params\"");
        }
        const contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId, true);
        const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;
        const ivView = new Uint8Array(ivBuffer);
        const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;
        const saltView = new Uint8Array(saltBuffer);
        const iterationCount = pbkdf2Params.iterationCount;
        let hmacHashAlgorithm = "SHA-1";
        if (pbkdf2Params.prf) {
            const algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true);
            hmacHashAlgorithm = algorithm.hash.name;
        }
        const pbkdfKey = await this.importKey("raw", parameters.password, "PBKDF2", false, [
            "deriveKey"
        ]);
        const result = await this.deriveKey({
            name: "PBKDF2",
            hash: {
                name: hmacHashAlgorithm
            },
            salt: saltView,
            iterations: iterationCount
        }, pbkdfKey, contentEncryptionAlgorithm, false, [
            "decrypt"
        ]);
        const dataBuffer = parameters.encryptedContentInfo.getEncryptedContent();
        return this.decrypt({
            name: contentEncryptionAlgorithm.name,
            iv: ivView
        }, result, dataBuffer);
    }
    async stampDataWithPassword(parameters) {
        if (parameters instanceof Object === false) throw new Error("Parameters must have type \"Object\"");
        ParameterError.assert(parameters, "password", "hashAlgorithm", "iterationCount", "salt", "contentToStamp");
        let length;
        switch(parameters.hashAlgorithm.toLowerCase()){
            case "sha-1":
                length = 160;
                break;
            case "sha-256":
                length = 256;
                break;
            case "sha-384":
                length = 384;
                break;
            case "sha-512":
                length = 512;
                break;
            default:
                throw new Error(`Incorrect "parameters.hashAlgorithm" parameter: ${parameters.hashAlgorithm}`);
        }
        const hmacAlgorithm = {
            name: "HMAC",
            length,
            hash: {
                name: parameters.hashAlgorithm
            }
        };
        const pkcsKey = await makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);
        const hmacKey = await this.importKey("raw", new Uint8Array(pkcsKey), hmacAlgorithm, false, [
            "sign"
        ]);
        return this.sign(hmacAlgorithm, hmacKey, new Uint8Array(parameters.contentToStamp));
    }
    async verifyDataStampedWithPassword(parameters) {
        ParameterError.assert(parameters, "password", "hashAlgorithm", "salt", "iterationCount", "contentToVerify", "signatureToVerify");
        let length = 0;
        switch(parameters.hashAlgorithm.toLowerCase()){
            case "sha-1":
                length = 160;
                break;
            case "sha-256":
                length = 256;
                break;
            case "sha-384":
                length = 384;
                break;
            case "sha-512":
                length = 512;
                break;
            default:
                throw new Error(`Incorrect "parameters.hashAlgorithm" parameter: ${parameters.hashAlgorithm}`);
        }
        const hmacAlgorithm = {
            name: "HMAC",
            length,
            hash: {
                name: parameters.hashAlgorithm
            }
        };
        const pkcsKey = await makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);
        const hmacKey = await this.importKey("raw", new Uint8Array(pkcsKey), hmacAlgorithm, false, [
            "verify"
        ]);
        return this.verify(hmacAlgorithm, hmacKey, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));
    }
    async getSignatureParameters(privateKey, hashAlgorithm = "SHA-1") {
        this.getOIDByAlgorithm({
            name: hashAlgorithm
        }, true, "hashAlgorithm");
        const signatureAlgorithm = new AlgorithmIdentifier();
        const parameters = this.getAlgorithmParameters(privateKey.algorithm.name, "sign");
        if (!Object.keys(parameters.algorithm).length) {
            throw new Error("Parameter 'algorithm' is empty");
        }
        const algorithm = parameters.algorithm;
        algorithm.hash.name = hashAlgorithm;
        switch(privateKey.algorithm.name.toUpperCase()){
            case "RSASSA-PKCS1-V1_5":
            case "ECDSA":
                signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(algorithm, true);
                break;
            case "RSA-PSS":
                {
                    switch(hashAlgorithm.toUpperCase()){
                        case "SHA-256":
                            algorithm.saltLength = 32;
                            break;
                        case "SHA-384":
                            algorithm.saltLength = 48;
                            break;
                        case "SHA-512":
                            algorithm.saltLength = 64;
                            break;
                    }
                    const paramsObject = {};
                    if (hashAlgorithm.toUpperCase() !== "SHA-1") {
                        const hashAlgorithmOID = this.getOIDByAlgorithm({
                            name: hashAlgorithm
                        }, true, "hashAlgorithm");
                        paramsObject.hashAlgorithm = new AlgorithmIdentifier({
                            algorithmId: hashAlgorithmOID,
                            algorithmParams: new Null()
                        });
                        paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({
                            algorithmId: "1.2.840.113549.1.1.8",
                            algorithmParams: paramsObject.hashAlgorithm.toSchema()
                        });
                    }
                    if (algorithm.saltLength !== 20) paramsObject.saltLength = algorithm.saltLength;
                    const pssParameters = new RSASSAPSSParams(paramsObject);
                    signatureAlgorithm.algorithmId = "1.2.840.113549.1.1.10";
                    signatureAlgorithm.algorithmParams = pssParameters.toSchema();
                }
                break;
            default:
                throw new Error(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);
        }
        return {
            signatureAlgorithm,
            parameters
        };
    }
    async signWithPrivateKey(data, privateKey, parameters) {
        const signature = await this.sign(parameters.algorithm, privateKey, data);
        if (parameters.algorithm.name === "ECDSA") {
            return createCMSECDSASignature(signature);
        }
        return signature;
    }
    fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {
        const parameters = {};
        const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);
        if (shaAlgorithm === EMPTY_STRING1) throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);
        let algorithmId;
        if (signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = signatureAlgorithm.algorithmId;
        else algorithmId = publicKeyInfo.algorithm.algorithmId;
        const algorithmObject = this.getAlgorithmByOID(algorithmId, true);
        parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, "importKey");
        if ("hash" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;
        if (algorithmObject.name === "ECDSA") {
            const publicKeyAlgorithm = publicKeyInfo.algorithm;
            if (!publicKeyAlgorithm.algorithmParams) {
                throw new Error("Algorithm parameters for ECDSA public key are missed");
            }
            const publicKeyAlgorithmParams = publicKeyAlgorithm.algorithmParams;
            if ("idBlock" in publicKeyAlgorithm.algorithmParams) {
                if (!(publicKeyAlgorithmParams.idBlock.tagClass === 1 && publicKeyAlgorithmParams.idBlock.tagNumber === 6)) {
                    throw new Error("Incorrect type for ECDSA public key parameters");
                }
            }
            const curveObject = this.getAlgorithmByOID(publicKeyAlgorithmParams.valueBlock.toString(), true);
            parameters.algorithm.algorithm.namedCurve = curveObject.name;
        }
        return parameters;
    }
    async getPublicKey(publicKeyInfo, signatureAlgorithm, parameters) {
        if (!parameters) {
            parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);
        }
        const publicKeyInfoBuffer = publicKeyInfo.toSchema().toBER(false);
        return this.importKey("spki", publicKeyInfoBuffer, parameters.algorithm.algorithm, true, parameters.algorithm.usages);
    }
    async verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm) {
        let publicKey;
        if (!shaAlgorithm) {
            shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);
            if (!shaAlgorithm) throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);
            publicKey = await this.getPublicKey(publicKeyInfo, signatureAlgorithm);
        } else {
            const parameters = {};
            let algorithmId;
            if (signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = signatureAlgorithm.algorithmId;
            else algorithmId = publicKeyInfo.algorithm.algorithmId;
            const algorithmObject = this.getAlgorithmByOID(algorithmId, true);
            parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, "importKey");
            if ("hash" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;
            if (algorithmObject.name === "ECDSA") {
                let algorithmParamsChecked = false;
                if ("algorithmParams" in publicKeyInfo.algorithm === true) {
                    if ("idBlock" in publicKeyInfo.algorithm.algorithmParams) {
                        if (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;
                    }
                }
                if (algorithmParamsChecked === false) {
                    throw new Error("Incorrect type for ECDSA public key parameters");
                }
                const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString(), true);
                parameters.algorithm.algorithm.namedCurve = curveObject.name;
            }
            publicKey = await this.getPublicKey(publicKeyInfo, null, parameters);
        }
        const algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, "verify");
        if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
        let signatureValue = signature.valueBlock.valueHexView;
        if (publicKey.algorithm.name === "ECDSA") {
            const namedCurve = ECNamedCurves.find(publicKey.algorithm.namedCurve);
            if (!namedCurve) {
                throw new Error("Unsupported named curve in use");
            }
            const asn1 = fromBER(signatureValue);
            AsnError.assert(asn1, "Signature value");
            signatureValue = createECDSASignatureFromCMS(asn1.result, namedCurve.size);
        }
        if (publicKey.algorithm.name === "RSA-PSS") {
            const pssParameters = new RSASSAPSSParams({
                schema: signatureAlgorithm.algorithmParams
            });
            if ("saltLength" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;
            else algorithm.algorithm.saltLength = 20;
            let hashAlgo = "SHA-1";
            if ("hashAlgorithm" in pssParameters) {
                const hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId, true);
                hashAlgo = hashAlgorithm.name;
            }
            algorithm.algorithm.hash.name = hashAlgo;
        }
        return this.verify(algorithm.algorithm, publicKey, signatureValue, data);
    }
}
let engine = {
    name: "none",
    crypto: null
};
function isCryptoEngine(engine1) {
    return engine1 && typeof engine1 === "object" && "crypto" in engine1 ? true : false;
}
function setEngine(name, ...args) {
    let crypto = null;
    if (args.length === 1) {
        crypto = args[0];
    } else {
        const cryptoArg = args[0];
        const subtleArg = args[1];
        if (isCryptoEngine(subtleArg)) {
            crypto = subtleArg;
        }
        if (isCryptoEngine(cryptoArg)) {
            crypto = cryptoArg;
        }
        if ("subtle" in cryptoArg && "getRandomValues" in cryptoArg) {
            crypto = new CryptoEngine({
                crypto: cryptoArg
            });
        }
    }
    if (typeof process !== "undefined" && "pid" in process && typeof global !== "undefined" && typeof window === "undefined") {
        if (typeof global[process.pid] === "undefined") {
            global[process.pid] = {};
        } else {
            if (typeof global[process.pid] !== "object") {
                throw new Error(`Name global.${process.pid} already exists and it is not an object`);
            }
        }
        if (typeof global[process.pid].pkijs === "undefined") {
            global[process.pid].pkijs = {};
        } else {
            if (typeof global[process.pid].pkijs !== "object") {
                throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);
            }
        }
        global[process.pid].pkijs.engine = {
            name: name,
            crypto
        };
    } else {
        if (engine.name !== name) {
            engine = {
                name: name,
                crypto
            };
        }
    }
}
function getEngine() {
    if (typeof process !== "undefined" && "pid" in process && typeof global !== "undefined" && typeof window === "undefined") {
        let _engine;
        try {
            _engine = global[process.pid].pkijs.engine;
        } catch (ex) {
            throw new Error("Please call 'setEngine' before call to 'getEngine'");
        }
        return _engine;
    }
    return engine;
}
function getCrypto(safety = false) {
    const _engine = getEngine();
    if (!_engine.crypto && safety) {
        throw new Error("Unable to create WebCrypto object");
    }
    return _engine.crypto;
}
function createCMSECDSASignature(signatureBuffer) {
    if (signatureBuffer.byteLength % 2 !== 0) return EMPTY_BUFFER1;
    const length = signatureBuffer.byteLength / 2;
    const rBuffer = new ArrayBuffer(length);
    const rView = new Uint8Array(rBuffer);
    rView.set(new Uint8Array(signatureBuffer, 0, length));
    const rInteger = new Integer({
        valueHex: rBuffer
    });
    const sBuffer = new ArrayBuffer(length);
    const sView = new Uint8Array(sBuffer);
    sView.set(new Uint8Array(signatureBuffer, length, length));
    const sInteger = new Integer({
        valueHex: sBuffer
    });
    return new Sequence({
        value: [
            rInteger.convertToDER(),
            sInteger.convertToDER()
        ]
    }).toBER(false);
}
function createECDSASignatureFromCMS(cmsSignature, pointSize) {
    if (!(cmsSignature instanceof Sequence && cmsSignature.valueBlock.value.length === 2 && cmsSignature.valueBlock.value[0] instanceof Integer && cmsSignature.valueBlock.value[1] instanceof Integer)) return EMPTY_BUFFER1;
    const rValueView = cmsSignature.valueBlock.value[0].convertFromDER().valueBlock.valueHexView;
    const sValueView = cmsSignature.valueBlock.value[1].convertFromDER().valueBlock.valueHexView;
    const res = new Uint8Array(pointSize * 2);
    res.set(rValueView, pointSize - rValueView.byteLength);
    res.set(sValueView, 2 * pointSize - sValueView.byteLength);
    return res.buffer;
}
async function kdfWithCounter(hashFunction, zBuffer, Counter, SharedInfo, crypto) {
    switch(hashFunction.toUpperCase()){
        case "SHA-1":
        case "SHA-256":
        case "SHA-384":
        case "SHA-512":
            break;
        default:
            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);
    }
    ArgumentError.assert(zBuffer, "zBuffer", "ArrayBuffer");
    if (zBuffer.byteLength === 0) throw new ArgumentError("'zBuffer' has zero length, error");
    ArgumentError.assert(SharedInfo, "SharedInfo", "ArrayBuffer");
    if (Counter > 255) throw new ArgumentError("Please set 'Counter' argument to value less or equal to 255");
    const counterBuffer = new ArrayBuffer(4);
    const counterView = new Uint8Array(counterBuffer);
    counterView[0] = 0;
    counterView[1] = 0;
    counterView[2] = 0;
    counterView[3] = Counter;
    let combinedBuffer = EMPTY_BUFFER1;
    combinedBuffer = utilConcatBuf(combinedBuffer, zBuffer);
    combinedBuffer = utilConcatBuf(combinedBuffer, counterBuffer);
    combinedBuffer = utilConcatBuf(combinedBuffer, SharedInfo);
    const result = await crypto.digest({
        name: hashFunction
    }, combinedBuffer);
    return {
        counter: Counter,
        result
    };
}
async function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo, crypto = getCrypto(true)) {
    let hashLength = 0;
    let maxCounter = 1;
    switch(hashFunction.toUpperCase()){
        case "SHA-1":
            hashLength = 160;
            break;
        case "SHA-256":
            hashLength = 256;
            break;
        case "SHA-384":
            hashLength = 384;
            break;
        case "SHA-512":
            hashLength = 512;
            break;
        default:
            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);
    }
    ArgumentError.assert(Zbuffer, "Zbuffer", "ArrayBuffer");
    if (Zbuffer.byteLength === 0) throw new ArgumentError("'Zbuffer' has zero length, error");
    ArgumentError.assert(SharedInfo, "SharedInfo", "ArrayBuffer");
    const quotient = keydatalen / hashLength;
    if (Math.floor(quotient) > 0) {
        maxCounter = Math.floor(quotient);
        if (quotient - maxCounter > 0) maxCounter++;
    }
    const incomingResult = [];
    for(let i95 = 1; i95 <= maxCounter; i95++)incomingResult.push(await kdfWithCounter(hashFunction, Zbuffer, i95, SharedInfo, crypto));
    let combinedBuffer = EMPTY_BUFFER1;
    let currentCounter = 1;
    let found = true;
    while(found){
        found = false;
        for (const result of incomingResult){
            if (result.counter === currentCounter) {
                combinedBuffer = utilConcatBuf(combinedBuffer, result.result);
                found = true;
                break;
            }
        }
        currentCounter++;
    }
    keydatalen >>= 3;
    if (combinedBuffer.byteLength > keydatalen) {
        const newBuffer = new ArrayBuffer(keydatalen);
        const newView = new Uint8Array(newBuffer);
        const combinedView = new Uint8Array(combinedBuffer);
        for(let i96 = 0; i96 < keydatalen; i96++)newView[i96] = combinedView[i96];
        return newBuffer;
    }
    return combinedBuffer;
}
const VERSION$i = "version";
const LOG_ID = "logID";
const EXTENSIONS$6 = "extensions";
const TIMESTAMP = "timestamp";
const HASH_ALGORITHM$3 = "hashAlgorithm";
const SIGNATURE_ALGORITHM$8 = "signatureAlgorithm";
const SIGNATURE$7 = "signature";
const NONE = "none";
const MD5 = "md5";
const SHA1 = "sha1";
const SHA224 = "sha224";
const SHA256 = "sha256";
const SHA384 = "sha384";
const SHA512 = "sha512";
const ANONYMOUS = "anonymous";
const RSA = "rsa";
const DSA = "dsa";
const ECDSA = "ecdsa";
class SignedCertificateTimestamp extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$i, SignedCertificateTimestamp.defaultValues(VERSION$i));
        this.logID = getParametersValue(parameters, LOG_ID, SignedCertificateTimestamp.defaultValues(LOG_ID));
        this.timestamp = getParametersValue(parameters, TIMESTAMP, SignedCertificateTimestamp.defaultValues(TIMESTAMP));
        this.extensions = getParametersValue(parameters, EXTENSIONS$6, SignedCertificateTimestamp.defaultValues(EXTENSIONS$6));
        this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM$3, SignedCertificateTimestamp.defaultValues(HASH_ALGORITHM$3));
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$8, SignedCertificateTimestamp.defaultValues(SIGNATURE_ALGORITHM$8));
        this.signature = getParametersValue(parameters, SIGNATURE$7, SignedCertificateTimestamp.defaultValues(SIGNATURE$7));
        if ("stream" in parameters && parameters.stream) {
            this.fromStream(parameters.stream);
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$i:
                return 0;
            case LOG_ID:
            case EXTENSIONS$6:
                return EMPTY_BUFFER1;
            case TIMESTAMP:
                return new Date(0);
            case HASH_ALGORITHM$3:
            case SIGNATURE_ALGORITHM$8:
                return EMPTY_STRING1;
            case SIGNATURE$7:
                return new Any();
            default:
                return super.defaultValues(memberName);
        }
    }
    fromSchema(schema) {
        if (schema instanceof RawData === false) throw new Error("Object's schema was not verified against input data for SignedCertificateTimestamp");
        const seqStream = new SeqStream({
            stream: new ByteStream({
                buffer: schema.data
            })
        });
        this.fromStream(seqStream);
    }
    fromStream(stream) {
        const blockLength = stream.getUint16();
        this.version = stream.getBlock(1)[0];
        if (this.version === 0) {
            this.logID = new Uint8Array(stream.getBlock(32)).buffer.slice(0);
            this.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8));
            const extensionsLength = stream.getUint16();
            this.extensions = new Uint8Array(stream.getBlock(extensionsLength)).buffer.slice(0);
            switch(stream.getBlock(1)[0]){
                case 0:
                    this.hashAlgorithm = NONE;
                    break;
                case 1:
                    this.hashAlgorithm = MD5;
                    break;
                case 2:
                    this.hashAlgorithm = SHA1;
                    break;
                case 3:
                    this.hashAlgorithm = SHA224;
                    break;
                case 4:
                    this.hashAlgorithm = SHA256;
                    break;
                case 5:
                    this.hashAlgorithm = SHA384;
                    break;
                case 6:
                    this.hashAlgorithm = SHA512;
                    break;
                default:
                    throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
            }
            switch(stream.getBlock(1)[0]){
                case 0:
                    this.signatureAlgorithm = ANONYMOUS;
                    break;
                case 1:
                    this.signatureAlgorithm = RSA;
                    break;
                case 2:
                    this.signatureAlgorithm = DSA;
                    break;
                case 3:
                    this.signatureAlgorithm = ECDSA;
                    break;
                default:
                    throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
            }
            const signatureLength = stream.getUint16();
            const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);
            const asn1 = fromBER(signatureData);
            AsnError.assert(asn1, "SignedCertificateTimestamp");
            this.signature = asn1.result;
            if (blockLength !== 47 + extensionsLength + signatureLength) {
                throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
            }
        }
    }
    toSchema() {
        const stream = this.toStream();
        return new RawData({
            data: stream.stream.buffer
        });
    }
    toStream() {
        const stream = new SeqStream();
        stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecodeView.byteLength);
        stream.appendChar(this.version);
        stream.appendView(new Uint8Array(this.logID));
        const timeBuffer = new ArrayBuffer(8);
        const timeView = new Uint8Array(timeBuffer);
        const baseArray = utilToBase(this.timestamp.valueOf(), 8);
        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);
        stream.appendView(timeView);
        stream.appendUint16(this.extensions.byteLength);
        if (this.extensions.byteLength) stream.appendView(new Uint8Array(this.extensions));
        let _hashAlgorithm;
        switch(this.hashAlgorithm.toLowerCase()){
            case NONE:
                _hashAlgorithm = 0;
                break;
            case MD5:
                _hashAlgorithm = 1;
                break;
            case SHA1:
                _hashAlgorithm = 2;
                break;
            case SHA224:
                _hashAlgorithm = 3;
                break;
            case SHA256:
                _hashAlgorithm = 4;
                break;
            case SHA384:
                _hashAlgorithm = 5;
                break;
            case SHA512:
                _hashAlgorithm = 6;
                break;
            default:
                throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);
        }
        stream.appendChar(_hashAlgorithm);
        let _signatureAlgorithm;
        switch(this.signatureAlgorithm.toLowerCase()){
            case ANONYMOUS:
                _signatureAlgorithm = 0;
                break;
            case RSA:
                _signatureAlgorithm = 1;
                break;
            case DSA:
                _signatureAlgorithm = 2;
                break;
            case ECDSA:
                _signatureAlgorithm = 3;
                break;
            default:
                throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);
        }
        stream.appendChar(_signatureAlgorithm);
        const _signature = this.signature.toBER(false);
        stream.appendUint16(_signature.byteLength);
        stream.appendView(new Uint8Array(_signature));
        return stream;
    }
    toJSON() {
        return {
            version: this.version,
            logID: bufferToHexCodes(this.logID),
            timestamp: this.timestamp,
            extensions: bufferToHexCodes(this.extensions),
            hashAlgorithm: this.hashAlgorithm,
            signatureAlgorithm: this.signatureAlgorithm,
            signature: this.signature.toJSON()
        };
    }
    async verify(logs, data, dataType = 0, crypto = getCrypto(true)) {
        const logId = toBase64(arrayBufferToString(this.logID));
        let publicKeyBase64 = null;
        const stream = new SeqStream();
        for (const log of logs){
            if (log.log_id === logId) {
                publicKeyBase64 = log.key;
                break;
            }
        }
        if (!publicKeyBase64) {
            throw new Error(`Public key not found for CT with logId: ${logId}`);
        }
        const pki = stringToArrayBuffer(fromBase64(publicKeyBase64));
        const publicKeyInfo = PublicKeyInfo.fromBER(pki);
        stream.appendChar(0);
        stream.appendChar(0);
        const timeBuffer = new ArrayBuffer(8);
        const timeView = new Uint8Array(timeBuffer);
        const baseArray = utilToBase(this.timestamp.valueOf(), 8);
        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);
        stream.appendView(timeView);
        stream.appendUint16(dataType);
        if (dataType === 0) stream.appendUint24(data.byteLength);
        stream.appendView(new Uint8Array(data));
        stream.appendUint16(this.extensions.byteLength);
        if (this.extensions.byteLength !== 0) stream.appendView(new Uint8Array(this.extensions));
        return crypto.verifyWithPublicKey(stream.buffer.slice(0, stream.length), new OctetString({
            valueHex: this.signature.toBER(false)
        }), publicKeyInfo, {
            algorithmId: EMPTY_STRING1
        }, "SHA-256");
    }
}
SignedCertificateTimestamp.CLASS_NAME = "SignedCertificateTimestamp";
const TIMESTAMPS = "timestamps";
class SignedCertificateTimestampList extends PkiObject {
    constructor(parameters = {}){
        super();
        this.timestamps = getParametersValue(parameters, TIMESTAMPS, SignedCertificateTimestampList.defaultValues(TIMESTAMPS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TIMESTAMPS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case TIMESTAMPS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        var _a2;
        const names = getParametersValue(parameters, "names", {});
        (_a2 = names.optional) !== null && _a2 !== void 0 ? _a2 : names.optional = false;
        return new OctetString({
            name: names.blockName || "SignedCertificateTimestampList",
            optional: names.optional
        });
    }
    fromSchema(schema) {
        if (schema instanceof OctetString === false) {
            throw new Error("Object's schema was not verified against input data for SignedCertificateTimestampList");
        }
        const seqStream = new SeqStream({
            stream: new ByteStream({
                buffer: schema.valueBlock.valueHex
            })
        });
        const dataLength = seqStream.getUint16();
        if (dataLength !== seqStream.length) {
            throw new Error("Object's schema was not verified against input data for SignedCertificateTimestampList");
        }
        while(seqStream.length){
            this.timestamps.push(new SignedCertificateTimestamp({
                stream: seqStream
            }));
        }
    }
    toSchema() {
        const stream = new SeqStream();
        let overallLength = 0;
        const timestampsData = [];
        for (const timestamp of this.timestamps){
            const timestampStream = timestamp.toStream();
            timestampsData.push(timestampStream);
            overallLength += timestampStream.stream.buffer.byteLength;
        }
        stream.appendUint16(overallLength);
        for (const timestamp1 of timestampsData){
            stream.appendView(timestamp1.stream.view);
        }
        return new OctetString({
            valueHex: stream.stream.buffer.slice(0)
        });
    }
    toJSON() {
        return {
            timestamps: Array.from(this.timestamps, (o39)=>o39.toJSON()
            )
        };
    }
}
SignedCertificateTimestampList.CLASS_NAME = "SignedCertificateTimestampList";
const ATTRIBUTES$4 = "attributes";
const CLEAR_PROPS$11 = [
    ATTRIBUTES$4
];
class SubjectDirectoryAttributes extends PkiObject {
    constructor(parameters = {}){
        super();
        this.attributes = getParametersValue(parameters, ATTRIBUTES$4, SubjectDirectoryAttributes.defaultValues(ATTRIBUTES$4));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ATTRIBUTES$4:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.attributes || EMPTY_STRING1,
                    value: Attribute.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$11);
        const asn1 = compareSchema(schema, schema, SubjectDirectoryAttributes.schema({
            names: {
                attributes: ATTRIBUTES$4
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.attributes = Array.from(asn1.result.attributes, (element)=>new Attribute({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.attributes, (o40)=>o40.toSchema()
            )
        });
    }
    toJSON() {
        return {
            attributes: Array.from(this.attributes, (o41)=>o41.toJSON()
            )
        };
    }
}
SubjectDirectoryAttributes.CLASS_NAME = "SubjectDirectoryAttributes";
class ExtensionValueFactory {
    static getItems() {
        if (!this.types) {
            this.types = {};
            ExtensionValueFactory.register(id_SubjectAltName, "SubjectAltName", AltName);
            ExtensionValueFactory.register(id_IssuerAltName, "IssuerAltName", AltName);
            ExtensionValueFactory.register(id_AuthorityKeyIdentifier, "AuthorityKeyIdentifier", AuthorityKeyIdentifier);
            ExtensionValueFactory.register(id_BasicConstraints, "BasicConstraints", BasicConstraints);
            ExtensionValueFactory.register(id_MicrosoftCaVersion, "MicrosoftCaVersion", CAVersion);
            ExtensionValueFactory.register(id_CertificatePolicies, "CertificatePolicies", CertificatePolicies);
            ExtensionValueFactory.register(id_MicrosoftAppPolicies, "CertificatePoliciesMicrosoft", CertificatePolicies);
            ExtensionValueFactory.register(id_MicrosoftCertTemplateV2, "MicrosoftCertTemplateV2", CertificateTemplate);
            ExtensionValueFactory.register(id_CRLDistributionPoints, "CRLDistributionPoints", CRLDistributionPoints);
            ExtensionValueFactory.register(id_FreshestCRL, "FreshestCRL", CRLDistributionPoints);
            ExtensionValueFactory.register(id_ExtKeyUsage, "ExtKeyUsage", ExtKeyUsage);
            ExtensionValueFactory.register(id_CertificateIssuer, "CertificateIssuer", GeneralNames);
            ExtensionValueFactory.register(id_AuthorityInfoAccess, "AuthorityInfoAccess", InfoAccess);
            ExtensionValueFactory.register(id_SubjectInfoAccess, "SubjectInfoAccess", InfoAccess);
            ExtensionValueFactory.register(id_IssuingDistributionPoint, "IssuingDistributionPoint", IssuingDistributionPoint);
            ExtensionValueFactory.register(id_NameConstraints, "NameConstraints", NameConstraints);
            ExtensionValueFactory.register(id_PolicyConstraints, "PolicyConstraints", PolicyConstraints);
            ExtensionValueFactory.register(id_PolicyMappings, "PolicyMappings", PolicyMappings);
            ExtensionValueFactory.register(id_PrivateKeyUsagePeriod, "PrivateKeyUsagePeriod", PrivateKeyUsagePeriod);
            ExtensionValueFactory.register(id_QCStatements, "QCStatements", QCStatements);
            ExtensionValueFactory.register(id_SignedCertificateTimestampList, "SignedCertificateTimestampList", SignedCertificateTimestampList);
            ExtensionValueFactory.register(id_SubjectDirectoryAttributes, "SubjectDirectoryAttributes", SubjectDirectoryAttributes);
        }
        return this.types;
    }
    static fromBER(id, raw) {
        const asn1 = fromBER(raw);
        if (asn1.offset === -1) {
            return null;
        }
        const item = this.find(id);
        if (item) {
            try {
                return new item.type({
                    schema: asn1.result
                });
            } catch (ex) {
                const res = new item.type();
                res.parsingError = `Incorrectly formatted value of extension ${item.name} (${id})`;
                return res;
            }
        }
        return asn1.result;
    }
    static find(id) {
        const types5 = this.getItems();
        return types5[id] || null;
    }
    static register(id, name, type) {
        this.getItems()[id] = {
            name,
            type
        };
    }
}
const EXTN_ID = "extnID";
const CRITICAL = "critical";
const EXTN_VALUE = "extnValue";
const PARSED_VALUE$5 = "parsedValue";
const CLEAR_PROPS$10 = [
    EXTN_ID,
    CRITICAL,
    EXTN_VALUE
];
class Extension extends PkiObject {
    constructor(parameters = {}){
        super();
        this.extnID = getParametersValue(parameters, EXTN_ID, Extension.defaultValues(EXTN_ID));
        this.critical = getParametersValue(parameters, CRITICAL, Extension.defaultValues(CRITICAL));
        if (EXTN_VALUE in parameters) {
            this.extnValue = new OctetString({
                valueHex: parameters.extnValue
            });
        } else {
            this.extnValue = Extension.defaultValues(EXTN_VALUE);
        }
        if (PARSED_VALUE$5 in parameters) {
            this.parsedValue = getParametersValue(parameters, PARSED_VALUE$5, Extension.defaultValues(PARSED_VALUE$5));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    get parsedValue() {
        if (this._parsedValue === undefined) {
            const parsedValue = ExtensionValueFactory.fromBER(this.extnID, this.extnValue.valueBlock.valueHexView);
            this._parsedValue = parsedValue;
        }
        return this._parsedValue || undefined;
    }
    set parsedValue(value) {
        this._parsedValue = value;
    }
    static defaultValues(memberName) {
        switch(memberName){
            case EXTN_ID:
                return EMPTY_STRING1;
            case CRITICAL:
                return false;
            case EXTN_VALUE:
                return new OctetString();
            case PARSED_VALUE$5:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.extnID || EMPTY_STRING1
                }),
                new Boolean1({
                    name: names.critical || EMPTY_STRING1,
                    optional: true
                }),
                new OctetString({
                    name: names.extnValue || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$10);
        const asn1 = compareSchema(schema, schema, Extension.schema({
            names: {
                extnID: EXTN_ID,
                critical: CRITICAL,
                extnValue: EXTN_VALUE
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.extnID = asn1.result.extnID.valueBlock.toString();
        if (CRITICAL in asn1.result) {
            this.critical = asn1.result.critical.valueBlock.value;
        }
        this.extnValue = asn1.result.extnValue;
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new ObjectIdentifier({
            value: this.extnID
        }));
        if (this.critical !== Extension.defaultValues(CRITICAL)) {
            outputArray.push(new Boolean1({
                value: this.critical
            }));
        }
        outputArray.push(this.extnValue);
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const object = {
            extnID: this.extnID,
            extnValue: this.extnValue.toJSON()
        };
        if (this.critical !== Extension.defaultValues(CRITICAL)) {
            object.critical = this.critical;
        }
        if (this.parsedValue && this.parsedValue.toJSON) {
            object.parsedValue = this.parsedValue.toJSON();
        }
        return object;
    }
}
Extension.CLASS_NAME = "Extension";
const EXTENSIONS$5 = "extensions";
const CLEAR_PROPS$$ = [
    EXTENSIONS$5
];
class Extensions extends PkiObject {
    constructor(parameters = {}){
        super();
        this.extensions = getParametersValue(parameters, EXTENSIONS$5, Extensions.defaultValues(EXTENSIONS$5));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case EXTENSIONS$5:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}, optional = false) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            optional,
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.extensions || EMPTY_STRING1,
                    value: Extension.schema(names.extension || {})
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$$);
        const asn1 = compareSchema(schema, schema, Extensions.schema({
            names: {
                extensions: EXTENSIONS$5
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.extensions = Array.from(asn1.result.extensions, (element)=>new Extension({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.extensions, (o42)=>o42.toSchema()
            )
        });
    }
    toJSON() {
        return {
            extensions: this.extensions.map((o43)=>o43.toJSON()
            )
        };
    }
}
Extensions.CLASS_NAME = "Extensions";
const ISSUER$5 = "issuer";
const SERIAL_NUMBER$6 = "serialNumber";
const ISSUER_UID = "issuerUID";
const CLEAR_PROPS$_ = [
    ISSUER$5,
    SERIAL_NUMBER$6,
    ISSUER_UID
];
class IssuerSerial extends PkiObject {
    constructor(parameters = {}){
        super();
        this.issuer = getParametersValue(parameters, ISSUER$5, IssuerSerial.defaultValues(ISSUER$5));
        this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$6, IssuerSerial.defaultValues(SERIAL_NUMBER$6));
        if (ISSUER_UID in parameters) {
            this.issuerUID = getParametersValue(parameters, ISSUER_UID, IssuerSerial.defaultValues(ISSUER_UID));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ISSUER$5:
                return new GeneralNames();
            case SERIAL_NUMBER$6:
                return new Integer();
            case ISSUER_UID:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                GeneralNames.schema(names.issuer || {}),
                new Integer({
                    name: names.serialNumber || EMPTY_STRING1
                }),
                new BitString({
                    optional: true,
                    name: names.issuerUID || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$_);
        const asn1 = compareSchema(schema, schema, IssuerSerial.schema({
            names: {
                issuer: {
                    names: {
                        blockName: ISSUER$5
                    }
                },
                serialNumber: SERIAL_NUMBER$6,
                issuerUID: ISSUER_UID
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.issuer = new GeneralNames({
            schema: asn1.result.issuer
        });
        this.serialNumber = asn1.result.serialNumber;
        if (ISSUER_UID in asn1.result) this.issuerUID = asn1.result.issuerUID;
    }
    toSchema() {
        const result = new Sequence({
            value: [
                this.issuer.toSchema(),
                this.serialNumber
            ]
        });
        if (this.issuerUID) {
            result.valueBlock.value.push(this.issuerUID);
        }
        return result;
    }
    toJSON() {
        const result = {
            issuer: this.issuer.toJSON(),
            serialNumber: this.serialNumber.toJSON()
        };
        if (this.issuerUID) {
            result.issuerUID = this.issuerUID.toJSON();
        }
        return result;
    }
}
IssuerSerial.CLASS_NAME = "IssuerSerial";
const VERSION$h = "version";
const BASE_CERTIFICATE_ID$2 = "baseCertificateID";
const SUBJECT_NAME = "subjectName";
const ISSUER$4 = "issuer";
const SIGNATURE$6 = "signature";
const SERIAL_NUMBER$5 = "serialNumber";
const ATTR_CERT_VALIDITY_PERIOD$1 = "attrCertValidityPeriod";
const ATTRIBUTES$3 = "attributes";
const ISSUER_UNIQUE_ID$2 = "issuerUniqueID";
const EXTENSIONS$4 = "extensions";
const CLEAR_PROPS$Z = [
    VERSION$h,
    BASE_CERTIFICATE_ID$2,
    SUBJECT_NAME,
    ISSUER$4,
    SIGNATURE$6,
    SERIAL_NUMBER$5,
    ATTR_CERT_VALIDITY_PERIOD$1,
    ATTRIBUTES$3,
    ISSUER_UNIQUE_ID$2,
    EXTENSIONS$4
];
class AttributeCertificateInfoV1 extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$h, AttributeCertificateInfoV1.defaultValues(VERSION$h));
        if (BASE_CERTIFICATE_ID$2 in parameters) {
            this.baseCertificateID = getParametersValue(parameters, BASE_CERTIFICATE_ID$2, AttributeCertificateInfoV1.defaultValues(BASE_CERTIFICATE_ID$2));
        }
        if (SUBJECT_NAME in parameters) {
            this.subjectName = getParametersValue(parameters, SUBJECT_NAME, AttributeCertificateInfoV1.defaultValues(SUBJECT_NAME));
        }
        this.issuer = getParametersValue(parameters, ISSUER$4, AttributeCertificateInfoV1.defaultValues(ISSUER$4));
        this.signature = getParametersValue(parameters, SIGNATURE$6, AttributeCertificateInfoV1.defaultValues(SIGNATURE$6));
        this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$5, AttributeCertificateInfoV1.defaultValues(SERIAL_NUMBER$5));
        this.attrCertValidityPeriod = getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD$1, AttributeCertificateInfoV1.defaultValues(ATTR_CERT_VALIDITY_PERIOD$1));
        this.attributes = getParametersValue(parameters, ATTRIBUTES$3, AttributeCertificateInfoV1.defaultValues(ATTRIBUTES$3));
        if (ISSUER_UNIQUE_ID$2 in parameters) this.issuerUniqueID = getParametersValue(parameters, ISSUER_UNIQUE_ID$2, AttributeCertificateInfoV1.defaultValues(ISSUER_UNIQUE_ID$2));
        if (EXTENSIONS$4 in parameters) {
            this.extensions = getParametersValue(parameters, EXTENSIONS$4, AttributeCertificateInfoV1.defaultValues(EXTENSIONS$4));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$h:
                return 0;
            case BASE_CERTIFICATE_ID$2:
                return new IssuerSerial();
            case SUBJECT_NAME:
                return new GeneralNames();
            case ISSUER$4:
                return new GeneralNames();
            case SIGNATURE$6:
                return new AlgorithmIdentifier();
            case SERIAL_NUMBER$5:
                return new Integer();
            case ATTR_CERT_VALIDITY_PERIOD$1:
                return new AttCertValidityPeriod();
            case ATTRIBUTES$3:
                return [];
            case ISSUER_UNIQUE_ID$2:
                return new BitString();
            case EXTENSIONS$4:
                return new Extensions();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                new Choice({
                    value: [
                        new Constructed({
                            name: names.baseCertificateID || EMPTY_STRING1,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 0
                            },
                            value: IssuerSerial.schema().valueBlock.value
                        }),
                        new Constructed({
                            name: names.subjectName || EMPTY_STRING1,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 1
                            },
                            value: GeneralNames.schema().valueBlock.value
                        })
                    ]
                }),
                GeneralNames.schema({
                    names: {
                        blockName: names.issuer || EMPTY_STRING1
                    }
                }),
                AlgorithmIdentifier.schema(names.signature || {}),
                new Integer({
                    name: names.serialNumber || EMPTY_STRING1
                }),
                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),
                new Sequence({
                    name: names.attributes || EMPTY_STRING1,
                    value: [
                        new Repeated({
                            value: Attribute.schema()
                        })
                    ]
                }),
                new BitString({
                    optional: true,
                    name: names.issuerUniqueID || EMPTY_STRING1
                }),
                Extensions.schema(names.extensions || {}, true)
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$Z);
        const asn1 = compareSchema(schema, schema, AttributeCertificateInfoV1.schema({
            names: {
                version: VERSION$h,
                baseCertificateID: BASE_CERTIFICATE_ID$2,
                subjectName: SUBJECT_NAME,
                issuer: ISSUER$4,
                signature: {
                    names: {
                        blockName: SIGNATURE$6
                    }
                },
                serialNumber: SERIAL_NUMBER$5,
                attrCertValidityPeriod: {
                    names: {
                        blockName: ATTR_CERT_VALIDITY_PERIOD$1
                    }
                },
                attributes: ATTRIBUTES$3,
                issuerUniqueID: ISSUER_UNIQUE_ID$2,
                extensions: {
                    names: {
                        blockName: EXTENSIONS$4
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        if (BASE_CERTIFICATE_ID$2 in asn1.result) {
            this.baseCertificateID = new IssuerSerial({
                schema: new Sequence({
                    value: asn1.result.baseCertificateID.valueBlock.value
                })
            });
        }
        if (SUBJECT_NAME in asn1.result) {
            this.subjectName = new GeneralNames({
                schema: new Sequence({
                    value: asn1.result.subjectName.valueBlock.value
                })
            });
        }
        this.issuer = asn1.result.issuer;
        this.signature = new AlgorithmIdentifier({
            schema: asn1.result.signature
        });
        this.serialNumber = asn1.result.serialNumber;
        this.attrCertValidityPeriod = new AttCertValidityPeriod({
            schema: asn1.result.attrCertValidityPeriod
        });
        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, (element)=>new Attribute({
                schema: element
            })
        );
        if (ISSUER_UNIQUE_ID$2 in asn1.result) {
            this.issuerUniqueID = asn1.result.issuerUniqueID;
        }
        if (EXTENSIONS$4 in asn1.result) {
            this.extensions = new Extensions({
                schema: asn1.result.extensions
            });
        }
    }
    toSchema() {
        const result = new Sequence({
            value: [
                new Integer({
                    value: this.version
                })
            ]
        });
        if (this.baseCertificateID) {
            result.valueBlock.value.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: this.baseCertificateID.toSchema().valueBlock.value
            }));
        }
        if (this.subjectName) {
            result.valueBlock.value.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: this.subjectName.toSchema().valueBlock.value
            }));
        }
        result.valueBlock.value.push(this.issuer.toSchema());
        result.valueBlock.value.push(this.signature.toSchema());
        result.valueBlock.value.push(this.serialNumber);
        result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());
        result.valueBlock.value.push(new Sequence({
            value: Array.from(this.attributes, (o44)=>o44.toSchema()
            )
        }));
        if (this.issuerUniqueID) {
            result.valueBlock.value.push(this.issuerUniqueID);
        }
        if (this.extensions) {
            result.valueBlock.value.push(this.extensions.toSchema());
        }
        return result;
    }
    toJSON() {
        const result = {
            version: this.version
        };
        if (this.baseCertificateID) {
            result.baseCertificateID = this.baseCertificateID.toJSON();
        }
        if (this.subjectName) {
            result.subjectName = this.subjectName.toJSON();
        }
        result.issuer = this.issuer.toJSON();
        result.signature = this.signature.toJSON();
        result.serialNumber = this.serialNumber.toJSON();
        result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();
        result.attributes = Array.from(this.attributes, (o45)=>o45.toJSON()
        );
        if (this.issuerUniqueID) {
            result.issuerUniqueID = this.issuerUniqueID.toJSON();
        }
        if (this.extensions) {
            result.extensions = this.extensions.toJSON();
        }
        return result;
    }
}
AttributeCertificateInfoV1.CLASS_NAME = "AttributeCertificateInfoV1";
const ACINFO$1 = "acinfo";
const SIGNATURE_ALGORITHM$7 = "signatureAlgorithm";
const SIGNATURE_VALUE$4 = "signatureValue";
const CLEAR_PROPS$Y = [
    ACINFO$1,
    SIGNATURE_VALUE$4,
    SIGNATURE_ALGORITHM$7
];
class AttributeCertificateV1 extends PkiObject {
    constructor(parameters = {}){
        super();
        this.acinfo = getParametersValue(parameters, ACINFO$1, AttributeCertificateV1.defaultValues(ACINFO$1));
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$7, AttributeCertificateV1.defaultValues(SIGNATURE_ALGORITHM$7));
        this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE$4, AttributeCertificateV1.defaultValues(SIGNATURE_VALUE$4));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ACINFO$1:
                return new AttributeCertificateInfoV1();
            case SIGNATURE_ALGORITHM$7:
                return new AlgorithmIdentifier();
            case SIGNATURE_VALUE$4:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AttributeCertificateInfoV1.schema(names.acinfo || {}),
                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),
                new BitString({
                    name: names.signatureValue || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$Y);
        const asn1 = compareSchema(schema, schema, AttributeCertificateV1.schema({
            names: {
                acinfo: {
                    names: {
                        blockName: ACINFO$1
                    }
                },
                signatureAlgorithm: {
                    names: {
                        blockName: SIGNATURE_ALGORITHM$7
                    }
                },
                signatureValue: SIGNATURE_VALUE$4
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.acinfo = new AttributeCertificateInfoV1({
            schema: asn1.result.acinfo
        });
        this.signatureAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.signatureAlgorithm
        });
        this.signatureValue = asn1.result.signatureValue;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.acinfo.toSchema(),
                this.signatureAlgorithm.toSchema(),
                this.signatureValue
            ]
        });
    }
    toJSON() {
        return {
            acinfo: this.acinfo.toJSON(),
            signatureAlgorithm: this.signatureAlgorithm.toJSON(),
            signatureValue: this.signatureValue.toJSON()
        };
    }
}
AttributeCertificateV1.CLASS_NAME = "AttributeCertificateV1";
const DIGESTED_OBJECT_TYPE = "digestedObjectType";
const OTHER_OBJECT_TYPE_ID = "otherObjectTypeID";
const DIGEST_ALGORITHM$2 = "digestAlgorithm";
const OBJECT_DIGEST = "objectDigest";
const CLEAR_PROPS$X = [
    DIGESTED_OBJECT_TYPE,
    OTHER_OBJECT_TYPE_ID,
    DIGEST_ALGORITHM$2,
    OBJECT_DIGEST
];
class ObjectDigestInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.digestedObjectType = getParametersValue(parameters, DIGESTED_OBJECT_TYPE, ObjectDigestInfo.defaultValues(DIGESTED_OBJECT_TYPE));
        if (OTHER_OBJECT_TYPE_ID in parameters) {
            this.otherObjectTypeID = getParametersValue(parameters, OTHER_OBJECT_TYPE_ID, ObjectDigestInfo.defaultValues(OTHER_OBJECT_TYPE_ID));
        }
        this.digestAlgorithm = getParametersValue(parameters, DIGEST_ALGORITHM$2, ObjectDigestInfo.defaultValues(DIGEST_ALGORITHM$2));
        this.objectDigest = getParametersValue(parameters, OBJECT_DIGEST, ObjectDigestInfo.defaultValues(OBJECT_DIGEST));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case DIGESTED_OBJECT_TYPE:
                return new Enumerated();
            case OTHER_OBJECT_TYPE_ID:
                return new ObjectIdentifier();
            case DIGEST_ALGORITHM$2:
                return new AlgorithmIdentifier();
            case OBJECT_DIGEST:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Enumerated({
                    name: names.digestedObjectType || EMPTY_STRING1
                }),
                new ObjectIdentifier({
                    optional: true,
                    name: names.otherObjectTypeID || EMPTY_STRING1
                }),
                AlgorithmIdentifier.schema(names.digestAlgorithm || {}),
                new BitString({
                    name: names.objectDigest || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$X);
        const asn1 = compareSchema(schema, schema, ObjectDigestInfo.schema({
            names: {
                digestedObjectType: DIGESTED_OBJECT_TYPE,
                otherObjectTypeID: OTHER_OBJECT_TYPE_ID,
                digestAlgorithm: {
                    names: {
                        blockName: DIGEST_ALGORITHM$2
                    }
                },
                objectDigest: OBJECT_DIGEST
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.digestedObjectType = asn1.result.digestedObjectType;
        if (OTHER_OBJECT_TYPE_ID in asn1.result) {
            this.otherObjectTypeID = asn1.result.otherObjectTypeID;
        }
        this.digestAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.digestAlgorithm
        });
        this.objectDigest = asn1.result.objectDigest;
    }
    toSchema() {
        const result = new Sequence({
            value: [
                this.digestedObjectType
            ]
        });
        if (this.otherObjectTypeID) {
            result.valueBlock.value.push(this.otherObjectTypeID);
        }
        result.valueBlock.value.push(this.digestAlgorithm.toSchema());
        result.valueBlock.value.push(this.objectDigest);
        return result;
    }
    toJSON() {
        const result = {
            digestedObjectType: this.digestedObjectType.toJSON(),
            digestAlgorithm: this.digestAlgorithm.toJSON(),
            objectDigest: this.objectDigest.toJSON()
        };
        if (this.otherObjectTypeID) {
            result.otherObjectTypeID = this.otherObjectTypeID.toJSON();
        }
        return result;
    }
}
ObjectDigestInfo.CLASS_NAME = "ObjectDigestInfo";
const ISSUER_NAME = "issuerName";
const BASE_CERTIFICATE_ID$1 = "baseCertificateID";
const OBJECT_DIGEST_INFO$1 = "objectDigestInfo";
const CLEAR_PROPS$W = [
    ISSUER_NAME,
    BASE_CERTIFICATE_ID$1,
    OBJECT_DIGEST_INFO$1
];
class V2Form extends PkiObject {
    constructor(parameters = {}){
        super();
        if (ISSUER_NAME in parameters) {
            this.issuerName = getParametersValue(parameters, ISSUER_NAME, V2Form.defaultValues(ISSUER_NAME));
        }
        if (BASE_CERTIFICATE_ID$1 in parameters) {
            this.baseCertificateID = getParametersValue(parameters, BASE_CERTIFICATE_ID$1, V2Form.defaultValues(BASE_CERTIFICATE_ID$1));
        }
        if (OBJECT_DIGEST_INFO$1 in parameters) {
            this.objectDigestInfo = getParametersValue(parameters, OBJECT_DIGEST_INFO$1, V2Form.defaultValues(OBJECT_DIGEST_INFO$1));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ISSUER_NAME:
                return new GeneralNames();
            case BASE_CERTIFICATE_ID$1:
                return new IssuerSerial();
            case OBJECT_DIGEST_INFO$1:
                return new ObjectDigestInfo();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                GeneralNames.schema({
                    names: {
                        blockName: names.issuerName
                    }
                }, true),
                new Constructed({
                    optional: true,
                    name: names.baseCertificateID || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: IssuerSerial.schema().valueBlock.value
                }),
                new Constructed({
                    optional: true,
                    name: names.objectDigestInfo || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: ObjectDigestInfo.schema().valueBlock.value
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$W);
        const asn1 = compareSchema(schema, schema, V2Form.schema({
            names: {
                issuerName: ISSUER_NAME,
                baseCertificateID: BASE_CERTIFICATE_ID$1,
                objectDigestInfo: OBJECT_DIGEST_INFO$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (ISSUER_NAME in asn1.result) this.issuerName = new GeneralNames({
            schema: asn1.result.issuerName
        });
        if (BASE_CERTIFICATE_ID$1 in asn1.result) {
            this.baseCertificateID = new IssuerSerial({
                schema: new Sequence({
                    value: asn1.result.baseCertificateID.valueBlock.value
                })
            });
        }
        if (OBJECT_DIGEST_INFO$1 in asn1.result) {
            this.objectDigestInfo = new ObjectDigestInfo({
                schema: new Sequence({
                    value: asn1.result.objectDigestInfo.valueBlock.value
                })
            });
        }
    }
    toSchema() {
        const result = new Sequence();
        if (this.issuerName) result.valueBlock.value.push(this.issuerName.toSchema());
        if (this.baseCertificateID) {
            result.valueBlock.value.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: this.baseCertificateID.toSchema().valueBlock.value
            }));
        }
        if (this.objectDigestInfo) {
            result.valueBlock.value.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: this.objectDigestInfo.toSchema().valueBlock.value
            }));
        }
        return result;
    }
    toJSON() {
        const result = {};
        if (this.issuerName) {
            result.issuerName = this.issuerName.toJSON();
        }
        if (this.baseCertificateID) {
            result.baseCertificateID = this.baseCertificateID.toJSON();
        }
        if (this.objectDigestInfo) {
            result.objectDigestInfo = this.objectDigestInfo.toJSON();
        }
        return result;
    }
}
V2Form.CLASS_NAME = "V2Form";
const BASE_CERTIFICATE_ID = "baseCertificateID";
const ENTITY_NAME = "entityName";
const OBJECT_DIGEST_INFO = "objectDigestInfo";
const CLEAR_PROPS$V = [
    BASE_CERTIFICATE_ID,
    ENTITY_NAME,
    OBJECT_DIGEST_INFO
];
class Holder extends PkiObject {
    constructor(parameters = {}){
        super();
        if (BASE_CERTIFICATE_ID in parameters) {
            this.baseCertificateID = getParametersValue(parameters, BASE_CERTIFICATE_ID, Holder.defaultValues(BASE_CERTIFICATE_ID));
        }
        if (ENTITY_NAME in parameters) {
            this.entityName = getParametersValue(parameters, ENTITY_NAME, Holder.defaultValues(ENTITY_NAME));
        }
        if (OBJECT_DIGEST_INFO in parameters) {
            this.objectDigestInfo = getParametersValue(parameters, OBJECT_DIGEST_INFO, Holder.defaultValues(OBJECT_DIGEST_INFO));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case BASE_CERTIFICATE_ID:
                return new IssuerSerial();
            case ENTITY_NAME:
                return new GeneralNames();
            case OBJECT_DIGEST_INFO:
                return new ObjectDigestInfo();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Constructed({
                    optional: true,
                    name: names.baseCertificateID || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: IssuerSerial.schema().valueBlock.value
                }),
                new Constructed({
                    optional: true,
                    name: names.entityName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: GeneralNames.schema().valueBlock.value
                }),
                new Constructed({
                    optional: true,
                    name: names.objectDigestInfo || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    value: ObjectDigestInfo.schema().valueBlock.value
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$V);
        const asn1 = compareSchema(schema, schema, Holder.schema({
            names: {
                baseCertificateID: BASE_CERTIFICATE_ID,
                entityName: ENTITY_NAME,
                objectDigestInfo: OBJECT_DIGEST_INFO
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (BASE_CERTIFICATE_ID in asn1.result) {
            this.baseCertificateID = new IssuerSerial({
                schema: new Sequence({
                    value: asn1.result.baseCertificateID.valueBlock.value
                })
            });
        }
        if (ENTITY_NAME in asn1.result) {
            this.entityName = new GeneralNames({
                schema: new Sequence({
                    value: asn1.result.entityName.valueBlock.value
                })
            });
        }
        if (OBJECT_DIGEST_INFO in asn1.result) {
            this.objectDigestInfo = new ObjectDigestInfo({
                schema: new Sequence({
                    value: asn1.result.objectDigestInfo.valueBlock.value
                })
            });
        }
    }
    toSchema() {
        const result = new Sequence();
        if (this.baseCertificateID) {
            result.valueBlock.value.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: this.baseCertificateID.toSchema().valueBlock.value
            }));
        }
        if (this.entityName) {
            result.valueBlock.value.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: this.entityName.toSchema().valueBlock.value
            }));
        }
        if (this.objectDigestInfo) {
            result.valueBlock.value.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                },
                value: this.objectDigestInfo.toSchema().valueBlock.value
            }));
        }
        return result;
    }
    toJSON() {
        const result = {};
        if (this.baseCertificateID) {
            result.baseCertificateID = this.baseCertificateID.toJSON();
        }
        if (this.entityName) {
            result.entityName = this.entityName.toJSON();
        }
        if (this.objectDigestInfo) {
            result.objectDigestInfo = this.objectDigestInfo.toJSON();
        }
        return result;
    }
}
Holder.CLASS_NAME = "Holder";
const VERSION$g = "version";
const HOLDER = "holder";
const ISSUER$3 = "issuer";
const SIGNATURE$5 = "signature";
const SERIAL_NUMBER$4 = "serialNumber";
const ATTR_CERT_VALIDITY_PERIOD = "attrCertValidityPeriod";
const ATTRIBUTES$2 = "attributes";
const ISSUER_UNIQUE_ID$1 = "issuerUniqueID";
const EXTENSIONS$3 = "extensions";
const CLEAR_PROPS$U = [
    VERSION$g,
    HOLDER,
    ISSUER$3,
    SIGNATURE$5,
    SERIAL_NUMBER$4,
    ATTR_CERT_VALIDITY_PERIOD,
    ATTRIBUTES$2,
    ISSUER_UNIQUE_ID$1,
    EXTENSIONS$3
];
class AttributeCertificateInfoV2 extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$g, AttributeCertificateInfoV2.defaultValues(VERSION$g));
        this.holder = getParametersValue(parameters, HOLDER, AttributeCertificateInfoV2.defaultValues(HOLDER));
        this.issuer = getParametersValue(parameters, ISSUER$3, AttributeCertificateInfoV2.defaultValues(ISSUER$3));
        this.signature = getParametersValue(parameters, SIGNATURE$5, AttributeCertificateInfoV2.defaultValues(SIGNATURE$5));
        this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$4, AttributeCertificateInfoV2.defaultValues(SERIAL_NUMBER$4));
        this.attrCertValidityPeriod = getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD, AttributeCertificateInfoV2.defaultValues(ATTR_CERT_VALIDITY_PERIOD));
        this.attributes = getParametersValue(parameters, ATTRIBUTES$2, AttributeCertificateInfoV2.defaultValues(ATTRIBUTES$2));
        if (ISSUER_UNIQUE_ID$1 in parameters) {
            this.issuerUniqueID = getParametersValue(parameters, ISSUER_UNIQUE_ID$1, AttributeCertificateInfoV2.defaultValues(ISSUER_UNIQUE_ID$1));
        }
        if (EXTENSIONS$3 in parameters) {
            this.extensions = getParametersValue(parameters, EXTENSIONS$3, AttributeCertificateInfoV2.defaultValues(EXTENSIONS$3));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$g:
                return 1;
            case HOLDER:
                return new Holder();
            case ISSUER$3:
                return {};
            case SIGNATURE$5:
                return new AlgorithmIdentifier();
            case SERIAL_NUMBER$4:
                return new Integer();
            case ATTR_CERT_VALIDITY_PERIOD:
                return new AttCertValidityPeriod();
            case ATTRIBUTES$2:
                return [];
            case ISSUER_UNIQUE_ID$1:
                return new BitString();
            case EXTENSIONS$3:
                return new Extensions();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                Holder.schema(names.holder || {}),
                new Choice({
                    value: [
                        GeneralNames.schema({
                            names: {
                                blockName: names.issuer || EMPTY_STRING1
                            }
                        }),
                        new Constructed({
                            name: names.issuer || EMPTY_STRING1,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 0
                            },
                            value: V2Form.schema().valueBlock.value
                        })
                    ]
                }),
                AlgorithmIdentifier.schema(names.signature || {}),
                new Integer({
                    name: names.serialNumber || EMPTY_STRING1
                }),
                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),
                new Sequence({
                    name: names.attributes || EMPTY_STRING1,
                    value: [
                        new Repeated({
                            value: Attribute.schema()
                        })
                    ]
                }),
                new BitString({
                    optional: true,
                    name: names.issuerUniqueID || EMPTY_STRING1
                }),
                Extensions.schema(names.extensions || {}, true)
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$U);
        const asn1 = compareSchema(schema, schema, AttributeCertificateInfoV2.schema({
            names: {
                version: VERSION$g,
                holder: {
                    names: {
                        blockName: HOLDER
                    }
                },
                issuer: ISSUER$3,
                signature: {
                    names: {
                        blockName: SIGNATURE$5
                    }
                },
                serialNumber: SERIAL_NUMBER$4,
                attrCertValidityPeriod: {
                    names: {
                        blockName: ATTR_CERT_VALIDITY_PERIOD
                    }
                },
                attributes: ATTRIBUTES$2,
                issuerUniqueID: ISSUER_UNIQUE_ID$1,
                extensions: {
                    names: {
                        blockName: EXTENSIONS$3
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        this.holder = new Holder({
            schema: asn1.result.holder
        });
        switch(asn1.result.issuer.idBlock.tagClass){
            case 3:
                this.issuer = new V2Form({
                    schema: new Sequence({
                        value: asn1.result.issuer.valueBlock.value
                    })
                });
                break;
            case 1:
            default:
                throw new Error("Incorrect value for 'issuer' in AttributeCertificateInfoV2");
        }
        this.signature = new AlgorithmIdentifier({
            schema: asn1.result.signature
        });
        this.serialNumber = asn1.result.serialNumber;
        this.attrCertValidityPeriod = new AttCertValidityPeriod({
            schema: asn1.result.attrCertValidityPeriod
        });
        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, (element)=>new Attribute({
                schema: element
            })
        );
        if (ISSUER_UNIQUE_ID$1 in asn1.result) {
            this.issuerUniqueID = asn1.result.issuerUniqueID;
        }
        if (EXTENSIONS$3 in asn1.result) {
            this.extensions = new Extensions({
                schema: asn1.result.extensions
            });
        }
    }
    toSchema() {
        const result = new Sequence({
            value: [
                new Integer({
                    value: this.version
                }),
                this.holder.toSchema(),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: this.issuer.toSchema().valueBlock.value
                }),
                this.signature.toSchema(),
                this.serialNumber,
                this.attrCertValidityPeriod.toSchema(),
                new Sequence({
                    value: Array.from(this.attributes, (o46)=>o46.toSchema()
                    )
                })
            ]
        });
        if (this.issuerUniqueID) {
            result.valueBlock.value.push(this.issuerUniqueID);
        }
        if (this.extensions) {
            result.valueBlock.value.push(this.extensions.toSchema());
        }
        return result;
    }
    toJSON() {
        const result = {
            version: this.version,
            holder: this.holder.toJSON(),
            issuer: this.issuer.toJSON(),
            signature: this.signature.toJSON(),
            serialNumber: this.serialNumber.toJSON(),
            attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),
            attributes: Array.from(this.attributes, (o47)=>o47.toJSON()
            )
        };
        if (this.issuerUniqueID) {
            result.issuerUniqueID = this.issuerUniqueID.toJSON();
        }
        if (this.extensions) {
            result.extensions = this.extensions.toJSON();
        }
        return result;
    }
}
AttributeCertificateInfoV2.CLASS_NAME = "AttributeCertificateInfoV2";
const ACINFO = "acinfo";
const SIGNATURE_ALGORITHM$6 = "signatureAlgorithm";
const SIGNATURE_VALUE$3 = "signatureValue";
const CLEAR_PROPS$T = [
    ACINFO,
    SIGNATURE_ALGORITHM$6,
    SIGNATURE_VALUE$3
];
class AttributeCertificateV2 extends PkiObject {
    constructor(parameters = {}){
        super();
        this.acinfo = getParametersValue(parameters, ACINFO, AttributeCertificateV2.defaultValues(ACINFO));
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$6, AttributeCertificateV2.defaultValues(SIGNATURE_ALGORITHM$6));
        this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE$3, AttributeCertificateV2.defaultValues(SIGNATURE_VALUE$3));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ACINFO:
                return new AttributeCertificateInfoV2();
            case SIGNATURE_ALGORITHM$6:
                return new AlgorithmIdentifier();
            case SIGNATURE_VALUE$3:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AttributeCertificateInfoV2.schema(names.acinfo || {}),
                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),
                new BitString({
                    name: names.signatureValue || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$T);
        const asn1 = compareSchema(schema, schema, AttributeCertificateV2.schema({
            names: {
                acinfo: {
                    names: {
                        blockName: ACINFO
                    }
                },
                signatureAlgorithm: {
                    names: {
                        blockName: SIGNATURE_ALGORITHM$6
                    }
                },
                signatureValue: SIGNATURE_VALUE$3
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.acinfo = new AttributeCertificateInfoV2({
            schema: asn1.result.acinfo
        });
        this.signatureAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.signatureAlgorithm
        });
        this.signatureValue = asn1.result.signatureValue;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.acinfo.toSchema(),
                this.signatureAlgorithm.toSchema(),
                this.signatureValue
            ]
        });
    }
    toJSON() {
        return {
            acinfo: this.acinfo.toJSON(),
            signatureAlgorithm: this.signatureAlgorithm.toJSON(),
            signatureValue: this.signatureValue.toJSON()
        };
    }
}
AttributeCertificateV2.CLASS_NAME = "AttributeCertificateV2";
const CONTENT_TYPE = "contentType";
const CONTENT = "content";
const CLEAR_PROPS$S = [
    CONTENT_TYPE,
    CONTENT
];
class ContentInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.contentType = getParametersValue(parameters, CONTENT_TYPE, ContentInfo.defaultValues(CONTENT_TYPE));
        this.content = getParametersValue(parameters, CONTENT, ContentInfo.defaultValues(CONTENT));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CONTENT_TYPE:
                return EMPTY_STRING1;
            case CONTENT:
                return new Any();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case CONTENT_TYPE:
                return typeof memberValue === "string" && memberValue === this.defaultValues(CONTENT_TYPE);
            case CONTENT:
                return memberValue instanceof Any;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        if ("optional" in names === false) {
            names.optional = false;
        }
        return new Sequence({
            name: names.blockName || "ContentInfo",
            optional: names.optional,
            value: [
                new ObjectIdentifier({
                    name: names.contentType || CONTENT_TYPE
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Any({
                            name: names.content || CONTENT
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$S);
        const asn1 = compareSchema(schema, schema, ContentInfo.schema());
        AsnError.assertSchema(asn1, this.className);
        this.contentType = asn1.result.contentType.valueBlock.toString();
        this.content = asn1.result.content;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.contentType
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        this.content
                    ]
                })
            ]
        });
    }
    toJSON() {
        const object = {
            contentType: this.contentType
        };
        if (!(this.content instanceof Any)) {
            object.content = this.content.toJSON();
        }
        return object;
    }
}
ContentInfo.CLASS_NAME = "ContentInfo";
ContentInfo.DATA = id_ContentType_Data;
ContentInfo.SIGNED_DATA = id_ContentType_SignedData;
ContentInfo.ENVELOPED_DATA = id_ContentType_EnvelopedData;
ContentInfo.ENCRYPTED_DATA = id_ContentType_EncryptedData;
const TYPE$1 = "type";
const VALUE$4 = "value";
const UTC_TIME_NAME = "utcTimeName";
const GENERAL_TIME_NAME = "generalTimeName";
const CLEAR_PROPS$R = [
    UTC_TIME_NAME,
    GENERAL_TIME_NAME
];
var TimeType;
(function(TimeType1) {
    TimeType1[TimeType1["UTCTime"] = 0] = "UTCTime";
    TimeType1[TimeType1["GeneralizedTime"] = 1] = "GeneralizedTime";
    TimeType1[TimeType1["empty"] = 2] = "empty";
})(TimeType || (TimeType = {}));
class Time extends PkiObject {
    constructor(parameters = {}){
        super();
        this.type = getParametersValue(parameters, TYPE$1, Time.defaultValues(TYPE$1));
        this.value = getParametersValue(parameters, VALUE$4, Time.defaultValues(VALUE$4));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TYPE$1:
                return 0;
            case VALUE$4:
                return new Date(0, 0, 0);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}, optional = false) {
        const names = getParametersValue(parameters, "names", {});
        return new Choice({
            optional,
            value: [
                new UTCTime({
                    name: names.utcTimeName || EMPTY_STRING1
                }),
                new GeneralizedTime({
                    name: names.generalTimeName || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$R);
        const asn1 = compareSchema(schema, schema, Time.schema({
            names: {
                utcTimeName: UTC_TIME_NAME,
                generalTimeName: GENERAL_TIME_NAME
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (UTC_TIME_NAME in asn1.result) {
            this.type = 0;
            this.value = asn1.result.utcTimeName.toDate();
        }
        if (GENERAL_TIME_NAME in asn1.result) {
            this.type = 1;
            this.value = asn1.result.generalTimeName.toDate();
        }
    }
    toSchema() {
        if (this.type === 0) {
            return new UTCTime({
                valueDate: this.value
            });
        } else if (this.type === 1) {
            return new GeneralizedTime({
                valueDate: this.value
            });
        }
        return {};
    }
    toJSON() {
        return {
            type: this.type,
            value: this.value
        };
    }
}
Time.CLASS_NAME = "Time";
const TBS$4 = "tbs";
const VERSION$f = "version";
const SERIAL_NUMBER$3 = "serialNumber";
const SIGNATURE$4 = "signature";
const ISSUER$2 = "issuer";
const NOT_BEFORE = "notBefore";
const NOT_AFTER = "notAfter";
const SUBJECT$1 = "subject";
const SUBJECT_PUBLIC_KEY_INFO = "subjectPublicKeyInfo";
const ISSUER_UNIQUE_ID = "issuerUniqueID";
const SUBJECT_UNIQUE_ID = "subjectUniqueID";
const EXTENSIONS$2 = "extensions";
const SIGNATURE_ALGORITHM$5 = "signatureAlgorithm";
const SIGNATURE_VALUE$2 = "signatureValue";
const TBS_CERTIFICATE = "tbsCertificate";
const TBS_CERTIFICATE_VERSION = `${TBS_CERTIFICATE}.${VERSION$f}`;
const TBS_CERTIFICATE_SERIAL_NUMBER = `${TBS_CERTIFICATE}.${SERIAL_NUMBER$3}`;
const TBS_CERTIFICATE_SIGNATURE = `${TBS_CERTIFICATE}.${SIGNATURE$4}`;
const TBS_CERTIFICATE_ISSUER = `${TBS_CERTIFICATE}.${ISSUER$2}`;
const TBS_CERTIFICATE_NOT_BEFORE = `${TBS_CERTIFICATE}.${NOT_BEFORE}`;
const TBS_CERTIFICATE_NOT_AFTER = `${TBS_CERTIFICATE}.${NOT_AFTER}`;
const TBS_CERTIFICATE_SUBJECT = `${TBS_CERTIFICATE}.${SUBJECT$1}`;
const TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY = `${TBS_CERTIFICATE}.${SUBJECT_PUBLIC_KEY_INFO}`;
const TBS_CERTIFICATE_ISSUER_UNIQUE_ID = `${TBS_CERTIFICATE}.${ISSUER_UNIQUE_ID}`;
const TBS_CERTIFICATE_SUBJECT_UNIQUE_ID = `${TBS_CERTIFICATE}.${SUBJECT_UNIQUE_ID}`;
const TBS_CERTIFICATE_EXTENSIONS = `${TBS_CERTIFICATE}.${EXTENSIONS$2}`;
const CLEAR_PROPS$Q = [
    TBS_CERTIFICATE,
    TBS_CERTIFICATE_VERSION,
    TBS_CERTIFICATE_SERIAL_NUMBER,
    TBS_CERTIFICATE_SIGNATURE,
    TBS_CERTIFICATE_ISSUER,
    TBS_CERTIFICATE_NOT_BEFORE,
    TBS_CERTIFICATE_NOT_AFTER,
    TBS_CERTIFICATE_SUBJECT,
    TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY,
    TBS_CERTIFICATE_ISSUER_UNIQUE_ID,
    TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,
    TBS_CERTIFICATE_EXTENSIONS,
    SIGNATURE_ALGORITHM$5,
    SIGNATURE_VALUE$2
];
function tbsCertificate(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
        name: names.blockName || TBS_CERTIFICATE,
        value: [
            new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    new Integer({
                        name: names.tbsCertificateVersion || TBS_CERTIFICATE_VERSION
                    })
                ]
            }),
            new Integer({
                name: names.tbsCertificateSerialNumber || TBS_CERTIFICATE_SERIAL_NUMBER
            }),
            AlgorithmIdentifier.schema(names.signature || {
                names: {
                    blockName: TBS_CERTIFICATE_SIGNATURE
                }
            }),
            RelativeDistinguishedNames.schema(names.issuer || {
                names: {
                    blockName: TBS_CERTIFICATE_ISSUER
                }
            }),
            new Sequence({
                name: names.tbsCertificateValidity || "tbsCertificate.validity",
                value: [
                    Time.schema(names.notBefore || {
                        names: {
                            utcTimeName: TBS_CERTIFICATE_NOT_BEFORE,
                            generalTimeName: TBS_CERTIFICATE_NOT_BEFORE
                        }
                    }),
                    Time.schema(names.notAfter || {
                        names: {
                            utcTimeName: TBS_CERTIFICATE_NOT_AFTER,
                            generalTimeName: TBS_CERTIFICATE_NOT_AFTER
                        }
                    })
                ]
            }),
            RelativeDistinguishedNames.schema(names.subject || {
                names: {
                    blockName: TBS_CERTIFICATE_SUBJECT
                }
            }),
            PublicKeyInfo.schema(names.subjectPublicKeyInfo || {
                names: {
                    blockName: TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY
                }
            }),
            new Primitive({
                name: names.tbsCertificateIssuerUniqueID || TBS_CERTIFICATE_ISSUER_UNIQUE_ID,
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                }
            }),
            new Primitive({
                name: names.tbsCertificateSubjectUniqueID || TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                }
            }),
            new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 3
                },
                value: [
                    Extensions.schema(names.extensions || {
                        names: {
                            blockName: TBS_CERTIFICATE_EXTENSIONS
                        }
                    })
                ]
            })
        ]
    });
}
class Certificate extends PkiObject {
    constructor(parameters = {}){
        super();
        this.tbsView = new Uint8Array(getParametersValue(parameters, TBS$4, Certificate.defaultValues(TBS$4)));
        this.version = getParametersValue(parameters, VERSION$f, Certificate.defaultValues(VERSION$f));
        this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$3, Certificate.defaultValues(SERIAL_NUMBER$3));
        this.signature = getParametersValue(parameters, SIGNATURE$4, Certificate.defaultValues(SIGNATURE$4));
        this.issuer = getParametersValue(parameters, ISSUER$2, Certificate.defaultValues(ISSUER$2));
        this.notBefore = getParametersValue(parameters, NOT_BEFORE, Certificate.defaultValues(NOT_BEFORE));
        this.notAfter = getParametersValue(parameters, NOT_AFTER, Certificate.defaultValues(NOT_AFTER));
        this.subject = getParametersValue(parameters, SUBJECT$1, Certificate.defaultValues(SUBJECT$1));
        this.subjectPublicKeyInfo = getParametersValue(parameters, SUBJECT_PUBLIC_KEY_INFO, Certificate.defaultValues(SUBJECT_PUBLIC_KEY_INFO));
        if (ISSUER_UNIQUE_ID in parameters) {
            this.issuerUniqueID = getParametersValue(parameters, ISSUER_UNIQUE_ID, Certificate.defaultValues(ISSUER_UNIQUE_ID));
        }
        if (SUBJECT_UNIQUE_ID in parameters) {
            this.subjectUniqueID = getParametersValue(parameters, SUBJECT_UNIQUE_ID, Certificate.defaultValues(SUBJECT_UNIQUE_ID));
        }
        if (EXTENSIONS$2 in parameters) {
            this.extensions = getParametersValue(parameters, EXTENSIONS$2, Certificate.defaultValues(EXTENSIONS$2));
        }
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$5, Certificate.defaultValues(SIGNATURE_ALGORITHM$5));
        this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE$2, Certificate.defaultValues(SIGNATURE_VALUE$2));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    get tbs() {
        return BufferSourceConverter.toArrayBuffer(this.tbsView);
    }
    set tbs(value) {
        this.tbsView = new Uint8Array(value);
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TBS$4:
                return EMPTY_BUFFER1;
            case VERSION$f:
                return 0;
            case SERIAL_NUMBER$3:
                return new Integer();
            case SIGNATURE$4:
                return new AlgorithmIdentifier();
            case ISSUER$2:
                return new RelativeDistinguishedNames();
            case NOT_BEFORE:
                return new Time();
            case NOT_AFTER:
                return new Time();
            case SUBJECT$1:
                return new RelativeDistinguishedNames();
            case SUBJECT_PUBLIC_KEY_INFO:
                return new PublicKeyInfo();
            case ISSUER_UNIQUE_ID:
                return EMPTY_BUFFER1;
            case SUBJECT_UNIQUE_ID:
                return EMPTY_BUFFER1;
            case EXTENSIONS$2:
                return [];
            case SIGNATURE_ALGORITHM$5:
                return new AlgorithmIdentifier();
            case SIGNATURE_VALUE$2:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                tbsCertificate(names.tbsCertificate),
                AlgorithmIdentifier.schema(names.signatureAlgorithm || {
                    names: {
                        blockName: SIGNATURE_ALGORITHM$5
                    }
                }),
                new BitString({
                    name: names.signatureValue || SIGNATURE_VALUE$2
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$Q);
        const asn1 = compareSchema(schema, schema, Certificate.schema({
            names: {
                tbsCertificate: {
                    names: {
                        extensions: {
                            names: {
                                extensions: TBS_CERTIFICATE_EXTENSIONS
                            }
                        }
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.tbsView = asn1.result.tbsCertificate.valueBeforeDecodeView;
        if (TBS_CERTIFICATE_VERSION in asn1.result) this.version = asn1.result[TBS_CERTIFICATE_VERSION].valueBlock.valueDec;
        this.serialNumber = asn1.result[TBS_CERTIFICATE_SERIAL_NUMBER];
        this.signature = new AlgorithmIdentifier({
            schema: asn1.result[TBS_CERTIFICATE_SIGNATURE]
        });
        this.issuer = new RelativeDistinguishedNames({
            schema: asn1.result[TBS_CERTIFICATE_ISSUER]
        });
        this.notBefore = new Time({
            schema: asn1.result[TBS_CERTIFICATE_NOT_BEFORE]
        });
        this.notAfter = new Time({
            schema: asn1.result[TBS_CERTIFICATE_NOT_AFTER]
        });
        this.subject = new RelativeDistinguishedNames({
            schema: asn1.result[TBS_CERTIFICATE_SUBJECT]
        });
        this.subjectPublicKeyInfo = new PublicKeyInfo({
            schema: asn1.result[TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY]
        });
        if (TBS_CERTIFICATE_ISSUER_UNIQUE_ID in asn1.result) this.issuerUniqueID = asn1.result[TBS_CERTIFICATE_ISSUER_UNIQUE_ID].valueBlock.valueHex;
        if (TBS_CERTIFICATE_SUBJECT_UNIQUE_ID in asn1.result) this.subjectUniqueID = asn1.result[TBS_CERTIFICATE_SUBJECT_UNIQUE_ID].valueBlock.valueHex;
        if (TBS_CERTIFICATE_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TBS_CERTIFICATE_EXTENSIONS], (element)=>new Extension({
                schema: element
            })
        );
        this.signatureAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.signatureAlgorithm
        });
        this.signatureValue = asn1.result.signatureValue;
    }
    encodeTBS() {
        const outputArray = [];
        if (VERSION$f in this && this.version !== Certificate.defaultValues(VERSION$f)) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    new Integer({
                        value: this.version
                    })
                ]
            }));
        }
        outputArray.push(this.serialNumber);
        outputArray.push(this.signature.toSchema());
        outputArray.push(this.issuer.toSchema());
        outputArray.push(new Sequence({
            value: [
                this.notBefore.toSchema(),
                this.notAfter.toSchema()
            ]
        }));
        outputArray.push(this.subject.toSchema());
        outputArray.push(this.subjectPublicKeyInfo.toSchema());
        if (this.issuerUniqueID) {
            outputArray.push(new Primitive({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                valueHex: this.issuerUniqueID
            }));
        }
        if (this.subjectUniqueID) {
            outputArray.push(new Primitive({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                },
                valueHex: this.subjectUniqueID
            }));
        }
        if (this.extensions) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 3
                },
                value: [
                    new Sequence({
                        value: Array.from(this.extensions, (o48)=>o48.toSchema()
                        )
                    })
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toSchema(encodeFlag = false) {
        let tbsSchema;
        if (encodeFlag === false) {
            if (!this.tbsView.byteLength) {
                return Certificate.schema().value[0];
            }
            const asn1 = fromBER(this.tbsView);
            AsnError.assert(asn1, "TBS Certificate");
            tbsSchema = asn1.result;
        } else {
            tbsSchema = this.encodeTBS();
        }
        return new Sequence({
            value: [
                tbsSchema,
                this.signatureAlgorithm.toSchema(),
                this.signatureValue
            ]
        });
    }
    toJSON() {
        const res = {
            tbs: Convert.ToHex(this.tbsView),
            version: this.version,
            serialNumber: this.serialNumber.toJSON(),
            signature: this.signature.toJSON(),
            issuer: this.issuer.toJSON(),
            notBefore: this.notBefore.toJSON(),
            notAfter: this.notAfter.toJSON(),
            subject: this.subject.toJSON(),
            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),
            signatureAlgorithm: this.signatureAlgorithm.toJSON(),
            signatureValue: this.signatureValue.toJSON()
        };
        if (VERSION$f in this && this.version !== Certificate.defaultValues(VERSION$f)) {
            res.version = this.version;
        }
        if (this.issuerUniqueID) {
            res.issuerUniqueID = Convert.ToHex(this.issuerUniqueID);
        }
        if (this.subjectUniqueID) {
            res.subjectUniqueID = Convert.ToHex(this.subjectUniqueID);
        }
        if (this.extensions) {
            res.extensions = Array.from(this.extensions, (o49)=>o49.toJSON()
            );
        }
        return res;
    }
    async getPublicKey(parameters, crypto = getCrypto(true)) {
        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);
    }
    async getKeyHash(hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
        return crypto.digest({
            name: hashAlgorithm
        }, this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
    }
    async sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
        if (!privateKey) {
            throw new Error("Need to provide a private key for signing");
        }
        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);
        const parameters = signatureParameters.parameters;
        this.signature = signatureParameters.signatureAlgorithm;
        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;
        this.tbsView = new Uint8Array(this.encodeTBS().toBER());
        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);
        this.signatureValue = new BitString({
            valueHex: signature
        });
    }
    async verify(issuerCertificate, crypto = getCrypto(true)) {
        let subjectPublicKeyInfo;
        if (issuerCertificate) {
            subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;
        } else if (this.issuer.isEqual(this.subject)) {
            subjectPublicKeyInfo = this.subjectPublicKeyInfo;
        }
        if (!(subjectPublicKeyInfo instanceof PublicKeyInfo)) {
            throw new Error("Please provide issuer certificate as a parameter");
        }
        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);
    }
}
Certificate.CLASS_NAME = "Certificate";
function checkCA(cert, signerCert = null) {
    if (signerCert && cert.issuer.isEqual(signerCert.issuer) && cert.serialNumber.isEqual(signerCert.serialNumber)) {
        return null;
    }
    let isCA = false;
    if (cert.extensions) {
        for (const extension of cert.extensions){
            if (extension.extnID === id_BasicConstraints && extension.parsedValue instanceof BasicConstraints) {
                if (extension.parsedValue.cA) {
                    isCA = true;
                    break;
                }
            }
        }
    }
    if (isCA) {
        return cert;
    }
    return null;
}
const CERT_ID$1 = "certId";
const CERT_VALUE = "certValue";
const PARSED_VALUE$4 = "parsedValue";
const CLEAR_PROPS$P = [
    CERT_ID$1,
    CERT_VALUE
];
class CertBag extends PkiObject {
    constructor(parameters = {}){
        super();
        this.certId = getParametersValue(parameters, CERT_ID$1, CertBag.defaultValues(CERT_ID$1));
        this.certValue = getParametersValue(parameters, CERT_VALUE, CertBag.defaultValues(CERT_VALUE));
        if (PARSED_VALUE$4 in parameters) {
            this.parsedValue = getParametersValue(parameters, PARSED_VALUE$4, CertBag.defaultValues(PARSED_VALUE$4));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CERT_ID$1:
                return EMPTY_STRING1;
            case CERT_VALUE:
                return new Any();
            case PARSED_VALUE$4:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case CERT_ID$1:
                return memberValue === EMPTY_STRING1;
            case CERT_VALUE:
                return memberValue instanceof Any;
            case PARSED_VALUE$4:
                return memberValue instanceof Object && Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.id || "id"
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Any({
                            name: names.value || "value"
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$P);
        const asn1 = compareSchema(schema, schema, CertBag.schema({
            names: {
                id: CERT_ID$1,
                value: CERT_VALUE
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.certId = asn1.result.certId.valueBlock.toString();
        this.certValue = asn1.result.certValue;
        const certValueHex = this.certValue.valueBlock.valueHexView;
        switch(this.certId){
            case id_CertBag_X509Certificate:
                {
                    try {
                        this.parsedValue = Certificate.fromBER(certValueHex);
                    } catch (ex) {
                        AttributeCertificateV2.fromBER(certValueHex);
                    }
                }
                break;
            case id_CertBag_AttributeCertificate:
                {
                    this.parsedValue = AttributeCertificateV2.fromBER(certValueHex);
                }
                break;
            case id_CertBag_SDSICertificate:
            default:
                throw new Error(`Incorrect CERT_ID value in CertBag: ${this.certId}`);
        }
    }
    toSchema() {
        if (PARSED_VALUE$4 in this) {
            if ("acinfo" in this.parsedValue) {
                this.certId = id_CertBag_AttributeCertificate;
            } else {
                this.certId = id_CertBag_X509Certificate;
            }
            this.certValue = new OctetString({
                valueHex: this.parsedValue.toSchema().toBER(false)
            });
        }
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.certId
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        "toSchema" in this.certValue ? this.certValue.toSchema() : this.certValue
                    ]
                })
            ]
        });
    }
    toJSON() {
        return {
            certId: this.certId,
            certValue: this.certValue.toJSON()
        };
    }
}
CertBag.CLASS_NAME = "CertBag";
const USER_CERTIFICATE = "userCertificate";
const REVOCATION_DATE = "revocationDate";
const CRL_ENTRY_EXTENSIONS = "crlEntryExtensions";
const CLEAR_PROPS$O = [
    USER_CERTIFICATE,
    REVOCATION_DATE,
    CRL_ENTRY_EXTENSIONS
];
class RevokedCertificate extends PkiObject {
    constructor(parameters = {}){
        super();
        this.userCertificate = getParametersValue(parameters, USER_CERTIFICATE, RevokedCertificate.defaultValues(USER_CERTIFICATE));
        this.revocationDate = getParametersValue(parameters, REVOCATION_DATE, RevokedCertificate.defaultValues(REVOCATION_DATE));
        if (CRL_ENTRY_EXTENSIONS in parameters) {
            this.crlEntryExtensions = getParametersValue(parameters, CRL_ENTRY_EXTENSIONS, RevokedCertificate.defaultValues(CRL_ENTRY_EXTENSIONS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case USER_CERTIFICATE:
                return new Integer();
            case REVOCATION_DATE:
                return new Time();
            case CRL_ENTRY_EXTENSIONS:
                return new Extensions();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.userCertificate || USER_CERTIFICATE
                }),
                Time.schema({
                    names: {
                        utcTimeName: names.revocationDate || REVOCATION_DATE,
                        generalTimeName: names.revocationDate || REVOCATION_DATE
                    }
                }),
                Extensions.schema({
                    names: {
                        blockName: names.crlEntryExtensions || CRL_ENTRY_EXTENSIONS
                    }
                }, true)
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$O);
        const asn1 = compareSchema(schema, schema, RevokedCertificate.schema());
        AsnError.assertSchema(asn1, this.className);
        this.userCertificate = asn1.result.userCertificate;
        this.revocationDate = new Time({
            schema: asn1.result.revocationDate
        });
        if (CRL_ENTRY_EXTENSIONS in asn1.result) {
            this.crlEntryExtensions = new Extensions({
                schema: asn1.result.crlEntryExtensions
            });
        }
    }
    toSchema() {
        const outputArray = [
            this.userCertificate,
            this.revocationDate.toSchema()
        ];
        if (this.crlEntryExtensions) {
            outputArray.push(this.crlEntryExtensions.toSchema());
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            userCertificate: this.userCertificate.toJSON(),
            revocationDate: this.revocationDate.toJSON()
        };
        if (this.crlEntryExtensions) {
            res.crlEntryExtensions = this.crlEntryExtensions.toJSON();
        }
        return res;
    }
}
RevokedCertificate.CLASS_NAME = "RevokedCertificate";
const TBS$3 = "tbs";
const VERSION$e = "version";
const SIGNATURE$3 = "signature";
const ISSUER$1 = "issuer";
const THIS_UPDATE$1 = "thisUpdate";
const NEXT_UPDATE$1 = "nextUpdate";
const REVOKED_CERTIFICATES = "revokedCertificates";
const CRL_EXTENSIONS = "crlExtensions";
const SIGNATURE_ALGORITHM$4 = "signatureAlgorithm";
const SIGNATURE_VALUE$1 = "signatureValue";
const TBS_CERT_LIST = "tbsCertList";
const TBS_CERT_LIST_VERSION = `${TBS_CERT_LIST}.version`;
const TBS_CERT_LIST_SIGNATURE = `${TBS_CERT_LIST}.signature`;
const TBS_CERT_LIST_ISSUER = `${TBS_CERT_LIST}.issuer`;
const TBS_CERT_LIST_THIS_UPDATE = `${TBS_CERT_LIST}.thisUpdate`;
const TBS_CERT_LIST_NEXT_UPDATE = `${TBS_CERT_LIST}.nextUpdate`;
const TBS_CERT_LIST_REVOKED_CERTIFICATES = `${TBS_CERT_LIST}.revokedCertificates`;
const TBS_CERT_LIST_EXTENSIONS = `${TBS_CERT_LIST}.extensions`;
const CLEAR_PROPS$N = [
    TBS_CERT_LIST,
    TBS_CERT_LIST_VERSION,
    TBS_CERT_LIST_SIGNATURE,
    TBS_CERT_LIST_ISSUER,
    TBS_CERT_LIST_THIS_UPDATE,
    TBS_CERT_LIST_NEXT_UPDATE,
    TBS_CERT_LIST_REVOKED_CERTIFICATES,
    TBS_CERT_LIST_EXTENSIONS,
    SIGNATURE_ALGORITHM$4,
    SIGNATURE_VALUE$1
];
function tbsCertList(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
        name: names.blockName || TBS_CERT_LIST,
        value: [
            new Integer({
                optional: true,
                name: names.tbsCertListVersion || TBS_CERT_LIST_VERSION,
                value: 2
            }),
            AlgorithmIdentifier.schema(names.signature || {
                names: {
                    blockName: TBS_CERT_LIST_SIGNATURE
                }
            }),
            RelativeDistinguishedNames.schema(names.issuer || {
                names: {
                    blockName: TBS_CERT_LIST_ISSUER
                }
            }),
            Time.schema(names.tbsCertListThisUpdate || {
                names: {
                    utcTimeName: TBS_CERT_LIST_THIS_UPDATE,
                    generalTimeName: TBS_CERT_LIST_THIS_UPDATE
                }
            }),
            Time.schema(names.tbsCertListNextUpdate || {
                names: {
                    utcTimeName: TBS_CERT_LIST_NEXT_UPDATE,
                    generalTimeName: TBS_CERT_LIST_NEXT_UPDATE
                }
            }, true),
            new Sequence({
                optional: true,
                value: [
                    new Repeated({
                        name: names.tbsCertListRevokedCertificates || TBS_CERT_LIST_REVOKED_CERTIFICATES,
                        value: new Sequence({
                            value: [
                                new Integer(),
                                Time.schema(),
                                Extensions.schema({}, true)
                            ]
                        })
                    })
                ]
            }),
            new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    Extensions.schema(names.crlExtensions || {
                        names: {
                            blockName: TBS_CERT_LIST_EXTENSIONS
                        }
                    })
                ]
            })
        ]
    });
}
const WELL_KNOWN_EXTENSIONS = [
    id_AuthorityKeyIdentifier,
    id_IssuerAltName,
    id_CRLNumber,
    id_BaseCRLNumber,
    id_IssuingDistributionPoint,
    id_FreshestCRL,
    id_AuthorityInfoAccess,
    id_CRLReason,
    id_InvalidityDate,
    id_CertificateIssuer
];
class CertificateRevocationList extends PkiObject {
    constructor(parameters = {}){
        super();
        this.tbsView = new Uint8Array(getParametersValue(parameters, TBS$3, CertificateRevocationList.defaultValues(TBS$3)));
        this.version = getParametersValue(parameters, VERSION$e, CertificateRevocationList.defaultValues(VERSION$e));
        this.signature = getParametersValue(parameters, SIGNATURE$3, CertificateRevocationList.defaultValues(SIGNATURE$3));
        this.issuer = getParametersValue(parameters, ISSUER$1, CertificateRevocationList.defaultValues(ISSUER$1));
        this.thisUpdate = getParametersValue(parameters, THIS_UPDATE$1, CertificateRevocationList.defaultValues(THIS_UPDATE$1));
        if (NEXT_UPDATE$1 in parameters) {
            this.nextUpdate = getParametersValue(parameters, NEXT_UPDATE$1, CertificateRevocationList.defaultValues(NEXT_UPDATE$1));
        }
        if (REVOKED_CERTIFICATES in parameters) {
            this.revokedCertificates = getParametersValue(parameters, REVOKED_CERTIFICATES, CertificateRevocationList.defaultValues(REVOKED_CERTIFICATES));
        }
        if (CRL_EXTENSIONS in parameters) {
            this.crlExtensions = getParametersValue(parameters, CRL_EXTENSIONS, CertificateRevocationList.defaultValues(CRL_EXTENSIONS));
        }
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$4, CertificateRevocationList.defaultValues(SIGNATURE_ALGORITHM$4));
        this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE$1, CertificateRevocationList.defaultValues(SIGNATURE_VALUE$1));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    get tbs() {
        return BufferSourceConverter.toArrayBuffer(this.tbsView);
    }
    set tbs(value) {
        this.tbsView = new Uint8Array(value);
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TBS$3:
                return EMPTY_BUFFER1;
            case VERSION$e:
                return 0;
            case SIGNATURE$3:
                return new AlgorithmIdentifier();
            case ISSUER$1:
                return new RelativeDistinguishedNames();
            case THIS_UPDATE$1:
                return new Time();
            case NEXT_UPDATE$1:
                return new Time();
            case REVOKED_CERTIFICATES:
                return [];
            case CRL_EXTENSIONS:
                return new Extensions();
            case SIGNATURE_ALGORITHM$4:
                return new AlgorithmIdentifier();
            case SIGNATURE_VALUE$1:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || "CertificateList",
            value: [
                tbsCertList(parameters),
                AlgorithmIdentifier.schema(names.signatureAlgorithm || {
                    names: {
                        blockName: SIGNATURE_ALGORITHM$4
                    }
                }),
                new BitString({
                    name: names.signatureValue || SIGNATURE_VALUE$1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$N);
        const asn1 = compareSchema(schema, schema, CertificateRevocationList.schema());
        AsnError.assertSchema(asn1, this.className);
        this.tbsView = asn1.result.tbsCertList.valueBeforeDecodeView;
        if (TBS_CERT_LIST_VERSION in asn1.result) {
            this.version = asn1.result[TBS_CERT_LIST_VERSION].valueBlock.valueDec;
        }
        this.signature = new AlgorithmIdentifier({
            schema: asn1.result[TBS_CERT_LIST_SIGNATURE]
        });
        this.issuer = new RelativeDistinguishedNames({
            schema: asn1.result[TBS_CERT_LIST_ISSUER]
        });
        this.thisUpdate = new Time({
            schema: asn1.result[TBS_CERT_LIST_THIS_UPDATE]
        });
        if (TBS_CERT_LIST_NEXT_UPDATE in asn1.result) {
            this.nextUpdate = new Time({
                schema: asn1.result[TBS_CERT_LIST_NEXT_UPDATE]
            });
        }
        if (TBS_CERT_LIST_REVOKED_CERTIFICATES in asn1.result) {
            this.revokedCertificates = Array.from(asn1.result[TBS_CERT_LIST_REVOKED_CERTIFICATES], (element)=>new RevokedCertificate({
                    schema: element
                })
            );
        }
        if (TBS_CERT_LIST_EXTENSIONS in asn1.result) {
            this.crlExtensions = new Extensions({
                schema: asn1.result[TBS_CERT_LIST_EXTENSIONS]
            });
        }
        this.signatureAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.signatureAlgorithm
        });
        this.signatureValue = asn1.result.signatureValue;
    }
    encodeTBS() {
        const outputArray = [];
        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) {
            outputArray.push(new Integer({
                value: this.version
            }));
        }
        outputArray.push(this.signature.toSchema());
        outputArray.push(this.issuer.toSchema());
        outputArray.push(this.thisUpdate.toSchema());
        if (this.nextUpdate) {
            outputArray.push(this.nextUpdate.toSchema());
        }
        if (this.revokedCertificates) {
            outputArray.push(new Sequence({
                value: Array.from(this.revokedCertificates, (o50)=>o50.toSchema()
                )
            }));
        }
        if (this.crlExtensions) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    this.crlExtensions.toSchema()
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toSchema(encodeFlag = false) {
        let tbsSchema;
        if (!encodeFlag) {
            if (!this.tbsView.byteLength) {
                return CertificateRevocationList.schema();
            }
            const asn1 = fromBER(this.tbsView);
            AsnError.assert(asn1, "TBS Certificate Revocation List");
            tbsSchema = asn1.result;
        } else {
            tbsSchema = this.encodeTBS();
        }
        return new Sequence({
            value: [
                tbsSchema,
                this.signatureAlgorithm.toSchema(),
                this.signatureValue
            ]
        });
    }
    toJSON() {
        const res = {
            tbs: Convert.ToHex(this.tbsView),
            version: this.version,
            signature: this.signature.toJSON(),
            issuer: this.issuer.toJSON(),
            thisUpdate: this.thisUpdate.toJSON(),
            signatureAlgorithm: this.signatureAlgorithm.toJSON(),
            signatureValue: this.signatureValue.toJSON()
        };
        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) res.version = this.version;
        if (this.nextUpdate) {
            res.nextUpdate = this.nextUpdate.toJSON();
        }
        if (this.revokedCertificates) {
            res.revokedCertificates = Array.from(this.revokedCertificates, (o51)=>o51.toJSON()
            );
        }
        if (this.crlExtensions) {
            res.crlExtensions = this.crlExtensions.toJSON();
        }
        return res;
    }
    isCertificateRevoked(certificate) {
        if (!this.issuer.isEqual(certificate.issuer)) {
            return false;
        }
        if (!this.revokedCertificates) {
            return false;
        }
        for (const revokedCertificate of this.revokedCertificates){
            if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) {
                return true;
            }
        }
        return false;
    }
    async sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
        if (!privateKey) {
            throw new Error("Need to provide a private key for signing");
        }
        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);
        const { parameters  } = signatureParameters;
        this.signature = signatureParameters.signatureAlgorithm;
        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;
        this.tbsView = new Uint8Array(this.encodeTBS().toBER());
        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);
        this.signatureValue = new BitString({
            valueHex: signature
        });
    }
    async verify(parameters = {}, crypto = getCrypto(true)) {
        let subjectPublicKeyInfo;
        if (parameters.issuerCertificate) {
            subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;
            if (!this.issuer.isEqual(parameters.issuerCertificate.subject)) {
                return false;
            }
        }
        if (parameters.publicKeyInfo) {
            subjectPublicKeyInfo = parameters.publicKeyInfo;
        }
        if (!subjectPublicKeyInfo) {
            throw new Error("Issuer's certificate must be provided as an input parameter");
        }
        if (this.crlExtensions) {
            for (const extension of this.crlExtensions.extensions){
                if (extension.critical) {
                    if (!WELL_KNOWN_EXTENSIONS.includes(extension.extnID)) return false;
                }
            }
        }
        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);
    }
}
CertificateRevocationList.CLASS_NAME = "CertificateRevocationList";
const CRL_ID = "crlId";
const CRL_VALUE = "crlValue";
const PARSED_VALUE$3 = "parsedValue";
const CLEAR_PROPS$M = [
    CRL_ID,
    CRL_VALUE
];
class CRLBag extends PkiObject {
    constructor(parameters = {}){
        super();
        this.crlId = getParametersValue(parameters, CRL_ID, CRLBag.defaultValues(CRL_ID));
        this.crlValue = getParametersValue(parameters, CRL_VALUE, CRLBag.defaultValues(CRL_VALUE));
        if (PARSED_VALUE$3 in parameters) {
            this.parsedValue = getParametersValue(parameters, PARSED_VALUE$3, CRLBag.defaultValues(PARSED_VALUE$3));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CRL_ID:
                return EMPTY_STRING1;
            case CRL_VALUE:
                return new Any();
            case PARSED_VALUE$3:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case CRL_ID:
                return memberValue === EMPTY_STRING1;
            case CRL_VALUE:
                return memberValue instanceof Any;
            case PARSED_VALUE$3:
                return memberValue instanceof Object && Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.id || "id"
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Any({
                            name: names.value || "value"
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$M);
        const asn1 = compareSchema(schema, schema, CRLBag.schema({
            names: {
                id: CRL_ID,
                value: CRL_VALUE
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.crlId = asn1.result.crlId.valueBlock.toString();
        this.crlValue = asn1.result.crlValue;
        switch(this.crlId){
            case id_CRLBag_X509CRL:
                {
                    this.parsedValue = CertificateRevocationList.fromBER(this.certValue.valueBlock.valueHex);
                }
                break;
            default:
                throw new Error(`Incorrect CRL_ID value in CRLBag: ${this.crlId}`);
        }
    }
    toSchema() {
        if (this.parsedValue) {
            this.crlId = id_CRLBag_X509CRL;
            this.crlValue = new OctetString({
                valueHex: this.parsedValue.toSchema().toBER(false)
            });
        }
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.crlId
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        this.crlValue.toSchema()
                    ]
                })
            ]
        });
    }
    toJSON() {
        return {
            crlId: this.crlId,
            crlValue: this.crlValue.toJSON()
        };
    }
}
CRLBag.CLASS_NAME = "CRLBag";
const VERSION$d = "version";
const ENCRYPTED_CONTENT_INFO$1 = "encryptedContentInfo";
const UNPROTECTED_ATTRS$1 = "unprotectedAttrs";
const CLEAR_PROPS$L = [
    VERSION$d,
    ENCRYPTED_CONTENT_INFO$1,
    UNPROTECTED_ATTRS$1
];
class EncryptedData extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$d, EncryptedData.defaultValues(VERSION$d));
        this.encryptedContentInfo = getParametersValue(parameters, ENCRYPTED_CONTENT_INFO$1, EncryptedData.defaultValues(ENCRYPTED_CONTENT_INFO$1));
        if (UNPROTECTED_ATTRS$1 in parameters) {
            this.unprotectedAttrs = getParametersValue(parameters, UNPROTECTED_ATTRS$1, EncryptedData.defaultValues(UNPROTECTED_ATTRS$1));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$d:
                return 0;
            case ENCRYPTED_CONTENT_INFO$1:
                return new EncryptedContentInfo();
            case UNPROTECTED_ATTRS$1:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$d:
                return memberValue === 0;
            case ENCRYPTED_CONTENT_INFO$1:
                return EncryptedContentInfo.compareWithDefault("contentType", memberValue.contentType) && EncryptedContentInfo.compareWithDefault("contentEncryptionAlgorithm", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault("encryptedContent", memberValue.encryptedContent);
            case UNPROTECTED_ATTRS$1:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new Repeated({
                            name: names.unprotectedAttrs || EMPTY_STRING1,
                            value: Attribute.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$L);
        const asn1 = compareSchema(schema, schema, EncryptedData.schema({
            names: {
                version: VERSION$d,
                encryptedContentInfo: {
                    names: {
                        blockName: ENCRYPTED_CONTENT_INFO$1
                    }
                },
                unprotectedAttrs: UNPROTECTED_ATTRS$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        this.encryptedContentInfo = new EncryptedContentInfo({
            schema: asn1.result.encryptedContentInfo
        });
        if (UNPROTECTED_ATTRS$1 in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, (element)=>new Attribute({
                schema: element
            })
        );
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.version
        }));
        outputArray.push(this.encryptedContentInfo.toSchema());
        if (this.unprotectedAttrs) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: Array.from(this.unprotectedAttrs, (o52)=>o52.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            version: this.version,
            encryptedContentInfo: this.encryptedContentInfo.toJSON()
        };
        if (this.unprotectedAttrs) res.unprotectedAttrs = Array.from(this.unprotectedAttrs, (o53)=>o53.toJSON()
        );
        return res;
    }
    async encrypt(parameters) {
        ArgumentError.assert(parameters, "parameters", "object");
        const encryptParams = {
            ...parameters,
            contentType: "1.2.840.113549.1.7.1"
        };
        this.encryptedContentInfo = await getCrypto(true).encryptEncryptedContentInfo(encryptParams);
    }
    async decrypt(parameters, crypto = getCrypto(true)) {
        ArgumentError.assert(parameters, "parameters", "object");
        const decryptParams = {
            ...parameters,
            encryptedContentInfo: this.encryptedContentInfo
        };
        return crypto.decryptEncryptedContentInfo(decryptParams);
    }
}
EncryptedData.CLASS_NAME = "EncryptedData";
const ENCRYPTION_ALGORITHM = "encryptionAlgorithm";
const ENCRYPTED_DATA = "encryptedData";
const PARSED_VALUE$2 = "parsedValue";
const CLEAR_PROPS$K = [
    ENCRYPTION_ALGORITHM,
    ENCRYPTED_DATA
];
class PKCS8ShroudedKeyBag extends PkiObject {
    constructor(parameters = {}){
        super();
        this.encryptionAlgorithm = getParametersValue(parameters, ENCRYPTION_ALGORITHM, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTION_ALGORITHM));
        this.encryptedData = getParametersValue(parameters, ENCRYPTED_DATA, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTED_DATA));
        if (PARSED_VALUE$2 in parameters) {
            this.parsedValue = getParametersValue(parameters, PARSED_VALUE$2, PKCS8ShroudedKeyBag.defaultValues(PARSED_VALUE$2));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ENCRYPTION_ALGORITHM:
                return new AlgorithmIdentifier();
            case ENCRYPTED_DATA:
                return new OctetString();
            case PARSED_VALUE$2:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case ENCRYPTION_ALGORITHM:
                return AlgorithmIdentifier.compareWithDefault("algorithmId", memberValue.algorithmId) && "algorithmParams" in memberValue === false;
            case ENCRYPTED_DATA:
                return memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName));
            case PARSED_VALUE$2:
                return memberValue instanceof Object && Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.encryptionAlgorithm || {
                    names: {
                        blockName: ENCRYPTION_ALGORITHM
                    }
                }),
                new Choice({
                    value: [
                        new OctetString({
                            name: names.encryptedData || ENCRYPTED_DATA
                        }),
                        new OctetString({
                            idBlock: {
                                isConstructed: true
                            },
                            name: names.encryptedData || ENCRYPTED_DATA
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$K);
        const asn1 = compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({
            names: {
                encryptionAlgorithm: {
                    names: {
                        blockName: ENCRYPTION_ALGORITHM
                    }
                },
                encryptedData: ENCRYPTED_DATA
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.encryptionAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.encryptionAlgorithm
        });
        this.encryptedData = asn1.result.encryptedData;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.encryptionAlgorithm.toSchema(),
                this.encryptedData
            ]
        });
    }
    toJSON() {
        return {
            encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),
            encryptedData: this.encryptedData.toJSON()
        };
    }
    async parseInternalValues(parameters, crypto = getCrypto(true)) {
        const cmsEncrypted = new EncryptedData({
            encryptedContentInfo: new EncryptedContentInfo({
                contentEncryptionAlgorithm: this.encryptionAlgorithm,
                encryptedContent: this.encryptedData
            })
        });
        const decryptedData = await cmsEncrypted.decrypt(parameters, crypto);
        this.parsedValue = PrivateKeyInfo.fromBER(decryptedData);
    }
    async makeInternalValues(parameters) {
        if (!this.parsedValue) {
            throw new Error("Please initialize \"parsedValue\" first");
        }
        const cmsEncrypted = new EncryptedData();
        const encryptParams = {
            ...parameters,
            contentToEncrypt: this.parsedValue.toSchema().toBER(false)
        };
        await cmsEncrypted.encrypt(encryptParams);
        if (!cmsEncrypted.encryptedContentInfo.encryptedContent) {
            throw new Error("The filed `encryptedContent` in EncryptedContentInfo is empty");
        }
        this.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;
        this.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;
    }
}
PKCS8ShroudedKeyBag.CLASS_NAME = "PKCS8ShroudedKeyBag";
const SECRET_TYPE_ID = "secretTypeId";
const SECRET_VALUE = "secretValue";
const CLEAR_PROPS$J = [
    SECRET_TYPE_ID,
    SECRET_VALUE
];
class SecretBag extends PkiObject {
    constructor(parameters = {}){
        super();
        this.secretTypeId = getParametersValue(parameters, SECRET_TYPE_ID, SecretBag.defaultValues(SECRET_TYPE_ID));
        this.secretValue = getParametersValue(parameters, SECRET_VALUE, SecretBag.defaultValues(SECRET_VALUE));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case SECRET_TYPE_ID:
                return EMPTY_STRING1;
            case SECRET_VALUE:
                return new Any();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case SECRET_TYPE_ID:
                return memberValue === EMPTY_STRING1;
            case SECRET_VALUE:
                return memberValue instanceof Any;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.id || "id"
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Any({
                            name: names.value || "value"
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$J);
        const asn1 = compareSchema(schema, schema, SecretBag.schema({
            names: {
                id: SECRET_TYPE_ID,
                value: SECRET_VALUE
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();
        this.secretValue = asn1.result.secretValue;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.secretTypeId
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        this.secretValue.toSchema()
                    ]
                })
            ]
        });
    }
    toJSON() {
        return {
            secretTypeId: this.secretTypeId,
            secretValue: this.secretValue.toJSON()
        };
    }
}
SecretBag.CLASS_NAME = "SecretBag";
class SafeBagValueFactory {
    static getItems() {
        if (!this.items) {
            this.items = {};
            SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.1", PrivateKeyInfo);
            SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.2", PKCS8ShroudedKeyBag);
            SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.3", CertBag);
            SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.4", CRLBag);
            SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.5", SecretBag);
            SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.6", SafeContents);
        }
        return this.items;
    }
    static register(id, type) {
        this.getItems()[id] = type;
    }
    static find(id) {
        return this.getItems()[id] || null;
    }
}
const BAG_ID = "bagId";
const BAG_VALUE = "bagValue";
const BAG_ATTRIBUTES = "bagAttributes";
const CLEAR_PROPS$I = [
    BAG_ID,
    BAG_VALUE,
    BAG_ATTRIBUTES
];
class SafeBag extends PkiObject {
    constructor(parameters = {}){
        super();
        this.bagId = getParametersValue(parameters, BAG_ID, SafeBag.defaultValues(BAG_ID));
        this.bagValue = getParametersValue(parameters, BAG_VALUE, SafeBag.defaultValues(BAG_VALUE));
        if (BAG_ATTRIBUTES in parameters) {
            this.bagAttributes = getParametersValue(parameters, BAG_ATTRIBUTES, SafeBag.defaultValues(BAG_ATTRIBUTES));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case BAG_ID:
                return EMPTY_STRING1;
            case BAG_VALUE:
                return new Any();
            case BAG_ATTRIBUTES:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case BAG_ID:
                return memberValue === EMPTY_STRING1;
            case BAG_VALUE:
                return memberValue instanceof Any;
            case BAG_ATTRIBUTES:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.bagId || BAG_ID
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Any({
                            name: names.bagValue || BAG_VALUE
                        })
                    ]
                }),
                new Set1({
                    optional: true,
                    value: [
                        new Repeated({
                            name: names.bagAttributes || BAG_ATTRIBUTES,
                            value: Attribute.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$I);
        const asn1 = compareSchema(schema, schema, SafeBag.schema({
            names: {
                bagId: BAG_ID,
                bagValue: BAG_VALUE,
                bagAttributes: BAG_ATTRIBUTES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.bagId = asn1.result.bagId.valueBlock.toString();
        const bagType = SafeBagValueFactory.find(this.bagId);
        if (!bagType) {
            throw new Error(`Invalid BAG_ID for SafeBag: ${this.bagId}`);
        }
        this.bagValue = new bagType({
            schema: asn1.result.bagValue
        });
        if (BAG_ATTRIBUTES in asn1.result) {
            this.bagAttributes = Array.from(asn1.result.bagAttributes, (element)=>new Attribute({
                    schema: element
                })
            );
        }
    }
    toSchema() {
        const outputArray = [
            new ObjectIdentifier({
                value: this.bagId
            }),
            new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    this.bagValue.toSchema()
                ]
            })
        ];
        if (this.bagAttributes) {
            outputArray.push(new Set1({
                value: Array.from(this.bagAttributes, (o54)=>o54.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const output = {
            bagId: this.bagId,
            bagValue: this.bagValue.toJSON()
        };
        if (this.bagAttributes) {
            output.bagAttributes = Array.from(this.bagAttributes, (o55)=>o55.toJSON()
            );
        }
        return output;
    }
}
SafeBag.CLASS_NAME = "SafeBag";
const SAFE_BUGS = "safeBags";
class SafeContents extends PkiObject {
    constructor(parameters = {}){
        super();
        this.safeBags = getParametersValue(parameters, SAFE_BUGS, SafeContents.defaultValues(SAFE_BUGS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case SAFE_BUGS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case SAFE_BUGS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.safeBags || EMPTY_STRING1,
                    value: SafeBag.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            SAFE_BUGS
        ]);
        const asn1 = compareSchema(schema, schema, SafeContents.schema({
            names: {
                safeBags: SAFE_BUGS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.safeBags = Array.from(asn1.result.safeBags, (element)=>new SafeBag({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.safeBags, (o56)=>o56.toSchema()
            )
        });
    }
    toJSON() {
        return {
            safeBags: Array.from(this.safeBags, (o57)=>o57.toJSON()
            )
        };
    }
}
SafeContents.CLASS_NAME = "SafeContents";
const OTHER_CERT_FORMAT = "otherCertFormat";
const OTHER_CERT = "otherCert";
const CLEAR_PROPS$H = [
    OTHER_CERT_FORMAT,
    OTHER_CERT
];
class OtherCertificateFormat extends PkiObject {
    constructor(parameters = {}){
        super();
        this.otherCertFormat = getParametersValue(parameters, OTHER_CERT_FORMAT, OtherCertificateFormat.defaultValues(OTHER_CERT_FORMAT));
        this.otherCert = getParametersValue(parameters, OTHER_CERT, OtherCertificateFormat.defaultValues(OTHER_CERT));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case OTHER_CERT_FORMAT:
                return EMPTY_STRING1;
            case OTHER_CERT:
                return new Any();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.otherCertFormat || OTHER_CERT_FORMAT
                }),
                new Any({
                    name: names.otherCert || OTHER_CERT
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$H);
        const asn1 = compareSchema(schema, schema, OtherCertificateFormat.schema());
        AsnError.assertSchema(asn1, this.className);
        this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();
        this.otherCert = asn1.result.otherCert;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.otherCertFormat
                }),
                this.otherCert
            ]
        });
    }
    toJSON() {
        const res = {
            otherCertFormat: this.otherCertFormat
        };
        if (!(this.otherCert instanceof Any)) {
            res.otherCert = this.otherCert.toJSON();
        }
        return res;
    }
}
const CERTIFICATES$1 = "certificates";
const CLEAR_PROPS$G = [
    CERTIFICATES$1
];
class CertificateSet extends PkiObject {
    constructor(parameters = {}){
        super();
        this.certificates = getParametersValue(parameters, CERTIFICATES$1, CertificateSet.defaultValues(CERTIFICATES$1));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CERTIFICATES$1:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Set1({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.certificates || CERTIFICATES$1,
                    value: new Choice({
                        value: [
                            Certificate.schema(),
                            new Constructed({
                                idBlock: {
                                    tagClass: 3,
                                    tagNumber: 0
                                },
                                value: [
                                    new Any()
                                ]
                            }),
                            new Constructed({
                                idBlock: {
                                    tagClass: 3,
                                    tagNumber: 1
                                },
                                value: [
                                    new Sequence()
                                ]
                            }),
                            new Constructed({
                                idBlock: {
                                    tagClass: 3,
                                    tagNumber: 2
                                },
                                value: AttributeCertificateV2.schema().valueBlock.value
                            }),
                            new Constructed({
                                idBlock: {
                                    tagClass: 3,
                                    tagNumber: 3
                                },
                                value: OtherCertificateFormat.schema().valueBlock.value
                            })
                        ]
                    })
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$G);
        const asn1 = compareSchema(schema, schema, CertificateSet.schema());
        AsnError.assertSchema(asn1, this.className);
        this.certificates = Array.from(asn1.result.certificates || [], (element)=>{
            const initialTagNumber = element.idBlock.tagNumber;
            if (element.idBlock.tagClass === 1) return new Certificate({
                schema: element
            });
            const elementSequence = new Sequence({
                value: element.valueBlock.value
            });
            switch(initialTagNumber){
                case 1:
                    if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {
                        return new AttributeCertificateV2({
                            schema: elementSequence
                        });
                    } else {
                        return new AttributeCertificateV1({
                            schema: elementSequence
                        });
                    }
                case 2:
                    return new AttributeCertificateV2({
                        schema: elementSequence
                    });
                case 3:
                    return new OtherCertificateFormat({
                        schema: elementSequence
                    });
            }
            return element;
        });
    }
    toSchema() {
        return new Set1({
            value: Array.from(this.certificates, (element)=>{
                switch(true){
                    case element instanceof Certificate:
                        return element.toSchema();
                    case element instanceof AttributeCertificateV1:
                        return new Constructed({
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 1
                            },
                            value: element.toSchema().valueBlock.value
                        });
                    case element instanceof AttributeCertificateV2:
                        return new Constructed({
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 2
                            },
                            value: element.toSchema().valueBlock.value
                        });
                    case element instanceof OtherCertificateFormat:
                        return new Constructed({
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 3
                            },
                            value: element.toSchema().valueBlock.value
                        });
                }
                return element.toSchema();
            })
        });
    }
    toJSON() {
        return {
            certificates: Array.from(this.certificates, (o58)=>o58.toJSON()
            )
        };
    }
}
CertificateSet.CLASS_NAME = "CertificateSet";
const OTHER_REV_INFO_FORMAT = "otherRevInfoFormat";
const OTHER_REV_INFO = "otherRevInfo";
const CLEAR_PROPS$F = [
    OTHER_REV_INFO_FORMAT,
    OTHER_REV_INFO
];
class OtherRevocationInfoFormat extends PkiObject {
    constructor(parameters = {}){
        super();
        this.otherRevInfoFormat = getParametersValue(parameters, OTHER_REV_INFO_FORMAT, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO_FORMAT));
        this.otherRevInfo = getParametersValue(parameters, OTHER_REV_INFO, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case OTHER_REV_INFO_FORMAT:
                return EMPTY_STRING1;
            case OTHER_REV_INFO:
                return new Any();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.otherRevInfoFormat || OTHER_REV_INFO_FORMAT
                }),
                new Any({
                    name: names.otherRevInfo || OTHER_REV_INFO
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$F);
        const asn1 = compareSchema(schema, schema, OtherRevocationInfoFormat.schema());
        AsnError.assertSchema(asn1, this.className);
        this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();
        this.otherRevInfo = asn1.result.otherRevInfo;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.otherRevInfoFormat
                }),
                this.otherRevInfo
            ]
        });
    }
    toJSON() {
        const res = {
            otherRevInfoFormat: this.otherRevInfoFormat
        };
        if (!(this.otherRevInfo instanceof Any)) {
            res.otherRevInfo = this.otherRevInfo.toJSON();
        }
        return res;
    }
}
OtherRevocationInfoFormat.CLASS_NAME = "OtherRevocationInfoFormat";
const CRLS$3 = "crls";
const OTHER_REVOCATION_INFOS = "otherRevocationInfos";
const CLEAR_PROPS$E = [
    CRLS$3
];
class RevocationInfoChoices extends PkiObject {
    constructor(parameters = {}){
        super();
        this.crls = getParametersValue(parameters, CRLS$3, RevocationInfoChoices.defaultValues(CRLS$3));
        this.otherRevocationInfos = getParametersValue(parameters, OTHER_REVOCATION_INFOS, RevocationInfoChoices.defaultValues(OTHER_REVOCATION_INFOS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CRLS$3:
                return [];
            case OTHER_REVOCATION_INFOS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Set1({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.crls || EMPTY_STRING1,
                    value: new Choice({
                        value: [
                            CertificateRevocationList.schema(),
                            new Constructed({
                                idBlock: {
                                    tagClass: 3,
                                    tagNumber: 1
                                },
                                value: [
                                    new ObjectIdentifier(),
                                    new Any()
                                ]
                            })
                        ]
                    })
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$E);
        const asn1 = compareSchema(schema, schema, RevocationInfoChoices.schema({
            names: {
                crls: CRLS$3
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (asn1.result.crls) {
            for (const element of asn1.result.crls){
                if (element.idBlock.tagClass === 1) this.crls.push(new CertificateRevocationList({
                    schema: element
                }));
                else this.otherRevocationInfos.push(new OtherRevocationInfoFormat({
                    schema: element
                }));
            }
        }
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(...Array.from(this.crls, (o59)=>o59.toSchema()
        ));
        outputArray.push(...Array.from(this.otherRevocationInfos, (element)=>{
            const schema = element.toSchema();
            schema.idBlock.tagClass = 3;
            schema.idBlock.tagNumber = 1;
            return schema;
        }));
        return new Set1({
            value: outputArray
        });
    }
    toJSON() {
        return {
            crls: Array.from(this.crls, (o60)=>o60.toJSON()
            ),
            otherRevocationInfos: Array.from(this.otherRevocationInfos, (o61)=>o61.toJSON()
            )
        };
    }
}
RevocationInfoChoices.CLASS_NAME = "RevocationInfoChoices";
const CERTS$3 = "certs";
const CRLS$2 = "crls";
const CLEAR_PROPS$D = [
    CERTS$3,
    CRLS$2
];
class OriginatorInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.crls = getParametersValue(parameters, CRLS$2, OriginatorInfo.defaultValues(CRLS$2));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CERTS$3:
                return new CertificateSet();
            case CRLS$2:
                return new RevocationInfoChoices();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case CERTS$3:
                return memberValue.certificates.length === 0;
            case CRLS$2:
                return memberValue.crls.length === 0 && memberValue.otherRevocationInfos.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Constructed({
                    name: names.certs || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: CertificateSet.schema().valueBlock.value
                }),
                new Constructed({
                    name: names.crls || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: RevocationInfoChoices.schema().valueBlock.value
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$D);
        const asn1 = compareSchema(schema, schema, OriginatorInfo.schema({
            names: {
                certs: CERTS$3,
                crls: CRLS$2
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (CERTS$3 in asn1.result) {
            this.certs = new CertificateSet({
                schema: new Set1({
                    value: asn1.result.certs.valueBlock.value
                })
            });
        }
        if (CRLS$2 in asn1.result) {
            this.crls = new RevocationInfoChoices({
                schema: new Set1({
                    value: asn1.result.crls.valueBlock.value
                })
            });
        }
    }
    toSchema() {
        const sequenceValue = [];
        if (this.certs) {
            sequenceValue.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: this.certs.toSchema().valueBlock.value
            }));
        }
        if (this.crls) {
            sequenceValue.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: this.crls.toSchema().valueBlock.value
            }));
        }
        return new Sequence({
            value: sequenceValue
        });
    }
    toJSON() {
        const res = {};
        if (this.certs) {
            res.certs = this.certs.toJSON();
        }
        if (this.crls) {
            res.crls = this.crls.toJSON();
        }
        return res;
    }
}
OriginatorInfo.CLASS_NAME = "OriginatorInfo";
const ISSUER = "issuer";
const SERIAL_NUMBER$2 = "serialNumber";
const CLEAR_PROPS$C = [
    ISSUER,
    SERIAL_NUMBER$2
];
class IssuerAndSerialNumber extends PkiObject {
    constructor(parameters = {}){
        super();
        this.issuer = getParametersValue(parameters, ISSUER, IssuerAndSerialNumber.defaultValues(ISSUER));
        this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$2, IssuerAndSerialNumber.defaultValues(SERIAL_NUMBER$2));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ISSUER:
                return new RelativeDistinguishedNames();
            case SERIAL_NUMBER$2:
                return new Integer();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                RelativeDistinguishedNames.schema(names.issuer || {}),
                new Integer({
                    name: names.serialNumber || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$C);
        const asn1 = compareSchema(schema, schema, IssuerAndSerialNumber.schema({
            names: {
                issuer: {
                    names: {
                        blockName: ISSUER
                    }
                },
                serialNumber: SERIAL_NUMBER$2
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.issuer = new RelativeDistinguishedNames({
            schema: asn1.result.issuer
        });
        this.serialNumber = asn1.result.serialNumber;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.issuer.toSchema(),
                this.serialNumber
            ]
        });
    }
    toJSON() {
        return {
            issuer: this.issuer.toJSON(),
            serialNumber: this.serialNumber.toJSON()
        };
    }
}
IssuerAndSerialNumber.CLASS_NAME = "IssuerAndSerialNumber";
const VARIANT$3 = "variant";
const VALUE$3 = "value";
const CLEAR_PROPS$B = [
    "blockName"
];
class RecipientIdentifier extends PkiObject {
    constructor(parameters = {}){
        super();
        this.variant = getParametersValue(parameters, VARIANT$3, RecipientIdentifier.defaultValues(VARIANT$3));
        if (VALUE$3 in parameters) {
            this.value = getParametersValue(parameters, VALUE$3, RecipientIdentifier.defaultValues(VALUE$3));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VARIANT$3:
                return -1;
            case VALUE$3:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VARIANT$3:
                return memberValue === -1;
            case VALUE$3:
                return Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Choice({
            value: [
                IssuerAndSerialNumber.schema({
                    names: {
                        blockName: names.blockName || EMPTY_STRING1
                    }
                }),
                new Primitive({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$B);
        const asn1 = compareSchema(schema, schema, RecipientIdentifier.schema({
            names: {
                blockName: "blockName"
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (asn1.result.blockName.idBlock.tagClass === 1) {
            this.variant = 1;
            this.value = new IssuerAndSerialNumber({
                schema: asn1.result.blockName
            });
        } else {
            this.variant = 2;
            this.value = new OctetString({
                valueHex: asn1.result.blockName.valueBlock.valueHex
            });
        }
    }
    toSchema() {
        switch(this.variant){
            case 1:
                if (!(this.value instanceof IssuerAndSerialNumber)) {
                    throw new Error("Incorrect type of RecipientIdentifier.value. It should be IssuerAndSerialNumber.");
                }
                return this.value.toSchema();
            case 2:
                if (!(this.value instanceof OctetString)) {
                    throw new Error("Incorrect type of RecipientIdentifier.value. It should be ASN.1 OctetString.");
                }
                return new Primitive({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    valueHex: this.value.valueBlock.valueHexView
                });
            default:
                return new Any();
        }
    }
    toJSON() {
        const res = {
            variant: this.variant
        };
        if ((this.variant === 1 || this.variant === 2) && this.value) {
            res.value = this.value.toJSON();
        }
        return res;
    }
}
RecipientIdentifier.CLASS_NAME = "RecipientIdentifier";
const VERSION$c = "version";
const RID$1 = "rid";
const KEY_ENCRYPTION_ALGORITHM$3 = "keyEncryptionAlgorithm";
const ENCRYPTED_KEY$3 = "encryptedKey";
const RECIPIENT_CERTIFICATE$1 = "recipientCertificate";
const CLEAR_PROPS$A = [
    VERSION$c,
    RID$1,
    KEY_ENCRYPTION_ALGORITHM$3,
    ENCRYPTED_KEY$3
];
class KeyTransRecipientInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$c, KeyTransRecipientInfo.defaultValues(VERSION$c));
        this.rid = getParametersValue(parameters, RID$1, KeyTransRecipientInfo.defaultValues(RID$1));
        this.keyEncryptionAlgorithm = getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$3, KeyTransRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$3));
        this.encryptedKey = getParametersValue(parameters, ENCRYPTED_KEY$3, KeyTransRecipientInfo.defaultValues(ENCRYPTED_KEY$3));
        this.recipientCertificate = getParametersValue(parameters, RECIPIENT_CERTIFICATE$1, KeyTransRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE$1));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$c:
                return -1;
            case RID$1:
                return {};
            case KEY_ENCRYPTION_ALGORITHM$3:
                return new AlgorithmIdentifier();
            case ENCRYPTED_KEY$3:
                return new OctetString();
            case RECIPIENT_CERTIFICATE$1:
                return new Certificate();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$c:
                return memberValue === KeyTransRecipientInfo.defaultValues(VERSION$c);
            case RID$1:
                return Object.keys(memberValue).length === 0;
            case KEY_ENCRYPTION_ALGORITHM$3:
            case ENCRYPTED_KEY$3:
                return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));
            case RECIPIENT_CERTIFICATE$1:
                return false;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                RecipientIdentifier.schema(names.rid || {}),
                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),
                new OctetString({
                    name: names.encryptedKey || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$A);
        const asn1 = compareSchema(schema, schema, KeyTransRecipientInfo.schema({
            names: {
                version: VERSION$c,
                rid: {
                    names: {
                        blockName: RID$1
                    }
                },
                keyEncryptionAlgorithm: {
                    names: {
                        blockName: KEY_ENCRYPTION_ALGORITHM$3
                    }
                },
                encryptedKey: ENCRYPTED_KEY$3
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        if (asn1.result.rid.idBlock.tagClass === 3) {
            this.rid = new OctetString({
                valueHex: asn1.result.rid.valueBlock.valueHex
            });
        } else {
            this.rid = new IssuerAndSerialNumber({
                schema: asn1.result.rid
            });
        }
        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.keyEncryptionAlgorithm
        });
        this.encryptedKey = asn1.result.encryptedKey;
    }
    toSchema() {
        const outputArray = [];
        if (this.rid instanceof IssuerAndSerialNumber) {
            this.version = 0;
            outputArray.push(new Integer({
                value: this.version
            }));
            outputArray.push(this.rid.toSchema());
        } else {
            this.version = 2;
            outputArray.push(new Integer({
                value: this.version
            }));
            outputArray.push(new Primitive({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                valueHex: this.rid.valueBlock.valueHexView
            }));
        }
        outputArray.push(this.keyEncryptionAlgorithm.toSchema());
        outputArray.push(this.encryptedKey);
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        return {
            version: this.version,
            rid: this.rid.toJSON(),
            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
            encryptedKey: this.encryptedKey.toJSON()
        };
    }
}
KeyTransRecipientInfo.CLASS_NAME = "KeyTransRecipientInfo";
const ALGORITHM = "algorithm";
const PUBLIC_KEY = "publicKey";
const CLEAR_PROPS$z = [
    ALGORITHM,
    PUBLIC_KEY
];
class OriginatorPublicKey extends PkiObject {
    constructor(parameters = {}){
        super();
        this.algorithm = getParametersValue(parameters, ALGORITHM, OriginatorPublicKey.defaultValues(ALGORITHM));
        this.publicKey = getParametersValue(parameters, PUBLIC_KEY, OriginatorPublicKey.defaultValues(PUBLIC_KEY));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ALGORITHM:
                return new AlgorithmIdentifier();
            case PUBLIC_KEY:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case ALGORITHM:
            case PUBLIC_KEY:
                return memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName));
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.algorithm || {}),
                new BitString({
                    name: names.publicKey || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$z);
        const asn1 = compareSchema(schema, schema, OriginatorPublicKey.schema({
            names: {
                algorithm: {
                    names: {
                        blockName: ALGORITHM
                    }
                },
                publicKey: PUBLIC_KEY
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.algorithm = new AlgorithmIdentifier({
            schema: asn1.result.algorithm
        });
        this.publicKey = asn1.result.publicKey;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.algorithm.toSchema(),
                this.publicKey
            ]
        });
    }
    toJSON() {
        return {
            algorithm: this.algorithm.toJSON(),
            publicKey: this.publicKey.toJSON()
        };
    }
}
OriginatorPublicKey.CLASS_NAME = "OriginatorPublicKey";
const VARIANT$2 = "variant";
const VALUE$2 = "value";
const CLEAR_PROPS$y = [
    "blockName"
];
class OriginatorIdentifierOrKey extends PkiObject {
    constructor(parameters = {}){
        super();
        this.variant = getParametersValue(parameters, VARIANT$2, OriginatorIdentifierOrKey.defaultValues(VARIANT$2));
        if (VALUE$2 in parameters) {
            this.value = getParametersValue(parameters, VALUE$2, OriginatorIdentifierOrKey.defaultValues(VALUE$2));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VARIANT$2:
                return -1;
            case VALUE$2:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VARIANT$2:
                return memberValue === -1;
            case VALUE$2:
                return Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Choice({
            value: [
                IssuerAndSerialNumber.schema({
                    names: {
                        blockName: names.blockName || EMPTY_STRING1
                    }
                }),
                new Primitive({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    name: names.blockName || EMPTY_STRING1
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    name: names.blockName || EMPTY_STRING1,
                    value: OriginatorPublicKey.schema().valueBlock.value
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$y);
        const asn1 = compareSchema(schema, schema, OriginatorIdentifierOrKey.schema({
            names: {
                blockName: "blockName"
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (asn1.result.blockName.idBlock.tagClass === 1) {
            this.variant = 1;
            this.value = new IssuerAndSerialNumber({
                schema: asn1.result.blockName
            });
        } else {
            if (asn1.result.blockName.idBlock.tagNumber === 0) {
                asn1.result.blockName.idBlock.tagClass = 1;
                asn1.result.blockName.idBlock.tagNumber = 4;
                this.variant = 2;
                this.value = asn1.result.blockName;
            } else {
                this.variant = 3;
                this.value = new OriginatorPublicKey({
                    schema: new Sequence({
                        value: asn1.result.blockName.valueBlock.value
                    })
                });
            }
        }
    }
    toSchema() {
        switch(this.variant){
            case 1:
                return this.value.toSchema();
            case 2:
                this.value.idBlock.tagClass = 3;
                this.value.idBlock.tagNumber = 0;
                return this.value;
            case 3:
                {
                    const _schema = this.value.toSchema();
                    _schema.idBlock.tagClass = 3;
                    _schema.idBlock.tagNumber = 1;
                    return _schema;
                }
            default:
                return new Any();
        }
    }
    toJSON() {
        const res = {
            variant: this.variant
        };
        if (this.variant === 1 || this.variant === 2 || this.variant === 3) {
            res.value = this.value.toJSON();
        }
        return res;
    }
}
OriginatorIdentifierOrKey.CLASS_NAME = "OriginatorIdentifierOrKey";
const KEY_ATTR_ID = "keyAttrId";
const KEY_ATTR = "keyAttr";
const CLEAR_PROPS$x = [
    KEY_ATTR_ID,
    KEY_ATTR
];
class OtherKeyAttribute extends PkiObject {
    constructor(parameters = {}){
        super();
        this.keyAttrId = getParametersValue(parameters, KEY_ATTR_ID, OtherKeyAttribute.defaultValues(KEY_ATTR_ID));
        if (KEY_ATTR in parameters) {
            this.keyAttr = getParametersValue(parameters, KEY_ATTR, OtherKeyAttribute.defaultValues(KEY_ATTR));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case KEY_ATTR_ID:
                return EMPTY_STRING1;
            case KEY_ATTR:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case KEY_ATTR_ID:
                return typeof memberValue === "string" && memberValue === EMPTY_STRING1;
            case KEY_ATTR:
                return Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            optional: names.optional || true,
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.keyAttrId || EMPTY_STRING1
                }),
                new Any({
                    optional: true,
                    name: names.keyAttr || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$x);
        const asn1 = compareSchema(schema, schema, OtherKeyAttribute.schema({
            names: {
                keyAttrId: KEY_ATTR_ID,
                keyAttr: KEY_ATTR
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();
        if (KEY_ATTR in asn1.result) {
            this.keyAttr = asn1.result.keyAttr;
        }
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new ObjectIdentifier({
            value: this.keyAttrId
        }));
        if (KEY_ATTR in this) {
            outputArray.push(this.keyAttr);
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            keyAttrId: this.keyAttrId
        };
        if (KEY_ATTR in this) {
            res.keyAttr = this.keyAttr.toJSON();
        }
        return res;
    }
}
OtherKeyAttribute.CLASS_NAME = "OtherKeyAttribute";
const SUBJECT_KEY_IDENTIFIER = "subjectKeyIdentifier";
const DATE$1 = "date";
const OTHER$1 = "other";
const CLEAR_PROPS$w = [
    SUBJECT_KEY_IDENTIFIER,
    DATE$1,
    OTHER$1
];
class RecipientKeyIdentifier extends PkiObject {
    constructor(parameters = {}){
        super();
        this.subjectKeyIdentifier = getParametersValue(parameters, SUBJECT_KEY_IDENTIFIER, RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));
        if (DATE$1 in parameters) {
            this.date = getParametersValue(parameters, DATE$1, RecipientKeyIdentifier.defaultValues(DATE$1));
        }
        if (OTHER$1 in parameters) {
            this.other = getParametersValue(parameters, OTHER$1, RecipientKeyIdentifier.defaultValues(OTHER$1));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case SUBJECT_KEY_IDENTIFIER:
                return new OctetString();
            case DATE$1:
                return new GeneralizedTime();
            case OTHER$1:
                return new OtherKeyAttribute();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case SUBJECT_KEY_IDENTIFIER:
                return memberValue.isEqual(RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));
            case DATE$1:
                return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;
            case OTHER$1:
                return memberValue.keyAttrId === EMPTY_STRING1 && "keyAttr" in memberValue === false;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new OctetString({
                    name: names.subjectKeyIdentifier || EMPTY_STRING1
                }),
                new GeneralizedTime({
                    optional: true,
                    name: names.date || EMPTY_STRING1
                }),
                OtherKeyAttribute.schema(names.other || {})
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$w);
        const asn1 = compareSchema(schema, schema, RecipientKeyIdentifier.schema({
            names: {
                subjectKeyIdentifier: SUBJECT_KEY_IDENTIFIER,
                date: DATE$1,
                other: {
                    names: {
                        blockName: OTHER$1
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;
        if (DATE$1 in asn1.result) this.date = asn1.result.date;
        if (OTHER$1 in asn1.result) this.other = new OtherKeyAttribute({
            schema: asn1.result.other
        });
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.subjectKeyIdentifier);
        if (this.date) {
            outputArray.push(this.date);
        }
        if (this.other) {
            outputArray.push(this.other.toSchema());
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()
        };
        if (this.date) {
            res.date = this.date.toJSON();
        }
        if (this.other) {
            res.other = this.other.toJSON();
        }
        return res;
    }
}
RecipientKeyIdentifier.CLASS_NAME = "RecipientKeyIdentifier";
const VARIANT$1 = "variant";
const VALUE$1 = "value";
const CLEAR_PROPS$v = [
    "blockName"
];
class KeyAgreeRecipientIdentifier extends PkiObject {
    constructor(parameters = {}){
        super();
        this.variant = getParametersValue(parameters, VARIANT$1, KeyAgreeRecipientIdentifier.defaultValues(VARIANT$1));
        this.value = getParametersValue(parameters, VALUE$1, KeyAgreeRecipientIdentifier.defaultValues(VALUE$1));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VARIANT$1:
                return -1;
            case VALUE$1:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VARIANT$1:
                return memberValue === -1;
            case VALUE$1:
                return Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Choice({
            value: [
                IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {
                    names: {
                        blockName: names.blockName || EMPTY_STRING1
                    }
                }),
                new Constructed({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: RecipientKeyIdentifier.schema(names.rKeyId || {
                        names: {
                            blockName: names.blockName || EMPTY_STRING1
                        }
                    }).valueBlock.value
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$v);
        const asn1 = compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({
            names: {
                blockName: "blockName"
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (asn1.result.blockName.idBlock.tagClass === 1) {
            this.variant = 1;
            this.value = new IssuerAndSerialNumber({
                schema: asn1.result.blockName
            });
        } else {
            this.variant = 2;
            this.value = new RecipientKeyIdentifier({
                schema: new Sequence({
                    value: asn1.result.blockName.valueBlock.value
                })
            });
        }
    }
    toSchema() {
        switch(this.variant){
            case 1:
                return this.value.toSchema();
            case 2:
                return new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: this.value.toSchema().valueBlock.value
                });
            default:
                return new Any();
        }
    }
    toJSON() {
        const res = {
            variant: this.variant
        };
        if (this.variant === 1 || this.variant === 2) {
            res.value = this.value.toJSON();
        }
        return res;
    }
}
KeyAgreeRecipientIdentifier.CLASS_NAME = "KeyAgreeRecipientIdentifier";
const RID = "rid";
const ENCRYPTED_KEY$2 = "encryptedKey";
const CLEAR_PROPS$u = [
    RID,
    ENCRYPTED_KEY$2
];
class RecipientEncryptedKey extends PkiObject {
    constructor(parameters = {}){
        super();
        this.rid = getParametersValue(parameters, RID, RecipientEncryptedKey.defaultValues(RID));
        this.encryptedKey = getParametersValue(parameters, ENCRYPTED_KEY$2, RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case RID:
                return new KeyAgreeRecipientIdentifier();
            case ENCRYPTED_KEY$2:
                return new OctetString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case RID:
                return memberValue.variant === -1 && "value" in memberValue === false;
            case ENCRYPTED_KEY$2:
                return memberValue.isEqual(RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                KeyAgreeRecipientIdentifier.schema(names.rid || {}),
                new OctetString({
                    name: names.encryptedKey || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$u);
        const asn1 = compareSchema(schema, schema, RecipientEncryptedKey.schema({
            names: {
                rid: {
                    names: {
                        blockName: RID
                    }
                },
                encryptedKey: ENCRYPTED_KEY$2
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.rid = new KeyAgreeRecipientIdentifier({
            schema: asn1.result.rid
        });
        this.encryptedKey = asn1.result.encryptedKey;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.rid.toSchema(),
                this.encryptedKey
            ]
        });
    }
    toJSON() {
        return {
            rid: this.rid.toJSON(),
            encryptedKey: this.encryptedKey.toJSON()
        };
    }
}
RecipientEncryptedKey.CLASS_NAME = "RecipientEncryptedKey";
const ENCRYPTED_KEYS = "encryptedKeys";
const RECIPIENT_ENCRYPTED_KEYS = "RecipientEncryptedKeys";
const CLEAR_PROPS$t = [
    RECIPIENT_ENCRYPTED_KEYS
];
class RecipientEncryptedKeys extends PkiObject {
    constructor(parameters = {}){
        super();
        this.encryptedKeys = getParametersValue(parameters, ENCRYPTED_KEYS, RecipientEncryptedKeys.defaultValues(ENCRYPTED_KEYS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ENCRYPTED_KEYS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case ENCRYPTED_KEYS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.RecipientEncryptedKeys || EMPTY_STRING1,
                    value: RecipientEncryptedKey.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$t);
        const asn1 = compareSchema(schema, schema, RecipientEncryptedKeys.schema({
            names: {
                RecipientEncryptedKeys: RECIPIENT_ENCRYPTED_KEYS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, (element)=>new RecipientEncryptedKey({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.encryptedKeys, (o62)=>o62.toSchema()
            )
        });
    }
    toJSON() {
        return {
            encryptedKeys: Array.from(this.encryptedKeys, (o63)=>o63.toJSON()
            )
        };
    }
}
RecipientEncryptedKeys.CLASS_NAME = "RecipientEncryptedKeys";
const VERSION$b = "version";
const ORIGINATOR = "originator";
const UKM = "ukm";
const KEY_ENCRYPTION_ALGORITHM$2 = "keyEncryptionAlgorithm";
const RECIPIENT_ENCRYPTED_KEY = "recipientEncryptedKeys";
const RECIPIENT_CERTIFICATE = "recipientCertificate";
const RECIPIENT_PUBLIC_KEY = "recipientPublicKey";
const CLEAR_PROPS$s = [
    VERSION$b,
    ORIGINATOR,
    UKM,
    KEY_ENCRYPTION_ALGORITHM$2,
    RECIPIENT_ENCRYPTED_KEY
];
class KeyAgreeRecipientInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$b, KeyAgreeRecipientInfo.defaultValues(VERSION$b));
        this.originator = getParametersValue(parameters, ORIGINATOR, KeyAgreeRecipientInfo.defaultValues(ORIGINATOR));
        if (UKM in parameters) {
            this.ukm = getParametersValue(parameters, UKM, KeyAgreeRecipientInfo.defaultValues(UKM));
        }
        this.keyEncryptionAlgorithm = getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$2, KeyAgreeRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$2));
        this.recipientEncryptedKeys = getParametersValue(parameters, RECIPIENT_ENCRYPTED_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_ENCRYPTED_KEY));
        this.recipientCertificate = getParametersValue(parameters, RECIPIENT_CERTIFICATE, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE));
        this.recipientPublicKey = getParametersValue(parameters, RECIPIENT_PUBLIC_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_PUBLIC_KEY));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$b:
                return 0;
            case ORIGINATOR:
                return new OriginatorIdentifierOrKey();
            case UKM:
                return new OctetString();
            case KEY_ENCRYPTION_ALGORITHM$2:
                return new AlgorithmIdentifier();
            case RECIPIENT_ENCRYPTED_KEY:
                return new RecipientEncryptedKeys();
            case RECIPIENT_CERTIFICATE:
                return new Certificate();
            case RECIPIENT_PUBLIC_KEY:
                return null;
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$b:
                return memberValue === 0;
            case ORIGINATOR:
                return memberValue.variant === -1 && "value" in memberValue === false;
            case UKM:
                return memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(UKM));
            case KEY_ENCRYPTION_ALGORITHM$2:
                return memberValue.algorithmId === EMPTY_STRING1 && "algorithmParams" in memberValue === false;
            case RECIPIENT_ENCRYPTED_KEY:
                return memberValue.encryptedKeys.length === 0;
            case RECIPIENT_CERTIFICATE:
                return false;
            case RECIPIENT_PUBLIC_KEY:
                return false;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        OriginatorIdentifierOrKey.schema(names.originator || {})
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new OctetString({
                            name: names.ukm || EMPTY_STRING1
                        })
                    ]
                }),
                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),
                RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$s);
        const asn1 = compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({
            names: {
                version: VERSION$b,
                originator: {
                    names: {
                        blockName: ORIGINATOR
                    }
                },
                ukm: UKM,
                keyEncryptionAlgorithm: {
                    names: {
                        blockName: KEY_ENCRYPTION_ALGORITHM$2
                    }
                },
                recipientEncryptedKeys: {
                    names: {
                        blockName: RECIPIENT_ENCRYPTED_KEY
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        this.originator = new OriginatorIdentifierOrKey({
            schema: asn1.result.originator
        });
        if (UKM in asn1.result) this.ukm = asn1.result.ukm;
        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.keyEncryptionAlgorithm
        });
        this.recipientEncryptedKeys = new RecipientEncryptedKeys({
            schema: asn1.result.recipientEncryptedKeys
        });
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.version
        }));
        outputArray.push(new Constructed({
            idBlock: {
                tagClass: 3,
                tagNumber: 0
            },
            value: [
                this.originator.toSchema()
            ]
        }));
        if (this.ukm) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: [
                    this.ukm
                ]
            }));
        }
        outputArray.push(this.keyEncryptionAlgorithm.toSchema());
        outputArray.push(this.recipientEncryptedKeys.toSchema());
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            version: this.version,
            originator: this.originator.toJSON(),
            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
            recipientEncryptedKeys: this.recipientEncryptedKeys.toJSON()
        };
        if (this.ukm) {
            res.ukm = this.ukm.toJSON();
        }
        return res;
    }
}
KeyAgreeRecipientInfo.CLASS_NAME = "KeyAgreeRecipientInfo";
const KEY_IDENTIFIER = "keyIdentifier";
const DATE1 = "date";
const OTHER = "other";
const CLEAR_PROPS$r = [
    KEY_IDENTIFIER,
    DATE1,
    OTHER
];
class KEKIdentifier extends PkiObject {
    constructor(parameters = {}){
        super();
        this.keyIdentifier = getParametersValue(parameters, KEY_IDENTIFIER, KEKIdentifier.defaultValues(KEY_IDENTIFIER));
        if (DATE1 in parameters) {
            this.date = getParametersValue(parameters, DATE1, KEKIdentifier.defaultValues(DATE1));
        }
        if (OTHER in parameters) {
            this.other = getParametersValue(parameters, OTHER, KEKIdentifier.defaultValues(OTHER));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case KEY_IDENTIFIER:
                return new OctetString();
            case DATE1:
                return new GeneralizedTime();
            case OTHER:
                return new OtherKeyAttribute();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case KEY_IDENTIFIER:
                return memberValue.isEqual(KEKIdentifier.defaultValues(KEY_IDENTIFIER));
            case DATE1:
                return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;
            case OTHER:
                return memberValue.compareWithDefault("keyAttrId", memberValue.keyAttrId) && "keyAttr" in memberValue === false;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new OctetString({
                    name: names.keyIdentifier || EMPTY_STRING1
                }),
                new GeneralizedTime({
                    optional: true,
                    name: names.date || EMPTY_STRING1
                }),
                OtherKeyAttribute.schema(names.other || {})
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$r);
        const asn1 = compareSchema(schema, schema, KEKIdentifier.schema({
            names: {
                keyIdentifier: KEY_IDENTIFIER,
                date: DATE1,
                other: {
                    names: {
                        blockName: OTHER
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.keyIdentifier = asn1.result.keyIdentifier;
        if (DATE1 in asn1.result) this.date = asn1.result.date;
        if (OTHER in asn1.result) this.other = new OtherKeyAttribute({
            schema: asn1.result.other
        });
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.keyIdentifier);
        if (this.date) {
            outputArray.push(this.date);
        }
        if (this.other) {
            outputArray.push(this.other.toSchema());
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            keyIdentifier: this.keyIdentifier.toJSON()
        };
        if (this.date) {
            res.date = this.date;
        }
        if (this.other) {
            res.other = this.other.toJSON();
        }
        return res;
    }
}
KEKIdentifier.CLASS_NAME = "KEKIdentifier";
const VERSION$a = "version";
const KEK_ID = "kekid";
const KEY_ENCRYPTION_ALGORITHM$1 = "keyEncryptionAlgorithm";
const ENCRYPTED_KEY$1 = "encryptedKey";
const PER_DEFINED_KEK = "preDefinedKEK";
const CLEAR_PROPS$q = [
    VERSION$a,
    KEK_ID,
    KEY_ENCRYPTION_ALGORITHM$1,
    ENCRYPTED_KEY$1
];
class KEKRecipientInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$a, KEKRecipientInfo.defaultValues(VERSION$a));
        this.kekid = getParametersValue(parameters, KEK_ID, KEKRecipientInfo.defaultValues(KEK_ID));
        this.keyEncryptionAlgorithm = getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$1, KEKRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$1));
        this.encryptedKey = getParametersValue(parameters, ENCRYPTED_KEY$1, KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));
        this.preDefinedKEK = getParametersValue(parameters, PER_DEFINED_KEK, KEKRecipientInfo.defaultValues(PER_DEFINED_KEK));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$a:
                return 0;
            case KEK_ID:
                return new KEKIdentifier();
            case KEY_ENCRYPTION_ALGORITHM$1:
                return new AlgorithmIdentifier();
            case ENCRYPTED_KEY$1:
                return new OctetString();
            case PER_DEFINED_KEK:
                return EMPTY_BUFFER1;
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case "KEKRecipientInfo":
                return memberValue === KEKRecipientInfo.defaultValues(VERSION$a);
            case KEK_ID:
                return memberValue.compareWithDefault("keyIdentifier", memberValue.keyIdentifier) && "date" in memberValue === false && "other" in memberValue === false;
            case KEY_ENCRYPTION_ALGORITHM$1:
                return memberValue.algorithmId === EMPTY_STRING1 && "algorithmParams" in memberValue === false;
            case ENCRYPTED_KEY$1:
                return memberValue.isEqual(KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));
            case PER_DEFINED_KEK:
                return memberValue.byteLength === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                KEKIdentifier.schema(names.kekid || {}),
                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),
                new OctetString({
                    name: names.encryptedKey || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$q);
        const asn1 = compareSchema(schema, schema, KEKRecipientInfo.schema({
            names: {
                version: VERSION$a,
                kekid: {
                    names: {
                        blockName: KEK_ID
                    }
                },
                keyEncryptionAlgorithm: {
                    names: {
                        blockName: KEY_ENCRYPTION_ALGORITHM$1
                    }
                },
                encryptedKey: ENCRYPTED_KEY$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        this.kekid = new KEKIdentifier({
            schema: asn1.result.kekid
        });
        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.keyEncryptionAlgorithm
        });
        this.encryptedKey = asn1.result.encryptedKey;
    }
    toSchema() {
        return new Sequence({
            value: [
                new Integer({
                    value: this.version
                }),
                this.kekid.toSchema(),
                this.keyEncryptionAlgorithm.toSchema(),
                this.encryptedKey
            ]
        });
    }
    toJSON() {
        return {
            version: this.version,
            kekid: this.kekid.toJSON(),
            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
            encryptedKey: this.encryptedKey.toJSON()
        };
    }
}
KEKRecipientInfo.CLASS_NAME = "KEKRecipientInfo";
const VERSION$9 = "version";
const KEY_DERIVATION_ALGORITHM = "keyDerivationAlgorithm";
const KEY_ENCRYPTION_ALGORITHM = "keyEncryptionAlgorithm";
const ENCRYPTED_KEY = "encryptedKey";
const PASSWORD = "password";
const CLEAR_PROPS$p = [
    VERSION$9,
    KEY_DERIVATION_ALGORITHM,
    KEY_ENCRYPTION_ALGORITHM,
    ENCRYPTED_KEY
];
class PasswordRecipientinfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$9, PasswordRecipientinfo.defaultValues(VERSION$9));
        if (KEY_DERIVATION_ALGORITHM in parameters) {
            this.keyDerivationAlgorithm = getParametersValue(parameters, KEY_DERIVATION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_DERIVATION_ALGORITHM));
        }
        this.keyEncryptionAlgorithm = getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_ENCRYPTION_ALGORITHM));
        this.encryptedKey = getParametersValue(parameters, ENCRYPTED_KEY, PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));
        this.password = getParametersValue(parameters, PASSWORD, PasswordRecipientinfo.defaultValues(PASSWORD));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$9:
                return -1;
            case KEY_DERIVATION_ALGORITHM:
                return new AlgorithmIdentifier();
            case KEY_ENCRYPTION_ALGORITHM:
                return new AlgorithmIdentifier();
            case ENCRYPTED_KEY:
                return new OctetString();
            case PASSWORD:
                return EMPTY_BUFFER1;
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$9:
                return memberValue === -1;
            case KEY_DERIVATION_ALGORITHM:
            case KEY_ENCRYPTION_ALGORITHM:
                return memberValue.algorithmId === EMPTY_STRING1 && "algorithmParams" in memberValue === false;
            case ENCRYPTED_KEY:
                return memberValue.isEqual(PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));
            case PASSWORD:
                return memberValue.byteLength === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                new Constructed({
                    name: names.keyDerivationAlgorithm || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: AlgorithmIdentifier.schema().valueBlock.value
                }),
                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),
                new OctetString({
                    name: names.encryptedKey || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$p);
        const asn1 = compareSchema(schema, schema, PasswordRecipientinfo.schema({
            names: {
                version: VERSION$9,
                keyDerivationAlgorithm: KEY_DERIVATION_ALGORITHM,
                keyEncryptionAlgorithm: {
                    names: {
                        blockName: KEY_ENCRYPTION_ALGORITHM
                    }
                },
                encryptedKey: ENCRYPTED_KEY
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        if (KEY_DERIVATION_ALGORITHM in asn1.result) {
            this.keyDerivationAlgorithm = new AlgorithmIdentifier({
                schema: new Sequence({
                    value: asn1.result.keyDerivationAlgorithm.valueBlock.value
                })
            });
        }
        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.keyEncryptionAlgorithm
        });
        this.encryptedKey = asn1.result.encryptedKey;
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.version
        }));
        if (this.keyDerivationAlgorithm) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: this.keyDerivationAlgorithm.toSchema().valueBlock.value
            }));
        }
        outputArray.push(this.keyEncryptionAlgorithm.toSchema());
        outputArray.push(this.encryptedKey);
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            version: this.version,
            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
            encryptedKey: this.encryptedKey.toJSON()
        };
        if (this.keyDerivationAlgorithm) {
            res.keyDerivationAlgorithm = this.keyDerivationAlgorithm.toJSON();
        }
        return res;
    }
}
PasswordRecipientinfo.CLASS_NAME = "PasswordRecipientInfo";
const ORI_TYPE = "oriType";
const ORI_VALUE = "oriValue";
const CLEAR_PROPS$o = [
    ORI_TYPE,
    ORI_VALUE
];
class OtherRecipientInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.oriType = getParametersValue(parameters, ORI_TYPE, OtherRecipientInfo.defaultValues(ORI_TYPE));
        this.oriValue = getParametersValue(parameters, ORI_VALUE, OtherRecipientInfo.defaultValues(ORI_VALUE));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case ORI_TYPE:
                return EMPTY_STRING1;
            case ORI_VALUE:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case ORI_TYPE:
                return memberValue === EMPTY_STRING1;
            case ORI_VALUE:
                return Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.oriType || EMPTY_STRING1
                }),
                new Any({
                    name: names.oriValue || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$o);
        const asn1 = compareSchema(schema, schema, OtherRecipientInfo.schema({
            names: {
                oriType: ORI_TYPE,
                oriValue: ORI_VALUE
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.oriType = asn1.result.oriType.valueBlock.toString();
        this.oriValue = asn1.result.oriValue;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.oriType
                }),
                this.oriValue
            ]
        });
    }
    toJSON() {
        const res = {
            oriType: this.oriType
        };
        if (!OtherRecipientInfo.compareWithDefault(ORI_VALUE, this.oriValue)) {
            res.oriValue = this.oriValue.toJSON();
        }
        return res;
    }
}
OtherRecipientInfo.CLASS_NAME = "OtherRecipientInfo";
const VARIANT = "variant";
const VALUE = "value";
const CLEAR_PROPS$n = [
    "blockName"
];
class RecipientInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.variant = getParametersValue(parameters, VARIANT, RecipientInfo.defaultValues(VARIANT));
        if (VALUE in parameters) {
            this.value = getParametersValue(parameters, VALUE, RecipientInfo.defaultValues(VALUE));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VARIANT:
                return -1;
            case VALUE:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VARIANT:
                return memberValue === RecipientInfo.defaultValues(memberName);
            case VALUE:
                return Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Choice({
            value: [
                KeyTransRecipientInfo.schema({
                    names: {
                        blockName: names.blockName || EMPTY_STRING1
                    }
                }),
                new Constructed({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: KeyAgreeRecipientInfo.schema().valueBlock.value
                }),
                new Constructed({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    value: KEKRecipientInfo.schema().valueBlock.value
                }),
                new Constructed({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 3
                    },
                    value: PasswordRecipientinfo.schema().valueBlock.value
                }),
                new Constructed({
                    name: names.blockName || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 4
                    },
                    value: OtherRecipientInfo.schema().valueBlock.value
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$n);
        const asn1 = compareSchema(schema, schema, RecipientInfo.schema({
            names: {
                blockName: "blockName"
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (asn1.result.blockName.idBlock.tagClass === 1) {
            this.variant = 1;
            this.value = new KeyTransRecipientInfo({
                schema: asn1.result.blockName
            });
        } else {
            const blockSequence = new Sequence({
                value: asn1.result.blockName.valueBlock.value
            });
            switch(asn1.result.blockName.idBlock.tagNumber){
                case 1:
                    this.variant = 2;
                    this.value = new KeyAgreeRecipientInfo({
                        schema: blockSequence
                    });
                    break;
                case 2:
                    this.variant = 3;
                    this.value = new KEKRecipientInfo({
                        schema: blockSequence
                    });
                    break;
                case 3:
                    this.variant = 4;
                    this.value = new PasswordRecipientinfo({
                        schema: blockSequence
                    });
                    break;
                case 4:
                    this.variant = 5;
                    this.value = new OtherRecipientInfo({
                        schema: blockSequence
                    });
                    break;
                default:
                    throw new Error("Incorrect structure of RecipientInfo block");
            }
        }
    }
    toSchema() {
        ParameterError.assertEmpty(this.value, "value", "RecipientInfo");
        const _schema = this.value.toSchema();
        switch(this.variant){
            case 1:
                return _schema;
            case 2:
            case 3:
            case 4:
                _schema.idBlock.tagClass = 3;
                _schema.idBlock.tagNumber = this.variant - 1;
                return _schema;
            default:
                return new Any();
        }
    }
    toJSON() {
        const res = {
            variant: this.variant
        };
        if (this.value && this.variant >= 1 && this.variant <= 4) {
            res.value = this.value.toJSON();
        }
        return res;
    }
}
RecipientInfo.CLASS_NAME = "RecipientInfo";
const HASH_ALGORITHM$2 = "hashAlgorithm";
const MASK_GEN_ALGORITHM = "maskGenAlgorithm";
const P_SOURCE_ALGORITHM = "pSourceAlgorithm";
const CLEAR_PROPS$m = [
    HASH_ALGORITHM$2,
    MASK_GEN_ALGORITHM,
    P_SOURCE_ALGORITHM
];
class RSAESOAEPParams extends PkiObject {
    constructor(parameters = {}){
        super();
        this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM$2, RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2));
        this.maskGenAlgorithm = getParametersValue(parameters, MASK_GEN_ALGORITHM, RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM));
        this.pSourceAlgorithm = getParametersValue(parameters, P_SOURCE_ALGORITHM, RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case HASH_ALGORITHM$2:
                return new AlgorithmIdentifier({
                    algorithmId: "1.3.14.3.2.26",
                    algorithmParams: new Null()
                });
            case MASK_GEN_ALGORITHM:
                return new AlgorithmIdentifier({
                    algorithmId: "1.2.840.113549.1.1.8",
                    algorithmParams: new AlgorithmIdentifier({
                        algorithmId: "1.3.14.3.2.26",
                        algorithmParams: new Null()
                    }).toSchema()
                });
            case P_SOURCE_ALGORITHM:
                return new AlgorithmIdentifier({
                    algorithmId: "1.2.840.113549.1.1.9",
                    algorithmParams: new OctetString({
                        valueHex: new Uint8Array([
                            218,
                            57,
                            163,
                            238,
                            94,
                            107,
                            75,
                            13,
                            50,
                            85,
                            191,
                            239,
                            149,
                            96,
                            24,
                            144,
                            175,
                            216,
                            7,
                            9
                        ]).buffer
                    })
                });
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    optional: true,
                    value: [
                        AlgorithmIdentifier.schema(names.hashAlgorithm || {})
                    ]
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    optional: true,
                    value: [
                        AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})
                    ]
                }),
                new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    optional: true,
                    value: [
                        AlgorithmIdentifier.schema(names.pSourceAlgorithm || {})
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$m);
        const asn1 = compareSchema(schema, schema, RSAESOAEPParams.schema({
            names: {
                hashAlgorithm: {
                    names: {
                        blockName: HASH_ALGORITHM$2
                    }
                },
                maskGenAlgorithm: {
                    names: {
                        blockName: MASK_GEN_ALGORITHM
                    }
                },
                pSourceAlgorithm: {
                    names: {
                        blockName: P_SOURCE_ALGORITHM
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        if (HASH_ALGORITHM$2 in asn1.result) this.hashAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.hashAlgorithm
        });
        if (MASK_GEN_ALGORITHM in asn1.result) this.maskGenAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.maskGenAlgorithm
        });
        if (P_SOURCE_ALGORITHM in asn1.result) this.pSourceAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.pSourceAlgorithm
        });
    }
    toSchema() {
        const outputArray = [];
        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    this.hashAlgorithm.toSchema()
                ]
            }));
        }
        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: [
                    this.maskGenAlgorithm.toSchema()
                ]
            }));
        }
        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 2
                },
                value: [
                    this.pSourceAlgorithm.toSchema()
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {};
        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {
            res.hashAlgorithm = this.hashAlgorithm.toJSON();
        }
        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {
            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();
        }
        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {
            res.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();
        }
        return res;
    }
}
RSAESOAEPParams.CLASS_NAME = "RSAESOAEPParams";
const KEY_INFO = "keyInfo";
const ENTITY_U_INFO = "entityUInfo";
const SUPP_PUB_INFO = "suppPubInfo";
const CLEAR_PROPS$l = [
    KEY_INFO,
    ENTITY_U_INFO,
    SUPP_PUB_INFO
];
class ECCCMSSharedInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.keyInfo = getParametersValue(parameters, KEY_INFO, ECCCMSSharedInfo.defaultValues(KEY_INFO));
        if (ENTITY_U_INFO in parameters) {
            this.entityUInfo = getParametersValue(parameters, ENTITY_U_INFO, ECCCMSSharedInfo.defaultValues(ENTITY_U_INFO));
        }
        this.suppPubInfo = getParametersValue(parameters, SUPP_PUB_INFO, ECCCMSSharedInfo.defaultValues(SUPP_PUB_INFO));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case KEY_INFO:
                return new AlgorithmIdentifier();
            case ENTITY_U_INFO:
                return new OctetString();
            case SUPP_PUB_INFO:
                return new OctetString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case KEY_INFO:
            case ENTITY_U_INFO:
            case SUPP_PUB_INFO:
                return memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName));
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.keyInfo || {}),
                new Constructed({
                    name: names.entityUInfo || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    optional: true,
                    value: [
                        new OctetString()
                    ]
                }),
                new Constructed({
                    name: names.suppPubInfo || EMPTY_STRING1,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    value: [
                        new OctetString()
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$l);
        const asn1 = compareSchema(schema, schema, ECCCMSSharedInfo.schema({
            names: {
                keyInfo: {
                    names: {
                        blockName: KEY_INFO
                    }
                },
                entityUInfo: ENTITY_U_INFO,
                suppPubInfo: SUPP_PUB_INFO
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.keyInfo = new AlgorithmIdentifier({
            schema: asn1.result.keyInfo
        });
        if (ENTITY_U_INFO in asn1.result) this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];
        this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.keyInfo.toSchema());
        if (this.entityUInfo) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    this.entityUInfo
                ]
            }));
        }
        outputArray.push(new Constructed({
            idBlock: {
                tagClass: 3,
                tagNumber: 2
            },
            value: [
                this.suppPubInfo
            ]
        }));
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            keyInfo: this.keyInfo.toJSON(),
            suppPubInfo: this.suppPubInfo.toJSON()
        };
        if (this.entityUInfo) {
            res.entityUInfo = this.entityUInfo.toJSON();
        }
        return res;
    }
}
ECCCMSSharedInfo.CLASS_NAME = "ECCCMSSharedInfo";
const VERSION$8 = "version";
const ORIGINATOR_INFO = "originatorInfo";
const RECIPIENT_INFOS = "recipientInfos";
const ENCRYPTED_CONTENT_INFO = "encryptedContentInfo";
const UNPROTECTED_ATTRS = "unprotectedAttrs";
const CLEAR_PROPS$k = [
    VERSION$8,
    ORIGINATOR_INFO,
    RECIPIENT_INFOS,
    ENCRYPTED_CONTENT_INFO,
    UNPROTECTED_ATTRS
];
const defaultEncryptionParams = {
    kdfAlgorithm: "SHA-512",
    kekEncryptionLength: 256
};
const curveLengthByName = {
    "P-256": 256,
    "P-384": 384,
    "P-521": 528
};
class EnvelopedData extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$8, EnvelopedData.defaultValues(VERSION$8));
        if (ORIGINATOR_INFO in parameters) {
            this.originatorInfo = getParametersValue(parameters, ORIGINATOR_INFO, EnvelopedData.defaultValues(ORIGINATOR_INFO));
        }
        this.recipientInfos = getParametersValue(parameters, RECIPIENT_INFOS, EnvelopedData.defaultValues(RECIPIENT_INFOS));
        this.encryptedContentInfo = getParametersValue(parameters, ENCRYPTED_CONTENT_INFO, EnvelopedData.defaultValues(ENCRYPTED_CONTENT_INFO));
        if (UNPROTECTED_ATTRS in parameters) {
            this.unprotectedAttrs = getParametersValue(parameters, UNPROTECTED_ATTRS, EnvelopedData.defaultValues(UNPROTECTED_ATTRS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$8:
                return 0;
            case ORIGINATOR_INFO:
                return new OriginatorInfo();
            case RECIPIENT_INFOS:
                return [];
            case ENCRYPTED_CONTENT_INFO:
                return new EncryptedContentInfo();
            case UNPROTECTED_ATTRS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$8:
                return memberValue === EnvelopedData.defaultValues(memberName);
            case ORIGINATOR_INFO:
                return memberValue.certs.certificates.length === 0 && memberValue.crls.crls.length === 0;
            case RECIPIENT_INFOS:
            case UNPROTECTED_ATTRS:
                return memberValue.length === 0;
            case ENCRYPTED_CONTENT_INFO:
                return EncryptedContentInfo.compareWithDefault("contentType", memberValue.contentType) && EncryptedContentInfo.compareWithDefault("contentEncryptionAlgorithm", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault("encryptedContent", memberValue.encryptedContent);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || EMPTY_STRING1
                }),
                new Constructed({
                    name: names.originatorInfo || EMPTY_STRING1,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: OriginatorInfo.schema().valueBlock.value
                }),
                new Set1({
                    value: [
                        new Repeated({
                            name: names.recipientInfos || EMPTY_STRING1,
                            value: RecipientInfo.schema()
                        })
                    ]
                }),
                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new Repeated({
                            name: names.unprotectedAttrs || EMPTY_STRING1,
                            value: Attribute.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$k);
        const asn1 = compareSchema(schema, schema, EnvelopedData.schema({
            names: {
                version: VERSION$8,
                originatorInfo: ORIGINATOR_INFO,
                recipientInfos: RECIPIENT_INFOS,
                encryptedContentInfo: {
                    names: {
                        blockName: ENCRYPTED_CONTENT_INFO
                    }
                },
                unprotectedAttrs: UNPROTECTED_ATTRS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        if (ORIGINATOR_INFO in asn1.result) {
            this.originatorInfo = new OriginatorInfo({
                schema: new Sequence({
                    value: asn1.result.originatorInfo.valueBlock.value
                })
            });
        }
        this.recipientInfos = Array.from(asn1.result.recipientInfos, (o64)=>new RecipientInfo({
                schema: o64
            })
        );
        this.encryptedContentInfo = new EncryptedContentInfo({
            schema: asn1.result.encryptedContentInfo
        });
        if (UNPROTECTED_ATTRS in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, (o65)=>new Attribute({
                schema: o65
            })
        );
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.version
        }));
        if (this.originatorInfo) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: this.originatorInfo.toSchema().valueBlock.value
            }));
        }
        outputArray.push(new Set1({
            value: Array.from(this.recipientInfos, (o66)=>o66.toSchema()
            )
        }));
        outputArray.push(this.encryptedContentInfo.toSchema());
        if (this.unprotectedAttrs) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: Array.from(this.unprotectedAttrs, (o67)=>o67.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            version: this.version,
            recipientInfos: Array.from(this.recipientInfos, (o68)=>o68.toJSON()
            ),
            encryptedContentInfo: this.encryptedContentInfo.toJSON()
        };
        if (this.originatorInfo) res.originatorInfo = this.originatorInfo.toJSON();
        if (this.unprotectedAttrs) res.unprotectedAttrs = Array.from(this.unprotectedAttrs, (o69)=>o69.toJSON()
        );
        return res;
    }
    addRecipientByCertificate(certificate, parameters, variant, crypto = getCrypto(true)) {
        const encryptionParameters = Object.assign({
            useOAEP: true,
            oaepHashAlgorithm: "SHA-512"
        }, defaultEncryptionParams, parameters || {});
        if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf("1.2.840.113549") !== -1) variant = 1;
        else {
            if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf("1.2.840.10045") !== -1) variant = 2;
            else throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);
        }
        switch(variant){
            case 1:
                {
                    let algorithmId;
                    let algorithmParams;
                    if (encryptionParameters.useOAEP === true) {
                        algorithmId = crypto.getOIDByAlgorithm({
                            name: "RSA-OAEP"
                        }, true, "keyEncryptionAlgorithm");
                        const hashOID = crypto.getOIDByAlgorithm({
                            name: encryptionParameters.oaepHashAlgorithm
                        }, true, "RSAES-OAEP-params");
                        const hashAlgorithm = new AlgorithmIdentifier({
                            algorithmId: hashOID,
                            algorithmParams: new Null()
                        });
                        const rsaOAEPParams = new RSAESOAEPParams({
                            hashAlgorithm,
                            maskGenAlgorithm: new AlgorithmIdentifier({
                                algorithmId: "1.2.840.113549.1.1.8",
                                algorithmParams: hashAlgorithm.toSchema()
                            })
                        });
                        algorithmParams = rsaOAEPParams.toSchema();
                    } else {
                        algorithmId = crypto.getOIDByAlgorithm({
                            name: "RSAES-PKCS1-v1_5"
                        });
                        if (algorithmId === EMPTY_STRING1) throw new Error("Can not find OID for RSAES-PKCS1-v1_5");
                        algorithmParams = new Null();
                    }
                    const keyInfo = new KeyTransRecipientInfo({
                        version: 0,
                        rid: new IssuerAndSerialNumber({
                            issuer: certificate.issuer,
                            serialNumber: certificate.serialNumber
                        }),
                        keyEncryptionAlgorithm: new AlgorithmIdentifier({
                            algorithmId,
                            algorithmParams
                        }),
                        recipientCertificate: certificate
                    });
                    this.recipientInfos.push(new RecipientInfo({
                        variant: 1,
                        value: keyInfo
                    }));
                }
                break;
            case 2:
                {
                    const recipientIdentifier = new KeyAgreeRecipientIdentifier({
                        variant: 1,
                        value: new IssuerAndSerialNumber({
                            issuer: certificate.issuer,
                            serialNumber: certificate.serialNumber
                        })
                    });
                    this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, {
                        recipientCertificate: certificate
                    }, crypto);
                }
                break;
            default:
                throw new Error(`Unknown "variant" value: ${variant}`);
        }
        return true;
    }
    addRecipientByPreDefinedData(preDefinedData, parameters = {}, variant, crypto = getCrypto(true)) {
        ArgumentError.assert(preDefinedData, "preDefinedData", "ArrayBuffer");
        if (!preDefinedData.byteLength) {
            throw new Error("Pre-defined data could have zero length");
        }
        if (!parameters.keyIdentifier) {
            const keyIdentifierBuffer = new ArrayBuffer(16);
            const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);
            crypto.getRandomValues(keyIdentifierView);
            parameters.keyIdentifier = keyIdentifierBuffer;
        }
        if (!parameters.hmacHashAlgorithm) parameters.hmacHashAlgorithm = "SHA-512";
        if (parameters.iterationCount === undefined) {
            parameters.iterationCount = 2048;
        }
        if (!parameters.keyEncryptionAlgorithm) {
            parameters.keyEncryptionAlgorithm = {
                name: "AES-KW",
                length: 256
            };
        }
        if (!parameters.keyEncryptionAlgorithmParams) parameters.keyEncryptionAlgorithmParams = new Null();
        switch(variant){
            case 1:
                {
                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, "keyEncryptionAlgorithm");
                    const keyInfo = new KEKRecipientInfo({
                        version: 4,
                        kekid: new KEKIdentifier({
                            keyIdentifier: new OctetString({
                                valueHex: parameters.keyIdentifier
                            })
                        }),
                        keyEncryptionAlgorithm: new AlgorithmIdentifier({
                            algorithmId: kekOID,
                            algorithmParams: parameters.keyEncryptionAlgorithmParams
                        }),
                        preDefinedKEK: preDefinedData
                    });
                    this.recipientInfos.push(new RecipientInfo({
                        variant: 3,
                        value: keyInfo
                    }));
                }
                break;
            case 2:
                {
                    const pbkdf2OID = crypto.getOIDByAlgorithm({
                        name: "PBKDF2"
                    }, true, "keyDerivationAlgorithm");
                    const saltBuffer = new ArrayBuffer(64);
                    const saltView = new Uint8Array(saltBuffer);
                    crypto.getRandomValues(saltView);
                    const hmacOID = crypto.getOIDByAlgorithm({
                        name: "HMAC",
                        hash: {
                            name: parameters.hmacHashAlgorithm
                        }
                    }, true, "hmacHashAlgorithm");
                    const pbkdf2Params = new PBKDF2Params({
                        salt: new OctetString({
                            valueHex: saltBuffer
                        }),
                        iterationCount: parameters.iterationCount,
                        prf: new AlgorithmIdentifier({
                            algorithmId: hmacOID,
                            algorithmParams: new Null()
                        })
                    });
                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, "keyEncryptionAlgorithm");
                    const keyInfo = new PasswordRecipientinfo({
                        version: 0,
                        keyDerivationAlgorithm: new AlgorithmIdentifier({
                            algorithmId: pbkdf2OID,
                            algorithmParams: pbkdf2Params.toSchema()
                        }),
                        keyEncryptionAlgorithm: new AlgorithmIdentifier({
                            algorithmId: kekOID,
                            algorithmParams: parameters.keyEncryptionAlgorithmParams
                        }),
                        password: preDefinedData
                    });
                    this.recipientInfos.push(new RecipientInfo({
                        variant: 4,
                        value: keyInfo
                    }));
                }
                break;
            default:
                throw new Error(`Unknown value for "variant": ${variant}`);
        }
    }
    addRecipientByKeyIdentifier(key, keyId, parameters, crypto = getCrypto(true)) {
        const encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});
        const recipientIdentifier = new KeyAgreeRecipientIdentifier({
            variant: 2,
            value: new RecipientKeyIdentifier({
                subjectKeyIdentifier: new OctetString({
                    valueHex: keyId
                })
            })
        });
        this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, {
            recipientPublicKey: key
        }, crypto);
    }
    _addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams, crypto = getCrypto(true)) {
        const encryptedKey = new RecipientEncryptedKey({
            rid: recipientIdentifier
        });
        const aesKWoid = crypto.getOIDByAlgorithm({
            name: "AES-KW",
            length: encryptionParameters.kekEncryptionLength
        }, true, "keyEncryptionAlgorithm");
        const aesKW = new AlgorithmIdentifier({
            algorithmId: aesKWoid
        });
        const ecdhOID = crypto.getOIDByAlgorithm({
            name: "ECDH",
            kdf: encryptionParameters.kdfAlgorithm
        }, true, "KeyAgreeRecipientInfo");
        const ukmBuffer = new ArrayBuffer(64);
        const ukmView = new Uint8Array(ukmBuffer);
        crypto.getRandomValues(ukmView);
        const recipientInfoParams = {
            version: 3,
            ukm: new OctetString({
                valueHex: ukmBuffer
            }),
            keyEncryptionAlgorithm: new AlgorithmIdentifier({
                algorithmId: ecdhOID,
                algorithmParams: aesKW.toSchema()
            }),
            recipientEncryptedKeys: new RecipientEncryptedKeys({
                encryptedKeys: [
                    encryptedKey
                ]
            })
        };
        const keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));
        this.recipientInfos.push(new RecipientInfo({
            variant: 2,
            value: keyInfo
        }));
    }
    async encrypt(contentEncryptionAlgorithm, contentToEncrypt, crypto = getCrypto(true)) {
        const ivBuffer = new ArrayBuffer(16);
        const ivView = new Uint8Array(ivBuffer);
        crypto.getRandomValues(ivView);
        const contentView = new Uint8Array(contentToEncrypt);
        const contentEncryptionOID = crypto.getOIDByAlgorithm(contentEncryptionAlgorithm, true, "contentEncryptionAlgorithm");
        const sessionKey = await crypto.generateKey(contentEncryptionAlgorithm, true, [
            "encrypt"
        ]);
        const encryptedContent = await crypto.encrypt({
            name: contentEncryptionAlgorithm.name,
            iv: ivView
        }, sessionKey, contentView);
        const exportedSessionKey = await crypto.exportKey("raw", sessionKey);
        this.version = 2;
        this.encryptedContentInfo = new EncryptedContentInfo({
            contentType: "1.2.840.113549.1.7.1",
            contentEncryptionAlgorithm: new AlgorithmIdentifier({
                algorithmId: contentEncryptionOID,
                algorithmParams: new OctetString({
                    valueHex: ivBuffer
                })
            }),
            encryptedContent: new OctetString({
                valueHex: encryptedContent
            })
        });
        const SubKeyAgreeRecipientInfo = async (index)=>{
            const recipientInfo = this.recipientInfos[index].value;
            let recipientCurve;
            let recipientPublicKey;
            if (recipientInfo.recipientPublicKey) {
                recipientCurve = recipientInfo.recipientPublicKey.algorithm.namedCurve;
                recipientPublicKey = recipientInfo.recipientPublicKey;
            } else if (recipientInfo.recipientCertificate) {
                const curveObject = recipientInfo.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;
                if (curveObject.constructor.blockName() !== ObjectIdentifier.blockName()) throw new Error(`Incorrect "recipientCertificate" for index ${index}`);
                const curveOID = curveObject.valueBlock.toString();
                switch(curveOID){
                    case "1.2.840.10045.3.1.7":
                        recipientCurve = "P-256";
                        break;
                    case "1.3.132.0.34":
                        recipientCurve = "P-384";
                        break;
                    case "1.3.132.0.35":
                        recipientCurve = "P-521";
                        break;
                    default:
                        throw new Error(`Incorrect curve OID for index ${index}`);
                }
                recipientPublicKey = await recipientInfo.recipientCertificate.getPublicKey({
                    algorithm: {
                        algorithm: {
                            name: "ECDH",
                            namedCurve: recipientCurve
                        },
                        usages: []
                    }
                }, crypto);
            } else {
                throw new Error("Unsupported RecipientInfo");
            }
            const recipientCurveLength = curveLengthByName[recipientCurve];
            const ecdhKeys = await crypto.generateKey({
                name: "ECDH",
                namedCurve: recipientCurve
            }, true, [
                "deriveBits"
            ]);
            const exportedECDHPublicKey = await crypto.exportKey("spki", ecdhKeys.publicKey);
            const derivedBits = await crypto.deriveBits({
                name: "ECDH",
                public: recipientPublicKey
            }, ecdhKeys.privateKey, recipientCurveLength);
            const aesKWAlgorithm = new AlgorithmIdentifier({
                schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams
            });
            const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, "aesKWAlgorithm");
            let kwLength = kwAlgorithm.length;
            const kwLengthBuffer = new ArrayBuffer(4);
            const kwLengthView = new Uint8Array(kwLengthBuffer);
            for(let j = 3; j >= 0; j--){
                kwLengthView[j] = kwLength;
                kwLength >>= 8;
            }
            const eccInfo = new ECCCMSSharedInfo({
                keyInfo: new AlgorithmIdentifier({
                    algorithmId: aesKWAlgorithm.algorithmId
                }),
                entityUInfo: recipientInfo.ukm,
                suppPubInfo: new OctetString({
                    valueHex: kwLengthBuffer
                })
            });
            const encodedInfo = eccInfo.toSchema().toBER(false);
            const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "ecdhAlgorithm");
            const derivedKeyRaw = await kdf(ecdhAlgorithm.kdf, derivedBits, kwAlgorithm.length, encodedInfo, crypto);
            const awsKW = await crypto.importKey("raw", derivedKeyRaw, {
                name: "AES-KW"
            }, true, [
                "wrapKey"
            ]);
            const wrappedKey = await crypto.wrapKey("raw", sessionKey, awsKW, {
                name: "AES-KW"
            });
            const originator = new OriginatorIdentifierOrKey();
            originator.variant = 3;
            originator.value = OriginatorPublicKey.fromBER(exportedECDHPublicKey);
            recipientInfo.originator = originator;
            recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new OctetString({
                valueHex: wrappedKey
            });
            return {
                ecdhPrivateKey: ecdhKeys.privateKey
            };
        };
        const SubKeyTransRecipientInfo = async (index)=>{
            const recipientInfo = this.recipientInfos[index].value;
            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
            if (algorithmParameters.name === "RSA-OAEP") {
                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;
                const rsaOAEPParams = new RSAESOAEPParams({
                    schema
                });
                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);
                if ("name" in algorithmParameters.hash === false) throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);
            }
            try {
                const publicKey = await recipientInfo.recipientCertificate.getPublicKey({
                    algorithm: {
                        algorithm: algorithmParameters,
                        usages: [
                            "encrypt",
                            "wrapKey"
                        ]
                    }
                }, crypto);
                const encryptedKey = await crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);
                recipientInfo.encryptedKey = new OctetString({
                    valueHex: encryptedKey
                });
            } catch  {}
        };
        const SubKEKRecipientInfo = async (index)=>{
            const recipientInfo = this.recipientInfos[index].value;
            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
            const kekKey = await crypto.importKey("raw", new Uint8Array(recipientInfo.preDefinedKEK), kekAlgorithm, true, [
                "wrapKey"
            ]);
            const wrappedKey = await crypto.wrapKey("raw", sessionKey, kekKey, kekAlgorithm);
            recipientInfo.encryptedKey = new OctetString({
                valueHex: wrappedKey
            });
        };
        const SubPasswordRecipientinfo = async (index)=>{
            const recipientInfo = this.recipientInfos[index].value;
            let pbkdf2Params;
            if (!recipientInfo.keyDerivationAlgorithm) throw new Error("Please append encoded \"keyDerivationAlgorithm\"");
            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) throw new Error("Incorrectly encoded \"keyDerivationAlgorithm\"");
            try {
                pbkdf2Params = new PBKDF2Params({
                    schema: recipientInfo.keyDerivationAlgorithm.algorithmParams
                });
            } catch (ex) {
                throw new Error("Incorrectly encoded \"keyDerivationAlgorithm\"");
            }
            const passwordView = new Uint8Array(recipientInfo.password);
            const derivationKey = await crypto.importKey("raw", passwordView, "PBKDF2", false, [
                "deriveKey"
            ]);
            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
            let hmacHashAlgorithm = "SHA-1";
            if (pbkdf2Params.prf) {
                const prfAlgorithm = crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, "prfAlgorithm");
                hmacHashAlgorithm = prfAlgorithm.hash.name;
            }
            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);
            const iterations = pbkdf2Params.iterationCount;
            const derivedKey = await crypto.deriveKey({
                name: "PBKDF2",
                hash: {
                    name: hmacHashAlgorithm
                },
                salt: saltView,
                iterations
            }, derivationKey, kekAlgorithm, true, [
                "wrapKey"
            ]);
            const wrappedKey = await crypto.wrapKey("raw", sessionKey, derivedKey, kekAlgorithm);
            recipientInfo.encryptedKey = new OctetString({
                valueHex: wrappedKey
            });
        };
        const res = [];
        for(let i97 = 0; i97 < this.recipientInfos.length; i97++){
            switch(this.recipientInfos[i97].variant){
                case 1:
                    res.push(await SubKeyTransRecipientInfo(i97));
                    break;
                case 2:
                    res.push(await SubKeyAgreeRecipientInfo(i97));
                    break;
                case 3:
                    res.push(await SubKEKRecipientInfo(i97));
                    break;
                case 4:
                    res.push(await SubPasswordRecipientinfo(i97));
                    break;
                default:
                    throw new Error(`Unknown recipient type in array with index ${i97}`);
            }
        }
        return res;
    }
    async decrypt(recipientIndex, parameters, crypto = getCrypto(true)) {
        const decryptionParameters = parameters || {};
        if (recipientIndex + 1 > this.recipientInfos.length) {
            throw new Error(`Maximum value for "index" is: ${this.recipientInfos.length - 1}`);
        }
        const SubKeyAgreeRecipientInfo = async (index)=>{
            const recipientInfo = this.recipientInfos[index].value;
            let curveOID;
            let recipientCurve;
            let recipientCurveLength;
            const originator = recipientInfo.originator;
            if (decryptionParameters.recipientCertificate) {
                const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;
                if (curveObject.constructor.blockName() !== ObjectIdentifier.blockName()) {
                    throw new Error(`Incorrect "recipientCertificate" for index ${index}`);
                }
                curveOID = curveObject.valueBlock.toString();
            } else if (originator.value.algorithm.algorithmParams) {
                const curveObject = originator.value.algorithm.algorithmParams;
                if (curveObject.constructor.blockName() !== ObjectIdentifier.blockName()) {
                    throw new Error(`Incorrect originator for index ${index}`);
                }
                curveOID = curveObject.valueBlock.toString();
            } else {
                throw new Error("Parameter \"recipientCertificate\" is mandatory for \"KeyAgreeRecipientInfo\" if algorithm params are missing from originator");
            }
            if (!decryptionParameters.recipientPrivateKey) throw new Error("Parameter \"recipientPrivateKey\" is mandatory for \"KeyAgreeRecipientInfo\"");
            switch(curveOID){
                case "1.2.840.10045.3.1.7":
                    recipientCurve = "P-256";
                    recipientCurveLength = 256;
                    break;
                case "1.3.132.0.34":
                    recipientCurve = "P-384";
                    recipientCurveLength = 384;
                    break;
                case "1.3.132.0.35":
                    recipientCurve = "P-521";
                    recipientCurveLength = 528;
                    break;
                default:
                    throw new Error(`Incorrect curve OID for index ${index}`);
            }
            const ecdhPrivateKey = await crypto.importKey("pkcs8", decryptionParameters.recipientPrivateKey, {
                name: "ECDH",
                namedCurve: recipientCurve
            }, true, [
                "deriveBits"
            ]);
            if ("algorithmParams" in originator.value.algorithm === false) originator.value.algorithm.algorithmParams = new ObjectIdentifier({
                value: curveOID
            });
            const buffer = originator.value.toSchema().toBER(false);
            const ecdhPublicKey = await crypto.importKey("spki", buffer, {
                name: "ECDH",
                namedCurve: recipientCurve
            }, true, []);
            const sharedSecret = await crypto.deriveBits({
                name: "ECDH",
                public: ecdhPublicKey
            }, ecdhPrivateKey, recipientCurveLength);
            async function applyKDF(includeAlgorithmParams) {
                includeAlgorithmParams = includeAlgorithmParams || false;
                const aesKWAlgorithm = new AlgorithmIdentifier({
                    schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams
                });
                const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, "kwAlgorithm");
                let kwLength = kwAlgorithm.length;
                const kwLengthBuffer = new ArrayBuffer(4);
                const kwLengthView = new Uint8Array(kwLengthBuffer);
                for(let j = 3; j >= 0; j--){
                    kwLengthView[j] = kwLength;
                    kwLength >>= 8;
                }
                const keyInfoAlgorithm = {
                    algorithmId: aesKWAlgorithm.algorithmId
                };
                if (includeAlgorithmParams) {
                    keyInfoAlgorithm.algorithmParams = new Null();
                }
                const eccInfo = new ECCCMSSharedInfo({
                    keyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),
                    entityUInfo: recipientInfo.ukm,
                    suppPubInfo: new OctetString({
                        valueHex: kwLengthBuffer
                    })
                });
                const encodedInfo = eccInfo.toSchema().toBER(false);
                const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "ecdhAlgorithm");
                if (!ecdhAlgorithm.name) {
                    throw new Error(`Incorrect OID for key encryption algorithm: ${recipientInfo.keyEncryptionAlgorithm.algorithmId}`);
                }
                return kdf(ecdhAlgorithm.kdf, sharedSecret, kwAlgorithm.length, encodedInfo, crypto);
            }
            const kdfResult1 = await applyKDF();
            const importAesKwKey = async (kdfResult)=>{
                return crypto.importKey("raw", kdfResult, {
                    name: "AES-KW"
                }, true, [
                    "unwrapKey"
                ]);
            };
            const aesKwKey1 = await importAesKwKey(kdfResult1);
            const unwrapSessionKey = async (aesKwKey)=>{
                const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
                const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
                return crypto.unwrapKey("raw", recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHexView, aesKwKey, {
                    name: "AES-KW"
                }, contentEncryptionAlgorithm, true, [
                    "decrypt"
                ]);
            };
            try {
                return await unwrapSessionKey(aesKwKey1);
            } catch  {
                const kdfResult = await applyKDF(true);
                const aesKwKey = await importAesKwKey(kdfResult);
                return unwrapSessionKey(aesKwKey);
            }
        };
        const SubKeyTransRecipientInfo = async (index)=>{
            const recipientInfo = this.recipientInfos[index].value;
            if (!decryptionParameters.recipientPrivateKey) {
                throw new Error("Parameter \"recipientPrivateKey\" is mandatory for \"KeyTransRecipientInfo\"");
            }
            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
            if (algorithmParameters.name === "RSA-OAEP") {
                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;
                const rsaOAEPParams = new RSAESOAEPParams({
                    schema
                });
                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);
                if ("name" in algorithmParameters.hash === false) throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);
            }
            const privateKey = await crypto.importKey("pkcs8", decryptionParameters.recipientPrivateKey, algorithmParameters, true, [
                "decrypt"
            ]);
            const sessionKey = await crypto.decrypt(privateKey.algorithm, privateKey, recipientInfo.encryptedKey.valueBlock.valueHexView);
            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
            if ("name" in contentEncryptionAlgorithm === false) throw new Error(`Incorrect "contentEncryptionAlgorithm": ${algorithmId}`);
            return crypto.importKey("raw", sessionKey, contentEncryptionAlgorithm, true, [
                "decrypt"
            ]);
        };
        const SubKEKRecipientInfo = async (index)=>{
            const recipientInfo = this.recipientInfos[index].value;
            if (!decryptionParameters.preDefinedData) throw new Error("Parameter \"preDefinedData\" is mandatory for \"KEKRecipientInfo\"");
            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
            const importedKey = await crypto.importKey("raw", decryptionParameters.preDefinedData, kekAlgorithm, true, [
                "unwrapKey"
            ]);
            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
            if (!contentEncryptionAlgorithm.name) {
                throw new Error(`Incorrect "contentEncryptionAlgorithm": ${algorithmId}`);
            }
            return crypto.unwrapKey("raw", recipientInfo.encryptedKey.valueBlock.valueHexView, importedKey, kekAlgorithm, contentEncryptionAlgorithm, true, [
                "decrypt"
            ]);
        };
        const SubPasswordRecipientinfo = async (index)=>{
            const recipientInfo = this.recipientInfos[index].value;
            let pbkdf2Params;
            if (!decryptionParameters.preDefinedData) {
                throw new Error("Parameter \"preDefinedData\" is mandatory for \"KEKRecipientInfo\"");
            }
            if (!recipientInfo.keyDerivationAlgorithm) {
                throw new Error("Please append encoded \"keyDerivationAlgorithm\"");
            }
            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) {
                throw new Error("Incorrectly encoded \"keyDerivationAlgorithm\"");
            }
            try {
                pbkdf2Params = new PBKDF2Params({
                    schema: recipientInfo.keyDerivationAlgorithm.algorithmParams
                });
            } catch (ex) {
                throw new Error("Incorrectly encoded \"keyDerivationAlgorithm\"");
            }
            const pbkdf2Key = await crypto.importKey("raw", decryptionParameters.preDefinedData, "PBKDF2", false, [
                "deriveKey"
            ]);
            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
            const hmacHashAlgorithm = pbkdf2Params.prf ? crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, "prfAlgorithm").hash.name : "SHA-1";
            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);
            const iterations = pbkdf2Params.iterationCount;
            const kekKey = await crypto.deriveKey({
                name: "PBKDF2",
                hash: {
                    name: hmacHashAlgorithm
                },
                salt: saltView,
                iterations
            }, pbkdf2Key, kekAlgorithm, true, [
                "unwrapKey"
            ]);
            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
            return crypto.unwrapKey("raw", recipientInfo.encryptedKey.valueBlock.valueHexView, kekKey, kekAlgorithm, contentEncryptionAlgorithm, true, [
                "decrypt"
            ]);
        };
        let unwrappedKey;
        switch(this.recipientInfos[recipientIndex].variant){
            case 1:
                unwrappedKey = await SubKeyTransRecipientInfo(recipientIndex);
                break;
            case 2:
                unwrappedKey = await SubKeyAgreeRecipientInfo(recipientIndex);
                break;
            case 3:
                unwrappedKey = await SubKEKRecipientInfo(recipientIndex);
                break;
            case 4:
                unwrappedKey = await SubPasswordRecipientinfo(recipientIndex);
                break;
            default:
                throw new Error(`Unknown recipient type in array with index ${recipientIndex}`);
        }
        const algorithmId1 = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
        const contentEncryptionAlgorithm1 = crypto.getAlgorithmByOID(algorithmId1, true, "contentEncryptionAlgorithm");
        const ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;
        const ivView = new Uint8Array(ivBuffer);
        if (!this.encryptedContentInfo.encryptedContent) {
            throw new Error("Required property `encryptedContent` is empty");
        }
        const dataBuffer = this.encryptedContentInfo.getEncryptedContent();
        return crypto.decrypt({
            name: contentEncryptionAlgorithm1.name,
            iv: ivView
        }, unwrappedKey, dataBuffer);
    }
}
EnvelopedData.CLASS_NAME = "EnvelopedData";
const SAFE_CONTENTS = "safeContents";
const PARSED_VALUE$1 = "parsedValue";
const CONTENT_INFOS = "contentInfos";
class AuthenticatedSafe extends PkiObject {
    constructor(parameters = {}){
        super();
        this.safeContents = getParametersValue(parameters, SAFE_CONTENTS, AuthenticatedSafe.defaultValues(SAFE_CONTENTS));
        if (PARSED_VALUE$1 in parameters) {
            this.parsedValue = getParametersValue(parameters, PARSED_VALUE$1, AuthenticatedSafe.defaultValues(PARSED_VALUE$1));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case SAFE_CONTENTS:
                return [];
            case PARSED_VALUE$1:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case SAFE_CONTENTS:
                return memberValue.length === 0;
            case PARSED_VALUE$1:
                return memberValue instanceof Object && Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Repeated({
                    name: names.contentInfos || EMPTY_STRING1,
                    value: ContentInfo.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            CONTENT_INFOS
        ]);
        const asn1 = compareSchema(schema, schema, AuthenticatedSafe.schema({
            names: {
                contentInfos: CONTENT_INFOS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.safeContents = Array.from(asn1.result.contentInfos, (element)=>new ContentInfo({
                schema: element
            })
        );
    }
    toSchema() {
        return new Sequence({
            value: Array.from(this.safeContents, (o70)=>o70.toSchema()
            )
        });
    }
    toJSON() {
        return {
            safeContents: Array.from(this.safeContents, (o71)=>o71.toJSON()
            )
        };
    }
    async parseInternalValues(parameters, crypto = getCrypto(true)) {
        ParameterError.assert(parameters, SAFE_CONTENTS);
        ArgumentError.assert(parameters.safeContents, SAFE_CONTENTS, "Array");
        if (parameters.safeContents.length !== this.safeContents.length) {
            throw new ArgumentError("Length of \"parameters.safeContents\" must be equal to \"this.safeContents.length\"");
        }
        this.parsedValue = {
            safeContents: []
        };
        for (const [index, content] of this.safeContents.entries()){
            const safeContent = parameters.safeContents[index];
            const errorTarget = `parameters.safeContents[${index}]`;
            switch(content.contentType){
                case id_ContentType_Data:
                    {
                        ArgumentError.assert(content.content, "this.safeContents[j].content", OctetString);
                        const authSafeContent = content.content.getValue();
                        this.parsedValue.safeContents.push({
                            privacyMode: 0,
                            value: SafeContents.fromBER(authSafeContent)
                        });
                    }
                    break;
                case id_ContentType_EnvelopedData:
                    {
                        const cmsEnveloped = new EnvelopedData({
                            schema: content.content
                        });
                        ParameterError.assert(errorTarget, safeContent, "recipientCertificate", "recipientKey");
                        const envelopedData = safeContent;
                        const recipientCertificate = envelopedData.recipientCertificate;
                        const recipientKey = envelopedData.recipientKey;
                        const decrypted = await cmsEnveloped.decrypt(0, {
                            recipientCertificate,
                            recipientPrivateKey: recipientKey
                        }, crypto);
                        this.parsedValue.safeContents.push({
                            privacyMode: 2,
                            value: SafeContents.fromBER(decrypted)
                        });
                    }
                    break;
                case id_ContentType_EncryptedData:
                    {
                        const cmsEncrypted = new EncryptedData({
                            schema: content.content
                        });
                        ParameterError.assert(errorTarget, safeContent, "password");
                        const password = safeContent.password;
                        const decrypted = await cmsEncrypted.decrypt({
                            password
                        }, crypto);
                        this.parsedValue.safeContents.push({
                            privacyMode: 1,
                            value: SafeContents.fromBER(decrypted)
                        });
                    }
                    break;
                default:
                    throw new Error(`Unknown "contentType" for AuthenticatedSafe: " ${content.contentType}`);
            }
        }
    }
    async makeInternalValues(parameters, crypto = getCrypto(true)) {
        if (!this.parsedValue) {
            throw new Error("Please run \"parseValues\" first or add \"parsedValue\" manually");
        }
        ArgumentError.assert(this.parsedValue, "this.parsedValue", "object");
        ArgumentError.assert(this.parsedValue.safeContents, "this.parsedValue.safeContents", "Array");
        ArgumentError.assert(parameters, "parameters", "object");
        ParameterError.assert(parameters, "safeContents");
        ArgumentError.assert(parameters.safeContents, "parameters.safeContents", "Array");
        if (parameters.safeContents.length !== this.parsedValue.safeContents.length) {
            throw new ArgumentError("Length of \"parameters.safeContents\" must be equal to \"this.parsedValue.safeContents\"");
        }
        this.safeContents = [];
        for (const [index, content] of this.parsedValue.safeContents.entries()){
            ParameterError.assert("content", content, "privacyMode", "value");
            ArgumentError.assert(content.value, "content.value", SafeContents);
            switch(content.privacyMode){
                case 0:
                    {
                        const contentBuffer = content.value.toSchema().toBER(false);
                        this.safeContents.push(new ContentInfo({
                            contentType: "1.2.840.113549.1.7.1",
                            content: new OctetString({
                                valueHex: contentBuffer
                            })
                        }));
                    }
                    break;
                case 1:
                    {
                        const cmsEncrypted = new EncryptedData();
                        const currentParameters = parameters.safeContents[index];
                        currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);
                        await cmsEncrypted.encrypt(currentParameters);
                        this.safeContents.push(new ContentInfo({
                            contentType: "1.2.840.113549.1.7.6",
                            content: cmsEncrypted.toSchema()
                        }));
                    }
                    break;
                case 2:
                    {
                        const cmsEnveloped = new EnvelopedData();
                        const contentToEncrypt = content.value.toSchema().toBER(false);
                        const safeContent = parameters.safeContents[index];
                        ParameterError.assert(`parameters.safeContents[${index}]`, safeContent, "encryptingCertificate", "encryptionAlgorithm");
                        switch(true){
                            case safeContent.encryptionAlgorithm.name.toLowerCase() === "aes-cbc":
                            case safeContent.encryptionAlgorithm.name.toLowerCase() === "aes-gcm":
                                break;
                            default:
                                throw new Error(`Incorrect parameter "encryptionAlgorithm" in "parameters.safeContents[i]": ${safeContent.encryptionAlgorithm}`);
                        }
                        switch(true){
                            case safeContent.encryptionAlgorithm.length === 128:
                            case safeContent.encryptionAlgorithm.length === 192:
                            case safeContent.encryptionAlgorithm.length === 256:
                                break;
                            default:
                                throw new Error(`Incorrect parameter "encryptionAlgorithm.length" in "parameters.safeContents[i]": ${safeContent.encryptionAlgorithm.length}`);
                        }
                        const encryptionAlgorithm = safeContent.encryptionAlgorithm;
                        cmsEnveloped.addRecipientByCertificate(safeContent.encryptingCertificate, {}, undefined, crypto);
                        await cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt, crypto);
                        this.safeContents.push(new ContentInfo({
                            contentType: "1.2.840.113549.1.7.3",
                            content: cmsEnveloped.toSchema()
                        }));
                    }
                    break;
                default:
                    throw new Error(`Incorrect value for "content.privacyMode": ${content.privacyMode}`);
            }
        }
        return this;
    }
}
AuthenticatedSafe.CLASS_NAME = "AuthenticatedSafe";
const HASH_ALGORITHM$1 = "hashAlgorithm";
const ISSUER_NAME_HASH = "issuerNameHash";
const ISSUER_KEY_HASH = "issuerKeyHash";
const SERIAL_NUMBER$1 = "serialNumber";
const CLEAR_PROPS$j = [
    HASH_ALGORITHM$1,
    ISSUER_NAME_HASH,
    ISSUER_KEY_HASH,
    SERIAL_NUMBER$1
];
class CertID extends PkiObject {
    constructor(parameters = {}){
        super();
        this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM$1, CertID.defaultValues(HASH_ALGORITHM$1));
        this.issuerNameHash = getParametersValue(parameters, ISSUER_NAME_HASH, CertID.defaultValues(ISSUER_NAME_HASH));
        this.issuerKeyHash = getParametersValue(parameters, ISSUER_KEY_HASH, CertID.defaultValues(ISSUER_KEY_HASH));
        this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER$1, CertID.defaultValues(SERIAL_NUMBER$1));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static async create(certificate, parameters, crypto = getCrypto(true)) {
        const certID = new CertID();
        await certID.createForCertificate(certificate, parameters, crypto);
        return certID;
    }
    static defaultValues(memberName) {
        switch(memberName){
            case HASH_ALGORITHM$1:
                return new AlgorithmIdentifier();
            case ISSUER_NAME_HASH:
            case ISSUER_KEY_HASH:
                return new OctetString();
            case SERIAL_NUMBER$1:
                return new Integer();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case HASH_ALGORITHM$1:
                return memberValue.algorithmId === EMPTY_STRING1 && "algorithmParams" in memberValue === false;
            case ISSUER_NAME_HASH:
            case ISSUER_KEY_HASH:
            case SERIAL_NUMBER$1:
                return memberValue.isEqual(CertID.defaultValues(SERIAL_NUMBER$1));
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.hashAlgorithmObject || {
                    names: {
                        blockName: names.hashAlgorithm || EMPTY_STRING1
                    }
                }),
                new OctetString({
                    name: names.issuerNameHash || EMPTY_STRING1
                }),
                new OctetString({
                    name: names.issuerKeyHash || EMPTY_STRING1
                }),
                new Integer({
                    name: names.serialNumber || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$j);
        const asn1 = compareSchema(schema, schema, CertID.schema({
            names: {
                hashAlgorithm: HASH_ALGORITHM$1,
                issuerNameHash: ISSUER_NAME_HASH,
                issuerKeyHash: ISSUER_KEY_HASH,
                serialNumber: SERIAL_NUMBER$1
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.hashAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.hashAlgorithm
        });
        this.issuerNameHash = asn1.result.issuerNameHash;
        this.issuerKeyHash = asn1.result.issuerKeyHash;
        this.serialNumber = asn1.result.serialNumber;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.hashAlgorithm.toSchema(),
                this.issuerNameHash,
                this.issuerKeyHash,
                this.serialNumber
            ]
        });
    }
    toJSON() {
        return {
            hashAlgorithm: this.hashAlgorithm.toJSON(),
            issuerNameHash: this.issuerNameHash.toJSON(),
            issuerKeyHash: this.issuerKeyHash.toJSON(),
            serialNumber: this.serialNumber.toJSON()
        };
    }
    isEqual(certificateID) {
        if (this.hashAlgorithm.algorithmId !== certificateID.hashAlgorithm.algorithmId) {
            return false;
        }
        if (!BufferSourceConverter.isEqual(this.issuerNameHash.valueBlock.valueHexView, certificateID.issuerNameHash.valueBlock.valueHexView)) {
            return false;
        }
        if (!BufferSourceConverter.isEqual(this.issuerKeyHash.valueBlock.valueHexView, certificateID.issuerKeyHash.valueBlock.valueHexView)) {
            return false;
        }
        if (!this.serialNumber.isEqual(certificateID.serialNumber)) {
            return false;
        }
        return true;
    }
    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {
        ParameterError.assert(parameters, HASH_ALGORITHM$1, "issuerCertificate");
        const hashOID = crypto.getOIDByAlgorithm({
            name: parameters.hashAlgorithm
        }, true, "hashAlgorithm");
        this.hashAlgorithm = new AlgorithmIdentifier({
            algorithmId: hashOID,
            algorithmParams: new Null()
        });
        const issuerCertificate = parameters.issuerCertificate;
        this.serialNumber = certificate.serialNumber;
        const hashIssuerName = await crypto.digest({
            name: parameters.hashAlgorithm
        }, issuerCertificate.subject.toSchema().toBER(false));
        this.issuerNameHash = new OctetString({
            valueHex: hashIssuerName
        });
        const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;
        const hashIssuerKey = await crypto.digest({
            name: parameters.hashAlgorithm
        }, issuerKeyBuffer);
        this.issuerKeyHash = new OctetString({
            valueHex: hashIssuerKey
        });
    }
}
CertID.CLASS_NAME = "CertID";
const CERT_ID = "certID";
const CERT_STATUS = "certStatus";
const THIS_UPDATE = "thisUpdate";
const NEXT_UPDATE = "nextUpdate";
const SINGLE_EXTENSIONS = "singleExtensions";
const CLEAR_PROPS$i = [
    CERT_ID,
    CERT_STATUS,
    THIS_UPDATE,
    NEXT_UPDATE,
    SINGLE_EXTENSIONS
];
class SingleResponse extends PkiObject {
    constructor(parameters = {}){
        super();
        this.certID = getParametersValue(parameters, CERT_ID, SingleResponse.defaultValues(CERT_ID));
        this.certStatus = getParametersValue(parameters, CERT_STATUS, SingleResponse.defaultValues(CERT_STATUS));
        this.thisUpdate = getParametersValue(parameters, THIS_UPDATE, SingleResponse.defaultValues(THIS_UPDATE));
        if (NEXT_UPDATE in parameters) {
            this.nextUpdate = getParametersValue(parameters, NEXT_UPDATE, SingleResponse.defaultValues(NEXT_UPDATE));
        }
        if (SINGLE_EXTENSIONS in parameters) {
            this.singleExtensions = getParametersValue(parameters, SINGLE_EXTENSIONS, SingleResponse.defaultValues(SINGLE_EXTENSIONS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case CERT_ID:
                return new CertID();
            case CERT_STATUS:
                return {};
            case THIS_UPDATE:
            case NEXT_UPDATE:
                return new Date(0, 0, 0);
            case SINGLE_EXTENSIONS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case CERT_ID:
                return CertID.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && CertID.compareWithDefault("issuerNameHash", memberValue.issuerNameHash) && CertID.compareWithDefault("issuerKeyHash", memberValue.issuerKeyHash) && CertID.compareWithDefault("serialNumber", memberValue.serialNumber);
            case CERT_STATUS:
                return Object.keys(memberValue).length === 0;
            case THIS_UPDATE:
            case NEXT_UPDATE:
                return memberValue === SingleResponse.defaultValues(memberName);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                CertID.schema(names.certID || {}),
                new Choice({
                    value: [
                        new Primitive({
                            name: names.certStatus || EMPTY_STRING1,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 0
                            }
                        }),
                        new Constructed({
                            name: names.certStatus || EMPTY_STRING1,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 1
                            },
                            value: [
                                new GeneralizedTime(),
                                new Constructed({
                                    optional: true,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: 0
                                    },
                                    value: [
                                        new Enumerated()
                                    ]
                                })
                            ]
                        }),
                        new Primitive({
                            name: names.certStatus || EMPTY_STRING1,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 2
                            },
                            lenBlock: {
                                length: 1
                            }
                        })
                    ]
                }),
                new GeneralizedTime({
                    name: names.thisUpdate || EMPTY_STRING1
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new GeneralizedTime({
                            name: names.nextUpdate || EMPTY_STRING1
                        })
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        Extensions.schema(names.singleExtensions || {})
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$i);
        const asn1 = compareSchema(schema, schema, SingleResponse.schema({
            names: {
                certID: {
                    names: {
                        blockName: CERT_ID
                    }
                },
                certStatus: CERT_STATUS,
                thisUpdate: THIS_UPDATE,
                nextUpdate: NEXT_UPDATE,
                singleExtensions: {
                    names: {
                        blockName: SINGLE_EXTENSIONS
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.certID = new CertID({
            schema: asn1.result.certID
        });
        this.certStatus = asn1.result.certStatus;
        this.thisUpdate = asn1.result.thisUpdate.toDate();
        if (NEXT_UPDATE in asn1.result) this.nextUpdate = asn1.result.nextUpdate.toDate();
        if (SINGLE_EXTENSIONS in asn1.result) this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, (element)=>new Extension({
                schema: element
            })
        );
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.certID.toSchema());
        outputArray.push(this.certStatus);
        outputArray.push(new GeneralizedTime({
            valueDate: this.thisUpdate
        }));
        if (this.nextUpdate) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    new GeneralizedTime({
                        valueDate: this.nextUpdate
                    })
                ]
            }));
        }
        if (this.singleExtensions) {
            outputArray.push(new Sequence({
                value: Array.from(this.singleExtensions, (o72)=>o72.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            certID: this.certID.toJSON(),
            certStatus: this.certStatus.toJSON(),
            thisUpdate: this.thisUpdate
        };
        if (this.nextUpdate) {
            res.nextUpdate = this.nextUpdate;
        }
        if (this.singleExtensions) {
            res.singleExtensions = Array.from(this.singleExtensions, (o73)=>o73.toJSON()
            );
        }
        return res;
    }
}
SingleResponse.CLASS_NAME = "SingleResponse";
const TBS$2 = "tbs";
const VERSION$7 = "version";
const RESPONDER_ID = "responderID";
const PRODUCED_AT = "producedAt";
const RESPONSES = "responses";
const RESPONSE_EXTENSIONS = "responseExtensions";
const RESPONSE_DATA = "ResponseData";
const RESPONSE_DATA_VERSION = `${RESPONSE_DATA}.${VERSION$7}`;
const RESPONSE_DATA_RESPONDER_ID = `${RESPONSE_DATA}.${RESPONDER_ID}`;
const RESPONSE_DATA_PRODUCED_AT = `${RESPONSE_DATA}.${PRODUCED_AT}`;
const RESPONSE_DATA_RESPONSES = `${RESPONSE_DATA}.${RESPONSES}`;
const RESPONSE_DATA_RESPONSE_EXTENSIONS = `${RESPONSE_DATA}.${RESPONSE_EXTENSIONS}`;
const CLEAR_PROPS$h = [
    RESPONSE_DATA,
    RESPONSE_DATA_VERSION,
    RESPONSE_DATA_RESPONDER_ID,
    RESPONSE_DATA_PRODUCED_AT,
    RESPONSE_DATA_RESPONSES,
    RESPONSE_DATA_RESPONSE_EXTENSIONS
];
class ResponseData extends PkiObject {
    constructor(parameters = {}){
        super();
        this.tbsView = new Uint8Array(getParametersValue(parameters, TBS$2, ResponseData.defaultValues(TBS$2)));
        if (VERSION$7 in parameters) {
            this.version = getParametersValue(parameters, VERSION$7, ResponseData.defaultValues(VERSION$7));
        }
        this.responderID = getParametersValue(parameters, RESPONDER_ID, ResponseData.defaultValues(RESPONDER_ID));
        this.producedAt = getParametersValue(parameters, PRODUCED_AT, ResponseData.defaultValues(PRODUCED_AT));
        this.responses = getParametersValue(parameters, RESPONSES, ResponseData.defaultValues(RESPONSES));
        if (RESPONSE_EXTENSIONS in parameters) {
            this.responseExtensions = getParametersValue(parameters, RESPONSE_EXTENSIONS, ResponseData.defaultValues(RESPONSE_EXTENSIONS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    get tbs() {
        return BufferSourceConverter.toArrayBuffer(this.tbsView);
    }
    set tbs(value) {
        this.tbsView = new Uint8Array(value);
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$7:
                return 0;
            case TBS$2:
                return EMPTY_BUFFER1;
            case RESPONDER_ID:
                return {};
            case PRODUCED_AT:
                return new Date(0, 0, 0);
            case RESPONSES:
            case RESPONSE_EXTENSIONS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case TBS$2:
                return memberValue.byteLength === 0;
            case RESPONDER_ID:
                return Object.keys(memberValue).length === 0;
            case PRODUCED_AT:
                return memberValue === ResponseData.defaultValues(memberName);
            case RESPONSES:
            case RESPONSE_EXTENSIONS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || RESPONSE_DATA,
            value: [
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Integer({
                            name: names.version || RESPONSE_DATA_VERSION
                        })
                    ]
                }),
                new Choice({
                    value: [
                        new Constructed({
                            name: names.responderID || RESPONSE_DATA_RESPONDER_ID,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 1
                            },
                            value: [
                                RelativeDistinguishedNames.schema(names.ResponseDataByName || {
                                    names: {
                                        blockName: "ResponseData.byName"
                                    }
                                })
                            ]
                        }),
                        new Constructed({
                            name: names.responderID || RESPONSE_DATA_RESPONDER_ID,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: 2
                            },
                            value: [
                                new OctetString({
                                    name: names.ResponseDataByKey || "ResponseData.byKey"
                                })
                            ]
                        })
                    ]
                }),
                new GeneralizedTime({
                    name: names.producedAt || RESPONSE_DATA_PRODUCED_AT
                }),
                new Sequence({
                    value: [
                        new Repeated({
                            name: RESPONSE_DATA_RESPONSES,
                            value: SingleResponse.schema(names.response || {})
                        })
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        Extensions.schema(names.extensions || {
                            names: {
                                blockName: RESPONSE_DATA_RESPONSE_EXTENSIONS
                            }
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$h);
        const asn1 = compareSchema(schema, schema, ResponseData.schema());
        AsnError.assertSchema(asn1, this.className);
        this.tbsView = asn1.result.ResponseData.valueBeforeDecodeView;
        if (RESPONSE_DATA_VERSION in asn1.result) this.version = asn1.result[RESPONSE_DATA_VERSION].valueBlock.valueDec;
        if (asn1.result[RESPONSE_DATA_RESPONDER_ID].idBlock.tagNumber === 1) this.responderID = new RelativeDistinguishedNames({
            schema: asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0]
        });
        else this.responderID = asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0];
        this.producedAt = asn1.result[RESPONSE_DATA_PRODUCED_AT].toDate();
        this.responses = Array.from(asn1.result[RESPONSE_DATA_RESPONSES], (element)=>new SingleResponse({
                schema: element
            })
        );
        if (RESPONSE_DATA_RESPONSE_EXTENSIONS in asn1.result) this.responseExtensions = Array.from(asn1.result[RESPONSE_DATA_RESPONSE_EXTENSIONS].valueBlock.value, (element)=>new Extension({
                schema: element
            })
        );
    }
    toSchema(encodeFlag = false) {
        let tbsSchema;
        if (encodeFlag === false) {
            if (!this.tbsView.byteLength) {
                return ResponseData.schema();
            }
            const asn1 = fromBER(this.tbsView);
            AsnError.assert(asn1, "TBS Response Data");
            tbsSchema = asn1.result;
        } else {
            const outputArray = [];
            if (VERSION$7 in this) {
                outputArray.push(new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Integer({
                            value: this.version
                        })
                    ]
                }));
            }
            if (this.responderID instanceof RelativeDistinguishedNames) {
                outputArray.push(new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        this.responderID.toSchema()
                    ]
                }));
            } else {
                outputArray.push(new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    value: [
                        this.responderID
                    ]
                }));
            }
            outputArray.push(new GeneralizedTime({
                valueDate: this.producedAt
            }));
            outputArray.push(new Sequence({
                value: Array.from(this.responses, (o74)=>o74.toSchema()
                )
            }));
            if (this.responseExtensions) {
                outputArray.push(new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new Sequence({
                            value: Array.from(this.responseExtensions, (o75)=>o75.toSchema()
                            )
                        })
                    ]
                }));
            }
            tbsSchema = new Sequence({
                value: outputArray
            });
        }
        return tbsSchema;
    }
    toJSON() {
        const res = {};
        if (VERSION$7 in this) {
            res.version = this.version;
        }
        if (this.responderID) {
            res.responderID = this.responderID;
        }
        if (this.producedAt) {
            res.producedAt = this.producedAt;
        }
        if (this.responses) {
            res.responses = Array.from(this.responses, (o76)=>o76.toJSON()
            );
        }
        if (this.responseExtensions) {
            res.responseExtensions = Array.from(this.responseExtensions, (o77)=>o77.toJSON()
            );
        }
        return res;
    }
}
ResponseData.CLASS_NAME = "ResponseData";
const TRUSTED_CERTS = "trustedCerts";
const CERTS$2 = "certs";
const CRLS$1 = "crls";
const OCSPS$1 = "ocsps";
const CHECK_DATE = "checkDate";
const FIND_ORIGIN = "findOrigin";
const FIND_ISSUER = "findIssuer";
class CertificateChainValidationEngine {
    constructor(parameters = {}){
        this.trustedCerts = getParametersValue(parameters, TRUSTED_CERTS, this.defaultValues(TRUSTED_CERTS));
        this.certs = getParametersValue(parameters, CERTS$2, this.defaultValues(CERTS$2));
        this.crls = getParametersValue(parameters, CRLS$1, this.defaultValues(CRLS$1));
        this.ocsps = getParametersValue(parameters, OCSPS$1, this.defaultValues(OCSPS$1));
        this.checkDate = getParametersValue(parameters, CHECK_DATE, this.defaultValues(CHECK_DATE));
        this.findOrigin = getParametersValue(parameters, FIND_ORIGIN, this.defaultValues(FIND_ORIGIN));
        this.findIssuer = getParametersValue(parameters, FIND_ISSUER, this.defaultValues(FIND_ISSUER));
    }
    static defaultFindOrigin(certificate, validationEngine) {
        if (certificate.tbsView.byteLength === 0) {
            certificate.tbsView = new Uint8Array(certificate.encodeTBS().toBER());
        }
        for (const localCert of validationEngine.certs){
            if (localCert.tbsView.byteLength === 0) {
                localCert.tbsView = new Uint8Array(localCert.encodeTBS().toBER());
            }
            if (BufferSourceConverter.isEqual(certificate.tbsView, localCert.tbsView)) return "Intermediate Certificates";
        }
        for (const trustedCert of validationEngine.trustedCerts){
            if (trustedCert.tbsView.byteLength === 0) trustedCert.tbsView = new Uint8Array(trustedCert.encodeTBS().toBER());
            if (BufferSourceConverter.isEqual(certificate.tbsView, trustedCert.tbsView)) return "Trusted Certificates";
        }
        return "Unknown";
    }
    async defaultFindIssuer(certificate, validationEngine, crypto = getCrypto(true)) {
        const result = [];
        let keyIdentifier = null;
        let authorityCertIssuer = null;
        let authorityCertSerialNumber = null;
        if (certificate.subject.isEqual(certificate.issuer)) {
            try {
                const verificationResult = await certificate.verify(undefined, crypto);
                if (verificationResult) {
                    return [
                        certificate
                    ];
                }
            } catch (ex) {}
        }
        if (certificate.extensions) {
            for (const extension of certificate.extensions){
                if (extension.extnID === id_AuthorityKeyIdentifier && extension.parsedValue instanceof AuthorityKeyIdentifier) {
                    if (extension.parsedValue.keyIdentifier) {
                        keyIdentifier = extension.parsedValue.keyIdentifier;
                    } else {
                        if (extension.parsedValue.authorityCertIssuer) {
                            authorityCertIssuer = extension.parsedValue.authorityCertIssuer;
                        }
                        if (extension.parsedValue.authorityCertSerialNumber) {
                            authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;
                        }
                    }
                    break;
                }
            }
        }
        function checkCertificate(possibleIssuer) {
            if (keyIdentifier !== null) {
                if (possibleIssuer.extensions) {
                    let extensionFound = false;
                    for (const extension of possibleIssuer.extensions){
                        if (extension.extnID === id_SubjectKeyIdentifier && extension.parsedValue) {
                            extensionFound = true;
                            if (BufferSourceConverter.isEqual(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHexView)) {
                                result.push(possibleIssuer);
                            }
                            break;
                        }
                    }
                    if (extensionFound) {
                        return;
                    }
                }
            }
            let authorityCertSerialNumberEqual = false;
            if (authorityCertSerialNumber !== null) authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);
            if (authorityCertIssuer !== null) {
                if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {
                    if (authorityCertSerialNumberEqual) result.push(possibleIssuer);
                }
            } else {
                if (certificate.issuer.isEqual(possibleIssuer.subject)) result.push(possibleIssuer);
            }
        }
        for (const trustedCert of validationEngine.trustedCerts){
            checkCertificate(trustedCert);
        }
        for (const intermediateCert of validationEngine.certs){
            checkCertificate(intermediateCert);
        }
        for(let i98 = 0; i98 < result.length; i98++){
            try {
                const verificationResult = await certificate.verify(result[i98], crypto);
                if (verificationResult === false) result.splice(i98, 1);
            } catch (ex) {
                result.splice(i98, 1);
            }
        }
        return result;
    }
    defaultValues(memberName) {
        switch(memberName){
            case TRUSTED_CERTS:
                return [];
            case CERTS$2:
                return [];
            case CRLS$1:
                return [];
            case OCSPS$1:
                return [];
            case CHECK_DATE:
                return new Date();
            case FIND_ORIGIN:
                return CertificateChainValidationEngine.defaultFindOrigin;
            case FIND_ISSUER:
                return this.defaultFindIssuer;
            default:
                throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);
        }
    }
    async sort(passedWhenNotRevValues = false, crypto1 = getCrypto(true)) {
        const localCerts = [];
        const buildPath = async (certificate, crypto)=>{
            const result = [];
            function checkUnique(array) {
                let unique = true;
                for(let i99 = 0; i99 < array.length; i99++){
                    for(let j = 0; j < array.length; j++){
                        if (j === i99) continue;
                        if (array[i99] === array[j]) {
                            unique = false;
                            break;
                        }
                    }
                    if (!unique) break;
                }
                return unique;
            }
            const findIssuerResult = await this.findIssuer(certificate, this, crypto);
            if (findIssuerResult.length === 0) {
                throw new Error("No valid certificate paths found");
            }
            for(let i9 = 0; i9 < findIssuerResult.length; i9++){
                if (BufferSourceConverter.isEqual(findIssuerResult[i9].tbsView, certificate.tbsView)) {
                    result.push([
                        findIssuerResult[i9]
                    ]);
                    continue;
                }
                const buildPathResult = await buildPath(findIssuerResult[i9], crypto);
                for(let j = 0; j < buildPathResult.length; j++){
                    const copy = buildPathResult[j].slice();
                    copy.splice(0, 0, findIssuerResult[i9]);
                    if (checkUnique(copy)) result.push(copy);
                    else result.push(buildPathResult[j]);
                }
            }
            return result;
        };
        const findCRL = async (certificate)=>{
            const issuerCertificates = [];
            const crls = [];
            const crlsAndCertificates = [];
            issuerCertificates.push(...localCerts.filter((element)=>certificate.issuer.isEqual(element.subject)
            ));
            if (issuerCertificates.length === 0) {
                return {
                    status: 1,
                    statusMessage: "No certificate's issuers"
                };
            }
            crls.push(...this.crls.filter((o78)=>o78.issuer.isEqual(certificate.issuer)
            ));
            if (crls.length === 0) {
                return {
                    status: 2,
                    statusMessage: "No CRLs for specific certificate issuer"
                };
            }
            for(let i100 = 0; i100 < crls.length; i100++){
                const crl = crls[i100];
                if (crl.nextUpdate && crl.nextUpdate.value < this.checkDate) {
                    continue;
                }
                for(let j = 0; j < issuerCertificates.length; j++){
                    try {
                        const result = await crls[i100].verify({
                            issuerCertificate: issuerCertificates[j]
                        }, crypto1);
                        if (result) {
                            crlsAndCertificates.push({
                                crl: crls[i100],
                                certificate: issuerCertificates[j]
                            });
                            break;
                        }
                    } catch (ex) {}
                }
            }
            if (crlsAndCertificates.length) {
                return {
                    status: 0,
                    statusMessage: EMPTY_STRING1,
                    result: crlsAndCertificates
                };
            }
            return {
                status: 3,
                statusMessage: "No valid CRLs found"
            };
        };
        const findOCSP = async (certificate, issuerCertificate)=>{
            const hashAlgorithm = crypto1.getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);
            if (!hashAlgorithm.name) {
                return 1;
            }
            if (!hashAlgorithm.hash) {
                return 1;
            }
            for(let i101 = 0; i101 < this.ocsps.length; i101++){
                const ocsp = this.ocsps[i101];
                const result = await ocsp.getCertificateStatus(certificate, issuerCertificate, crypto1);
                if (result.isForCertificate) {
                    if (result.status === 0) return 0;
                    return 1;
                }
            }
            return 2;
        };
        async function checkForCA(certificate, needToCheckCRL = false) {
            let isCA = false;
            let mustBeCA = false;
            let keyUsagePresent = false;
            let cRLSign = false;
            if (certificate.extensions) {
                for(let j = 0; j < certificate.extensions.length; j++){
                    const extension = certificate.extensions[j];
                    if (extension.critical && !extension.parsedValue) {
                        return {
                            result: false,
                            resultCode: 6,
                            resultMessage: `Unable to parse critical certificate extension: ${extension.extnID}`
                        };
                    }
                    if (extension.extnID === id_KeyUsage) {
                        keyUsagePresent = true;
                        const view = new Uint8Array(extension.parsedValue.valueBlock.valueHex);
                        if ((view[0] & 4) === 4) mustBeCA = true;
                        if ((view[0] & 2) === 2) cRLSign = true;
                    }
                    if (extension.extnID === id_BasicConstraints) {
                        if ("cA" in extension.parsedValue) {
                            if (extension.parsedValue.cA === true) isCA = true;
                        }
                    }
                }
                if (mustBeCA === true && isCA === false) {
                    return {
                        result: false,
                        resultCode: 3,
                        resultMessage: "Unable to build certificate chain - using \"keyCertSign\" flag set without BasicConstraints"
                    };
                }
                if (keyUsagePresent === true && isCA === true && mustBeCA === false) {
                    return {
                        result: false,
                        resultCode: 4,
                        resultMessage: "Unable to build certificate chain - \"keyCertSign\" flag was not set"
                    };
                }
                if (isCA === true && keyUsagePresent === true && needToCheckCRL && cRLSign === false) {
                    return {
                        result: false,
                        resultCode: 5,
                        resultMessage: "Unable to build certificate chain - intermediate certificate must have \"cRLSign\" key usage flag"
                    };
                }
            }
            if (isCA === false) {
                return {
                    result: false,
                    resultCode: 7,
                    resultMessage: "Unable to build certificate chain - more than one possible end-user certificate"
                };
            }
            return {
                result: true,
                resultCode: 0,
                resultMessage: EMPTY_STRING1
            };
        }
        const basicCheck = async (path, checkDate)=>{
            for(let i102 = 0; i102 < path.length; i102++){
                if (path[i102].notBefore.value > checkDate || path[i102].notAfter.value < checkDate) {
                    return {
                        result: false,
                        resultCode: 8,
                        resultMessage: "The certificate is either not yet valid or expired"
                    };
                }
            }
            if (path.length < 2) {
                return {
                    result: false,
                    resultCode: 9,
                    resultMessage: "Too short certificate path"
                };
            }
            for(let i10 = path.length - 2; i10 >= 0; i10--){
                if (path[i10].issuer.isEqual(path[i10].subject) === false) {
                    if (path[i10].issuer.isEqual(path[i10 + 1].subject) === false) {
                        return {
                            result: false,
                            resultCode: 10,
                            resultMessage: "Incorrect name chaining"
                        };
                    }
                }
            }
            if (this.crls.length !== 0 || this.ocsps.length !== 0) {
                for(let i103 = 0; i103 < path.length - 1; i103++){
                    let ocspResult = 2;
                    let crlResult = {
                        status: 0,
                        statusMessage: EMPTY_STRING1
                    };
                    if (this.ocsps.length !== 0) {
                        ocspResult = await findOCSP(path[i103], path[i103 + 1]);
                        switch(ocspResult){
                            case 0:
                                continue;
                            case 1:
                                return {
                                    result: false,
                                    resultCode: 12,
                                    resultMessage: "One of certificates was revoked via OCSP response"
                                };
                        }
                    }
                    if (this.crls.length !== 0) {
                        crlResult = await findCRL(path[i103]);
                        if (crlResult.status === 0 && crlResult.result) {
                            for(let j = 0; j < crlResult.result.length; j++){
                                const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i103]);
                                if (isCertificateRevoked) {
                                    return {
                                        result: false,
                                        resultCode: 12,
                                        resultMessage: "One of certificates had been revoked"
                                    };
                                }
                                const isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);
                                if (isCertificateCA.result === false) {
                                    return {
                                        result: false,
                                        resultCode: 13,
                                        resultMessage: "CRL issuer certificate is not a CA certificate or does not have crlSign flag"
                                    };
                                }
                            }
                        } else {
                            if (passedWhenNotRevValues === false) {
                                throw {
                                    result: false,
                                    resultCode: 11,
                                    resultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`
                                };
                            }
                        }
                    } else {
                        if (ocspResult === 2) {
                            return {
                                result: false,
                                resultCode: 11,
                                resultMessage: "No revocation values found for one of certificates"
                            };
                        }
                    }
                    if (ocspResult === 2 && crlResult.status === 2 && passedWhenNotRevValues) {
                        const issuerCertificate = path[i103 + 1];
                        let extensionFound = false;
                        if (issuerCertificate.extensions) {
                            for (const extension of issuerCertificate.extensions){
                                switch(extension.extnID){
                                    case id_CRLDistributionPoints:
                                    case id_FreshestCRL:
                                    case id_AuthorityInfoAccess:
                                        extensionFound = true;
                                        break;
                                }
                            }
                        }
                        if (extensionFound) {
                            throw {
                                result: false,
                                resultCode: 11,
                                resultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`
                            };
                        }
                    }
                }
            }
            for (const [i11, cert] of path.entries()){
                if (!i11) {
                    continue;
                }
                const result = await checkForCA(cert);
                if (!result.result) {
                    return {
                        result: false,
                        resultCode: 14,
                        resultMessage: "One of intermediate certificates is not a CA certificate"
                    };
                }
            }
            return {
                result: true
            };
        };
        localCerts.push(...this.trustedCerts);
        localCerts.push(...this.certs);
        for(let i8 = 0; i8 < localCerts.length; i8++){
            for(let j = 0; j < localCerts.length; j++){
                if (i8 === j) continue;
                if (BufferSourceConverter.isEqual(localCerts[i8].tbsView, localCerts[j].tbsView)) {
                    localCerts.splice(j, 1);
                    i8 = 0;
                    break;
                }
            }
        }
        let result1;
        const certificatePath = [
            localCerts[localCerts.length - 1]
        ];
        result1 = await buildPath(localCerts[localCerts.length - 1], crypto1);
        if (result1.length === 0) {
            throw {
                result: false,
                resultCode: 60,
                resultMessage: "Unable to find certificate path"
            };
        }
        for(let i5 = 0; i5 < result1.length; i5++){
            let found = false;
            for(let j = 0; j < result1[i5].length; j++){
                const certificate = result1[i5][j];
                for(let k = 0; k < this.trustedCerts.length; k++){
                    if (BufferSourceConverter.isEqual(certificate.tbsView, this.trustedCerts[k].tbsView)) {
                        found = true;
                        break;
                    }
                }
                if (found) break;
            }
            if (!found) {
                result1.splice(i5, 1);
                i5 = 0;
            }
        }
        if (result1.length === 0) {
            throw {
                result: false,
                resultCode: 97,
                resultMessage: "No valid certificate paths found"
            };
        }
        let shortestLength = result1[0].length;
        let shortestIndex = 0;
        for(let i6 = 0; i6 < result1.length; i6++){
            if (result1[i6].length < shortestLength) {
                shortestLength = result1[i6].length;
                shortestIndex = i6;
            }
        }
        for(let i7 = 0; i7 < result1[shortestIndex].length; i7++)certificatePath.push(result1[shortestIndex][i7]);
        result1 = await basicCheck(certificatePath, this.checkDate);
        if (result1.result === false) throw result1;
        return certificatePath;
    }
    async verify(parameters = {}, crypto = getCrypto(true)) {
        function compareDNSName(name, constraint) {
            const namePrepared = stringPrep(name);
            const constraintPrepared = stringPrep(constraint);
            const nameSplitted = namePrepared.split(".");
            const constraintSplitted = constraintPrepared.split(".");
            const nameLen = nameSplitted.length;
            const constrLen = constraintSplitted.length;
            if (nameLen === 0 || constrLen === 0 || nameLen < constrLen) {
                return false;
            }
            for(let i104 = 0; i104 < nameLen; i104++){
                if (nameSplitted[i104].length === 0) {
                    return false;
                }
            }
            for(let i12 = 0; i12 < constrLen; i12++){
                if (constraintSplitted[i12].length === 0) {
                    if (i12 === 0) {
                        if (constrLen === 1) {
                            return false;
                        }
                        continue;
                    }
                    return false;
                }
            }
            for(let i13 = 0; i13 < constrLen; i13++){
                if (constraintSplitted[constrLen - 1 - i13].length === 0) {
                    continue;
                }
                if (nameSplitted[nameLen - 1 - i13].localeCompare(constraintSplitted[constrLen - 1 - i13]) !== 0) {
                    return false;
                }
            }
            return true;
        }
        function compareRFC822Name(name, constraint) {
            const namePrepared = stringPrep(name);
            const constraintPrepared = stringPrep(constraint);
            const nameSplitted = namePrepared.split("@");
            const constraintSplitted = constraintPrepared.split("@");
            if (nameSplitted.length === 0 || constraintSplitted.length === 0 || nameSplitted.length < constraintSplitted.length) return false;
            if (constraintSplitted.length === 1) {
                const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);
                if (result) {
                    const ns = nameSplitted[1].split(".");
                    const cs = constraintSplitted[0].split(".");
                    if (cs[0].length === 0) return true;
                    return ns.length === cs.length;
                }
                return false;
            }
            return namePrepared.localeCompare(constraintPrepared) === 0;
        }
        function compareUniformResourceIdentifier(name, constraint) {
            let namePrepared = stringPrep(name);
            const constraintPrepared = stringPrep(constraint);
            const ns = namePrepared.split("/");
            const cs = constraintPrepared.split("/");
            if (cs.length > 1) return false;
            if (ns.length > 1) {
                for(let i105 = 0; i105 < ns.length; i105++){
                    if (ns[i105].length > 0 && ns[i105].charAt(ns[i105].length - 1) !== ":") {
                        const nsPort = ns[i105].split(":");
                        namePrepared = nsPort[0];
                        break;
                    }
                }
            }
            const result = compareDNSName(namePrepared, constraintPrepared);
            if (result) {
                const nameSplitted = namePrepared.split(".");
                const constraintSplitted = constraintPrepared.split(".");
                if (constraintSplitted[0].length === 0) return true;
                return nameSplitted.length === constraintSplitted.length;
            }
            return false;
        }
        function compareIPAddress(name, constraint) {
            const nameView = name.valueBlock.valueHexView;
            const constraintView = constraint.valueBlock.valueHexView;
            if (nameView.length === 4 && constraintView.length === 8) {
                for(let i106 = 0; i106 < 4; i106++){
                    if ((nameView[i106] ^ constraintView[i106]) & constraintView[i106 + 4]) return false;
                }
                return true;
            }
            if (nameView.length === 16 && constraintView.length === 32) {
                for(let i107 = 0; i107 < 16; i107++){
                    if ((nameView[i107] ^ constraintView[i107]) & constraintView[i107 + 16]) return false;
                }
                return true;
            }
            return false;
        }
        function compareDirectoryName(name, constraint) {
            if (name.typesAndValues.length === 0 || constraint.typesAndValues.length === 0) return true;
            if (name.typesAndValues.length < constraint.typesAndValues.length) return false;
            let result = true;
            let nameStart = 0;
            for(let i108 = 0; i108 < constraint.typesAndValues.length; i108++){
                let localResult = false;
                for(let j = nameStart; j < name.typesAndValues.length; j++){
                    localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i108]);
                    if (name.typesAndValues[j].type === constraint.typesAndValues[i108].type) result = result && localResult;
                    if (localResult === true) {
                        if (nameStart === 0 || nameStart === j) {
                            nameStart = j + 1;
                            break;
                        } else return false;
                    }
                }
                if (localResult === false) return false;
            }
            return nameStart === 0 ? false : result;
        }
        try {
            if (this.certs.length === 0) throw new Error("Empty certificate array");
            const passedWhenNotRevValues = parameters.passedWhenNotRevValues || false;
            const initialPolicySet = parameters.initialPolicySet || [
                id_AnyPolicy
            ];
            const initialExplicitPolicy = parameters.initialExplicitPolicy || false;
            const initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit || false;
            const initialInhibitPolicy = parameters.initialInhibitPolicy || false;
            const initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet || [];
            const initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet || [];
            const initialRequiredNameForms = parameters.initialRequiredNameForms || [];
            let explicitPolicyIndicator = initialExplicitPolicy;
            let policyMappingInhibitIndicator = initialPolicyMappingInhibit;
            let inhibitAnyPolicyIndicator = initialInhibitPolicy;
            const pendingConstraints = [
                false,
                false,
                false
            ];
            let explicitPolicyPending = 0;
            let policyMappingInhibitPending = 0;
            let inhibitAnyPolicyPending = 0;
            let permittedSubtrees = initialPermittedSubtreesSet;
            let excludedSubtrees = initialExcludedSubtreesSet;
            const requiredNameForms = initialRequiredNameForms;
            let pathDepth = 1;
            this.certs = await this.sort(passedWhenNotRevValues, crypto);
            const allPolicies = [];
            allPolicies.push(id_AnyPolicy);
            const policiesAndCerts = [];
            const anyPolicyArray = new Array(this.certs.length - 1);
            for(let ii = 0; ii < this.certs.length - 1; ii++)anyPolicyArray[ii] = true;
            policiesAndCerts.push(anyPolicyArray);
            const policyMappings = new Array(this.certs.length - 1);
            const certPolicies = new Array(this.certs.length - 1);
            let explicitPolicyStart = explicitPolicyIndicator ? this.certs.length - 1 : -1;
            for(let i109 = this.certs.length - 2; i109 >= 0; i109--, pathDepth++){
                const cert = this.certs[i109];
                if (cert.extensions) {
                    for(let j = 0; j < cert.extensions.length; j++){
                        const extension = cert.extensions[j];
                        if (extension.extnID === id_CertificatePolicies) {
                            certPolicies[i109] = extension.parsedValue;
                            for(let s3 = 0; s3 < allPolicies.length; s3++){
                                if (allPolicies[s3] === id_AnyPolicy) {
                                    delete policiesAndCerts[s3][i109];
                                    break;
                                }
                            }
                            for(let k = 0; k < extension.parsedValue.certificatePolicies.length; k++){
                                let policyIndex = -1;
                                const policyId = extension.parsedValue.certificatePolicies[k].policyIdentifier;
                                for(let s4 = 0; s4 < allPolicies.length; s4++){
                                    if (policyId === allPolicies[s4]) {
                                        policyIndex = s4;
                                        break;
                                    }
                                }
                                if (policyIndex === -1) {
                                    allPolicies.push(policyId);
                                    const certArray = new Array(this.certs.length - 1);
                                    certArray[i109] = true;
                                    policiesAndCerts.push(certArray);
                                } else policiesAndCerts[policyIndex][i109] = true;
                            }
                        }
                        if (extension.extnID === id_PolicyMappings) {
                            if (policyMappingInhibitIndicator) {
                                return {
                                    result: false,
                                    resultCode: 98,
                                    resultMessage: "Policy mapping prohibited"
                                };
                            }
                            policyMappings[i109] = extension.parsedValue;
                        }
                        if (extension.extnID === id_PolicyConstraints) {
                            if (explicitPolicyIndicator === false) {
                                if (extension.parsedValue.requireExplicitPolicy === 0) {
                                    explicitPolicyIndicator = true;
                                    explicitPolicyStart = i109;
                                } else {
                                    if (pendingConstraints[0] === false) {
                                        pendingConstraints[0] = true;
                                        explicitPolicyPending = extension.parsedValue.requireExplicitPolicy;
                                    } else explicitPolicyPending = explicitPolicyPending > extension.parsedValue.requireExplicitPolicy ? extension.parsedValue.requireExplicitPolicy : explicitPolicyPending;
                                }
                                if (extension.parsedValue.inhibitPolicyMapping === 0) policyMappingInhibitIndicator = true;
                                else {
                                    if (pendingConstraints[1] === false) {
                                        pendingConstraints[1] = true;
                                        policyMappingInhibitPending = extension.parsedValue.inhibitPolicyMapping + 1;
                                    } else policyMappingInhibitPending = policyMappingInhibitPending > extension.parsedValue.inhibitPolicyMapping + 1 ? extension.parsedValue.inhibitPolicyMapping + 1 : policyMappingInhibitPending;
                                }
                            }
                        }
                        if (extension.extnID === id_InhibitAnyPolicy) {
                            if (inhibitAnyPolicyIndicator === false) {
                                if (extension.parsedValue.valueBlock.valueDec === 0) inhibitAnyPolicyIndicator = true;
                                else {
                                    if (pendingConstraints[2] === false) {
                                        pendingConstraints[2] = true;
                                        inhibitAnyPolicyPending = extension.parsedValue.valueBlock.valueDec;
                                    } else inhibitAnyPolicyPending = inhibitAnyPolicyPending > extension.parsedValue.valueBlock.valueDec ? extension.parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;
                                }
                            }
                        }
                    }
                    if (inhibitAnyPolicyIndicator === true) {
                        let policyIndex = -1;
                        for(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++){
                            if (allPolicies[searchAnyPolicy] === id_AnyPolicy) {
                                policyIndex = searchAnyPolicy;
                                break;
                            }
                        }
                        if (policyIndex !== -1) delete policiesAndCerts[0][i109];
                    }
                    if (explicitPolicyIndicator === false) {
                        if (pendingConstraints[0] === true) {
                            explicitPolicyPending--;
                            if (explicitPolicyPending === 0) {
                                explicitPolicyIndicator = true;
                                explicitPolicyStart = i109;
                                pendingConstraints[0] = false;
                            }
                        }
                    }
                    if (policyMappingInhibitIndicator === false) {
                        if (pendingConstraints[1] === true) {
                            policyMappingInhibitPending--;
                            if (policyMappingInhibitPending === 0) {
                                policyMappingInhibitIndicator = true;
                                pendingConstraints[1] = false;
                            }
                        }
                    }
                    if (inhibitAnyPolicyIndicator === false) {
                        if (pendingConstraints[2] === true) {
                            inhibitAnyPolicyPending--;
                            if (inhibitAnyPolicyPending === 0) {
                                inhibitAnyPolicyIndicator = true;
                                pendingConstraints[2] = false;
                            }
                        }
                    }
                }
            }
            for(let i14 = 0; i14 < this.certs.length - 1; i14++){
                if (i14 < this.certs.length - 2 && typeof policyMappings[i14 + 1] !== "undefined") {
                    for(let k = 0; k < policyMappings[i14 + 1].mappings.length; k++){
                        if (policyMappings[i14 + 1].mappings[k].issuerDomainPolicy === id_AnyPolicy || policyMappings[i14 + 1].mappings[k].subjectDomainPolicy === id_AnyPolicy) {
                            return {
                                result: false,
                                resultCode: 99,
                                resultMessage: "The \"anyPolicy\" should not be a part of policy mapping scheme"
                            };
                        }
                        let issuerDomainPolicyIndex = -1;
                        let subjectDomainPolicyIndex = -1;
                        for(let n4 = 0; n4 < allPolicies.length; n4++){
                            if (allPolicies[n4] === policyMappings[i14 + 1].mappings[k].issuerDomainPolicy) issuerDomainPolicyIndex = n4;
                            if (allPolicies[n4] === policyMappings[i14 + 1].mappings[k].subjectDomainPolicy) subjectDomainPolicyIndex = n4;
                        }
                        if (typeof policiesAndCerts[issuerDomainPolicyIndex][i14] !== "undefined") delete policiesAndCerts[issuerDomainPolicyIndex][i14];
                        for(let j = 0; j < certPolicies[i14].certificatePolicies.length; j++){
                            if (policyMappings[i14 + 1].mappings[k].subjectDomainPolicy === certPolicies[i14].certificatePolicies[j].policyIdentifier) {
                                if (issuerDomainPolicyIndex !== -1 && subjectDomainPolicyIndex !== -1) {
                                    for(let m = 0; m <= i14; m++){
                                        if (typeof policiesAndCerts[subjectDomainPolicyIndex][m] !== "undefined") {
                                            policiesAndCerts[issuerDomainPolicyIndex][m] = true;
                                            delete policiesAndCerts[subjectDomainPolicyIndex][m];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for(let i15 = 0; i15 < allPolicies.length; i15++){
                if (allPolicies[i15] === id_AnyPolicy) {
                    for(let j = 0; j < explicitPolicyStart; j++)delete policiesAndCerts[i15][j];
                }
            }
            const authConstrPolicies = [];
            for(let i16 = 0; i16 < policiesAndCerts.length; i16++){
                let found = true;
                for(let j = 0; j < this.certs.length - 1; j++){
                    let anyPolicyFound = false;
                    if (j < explicitPolicyStart && allPolicies[i16] === id_AnyPolicy && allPolicies.length > 1) {
                        found = false;
                        break;
                    }
                    if (typeof policiesAndCerts[i16][j] === "undefined") {
                        if (j >= explicitPolicyStart) {
                            for(let k = 0; k < allPolicies.length; k++){
                                if (allPolicies[k] === id_AnyPolicy) {
                                    if (policiesAndCerts[k][j] === true) anyPolicyFound = true;
                                    break;
                                }
                            }
                        }
                        if (!anyPolicyFound) {
                            found = false;
                            break;
                        }
                    }
                }
                if (found === true) authConstrPolicies.push(allPolicies[i16]);
            }
            let userConstrPolicies = [];
            if (initialPolicySet.length === 1 && initialPolicySet[0] === id_AnyPolicy && explicitPolicyIndicator === false) userConstrPolicies = initialPolicySet;
            else {
                if (authConstrPolicies.length === 1 && authConstrPolicies[0] === id_AnyPolicy) userConstrPolicies = initialPolicySet;
                else {
                    for(let i115 = 0; i115 < authConstrPolicies.length; i115++){
                        for(let j = 0; j < initialPolicySet.length; j++){
                            if (initialPolicySet[j] === authConstrPolicies[i115] || initialPolicySet[j] === id_AnyPolicy) {
                                userConstrPolicies.push(authConstrPolicies[i115]);
                                break;
                            }
                        }
                    }
                }
            }
            const policyResult = {
                result: userConstrPolicies.length > 0,
                resultCode: 0,
                resultMessage: userConstrPolicies.length > 0 ? EMPTY_STRING1 : "Zero \"userConstrPolicies\" array, no intersections with \"authConstrPolicies\"",
                authConstrPolicies,
                userConstrPolicies,
                explicitPolicyIndicator,
                policyMappings,
                certificatePath: this.certs
            };
            if (userConstrPolicies.length === 0) return policyResult;
            if (policyResult.result === false) return policyResult;
            pathDepth = 1;
            for(let i17 = this.certs.length - 2; i17 >= 0; i17--, pathDepth++){
                const cert = this.certs[i17];
                let subjectAltNames = [];
                let certPermittedSubtrees = [];
                let certExcludedSubtrees = [];
                if (cert.extensions) {
                    for(let j = 0; j < cert.extensions.length; j++){
                        const extension = cert.extensions[j];
                        if (extension.extnID === id_NameConstraints) {
                            if ("permittedSubtrees" in extension.parsedValue) certPermittedSubtrees = certPermittedSubtrees.concat(extension.parsedValue.permittedSubtrees);
                            if ("excludedSubtrees" in extension.parsedValue) certExcludedSubtrees = certExcludedSubtrees.concat(extension.parsedValue.excludedSubtrees);
                        }
                        if (extension.extnID === id_SubjectAltName) subjectAltNames = subjectAltNames.concat(extension.parsedValue.altNames);
                    }
                }
                let formFound = requiredNameForms.length <= 0;
                for(let j = 0; j < requiredNameForms.length; j++){
                    switch(requiredNameForms[j].base.type){
                        case 4:
                            {
                                if (requiredNameForms[j].base.value.typesAndValues.length !== cert.subject.typesAndValues.length) continue;
                                formFound = true;
                                for(let k = 0; k < cert.subject.typesAndValues.length; k++){
                                    if (cert.subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {
                                        formFound = false;
                                        break;
                                    }
                                }
                                if (formFound === true) break;
                            }
                            break;
                        default:
                    }
                }
                if (formFound === false) {
                    policyResult.result = false;
                    policyResult.resultCode = 21;
                    policyResult.resultMessage = "No necessary name form found";
                    throw policyResult;
                }
                const constrGroups = [
                    [],
                    [],
                    [],
                    [],
                    []
                ];
                for(let j4 = 0; j4 < permittedSubtrees.length; j4++){
                    switch(permittedSubtrees[j4].base.type){
                        case 1:
                            constrGroups[0].push(permittedSubtrees[j4]);
                            break;
                        case 2:
                            constrGroups[1].push(permittedSubtrees[j4]);
                            break;
                        case 4:
                            constrGroups[2].push(permittedSubtrees[j4]);
                            break;
                        case 6:
                            constrGroups[3].push(permittedSubtrees[j4]);
                            break;
                        case 7:
                            constrGroups[4].push(permittedSubtrees[j4]);
                            break;
                        default:
                    }
                }
                for(let p = 0; p < 5; p++){
                    let groupPermitted = false;
                    let valueExists = false;
                    const group = constrGroups[p];
                    for(let j = 0; j < group.length; j++){
                        switch(p){
                            case 0:
                                if (subjectAltNames.length > 0) {
                                    for(let k = 0; k < subjectAltNames.length; k++){
                                        if (subjectAltNames[k].type === 1) {
                                            valueExists = true;
                                            groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);
                                        }
                                    }
                                } else {
                                    for(let k = 0; k < cert.subject.typesAndValues.length; k++){
                                        if (cert.subject.typesAndValues[k].type === "1.2.840.113549.1.9.1" || cert.subject.typesAndValues[k].type === "0.9.2342.19200300.100.1.3") {
                                            valueExists = true;
                                            groupPermitted = groupPermitted || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);
                                        }
                                    }
                                }
                                break;
                            case 1:
                                if (subjectAltNames.length > 0) {
                                    for(let k = 0; k < subjectAltNames.length; k++){
                                        if (subjectAltNames[k].type === 2) {
                                            valueExists = true;
                                            groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);
                                        }
                                    }
                                }
                                break;
                            case 2:
                                valueExists = true;
                                groupPermitted = compareDirectoryName(cert.subject, group[j].base.value);
                                break;
                            case 3:
                                if (subjectAltNames.length > 0) {
                                    for(let k = 0; k < subjectAltNames.length; k++){
                                        if (subjectAltNames[k].type === 6) {
                                            valueExists = true;
                                            groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);
                                        }
                                    }
                                }
                                break;
                            case 4:
                                if (subjectAltNames.length > 0) {
                                    for(let k = 0; k < subjectAltNames.length; k++){
                                        if (subjectAltNames[k].type === 7) {
                                            valueExists = true;
                                            groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);
                                        }
                                    }
                                }
                                break;
                            default:
                        }
                        if (groupPermitted) break;
                    }
                    if (groupPermitted === false && group.length > 0 && valueExists) {
                        policyResult.result = false;
                        policyResult.resultCode = 41;
                        policyResult.resultMessage = "Failed to meet \"permitted sub-trees\" name constraint";
                        throw policyResult;
                    }
                }
                let excluded = false;
                for(let j5 = 0; j5 < excludedSubtrees.length; j5++){
                    switch(excludedSubtrees[j5].base.type){
                        case 1:
                            if (subjectAltNames.length >= 0) {
                                for(let k = 0; k < subjectAltNames.length; k++){
                                    if (subjectAltNames[k].type === 1) excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j5].base.value);
                                }
                            } else {
                                for(let k = 0; k < cert.subject.typesAndValues.length; k++){
                                    if (cert.subject.typesAndValues[k].type === "1.2.840.113549.1.9.1" || cert.subject.typesAndValues[k].type === "0.9.2342.19200300.100.1.3") excluded = excluded || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j5].base.value);
                                }
                            }
                            break;
                        case 2:
                            if (subjectAltNames.length > 0) {
                                for(let k = 0; k < subjectAltNames.length; k++){
                                    if (subjectAltNames[k].type === 2) excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j5].base.value);
                                }
                            }
                            break;
                        case 4:
                            excluded = excluded || compareDirectoryName(cert.subject, excludedSubtrees[j5].base.value);
                            break;
                        case 6:
                            if (subjectAltNames.length > 0) {
                                for(let k = 0; k < subjectAltNames.length; k++){
                                    if (subjectAltNames[k].type === 6) excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j5].base.value);
                                }
                            }
                            break;
                        case 7:
                            if (subjectAltNames.length > 0) {
                                for(let k = 0; k < subjectAltNames.length; k++){
                                    if (subjectAltNames[k].type === 7) excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j5].base.value);
                                }
                            }
                            break;
                        default:
                    }
                    if (excluded) break;
                }
                if (excluded === true) {
                    policyResult.result = false;
                    policyResult.resultCode = 42;
                    policyResult.resultMessage = "Failed to meet \"excluded sub-trees\" name constraint";
                    throw policyResult;
                }
                permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);
                excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);
            }
            return policyResult;
        } catch (error2) {
            if (error2 instanceof Object) {
                if ("resultMessage" in error2) return error2;
                if ("message" in error2) {
                    return {
                        result: false,
                        resultCode: -1,
                        resultMessage: error2.message
                    };
                }
            }
            return {
                result: false,
                resultCode: -1,
                resultMessage: error2
            };
        }
    }
}
const TBS_RESPONSE_DATA = "tbsResponseData";
const SIGNATURE_ALGORITHM$3 = "signatureAlgorithm";
const SIGNATURE$2 = "signature";
const CERTS$1 = "certs";
const BASIC_OCSP_RESPONSE = "BasicOCSPResponse";
const BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA = `${BASIC_OCSP_RESPONSE}.${TBS_RESPONSE_DATA}`;
const BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM = `${BASIC_OCSP_RESPONSE}.${SIGNATURE_ALGORITHM$3}`;
const BASIC_OCSP_RESPONSE_SIGNATURE = `${BASIC_OCSP_RESPONSE}.${SIGNATURE$2}`;
const BASIC_OCSP_RESPONSE_CERTS = `${BASIC_OCSP_RESPONSE}.${CERTS$1}`;
const CLEAR_PROPS$g = [
    BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA,
    BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM,
    BASIC_OCSP_RESPONSE_SIGNATURE,
    BASIC_OCSP_RESPONSE_CERTS
];
class BasicOCSPResponse extends PkiObject {
    constructor(parameters = {}){
        super();
        this.tbsResponseData = getParametersValue(parameters, TBS_RESPONSE_DATA, BasicOCSPResponse.defaultValues(TBS_RESPONSE_DATA));
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$3, BasicOCSPResponse.defaultValues(SIGNATURE_ALGORITHM$3));
        this.signature = getParametersValue(parameters, SIGNATURE$2, BasicOCSPResponse.defaultValues(SIGNATURE$2));
        if (CERTS$1 in parameters) {
            this.certs = getParametersValue(parameters, CERTS$1, BasicOCSPResponse.defaultValues(CERTS$1));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TBS_RESPONSE_DATA:
                return new ResponseData();
            case SIGNATURE_ALGORITHM$3:
                return new AlgorithmIdentifier();
            case SIGNATURE$2:
                return new BitString();
            case CERTS$1:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case "type":
                {
                    let comparisonResult = ResponseData.compareWithDefault("tbs", memberValue.tbs) && ResponseData.compareWithDefault("responderID", memberValue.responderID) && ResponseData.compareWithDefault("producedAt", memberValue.producedAt) && ResponseData.compareWithDefault("responses", memberValue.responses);
                    if ("responseExtensions" in memberValue) comparisonResult = comparisonResult && ResponseData.compareWithDefault("responseExtensions", memberValue.responseExtensions);
                    return comparisonResult;
                }
            case SIGNATURE_ALGORITHM$3:
                return memberValue.algorithmId === EMPTY_STRING1 && "algorithmParams" in memberValue === false;
            case SIGNATURE$2:
                return memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName));
            case CERTS$1:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || BASIC_OCSP_RESPONSE,
            value: [
                ResponseData.schema(names.tbsResponseData || {
                    names: {
                        blockName: BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA
                    }
                }),
                AlgorithmIdentifier.schema(names.signatureAlgorithm || {
                    names: {
                        blockName: BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM
                    }
                }),
                new BitString({
                    name: names.signature || BASIC_OCSP_RESPONSE_SIGNATURE
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Sequence({
                            value: [
                                new Repeated({
                                    name: BASIC_OCSP_RESPONSE_CERTS,
                                    value: Certificate.schema(names.certs || {})
                                })
                            ]
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$g);
        const asn1 = compareSchema(schema, schema, BasicOCSPResponse.schema());
        AsnError.assertSchema(asn1, this.className);
        this.tbsResponseData = new ResponseData({
            schema: asn1.result[BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA]
        });
        this.signatureAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM]
        });
        this.signature = asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE];
        if (BASIC_OCSP_RESPONSE_CERTS in asn1.result) {
            this.certs = Array.from(asn1.result[BASIC_OCSP_RESPONSE_CERTS], (element)=>new Certificate({
                    schema: element
                })
            );
        }
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.tbsResponseData.toSchema());
        outputArray.push(this.signatureAlgorithm.toSchema());
        outputArray.push(this.signature);
        if (this.certs) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    new Sequence({
                        value: Array.from(this.certs, (o79)=>o79.toSchema()
                        )
                    })
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            tbsResponseData: this.tbsResponseData.toJSON(),
            signatureAlgorithm: this.signatureAlgorithm.toJSON(),
            signature: this.signature.toJSON()
        };
        if (this.certs) {
            res.certs = Array.from(this.certs, (o80)=>o80.toJSON()
            );
        }
        return res;
    }
    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {
        const result = {
            isForCertificate: false,
            status: 2
        };
        const hashesObject = {};
        const certIDs = [];
        for (const response of this.tbsResponseData.responses){
            const hashAlgorithm = crypto.getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId, true, "CertID.hashAlgorithm");
            if (!hashesObject[hashAlgorithm.name]) {
                hashesObject[hashAlgorithm.name] = 1;
                const certID = new CertID();
                certIDs.push(certID);
                await certID.createForCertificate(certificate, {
                    hashAlgorithm: hashAlgorithm.name,
                    issuerCertificate
                }, crypto);
            }
        }
        for (const response1 of this.tbsResponseData.responses){
            for (const id of certIDs){
                if (response1.certID.isEqual(id)) {
                    result.isForCertificate = true;
                    try {
                        switch(response1.certStatus.idBlock.isConstructed){
                            case true:
                                if (response1.certStatus.idBlock.tagNumber === 1) result.status = 1;
                                break;
                            case false:
                                switch(response1.certStatus.idBlock.tagNumber){
                                    case 0:
                                        result.status = 0;
                                        break;
                                    case 2:
                                        result.status = 2;
                                        break;
                                    default:
                                }
                                break;
                            default:
                        }
                    } catch (ex) {}
                    return result;
                }
            }
        }
        return result;
    }
    async sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
        if (!privateKey) {
            throw new Error("Need to provide a private key for signing");
        }
        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);
        const algorithm = signatureParams.parameters.algorithm;
        if (!("name" in algorithm)) {
            throw new Error("Empty algorithm");
        }
        this.signatureAlgorithm = signatureParams.signatureAlgorithm;
        this.tbsResponseData.tbsView = new Uint8Array(this.tbsResponseData.toSchema(true).toBER());
        const signature = await crypto.signWithPrivateKey(this.tbsResponseData.tbsView, privateKey, {
            algorithm
        });
        this.signature = new BitString({
            valueHex: signature
        });
    }
    async verify(params = {}, crypto = getCrypto(true)) {
        let signerCert = null;
        let certIndex = -1;
        const trustedCerts = params.trustedCerts || [];
        if (!this.certs) {
            throw new Error("No certificates attached to the BasicOCSPResponse");
        }
        switch(true){
            case this.tbsResponseData.responderID instanceof RelativeDistinguishedNames:
                for (const [index, certificate] of this.certs.entries()){
                    if (certificate.subject.isEqual(this.tbsResponseData.responderID)) {
                        certIndex = index;
                        break;
                    }
                }
                break;
            case this.tbsResponseData.responderID instanceof OctetString:
                for (const [index1, cert] of this.certs.entries()){
                    const hash = await crypto.digest({
                        name: "sha-1"
                    }, cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
                    if (isEqualBuffer(hash, this.tbsResponseData.responderID.valueBlock.valueHex)) {
                        certIndex = index1;
                        break;
                    }
                }
                break;
            default:
                throw new Error("Wrong value for responderID");
        }
        if (certIndex === -1) throw new Error("Correct certificate was not found in OCSP response");
        signerCert = this.certs[certIndex];
        const additionalCerts = [
            signerCert
        ];
        for (const cert1 of this.certs){
            const caCert = await checkCA(cert1, signerCert);
            if (caCert) {
                additionalCerts.push(caCert);
            }
        }
        const certChain = new CertificateChainValidationEngine({
            certs: additionalCerts,
            trustedCerts
        });
        const verificationResult = await certChain.verify({}, crypto);
        if (!verificationResult.result) {
            throw new Error("Validation of signer's certificate failed");
        }
        return crypto.verifyWithPublicKey(this.tbsResponseData.tbsView, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm);
    }
}
BasicOCSPResponse.CLASS_NAME = "BasicOCSPResponse";
const TBS$1 = "tbs";
const VERSION$6 = "version";
const SUBJECT = "subject";
const SPKI = "subjectPublicKeyInfo";
const ATTRIBUTES$1 = "attributes";
const SIGNATURE_ALGORITHM$2 = "signatureAlgorithm";
const SIGNATURE_VALUE = "signatureValue";
const CSR_INFO = "CertificationRequestInfo";
const CSR_INFO_VERSION = `${CSR_INFO}.version`;
const CSR_INFO_SUBJECT = `${CSR_INFO}.subject`;
const CSR_INFO_SPKI = `${CSR_INFO}.subjectPublicKeyInfo`;
const CSR_INFO_ATTRS = `${CSR_INFO}.attributes`;
const CLEAR_PROPS$f = [
    CSR_INFO,
    CSR_INFO_VERSION,
    CSR_INFO_SUBJECT,
    CSR_INFO_SPKI,
    CSR_INFO_ATTRS,
    SIGNATURE_ALGORITHM$2,
    SIGNATURE_VALUE
];
function CertificationRequestInfo(parameters = {}) {
    const names = getParametersValue(parameters, "names", {});
    return new Sequence({
        name: names.CertificationRequestInfo || CSR_INFO,
        value: [
            new Integer({
                name: names.CertificationRequestInfoVersion || CSR_INFO_VERSION
            }),
            RelativeDistinguishedNames.schema(names.subject || {
                names: {
                    blockName: CSR_INFO_SUBJECT
                }
            }),
            PublicKeyInfo.schema({
                names: {
                    blockName: CSR_INFO_SPKI
                }
            }),
            new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    new Repeated({
                        optional: true,
                        name: names.CertificationRequestInfoAttributes || CSR_INFO_ATTRS,
                        value: Attribute.schema(names.attributes || {})
                    })
                ]
            })
        ]
    });
}
class CertificationRequest extends PkiObject {
    constructor(parameters = {}){
        super();
        this.tbsView = new Uint8Array(getParametersValue(parameters, TBS$1, CertificationRequest.defaultValues(TBS$1)));
        this.version = getParametersValue(parameters, VERSION$6, CertificationRequest.defaultValues(VERSION$6));
        this.subject = getParametersValue(parameters, SUBJECT, CertificationRequest.defaultValues(SUBJECT));
        this.subjectPublicKeyInfo = getParametersValue(parameters, SPKI, CertificationRequest.defaultValues(SPKI));
        if (ATTRIBUTES$1 in parameters) {
            this.attributes = getParametersValue(parameters, ATTRIBUTES$1, CertificationRequest.defaultValues(ATTRIBUTES$1));
        }
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$2, CertificationRequest.defaultValues(SIGNATURE_ALGORITHM$2));
        this.signatureValue = getParametersValue(parameters, SIGNATURE_VALUE, CertificationRequest.defaultValues(SIGNATURE_VALUE));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    get tbs() {
        return BufferSourceConverter.toArrayBuffer(this.tbsView);
    }
    set tbs(value) {
        this.tbsView = new Uint8Array(value);
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TBS$1:
                return EMPTY_BUFFER1;
            case VERSION$6:
                return 0;
            case SUBJECT:
                return new RelativeDistinguishedNames();
            case SPKI:
                return new PublicKeyInfo();
            case ATTRIBUTES$1:
                return [];
            case SIGNATURE_ALGORITHM$2:
                return new AlgorithmIdentifier();
            case SIGNATURE_VALUE:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            value: [
                CertificationRequestInfo(names.certificationRequestInfo || {}),
                new Sequence({
                    name: names.signatureAlgorithm || SIGNATURE_ALGORITHM$2,
                    value: [
                        new ObjectIdentifier(),
                        new Any({
                            optional: true
                        })
                    ]
                }),
                new BitString({
                    name: names.signatureValue || SIGNATURE_VALUE
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$f);
        const asn1 = compareSchema(schema, schema, CertificationRequest.schema());
        AsnError.assertSchema(asn1, this.className);
        this.tbsView = asn1.result.CertificationRequestInfo.valueBeforeDecodeView;
        this.version = asn1.result[CSR_INFO_VERSION].valueBlock.valueDec;
        this.subject = new RelativeDistinguishedNames({
            schema: asn1.result[CSR_INFO_SUBJECT]
        });
        this.subjectPublicKeyInfo = new PublicKeyInfo({
            schema: asn1.result[CSR_INFO_SPKI]
        });
        if (CSR_INFO_ATTRS in asn1.result) {
            this.attributes = Array.from(asn1.result[CSR_INFO_ATTRS], (element)=>new Attribute({
                    schema: element
                })
            );
        }
        this.signatureAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.signatureAlgorithm
        });
        this.signatureValue = asn1.result.signatureValue;
    }
    encodeTBS() {
        const outputArray = [
            new Integer({
                value: this.version
            }),
            this.subject.toSchema(),
            this.subjectPublicKeyInfo.toSchema()
        ];
        if (ATTRIBUTES$1 in this) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: Array.from(this.attributes || [], (o81)=>o81.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toSchema(encodeFlag = false) {
        let tbsSchema;
        if (encodeFlag === false) {
            if (this.tbsView.byteLength === 0) {
                return CertificationRequest.schema();
            }
            const asn1 = fromBER(this.tbsView);
            AsnError.assert(asn1, "PKCS#10 Certificate Request");
            tbsSchema = asn1.result;
        } else {
            tbsSchema = this.encodeTBS();
        }
        return new Sequence({
            value: [
                tbsSchema,
                this.signatureAlgorithm.toSchema(),
                this.signatureValue
            ]
        });
    }
    toJSON() {
        const object = {
            tbs: Convert.ToHex(this.tbsView),
            version: this.version,
            subject: this.subject.toJSON(),
            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),
            signatureAlgorithm: this.signatureAlgorithm.toJSON(),
            signatureValue: this.signatureValue.toJSON()
        };
        if (ATTRIBUTES$1 in this) {
            object.attributes = Array.from(this.attributes || [], (o82)=>o82.toJSON()
            );
        }
        return object;
    }
    async sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
        if (!privateKey) {
            throw new Error("Need to provide a private key for signing");
        }
        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);
        const parameters = signatureParams.parameters;
        this.signatureAlgorithm = signatureParams.signatureAlgorithm;
        this.tbsView = new Uint8Array(this.encodeTBS().toBER());
        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);
        this.signatureValue = new BitString({
            valueHex: signature
        });
    }
    async verify(crypto = getCrypto(true)) {
        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);
    }
    async getPublicKey(parameters, crypto = getCrypto(true)) {
        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);
    }
}
CertificationRequest.CLASS_NAME = "CertificationRequest";
const DIGEST_ALGORITHM$1 = "digestAlgorithm";
const DIGEST = "digest";
const CLEAR_PROPS$e = [
    DIGEST_ALGORITHM$1,
    DIGEST
];
class DigestInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.digestAlgorithm = getParametersValue(parameters, DIGEST_ALGORITHM$1, DigestInfo.defaultValues(DIGEST_ALGORITHM$1));
        this.digest = getParametersValue(parameters, DIGEST, DigestInfo.defaultValues(DIGEST));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case DIGEST_ALGORITHM$1:
                return new AlgorithmIdentifier();
            case DIGEST:
                return new OctetString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case DIGEST_ALGORITHM$1:
                return AlgorithmIdentifier.compareWithDefault("algorithmId", memberValue.algorithmId) && "algorithmParams" in memberValue === false;
            case DIGEST:
                return memberValue.isEqual(DigestInfo.defaultValues(memberName));
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.digestAlgorithm || {
                    names: {
                        blockName: DIGEST_ALGORITHM$1
                    }
                }),
                new OctetString({
                    name: names.digest || DIGEST
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$e);
        const asn1 = compareSchema(schema, schema, DigestInfo.schema({
            names: {
                digestAlgorithm: {
                    names: {
                        blockName: DIGEST_ALGORITHM$1
                    }
                },
                digest: DIGEST
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.digestAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.digestAlgorithm
        });
        this.digest = asn1.result.digest;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.digestAlgorithm.toSchema(),
                this.digest
            ]
        });
    }
    toJSON() {
        return {
            digestAlgorithm: this.digestAlgorithm.toJSON(),
            digest: this.digest.toJSON()
        };
    }
}
DigestInfo.CLASS_NAME = "DigestInfo";
const E_CONTENT_TYPE = "eContentType";
const E_CONTENT = "eContent";
const CLEAR_PROPS$d = [
    E_CONTENT_TYPE,
    E_CONTENT
];
class EncapsulatedContentInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.eContentType = getParametersValue(parameters, E_CONTENT_TYPE, EncapsulatedContentInfo.defaultValues(E_CONTENT_TYPE));
        if (E_CONTENT in parameters) {
            this.eContent = getParametersValue(parameters, E_CONTENT, EncapsulatedContentInfo.defaultValues(E_CONTENT));
            if (this.eContent.idBlock.tagClass === 1 && this.eContent.idBlock.tagNumber === 4) {
                if (this.eContent.idBlock.isConstructed === false) {
                    const constrString = new OctetString({
                        idBlock: {
                            isConstructed: true
                        },
                        isConstructed: true
                    });
                    let offset = 0;
                    const viewHex = this.eContent.valueBlock.valueHexView.slice().buffer;
                    let length = viewHex.byteLength;
                    while(length > 0){
                        const pieceView = new Uint8Array(viewHex, offset, offset + 65536 > viewHex.byteLength ? viewHex.byteLength - offset : 65536);
                        const _array = new ArrayBuffer(pieceView.length);
                        const _view = new Uint8Array(_array);
                        for(let i116 = 0; i116 < _view.length; i116++){
                            _view[i116] = pieceView[i116];
                        }
                        constrString.valueBlock.value.push(new OctetString({
                            valueHex: _array
                        }));
                        length -= pieceView.length;
                        offset += pieceView.length;
                    }
                    this.eContent = constrString;
                }
            }
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case E_CONTENT_TYPE:
                return EMPTY_STRING1;
            case E_CONTENT:
                return new OctetString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case E_CONTENT_TYPE:
                return memberValue === EMPTY_STRING1;
            case E_CONTENT:
                {
                    if (memberValue.idBlock.tagClass === 1 && memberValue.idBlock.tagNumber === 4) return memberValue.isEqual(EncapsulatedContentInfo.defaultValues(E_CONTENT));
                    return false;
                }
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.eContentType || EMPTY_STRING1
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Any({
                            name: names.eContent || EMPTY_STRING1
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$d);
        const asn1 = compareSchema(schema, schema, EncapsulatedContentInfo.schema({
            names: {
                eContentType: E_CONTENT_TYPE,
                eContent: E_CONTENT
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.eContentType = asn1.result.eContentType.valueBlock.toString();
        if (E_CONTENT in asn1.result) this.eContent = asn1.result.eContent;
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new ObjectIdentifier({
            value: this.eContentType
        }));
        if (this.eContent) {
            if (EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {
                outputArray.push(new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        this.eContent
                    ]
                }));
            }
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            eContentType: this.eContentType
        };
        if (this.eContent && EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {
            res.eContent = this.eContent.toJSON();
        }
        return res;
    }
}
EncapsulatedContentInfo.CLASS_NAME = "EncapsulatedContentInfo";
const MAC = "mac";
const MAC_SALT = "macSalt";
const ITERATIONS = "iterations";
const CLEAR_PROPS$c = [
    MAC,
    MAC_SALT,
    ITERATIONS
];
class MacData extends PkiObject {
    constructor(parameters = {}){
        super();
        this.mac = getParametersValue(parameters, MAC, MacData.defaultValues(MAC));
        this.macSalt = getParametersValue(parameters, MAC_SALT, MacData.defaultValues(MAC_SALT));
        if (ITERATIONS in parameters) {
            this.iterations = getParametersValue(parameters, ITERATIONS, MacData.defaultValues(ITERATIONS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case MAC:
                return new DigestInfo();
            case MAC_SALT:
                return new OctetString();
            case ITERATIONS:
                return 1;
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case MAC:
                return DigestInfo.compareWithDefault("digestAlgorithm", memberValue.digestAlgorithm) && DigestInfo.compareWithDefault("digest", memberValue.digest);
            case MAC_SALT:
                return memberValue.isEqual(MacData.defaultValues(memberName));
            case ITERATIONS:
                return memberValue === MacData.defaultValues(memberName);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            optional: names.optional || true,
            value: [
                DigestInfo.schema(names.mac || {
                    names: {
                        blockName: MAC
                    }
                }),
                new OctetString({
                    name: names.macSalt || MAC_SALT
                }),
                new Integer({
                    optional: true,
                    name: names.iterations || ITERATIONS
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$c);
        const asn1 = compareSchema(schema, schema, MacData.schema({
            names: {
                mac: {
                    names: {
                        blockName: MAC
                    }
                },
                macSalt: MAC_SALT,
                iterations: ITERATIONS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.mac = new DigestInfo({
            schema: asn1.result.mac
        });
        this.macSalt = asn1.result.macSalt;
        if (ITERATIONS in asn1.result) this.iterations = asn1.result.iterations.valueBlock.valueDec;
    }
    toSchema() {
        const outputArray = [
            this.mac.toSchema(),
            this.macSalt
        ];
        if (this.iterations !== undefined) {
            outputArray.push(new Integer({
                value: this.iterations
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            mac: this.mac.toJSON(),
            macSalt: this.macSalt.toJSON()
        };
        if (this.iterations !== undefined) {
            res.iterations = this.iterations;
        }
        return res;
    }
}
MacData.CLASS_NAME = "MacData";
const HASH_ALGORITHM = "hashAlgorithm";
const HASHED_MESSAGE = "hashedMessage";
const CLEAR_PROPS$b = [
    HASH_ALGORITHM,
    HASHED_MESSAGE
];
class MessageImprint extends PkiObject {
    constructor(parameters = {}){
        super();
        this.hashAlgorithm = getParametersValue(parameters, HASH_ALGORITHM, MessageImprint.defaultValues(HASH_ALGORITHM));
        this.hashedMessage = getParametersValue(parameters, HASHED_MESSAGE, MessageImprint.defaultValues(HASHED_MESSAGE));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static async create(hashAlgorithm, message7, crypto = getCrypto(true)) {
        const hashAlgorithmOID = crypto.getOIDByAlgorithm({
            name: hashAlgorithm
        }, true, "hashAlgorithm");
        const hashedMessage = await crypto.digest(hashAlgorithm, message7);
        const res = new MessageImprint({
            hashAlgorithm: new AlgorithmIdentifier({
                algorithmId: hashAlgorithmOID,
                algorithmParams: new Null()
            }),
            hashedMessage: new OctetString({
                valueHex: hashedMessage
            })
        });
        return res;
    }
    static defaultValues(memberName) {
        switch(memberName){
            case HASH_ALGORITHM:
                return new AlgorithmIdentifier();
            case HASHED_MESSAGE:
                return new OctetString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case HASH_ALGORITHM:
                return memberValue.algorithmId === EMPTY_STRING1 && "algorithmParams" in memberValue === false;
            case HASHED_MESSAGE:
                return memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.hashAlgorithm || {}),
                new OctetString({
                    name: names.hashedMessage || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$b);
        const asn1 = compareSchema(schema, schema, MessageImprint.schema({
            names: {
                hashAlgorithm: {
                    names: {
                        blockName: HASH_ALGORITHM
                    }
                },
                hashedMessage: HASHED_MESSAGE
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.hashAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.hashAlgorithm
        });
        this.hashedMessage = asn1.result.hashedMessage;
    }
    toSchema() {
        return new Sequence({
            value: [
                this.hashAlgorithm.toSchema(),
                this.hashedMessage
            ]
        });
    }
    toJSON() {
        return {
            hashAlgorithm: this.hashAlgorithm.toJSON(),
            hashedMessage: this.hashedMessage.toJSON()
        };
    }
}
MessageImprint.CLASS_NAME = "MessageImprint";
const REQ_CERT = "reqCert";
const SINGLE_REQUEST_EXTENSIONS = "singleRequestExtensions";
const CLEAR_PROPS$a = [
    REQ_CERT,
    SINGLE_REQUEST_EXTENSIONS
];
class Request extends PkiObject {
    constructor(parameters = {}){
        super();
        this.reqCert = getParametersValue(parameters, REQ_CERT, Request.defaultValues(REQ_CERT));
        if (SINGLE_REQUEST_EXTENSIONS in parameters) {
            this.singleRequestExtensions = getParametersValue(parameters, SINGLE_REQUEST_EXTENSIONS, Request.defaultValues(SINGLE_REQUEST_EXTENSIONS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case REQ_CERT:
                return new CertID();
            case SINGLE_REQUEST_EXTENSIONS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case REQ_CERT:
                return memberValue.isEqual(Request.defaultValues(memberName));
            case SINGLE_REQUEST_EXTENSIONS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                CertID.schema(names.reqCert || {}),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        Extension.schema(names.extensions || {
                            names: {
                                blockName: names.singleRequestExtensions || EMPTY_STRING1
                            }
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$a);
        const asn1 = compareSchema(schema, schema, Request.schema({
            names: {
                reqCert: {
                    names: {
                        blockName: REQ_CERT
                    }
                },
                extensions: {
                    names: {
                        blockName: SINGLE_REQUEST_EXTENSIONS
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.reqCert = new CertID({
            schema: asn1.result.reqCert
        });
        if (SINGLE_REQUEST_EXTENSIONS in asn1.result) {
            this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, (element)=>new Extension({
                    schema: element
                })
            );
        }
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.reqCert.toSchema());
        if (this.singleRequestExtensions) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    new Sequence({
                        value: Array.from(this.singleRequestExtensions, (o83)=>o83.toSchema()
                        )
                    })
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            reqCert: this.reqCert.toJSON()
        };
        if (this.singleRequestExtensions) {
            res.singleRequestExtensions = Array.from(this.singleRequestExtensions, (o84)=>o84.toJSON()
            );
        }
        return res;
    }
}
Request.CLASS_NAME = "Request";
const TBS = "tbs";
const VERSION$5 = "version";
const REQUESTOR_NAME = "requestorName";
const REQUEST_LIST = "requestList";
const REQUEST_EXTENSIONS = "requestExtensions";
const TBS_REQUEST$1 = "TBSRequest";
const TBS_REQUEST_VERSION = `${TBS_REQUEST$1}.${VERSION$5}`;
const TBS_REQUEST_REQUESTOR_NAME = `${TBS_REQUEST$1}.${REQUESTOR_NAME}`;
const TBS_REQUEST_REQUESTS = `${TBS_REQUEST$1}.requests`;
const TBS_REQUEST_REQUEST_EXTENSIONS = `${TBS_REQUEST$1}.${REQUEST_EXTENSIONS}`;
const CLEAR_PROPS$9 = [
    TBS_REQUEST$1,
    TBS_REQUEST_VERSION,
    TBS_REQUEST_REQUESTOR_NAME,
    TBS_REQUEST_REQUESTS,
    TBS_REQUEST_REQUEST_EXTENSIONS
];
class TBSRequest extends PkiObject {
    constructor(parameters = {}){
        super();
        this.tbsView = new Uint8Array(getParametersValue(parameters, TBS, TBSRequest.defaultValues(TBS)));
        if (VERSION$5 in parameters) {
            this.version = getParametersValue(parameters, VERSION$5, TBSRequest.defaultValues(VERSION$5));
        }
        if (REQUESTOR_NAME in parameters) {
            this.requestorName = getParametersValue(parameters, REQUESTOR_NAME, TBSRequest.defaultValues(REQUESTOR_NAME));
        }
        this.requestList = getParametersValue(parameters, REQUEST_LIST, TBSRequest.defaultValues(REQUEST_LIST));
        if (REQUEST_EXTENSIONS in parameters) {
            this.requestExtensions = getParametersValue(parameters, REQUEST_EXTENSIONS, TBSRequest.defaultValues(REQUEST_EXTENSIONS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    get tbs() {
        return BufferSourceConverter.toArrayBuffer(this.tbsView);
    }
    set tbs(value) {
        this.tbsView = new Uint8Array(value);
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TBS:
                return EMPTY_BUFFER1;
            case VERSION$5:
                return 0;
            case REQUESTOR_NAME:
                return new GeneralName();
            case REQUEST_LIST:
            case REQUEST_EXTENSIONS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case TBS:
                return memberValue.byteLength === 0;
            case VERSION$5:
                return memberValue === TBSRequest.defaultValues(memberName);
            case REQUESTOR_NAME:
                return memberValue.type === GeneralName.defaultValues("type") && Object.keys(memberValue.value).length === 0;
            case REQUEST_LIST:
            case REQUEST_EXTENSIONS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || TBS_REQUEST$1,
            value: [
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Integer({
                            name: names.TBSRequestVersion || TBS_REQUEST_VERSION
                        })
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        GeneralName.schema(names.requestorName || {
                            names: {
                                blockName: TBS_REQUEST_REQUESTOR_NAME
                            }
                        })
                    ]
                }),
                new Sequence({
                    name: names.requestList || "TBSRequest.requestList",
                    value: [
                        new Repeated({
                            name: names.requests || TBS_REQUEST_REQUESTS,
                            value: Request.schema(names.requestNames || {})
                        })
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    value: [
                        Extensions.schema(names.extensions || {
                            names: {
                                blockName: names.requestExtensions || TBS_REQUEST_REQUEST_EXTENSIONS
                            }
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$9);
        const asn1 = compareSchema(schema, schema, TBSRequest.schema());
        AsnError.assertSchema(asn1, this.className);
        this.tbsView = asn1.result.TBSRequest.valueBeforeDecodeView;
        if (TBS_REQUEST_VERSION in asn1.result) this.version = asn1.result[TBS_REQUEST_VERSION].valueBlock.valueDec;
        if (TBS_REQUEST_REQUESTOR_NAME in asn1.result) this.requestorName = new GeneralName({
            schema: asn1.result[TBS_REQUEST_REQUESTOR_NAME]
        });
        this.requestList = Array.from(asn1.result[TBS_REQUEST_REQUESTS], (element)=>new Request({
                schema: element
            })
        );
        if (TBS_REQUEST_REQUEST_EXTENSIONS in asn1.result) this.requestExtensions = Array.from(asn1.result[TBS_REQUEST_REQUEST_EXTENSIONS].valueBlock.value, (element)=>new Extension({
                schema: element
            })
        );
    }
    toSchema(encodeFlag = false) {
        let tbsSchema;
        if (encodeFlag === false) {
            if (this.tbsView.byteLength === 0) return TBSRequest.schema();
            const asn1 = fromBER(this.tbsView);
            AsnError.assert(asn1, "TBS Request");
            if (!(asn1.result instanceof Sequence)) {
                throw new Error("ASN.1 result should be SEQUENCE");
            }
            tbsSchema = asn1.result;
        } else {
            const outputArray = [];
            if (this.version !== undefined) {
                outputArray.push(new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Integer({
                            value: this.version
                        })
                    ]
                }));
            }
            if (this.requestorName) {
                outputArray.push(new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        this.requestorName.toSchema()
                    ]
                }));
            }
            outputArray.push(new Sequence({
                value: Array.from(this.requestList, (o85)=>o85.toSchema()
                )
            }));
            if (this.requestExtensions) {
                outputArray.push(new Constructed({
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 2
                    },
                    value: [
                        new Sequence({
                            value: Array.from(this.requestExtensions, (o86)=>o86.toSchema()
                            )
                        })
                    ]
                }));
            }
            tbsSchema = new Sequence({
                value: outputArray
            });
        }
        return tbsSchema;
    }
    toJSON() {
        const res = {};
        if (this.version != undefined) res.version = this.version;
        if (this.requestorName) {
            res.requestorName = this.requestorName.toJSON();
        }
        res.requestList = Array.from(this.requestList, (o87)=>o87.toJSON()
        );
        if (this.requestExtensions) {
            res.requestExtensions = Array.from(this.requestExtensions, (o88)=>o88.toJSON()
            );
        }
        return res;
    }
}
TBSRequest.CLASS_NAME = "TBSRequest";
const SIGNATURE_ALGORITHM$1 = "signatureAlgorithm";
const SIGNATURE$1 = "signature";
const CERTS = "certs";
class Signature extends PkiObject {
    constructor(parameters = {}){
        super();
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM$1, Signature.defaultValues(SIGNATURE_ALGORITHM$1));
        this.signature = getParametersValue(parameters, SIGNATURE$1, Signature.defaultValues(SIGNATURE$1));
        if (CERTS in parameters) {
            this.certs = getParametersValue(parameters, CERTS, Signature.defaultValues(CERTS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case SIGNATURE_ALGORITHM$1:
                return new AlgorithmIdentifier();
            case SIGNATURE$1:
                return new BitString();
            case CERTS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case SIGNATURE_ALGORITHM$1:
                return memberValue.algorithmId === EMPTY_STRING1 && "algorithmParams" in memberValue === false;
            case SIGNATURE$1:
                return memberValue.isEqual(Signature.defaultValues(memberName));
            case CERTS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),
                new BitString({
                    name: names.signature || EMPTY_STRING1
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Sequence({
                            value: [
                                new Repeated({
                                    name: names.certs || EMPTY_STRING1,
                                    value: Certificate.schema({})
                                })
                            ]
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            SIGNATURE_ALGORITHM$1,
            SIGNATURE$1,
            CERTS
        ]);
        const asn1 = compareSchema(schema, schema, Signature.schema({
            names: {
                signatureAlgorithm: {
                    names: {
                        blockName: SIGNATURE_ALGORITHM$1
                    }
                },
                signature: SIGNATURE$1,
                certs: CERTS
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.signatureAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result.signatureAlgorithm
        });
        this.signature = asn1.result.signature;
        if (CERTS in asn1.result) this.certs = Array.from(asn1.result.certs, (element)=>new Certificate({
                schema: element
            })
        );
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.signatureAlgorithm.toSchema());
        outputArray.push(this.signature);
        if (this.certs) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    new Sequence({
                        value: Array.from(this.certs, (o89)=>o89.toSchema()
                        )
                    })
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            signatureAlgorithm: this.signatureAlgorithm.toJSON(),
            signature: this.signature.toJSON()
        };
        if (this.certs) {
            res.certs = Array.from(this.certs, (o90)=>o90.toJSON()
            );
        }
        return res;
    }
}
Signature.CLASS_NAME = "Signature";
const TBS_REQUEST = "tbsRequest";
const OPTIONAL_SIGNATURE = "optionalSignature";
const CLEAR_PROPS$8 = [
    TBS_REQUEST,
    OPTIONAL_SIGNATURE
];
class OCSPRequest extends PkiObject {
    constructor(parameters = {}){
        super();
        this.tbsRequest = getParametersValue(parameters, TBS_REQUEST, OCSPRequest.defaultValues(TBS_REQUEST));
        if (OPTIONAL_SIGNATURE in parameters) {
            this.optionalSignature = getParametersValue(parameters, OPTIONAL_SIGNATURE, OCSPRequest.defaultValues(OPTIONAL_SIGNATURE));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TBS_REQUEST:
                return new TBSRequest();
            case OPTIONAL_SIGNATURE:
                return new Signature();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case TBS_REQUEST:
                return TBSRequest.compareWithDefault("tbs", memberValue.tbs) && TBSRequest.compareWithDefault("version", memberValue.version) && TBSRequest.compareWithDefault("requestorName", memberValue.requestorName) && TBSRequest.compareWithDefault("requestList", memberValue.requestList) && TBSRequest.compareWithDefault("requestExtensions", memberValue.requestExtensions);
            case OPTIONAL_SIGNATURE:
                return Signature.compareWithDefault("signatureAlgorithm", memberValue.signatureAlgorithm) && Signature.compareWithDefault("signature", memberValue.signature) && Signature.compareWithDefault("certs", memberValue.certs);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || "OCSPRequest",
            value: [
                TBSRequest.schema(names.tbsRequest || {
                    names: {
                        blockName: TBS_REQUEST
                    }
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        Signature.schema(names.optionalSignature || {
                            names: {
                                blockName: OPTIONAL_SIGNATURE
                            }
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$8);
        const asn1 = compareSchema(schema, schema, OCSPRequest.schema());
        AsnError.assertSchema(asn1, this.className);
        this.tbsRequest = new TBSRequest({
            schema: asn1.result.tbsRequest
        });
        if (OPTIONAL_SIGNATURE in asn1.result) this.optionalSignature = new Signature({
            schema: asn1.result.optionalSignature
        });
    }
    toSchema(encodeFlag = false) {
        const outputArray = [];
        outputArray.push(this.tbsRequest.toSchema(encodeFlag));
        if (this.optionalSignature) outputArray.push(new Constructed({
            optional: true,
            idBlock: {
                tagClass: 3,
                tagNumber: 0
            },
            value: [
                this.optionalSignature.toSchema()
            ]
        }));
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            tbsRequest: this.tbsRequest.toJSON()
        };
        if (this.optionalSignature) {
            res.optionalSignature = this.optionalSignature.toJSON();
        }
        return res;
    }
    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {
        const certID = new CertID();
        await certID.createForCertificate(certificate, parameters, crypto);
        this.tbsRequest.requestList.push(new Request({
            reqCert: certID
        }));
    }
    async sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
        ParameterError.assertEmpty(privateKey, "privateKey", "OCSPRequest.sign method");
        if (!this.optionalSignature) {
            throw new Error("Need to create \"optionalSignature\" field before signing");
        }
        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);
        const parameters = signatureParams.parameters;
        this.optionalSignature.signatureAlgorithm = signatureParams.signatureAlgorithm;
        const tbs = this.tbsRequest.toSchema(true).toBER(false);
        const signature = await crypto.signWithPrivateKey(tbs, privateKey, parameters);
        this.optionalSignature.signature = new BitString({
            valueHex: signature
        });
    }
    verify() {}
}
OCSPRequest.CLASS_NAME = "OCSPRequest";
const RESPONSE_TYPE = "responseType";
const RESPONSE = "response";
const CLEAR_PROPS$7 = [
    RESPONSE_TYPE,
    RESPONSE
];
class ResponseBytes extends PkiObject {
    constructor(parameters = {}){
        super();
        this.responseType = getParametersValue(parameters, RESPONSE_TYPE, ResponseBytes.defaultValues(RESPONSE_TYPE));
        this.response = getParametersValue(parameters, RESPONSE, ResponseBytes.defaultValues(RESPONSE));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case RESPONSE_TYPE:
                return EMPTY_STRING1;
            case RESPONSE:
                return new OctetString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case RESPONSE_TYPE:
                return memberValue === EMPTY_STRING1;
            case RESPONSE:
                return memberValue.isEqual(ResponseBytes.defaultValues(memberName));
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new ObjectIdentifier({
                    name: names.responseType || EMPTY_STRING1
                }),
                new OctetString({
                    name: names.response || EMPTY_STRING1
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$7);
        const asn1 = compareSchema(schema, schema, ResponseBytes.schema({
            names: {
                responseType: RESPONSE_TYPE,
                response: RESPONSE
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.responseType = asn1.result.responseType.valueBlock.toString();
        this.response = asn1.result.response;
    }
    toSchema() {
        return new Sequence({
            value: [
                new ObjectIdentifier({
                    value: this.responseType
                }),
                this.response
            ]
        });
    }
    toJSON() {
        return {
            responseType: this.responseType,
            response: this.response.toJSON()
        };
    }
}
ResponseBytes.CLASS_NAME = "ResponseBytes";
const RESPONSE_STATUS = "responseStatus";
const RESPONSE_BYTES = "responseBytes";
class OCSPResponse extends PkiObject {
    constructor(parameters = {}){
        super();
        this.responseStatus = getParametersValue(parameters, RESPONSE_STATUS, OCSPResponse.defaultValues(RESPONSE_STATUS));
        if (RESPONSE_BYTES in parameters) {
            this.responseBytes = getParametersValue(parameters, RESPONSE_BYTES, OCSPResponse.defaultValues(RESPONSE_BYTES));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case RESPONSE_STATUS:
                return new Enumerated();
            case RESPONSE_BYTES:
                return new ResponseBytes();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case RESPONSE_STATUS:
                return memberValue.isEqual(OCSPResponse.defaultValues(memberName));
            case RESPONSE_BYTES:
                return ResponseBytes.compareWithDefault("responseType", memberValue.responseType) && ResponseBytes.compareWithDefault("response", memberValue.response);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || "OCSPResponse",
            value: [
                new Enumerated({
                    name: names.responseStatus || RESPONSE_STATUS
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        ResponseBytes.schema(names.responseBytes || {
                            names: {
                                blockName: RESPONSE_BYTES
                            }
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, [
            RESPONSE_STATUS,
            RESPONSE_BYTES
        ]);
        const asn1 = compareSchema(schema, schema, OCSPResponse.schema());
        AsnError.assertSchema(asn1, this.className);
        this.responseStatus = asn1.result.responseStatus;
        if (RESPONSE_BYTES in asn1.result) this.responseBytes = new ResponseBytes({
            schema: asn1.result.responseBytes
        });
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.responseStatus);
        if (this.responseBytes) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    this.responseBytes.toSchema()
                ]
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            responseStatus: this.responseStatus.toJSON()
        };
        if (this.responseBytes) {
            res.responseBytes = this.responseBytes.toJSON();
        }
        return res;
    }
    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {
        let basicResponse;
        const result = {
            isForCertificate: false,
            status: 2
        };
        if (!this.responseBytes) return result;
        if (this.responseBytes.responseType !== id_PKIX_OCSP_Basic) return result;
        try {
            const asn1Basic = fromBER(this.responseBytes.response.valueBlock.valueHexView);
            AsnError.assert(asn1Basic, "Basic OCSP response");
            basicResponse = new BasicOCSPResponse({
                schema: asn1Basic.result
            });
        } catch (ex) {
            return result;
        }
        return basicResponse.getCertificateStatus(certificate, issuerCertificate, crypto);
    }
    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {
        var _a3;
        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {
            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);
            return basicResponse.sign(privateKey, hashAlgorithm, crypto);
        }
        throw new Error(`Unknown ResponseBytes type: ${((_a3 = this.responseBytes) === null || _a3 === void 0 ? void 0 : _a3.responseType) || "Unknown"}`);
    }
    async verify(issuerCertificate = null, crypto = getCrypto(true)) {
        var _a4;
        if (RESPONSE_BYTES in this === false) throw new Error("Empty ResponseBytes field");
        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {
            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);
            if (issuerCertificate !== null) {
                if (!basicResponse.certs) {
                    basicResponse.certs = [];
                }
                basicResponse.certs.push(issuerCertificate);
            }
            return basicResponse.verify({}, crypto);
        }
        throw new Error(`Unknown ResponseBytes type: ${((_a4 = this.responseBytes) === null || _a4 === void 0 ? void 0 : _a4.responseType) || "Unknown"}`);
    }
}
OCSPResponse.CLASS_NAME = "OCSPResponse";
const TYPE = "type";
const ATTRIBUTES = "attributes";
const ENCODED_VALUE = "encodedValue";
const CLEAR_PROPS$6 = [
    ATTRIBUTES
];
class SignedAndUnsignedAttributes extends PkiObject {
    constructor(parameters = {}){
        super();
        this.type = getParametersValue(parameters, TYPE, SignedAndUnsignedAttributes.defaultValues(TYPE));
        this.attributes = getParametersValue(parameters, ATTRIBUTES, SignedAndUnsignedAttributes.defaultValues(ATTRIBUTES));
        this.encodedValue = getParametersValue(parameters, ENCODED_VALUE, SignedAndUnsignedAttributes.defaultValues(ENCODED_VALUE));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case TYPE:
                return -1;
            case ATTRIBUTES:
                return [];
            case ENCODED_VALUE:
                return EMPTY_BUFFER1;
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case TYPE:
                return memberValue === SignedAndUnsignedAttributes.defaultValues(TYPE);
            case ATTRIBUTES:
                return memberValue.length === 0;
            case ENCODED_VALUE:
                return memberValue.byteLength === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Constructed({
            name: names.blockName || EMPTY_STRING1,
            optional: true,
            idBlock: {
                tagClass: 3,
                tagNumber: names.tagNumber || 0
            },
            value: [
                new Repeated({
                    name: names.attributes || EMPTY_STRING1,
                    value: Attribute.schema()
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$6);
        const asn1 = compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({
            names: {
                tagNumber: this.type,
                attributes: ATTRIBUTES
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.type = asn1.result.idBlock.tagNumber;
        this.encodedValue = BufferSourceConverter.toArrayBuffer(asn1.result.valueBeforeDecodeView);
        const encodedView = new Uint8Array(this.encodedValue);
        encodedView[0] = 49;
        if (ATTRIBUTES in asn1.result === false) {
            if (this.type === 0) throw new Error("Wrong structure of SignedUnsignedAttributes");
            else return;
        }
        this.attributes = Array.from(asn1.result.attributes, (element)=>new Attribute({
                schema: element
            })
        );
    }
    toSchema() {
        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes)) throw new Error("Incorrectly initialized \"SignedAndUnsignedAttributes\" class");
        return new Constructed({
            optional: true,
            idBlock: {
                tagClass: 3,
                tagNumber: this.type
            },
            value: Array.from(this.attributes, (o91)=>o91.toSchema()
            )
        });
    }
    toJSON() {
        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes)) throw new Error("Incorrectly initialized \"SignedAndUnsignedAttributes\" class");
        return {
            type: this.type,
            attributes: Array.from(this.attributes, (o92)=>o92.toJSON()
            )
        };
    }
}
SignedAndUnsignedAttributes.CLASS_NAME = "SignedAndUnsignedAttributes";
const VERSION$4 = "version";
const SID = "sid";
const DIGEST_ALGORITHM = "digestAlgorithm";
const SIGNED_ATTRS = "signedAttrs";
const SIGNATURE_ALGORITHM = "signatureAlgorithm";
const SIGNATURE = "signature";
const UNSIGNED_ATTRS = "unsignedAttrs";
const SIGNER_INFO = "SignerInfo";
const SIGNER_INFO_VERSION = `${SIGNER_INFO}.${VERSION$4}`;
const SIGNER_INFO_SID = `${SIGNER_INFO}.${SID}`;
const SIGNER_INFO_DIGEST_ALGORITHM = `${SIGNER_INFO}.${DIGEST_ALGORITHM}`;
const SIGNER_INFO_SIGNED_ATTRS = `${SIGNER_INFO}.${SIGNED_ATTRS}`;
const SIGNER_INFO_SIGNATURE_ALGORITHM = `${SIGNER_INFO}.${SIGNATURE_ALGORITHM}`;
const SIGNER_INFO_SIGNATURE = `${SIGNER_INFO}.${SIGNATURE}`;
const SIGNER_INFO_UNSIGNED_ATTRS = `${SIGNER_INFO}.${UNSIGNED_ATTRS}`;
const CLEAR_PROPS$5 = [
    SIGNER_INFO_VERSION,
    SIGNER_INFO_SID,
    SIGNER_INFO_DIGEST_ALGORITHM,
    SIGNER_INFO_SIGNED_ATTRS,
    SIGNER_INFO_SIGNATURE_ALGORITHM,
    SIGNER_INFO_SIGNATURE,
    SIGNER_INFO_UNSIGNED_ATTRS
];
class SignerInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$4, SignerInfo.defaultValues(VERSION$4));
        this.sid = getParametersValue(parameters, SID, SignerInfo.defaultValues(SID));
        this.digestAlgorithm = getParametersValue(parameters, DIGEST_ALGORITHM, SignerInfo.defaultValues(DIGEST_ALGORITHM));
        if (SIGNED_ATTRS in parameters) {
            this.signedAttrs = getParametersValue(parameters, SIGNED_ATTRS, SignerInfo.defaultValues(SIGNED_ATTRS));
        }
        this.signatureAlgorithm = getParametersValue(parameters, SIGNATURE_ALGORITHM, SignerInfo.defaultValues(SIGNATURE_ALGORITHM));
        this.signature = getParametersValue(parameters, SIGNATURE, SignerInfo.defaultValues(SIGNATURE));
        if (UNSIGNED_ATTRS in parameters) {
            this.unsignedAttrs = getParametersValue(parameters, UNSIGNED_ATTRS, SignerInfo.defaultValues(UNSIGNED_ATTRS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$4:
                return 0;
            case SID:
                return new Any();
            case DIGEST_ALGORITHM:
                return new AlgorithmIdentifier();
            case SIGNED_ATTRS:
                return new SignedAndUnsignedAttributes({
                    type: 0
                });
            case SIGNATURE_ALGORITHM:
                return new AlgorithmIdentifier();
            case SIGNATURE:
                return new OctetString();
            case UNSIGNED_ATTRS:
                return new SignedAndUnsignedAttributes({
                    type: 1
                });
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$4:
                return SignerInfo.defaultValues(VERSION$4) === memberValue;
            case SID:
                return memberValue instanceof Any;
            case DIGEST_ALGORITHM:
                if (memberValue instanceof AlgorithmIdentifier === false) return false;
                return memberValue.isEqual(SignerInfo.defaultValues(DIGEST_ALGORITHM));
            case SIGNED_ATTRS:
                return SignedAndUnsignedAttributes.compareWithDefault("type", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault("attributes", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault("encodedValue", memberValue.encodedValue);
            case SIGNATURE_ALGORITHM:
                if (memberValue instanceof AlgorithmIdentifier === false) return false;
                return memberValue.isEqual(SignerInfo.defaultValues(SIGNATURE_ALGORITHM));
            case SIGNATURE:
            case UNSIGNED_ATTRS:
                return SignedAndUnsignedAttributes.compareWithDefault("type", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault("attributes", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault("encodedValue", memberValue.encodedValue);
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: SIGNER_INFO,
            value: [
                new Integer({
                    name: names.version || SIGNER_INFO_VERSION
                }),
                new Choice({
                    value: [
                        IssuerAndSerialNumber.schema(names.sidSchema || {
                            names: {
                                blockName: SIGNER_INFO_SID
                            }
                        }),
                        new Choice({
                            value: [
                                new Constructed({
                                    optional: true,
                                    name: names.sid || SIGNER_INFO_SID,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: 0
                                    },
                                    value: [
                                        new OctetString()
                                    ]
                                }),
                                new Primitive({
                                    optional: true,
                                    name: names.sid || SIGNER_INFO_SID,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: 0
                                    }
                                })
                            ]
                        })
                    ]
                }),
                AlgorithmIdentifier.schema(names.digestAlgorithm || {
                    names: {
                        blockName: SIGNER_INFO_DIGEST_ALGORITHM
                    }
                }),
                SignedAndUnsignedAttributes.schema(names.signedAttrs || {
                    names: {
                        blockName: SIGNER_INFO_SIGNED_ATTRS,
                        tagNumber: 0
                    }
                }),
                AlgorithmIdentifier.schema(names.signatureAlgorithm || {
                    names: {
                        blockName: SIGNER_INFO_SIGNATURE_ALGORITHM
                    }
                }),
                new OctetString({
                    name: names.signature || SIGNER_INFO_SIGNATURE
                }),
                SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {
                    names: {
                        blockName: SIGNER_INFO_UNSIGNED_ATTRS,
                        tagNumber: 1
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$5);
        const asn1 = compareSchema(schema, schema, SignerInfo.schema());
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result[SIGNER_INFO_VERSION].valueBlock.valueDec;
        const currentSid = asn1.result[SIGNER_INFO_SID];
        if (currentSid.idBlock.tagClass === 1) this.sid = new IssuerAndSerialNumber({
            schema: currentSid
        });
        else this.sid = currentSid;
        this.digestAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result[SIGNER_INFO_DIGEST_ALGORITHM]
        });
        if (SIGNER_INFO_SIGNED_ATTRS in asn1.result) this.signedAttrs = new SignedAndUnsignedAttributes({
            type: 0,
            schema: asn1.result[SIGNER_INFO_SIGNED_ATTRS]
        });
        this.signatureAlgorithm = new AlgorithmIdentifier({
            schema: asn1.result[SIGNER_INFO_SIGNATURE_ALGORITHM]
        });
        this.signature = asn1.result[SIGNER_INFO_SIGNATURE];
        if (SIGNER_INFO_UNSIGNED_ATTRS in asn1.result) this.unsignedAttrs = new SignedAndUnsignedAttributes({
            type: 1,
            schema: asn1.result[SIGNER_INFO_UNSIGNED_ATTRS]
        });
    }
    toSchema() {
        if (SignerInfo.compareWithDefault(SID, this.sid)) throw new Error("Incorrectly initialized \"SignerInfo\" class");
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.version
        }));
        if (this.sid instanceof IssuerAndSerialNumber) outputArray.push(this.sid.toSchema());
        else outputArray.push(this.sid);
        outputArray.push(this.digestAlgorithm.toSchema());
        if (this.signedAttrs) {
            if (SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) outputArray.push(this.signedAttrs.toSchema());
        }
        outputArray.push(this.signatureAlgorithm.toSchema());
        outputArray.push(this.signature);
        if (this.unsignedAttrs) {
            if (SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) outputArray.push(this.unsignedAttrs.toSchema());
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        if (SignerInfo.compareWithDefault(SID, this.sid)) {
            throw new Error("Incorrectly initialized \"SignerInfo\" class");
        }
        const res = {
            version: this.version,
            digestAlgorithm: this.digestAlgorithm.toJSON(),
            signatureAlgorithm: this.signatureAlgorithm.toJSON(),
            signature: this.signature.toJSON()
        };
        if (!(this.sid instanceof Any)) res.sid = this.sid.toJSON();
        if (this.signedAttrs && SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) {
            res.signedAttrs = this.signedAttrs.toJSON();
        }
        if (this.unsignedAttrs && SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) {
            res.unsignedAttrs = this.unsignedAttrs.toJSON();
        }
        return res;
    }
}
SignerInfo.CLASS_NAME = "SignerInfo";
const VERSION$3 = "version";
const POLICY = "policy";
const MESSAGE_IMPRINT$1 = "messageImprint";
const SERIAL_NUMBER = "serialNumber";
const GEN_TIME = "genTime";
const ORDERING = "ordering";
const NONCE$1 = "nonce";
const ACCURACY = "accuracy";
const TSA = "tsa";
const EXTENSIONS$1 = "extensions";
const TST_INFO = "TSTInfo";
const TST_INFO_VERSION = `${TST_INFO}.${VERSION$3}`;
const TST_INFO_POLICY = `${TST_INFO}.${POLICY}`;
const TST_INFO_MESSAGE_IMPRINT = `${TST_INFO}.${MESSAGE_IMPRINT$1}`;
const TST_INFO_SERIAL_NUMBER = `${TST_INFO}.${SERIAL_NUMBER}`;
const TST_INFO_GEN_TIME = `${TST_INFO}.${GEN_TIME}`;
const TST_INFO_ACCURACY = `${TST_INFO}.${ACCURACY}`;
const TST_INFO_ORDERING = `${TST_INFO}.${ORDERING}`;
const TST_INFO_NONCE = `${TST_INFO}.${NONCE$1}`;
const TST_INFO_TSA = `${TST_INFO}.${TSA}`;
const TST_INFO_EXTENSIONS = `${TST_INFO}.${EXTENSIONS$1}`;
const CLEAR_PROPS$4 = [
    TST_INFO_VERSION,
    TST_INFO_POLICY,
    TST_INFO_MESSAGE_IMPRINT,
    TST_INFO_SERIAL_NUMBER,
    TST_INFO_GEN_TIME,
    TST_INFO_ACCURACY,
    TST_INFO_ORDERING,
    TST_INFO_NONCE,
    TST_INFO_TSA,
    TST_INFO_EXTENSIONS
];
class TSTInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$3, TSTInfo.defaultValues(VERSION$3));
        this.policy = getParametersValue(parameters, POLICY, TSTInfo.defaultValues(POLICY));
        this.messageImprint = getParametersValue(parameters, MESSAGE_IMPRINT$1, TSTInfo.defaultValues(MESSAGE_IMPRINT$1));
        this.serialNumber = getParametersValue(parameters, SERIAL_NUMBER, TSTInfo.defaultValues(SERIAL_NUMBER));
        this.genTime = getParametersValue(parameters, GEN_TIME, TSTInfo.defaultValues(GEN_TIME));
        if (ACCURACY in parameters) {
            this.accuracy = getParametersValue(parameters, ACCURACY, TSTInfo.defaultValues(ACCURACY));
        }
        if (ORDERING in parameters) {
            this.ordering = getParametersValue(parameters, ORDERING, TSTInfo.defaultValues(ORDERING));
        }
        if (NONCE$1 in parameters) {
            this.nonce = getParametersValue(parameters, NONCE$1, TSTInfo.defaultValues(NONCE$1));
        }
        if (TSA in parameters) {
            this.tsa = getParametersValue(parameters, TSA, TSTInfo.defaultValues(TSA));
        }
        if (EXTENSIONS$1 in parameters) {
            this.extensions = getParametersValue(parameters, EXTENSIONS$1, TSTInfo.defaultValues(EXTENSIONS$1));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$3:
                return 0;
            case POLICY:
                return EMPTY_STRING1;
            case MESSAGE_IMPRINT$1:
                return new MessageImprint();
            case SERIAL_NUMBER:
                return new Integer();
            case GEN_TIME:
                return new Date(0, 0, 0);
            case ACCURACY:
                return new Accuracy();
            case ORDERING:
                return false;
            case NONCE$1:
                return new Integer();
            case TSA:
                return new GeneralName();
            case EXTENSIONS$1:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$3:
            case POLICY:
            case GEN_TIME:
            case ORDERING:
                return memberValue === TSTInfo.defaultValues(ORDERING);
            case MESSAGE_IMPRINT$1:
                return MessageImprint.compareWithDefault(HASH_ALGORITHM, memberValue.hashAlgorithm) && MessageImprint.compareWithDefault(HASHED_MESSAGE, memberValue.hashedMessage);
            case SERIAL_NUMBER:
            case NONCE$1:
                return memberValue.isEqual(TSTInfo.defaultValues(NONCE$1));
            case ACCURACY:
                return Accuracy.compareWithDefault(SECONDS, memberValue.seconds) && Accuracy.compareWithDefault(MILLIS, memberValue.millis) && Accuracy.compareWithDefault(MICROS, memberValue.micros);
            case TSA:
                return GeneralName.compareWithDefault(TYPE$4, memberValue.type) && GeneralName.compareWithDefault(VALUE$5, memberValue.value);
            case EXTENSIONS$1:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || TST_INFO,
            value: [
                new Integer({
                    name: names.version || TST_INFO_VERSION
                }),
                new ObjectIdentifier({
                    name: names.policy || TST_INFO_POLICY
                }),
                MessageImprint.schema(names.messageImprint || {
                    names: {
                        blockName: TST_INFO_MESSAGE_IMPRINT
                    }
                }),
                new Integer({
                    name: names.serialNumber || TST_INFO_SERIAL_NUMBER
                }),
                new GeneralizedTime({
                    name: names.genTime || TST_INFO_GEN_TIME
                }),
                Accuracy.schema(names.accuracy || {
                    names: {
                        blockName: TST_INFO_ACCURACY
                    }
                }),
                new Boolean1({
                    name: names.ordering || TST_INFO_ORDERING,
                    optional: true
                }),
                new Integer({
                    name: names.nonce || TST_INFO_NONCE,
                    optional: true
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        GeneralName.schema(names.tsa || {
                            names: {
                                blockName: TST_INFO_TSA
                            }
                        })
                    ]
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: [
                        new Repeated({
                            name: names.extensions || TST_INFO_EXTENSIONS,
                            value: Extension.schema(names.extension || {})
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$4);
        const asn1 = compareSchema(schema, schema, TSTInfo.schema());
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result[TST_INFO_VERSION].valueBlock.valueDec;
        this.policy = asn1.result[TST_INFO_POLICY].valueBlock.toString();
        this.messageImprint = new MessageImprint({
            schema: asn1.result[TST_INFO_MESSAGE_IMPRINT]
        });
        this.serialNumber = asn1.result[TST_INFO_SERIAL_NUMBER];
        this.genTime = asn1.result[TST_INFO_GEN_TIME].toDate();
        if (TST_INFO_ACCURACY in asn1.result) this.accuracy = new Accuracy({
            schema: asn1.result[TST_INFO_ACCURACY]
        });
        if (TST_INFO_ORDERING in asn1.result) this.ordering = asn1.result[TST_INFO_ORDERING].valueBlock.value;
        if (TST_INFO_NONCE in asn1.result) this.nonce = asn1.result[TST_INFO_NONCE];
        if (TST_INFO_TSA in asn1.result) this.tsa = new GeneralName({
            schema: asn1.result[TST_INFO_TSA]
        });
        if (TST_INFO_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TST_INFO_EXTENSIONS], (element)=>new Extension({
                schema: element
            })
        );
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.version
        }));
        outputArray.push(new ObjectIdentifier({
            value: this.policy
        }));
        outputArray.push(this.messageImprint.toSchema());
        outputArray.push(this.serialNumber);
        outputArray.push(new GeneralizedTime({
            valueDate: this.genTime
        }));
        if (this.accuracy) outputArray.push(this.accuracy.toSchema());
        if (this.ordering !== undefined) outputArray.push(new Boolean1({
            value: this.ordering
        }));
        if (this.nonce) outputArray.push(this.nonce);
        if (this.tsa) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: [
                    this.tsa.toSchema()
                ]
            }));
        }
        if (this.extensions) {
            outputArray.push(new Constructed({
                optional: true,
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: Array.from(this.extensions, (o93)=>o93.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            version: this.version,
            policy: this.policy,
            messageImprint: this.messageImprint.toJSON(),
            serialNumber: this.serialNumber.toJSON(),
            genTime: this.genTime
        };
        if (this.accuracy) res.accuracy = this.accuracy.toJSON();
        if (this.ordering !== undefined) res.ordering = this.ordering;
        if (this.nonce) res.nonce = this.nonce.toJSON();
        if (this.tsa) res.tsa = this.tsa.toJSON();
        if (this.extensions) res.extensions = Array.from(this.extensions, (o94)=>o94.toJSON()
        );
        return res;
    }
    async verify(params, crypto = getCrypto(true)) {
        if (!params.data) {
            throw new Error("\"data\" is a mandatory attribute for TST_INFO verification");
        }
        const data = params.data;
        if (params.notBefore) {
            if (this.genTime < params.notBefore) throw new Error("Generation time for TSTInfo object is less than notBefore value");
        }
        if (params.notAfter) {
            if (this.genTime > params.notAfter) throw new Error("Generation time for TSTInfo object is more than notAfter value");
        }
        const shaAlgorithm = crypto.getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId, true, "MessageImprint.hashAlgorithm");
        const hash = await crypto.digest(shaAlgorithm.name, new Uint8Array(data));
        return BufferSourceConverter.isEqual(hash, this.messageImprint.hashedMessage.valueBlock.valueHexView);
    }
}
TSTInfo.CLASS_NAME = "TSTInfo";
const VERSION$2 = "version";
const DIGEST_ALGORITHMS = "digestAlgorithms";
const ENCAP_CONTENT_INFO = "encapContentInfo";
const CERTIFICATES = "certificates";
const CRLS = "crls";
const SIGNER_INFOS = "signerInfos";
const OCSPS = "ocsps";
const SIGNED_DATA = "SignedData";
const SIGNED_DATA_VERSION = `${SIGNED_DATA}.${VERSION$2}`;
const SIGNED_DATA_DIGEST_ALGORITHMS = `${SIGNED_DATA}.${DIGEST_ALGORITHMS}`;
const SIGNED_DATA_ENCAP_CONTENT_INFO = `${SIGNED_DATA}.${ENCAP_CONTENT_INFO}`;
const SIGNED_DATA_CERTIFICATES = `${SIGNED_DATA}.${CERTIFICATES}`;
const SIGNED_DATA_CRLS = `${SIGNED_DATA}.${CRLS}`;
const SIGNED_DATA_SIGNER_INFOS = `${SIGNED_DATA}.${SIGNER_INFOS}`;
const CLEAR_PROPS$3 = [
    SIGNED_DATA_VERSION,
    SIGNED_DATA_DIGEST_ALGORITHMS,
    SIGNED_DATA_ENCAP_CONTENT_INFO,
    SIGNED_DATA_CERTIFICATES,
    SIGNED_DATA_CRLS,
    SIGNED_DATA_SIGNER_INFOS
];
class SignedDataVerifyError extends Error {
    constructor({ message: message8 , code =0 , date =new Date() , signatureVerified =null , signerCertificate =null , signerCertificateVerified =null , timestampSerial =null , certificatePath =[]  }){
        super(message8);
        this.name = "SignedDataVerifyError";
        this.date = date;
        this.code = code;
        this.timestampSerial = timestampSerial;
        this.signatureVerified = signatureVerified;
        this.signerCertificate = signerCertificate;
        this.signerCertificateVerified = signerCertificateVerified;
        this.certificatePath = certificatePath;
    }
}
class SignedData extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$2, SignedData.defaultValues(VERSION$2));
        this.digestAlgorithms = getParametersValue(parameters, DIGEST_ALGORITHMS, SignedData.defaultValues(DIGEST_ALGORITHMS));
        this.encapContentInfo = getParametersValue(parameters, ENCAP_CONTENT_INFO, SignedData.defaultValues(ENCAP_CONTENT_INFO));
        if (CERTIFICATES in parameters) {
            this.certificates = getParametersValue(parameters, CERTIFICATES, SignedData.defaultValues(CERTIFICATES));
        }
        if (CRLS in parameters) {
            this.crls = getParametersValue(parameters, CRLS, SignedData.defaultValues(CRLS));
        }
        if (OCSPS in parameters) {
            this.ocsps = getParametersValue(parameters, OCSPS, SignedData.defaultValues(OCSPS));
        }
        this.signerInfos = getParametersValue(parameters, SIGNER_INFOS, SignedData.defaultValues(SIGNER_INFOS));
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$2:
                return 0;
            case DIGEST_ALGORITHMS:
                return [];
            case ENCAP_CONTENT_INFO:
                return new EncapsulatedContentInfo();
            case CERTIFICATES:
                return [];
            case CRLS:
                return [];
            case OCSPS:
                return [];
            case SIGNER_INFOS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$2:
                return memberValue === SignedData.defaultValues(VERSION$2);
            case ENCAP_CONTENT_INFO:
                return EncapsulatedContentInfo.compareWithDefault("eContentType", memberValue.eContentType) && EncapsulatedContentInfo.compareWithDefault("eContent", memberValue.eContent);
            case DIGEST_ALGORITHMS:
            case CERTIFICATES:
            case CRLS:
            case OCSPS:
            case SIGNER_INFOS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        if (names.optional === undefined) {
            names.optional = false;
        }
        return new Sequence({
            name: names.blockName || SIGNED_DATA,
            optional: names.optional,
            value: [
                new Integer({
                    name: names.version || SIGNED_DATA_VERSION
                }),
                new Set1({
                    value: [
                        new Repeated({
                            name: names.digestAlgorithms || SIGNED_DATA_DIGEST_ALGORITHMS,
                            value: AlgorithmIdentifier.schema()
                        })
                    ]
                }),
                EncapsulatedContentInfo.schema(names.encapContentInfo || {
                    names: {
                        blockName: SIGNED_DATA_ENCAP_CONTENT_INFO
                    }
                }),
                new Constructed({
                    name: names.certificates || SIGNED_DATA_CERTIFICATES,
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: CertificateSet.schema().valueBlock.value
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 1
                    },
                    value: RevocationInfoChoices.schema(names.crls || {
                        names: {
                            crls: SIGNED_DATA_CRLS
                        }
                    }).valueBlock.value
                }),
                new Set1({
                    value: [
                        new Repeated({
                            name: names.signerInfos || SIGNED_DATA_SIGNER_INFOS,
                            value: SignerInfo.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$3);
        const asn1 = compareSchema(schema, schema, SignedData.schema());
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result[SIGNED_DATA_VERSION].valueBlock.valueDec;
        if (SIGNED_DATA_DIGEST_ALGORITHMS in asn1.result) this.digestAlgorithms = Array.from(asn1.result[SIGNED_DATA_DIGEST_ALGORITHMS], (algorithm)=>new AlgorithmIdentifier({
                schema: algorithm
            })
        );
        this.encapContentInfo = new EncapsulatedContentInfo({
            schema: asn1.result[SIGNED_DATA_ENCAP_CONTENT_INFO]
        });
        if (SIGNED_DATA_CERTIFICATES in asn1.result) {
            const certificateSet = new CertificateSet({
                schema: new Set1({
                    value: asn1.result[SIGNED_DATA_CERTIFICATES].valueBlock.value
                })
            });
            this.certificates = certificateSet.certificates.slice(0);
        }
        if (SIGNED_DATA_CRLS in asn1.result) {
            this.crls = Array.from(asn1.result[SIGNED_DATA_CRLS], (crl)=>{
                if (crl.idBlock.tagClass === 1) return new CertificateRevocationList({
                    schema: crl
                });
                crl.idBlock.tagClass = 1;
                crl.idBlock.tagNumber = 16;
                return new OtherRevocationInfoFormat({
                    schema: crl
                });
            });
        }
        if (SIGNED_DATA_SIGNER_INFOS in asn1.result) this.signerInfos = Array.from(asn1.result[SIGNED_DATA_SIGNER_INFOS], (signerInfoSchema)=>new SignerInfo({
                schema: signerInfoSchema
            })
        );
    }
    toSchema(encodeFlag = false) {
        const outputArray = [];
        if (this.certificates && this.certificates.length && this.certificates.some((o95)=>o95 instanceof OtherCertificateFormat
        ) || this.crls && this.crls.length && this.crls.some((o96)=>o96 instanceof OtherRevocationInfoFormat
        )) {
            this.version = 5;
        } else if (this.certificates && this.certificates.length && this.certificates.some((o97)=>o97 instanceof AttributeCertificateV2
        )) {
            this.version = 4;
        } else if (this.certificates && this.certificates.length && this.certificates.some((o98)=>o98 instanceof AttributeCertificateV1
        ) || this.signerInfos.some((o99)=>o99.version === 3
        ) || this.encapContentInfo.eContentType !== SignedData.ID_DATA) {
            this.version = 3;
        } else {
            this.version = 1;
        }
        outputArray.push(new Integer({
            value: this.version
        }));
        outputArray.push(new Set1({
            value: Array.from(this.digestAlgorithms, (algorithm)=>algorithm.toSchema()
            )
        }));
        outputArray.push(this.encapContentInfo.toSchema());
        if (this.certificates) {
            const certificateSet = new CertificateSet({
                certificates: this.certificates
            });
            const certificateSetSchema = certificateSet.toSchema();
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: certificateSetSchema.valueBlock.value
            }));
        }
        if (this.crls) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 1
                },
                value: Array.from(this.crls, (crl)=>{
                    if (crl instanceof OtherRevocationInfoFormat) {
                        const crlSchema = crl.toSchema();
                        crlSchema.idBlock.tagClass = 3;
                        crlSchema.idBlock.tagNumber = 1;
                        return crlSchema;
                    }
                    return crl.toSchema(encodeFlag);
                })
            }));
        }
        outputArray.push(new Set1({
            value: Array.from(this.signerInfos, (signerInfo)=>signerInfo.toSchema()
            )
        }));
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            version: this.version,
            digestAlgorithms: Array.from(this.digestAlgorithms, (algorithm)=>algorithm.toJSON()
            ),
            encapContentInfo: this.encapContentInfo.toJSON(),
            signerInfos: Array.from(this.signerInfos, (signerInfo)=>signerInfo.toJSON()
            )
        };
        if (this.certificates) {
            res.certificates = Array.from(this.certificates, (certificate)=>certificate.toJSON()
            );
        }
        if (this.crls) {
            res.crls = Array.from(this.crls, (crl)=>crl.toJSON()
            );
        }
        return res;
    }
    async verify({ signer =-1 , data =EMPTY_BUFFER1 , trustedCerts =[] , checkDate =new Date() , checkChain =false , passedWhenNotRevValues =false , extendedMode =false , findOrigin =null , findIssuer =null  } = {}, crypto = getCrypto(true)) {
        let signerCert = null;
        let timestampSerial = null;
        try {
            let messageDigestValue = EMPTY_BUFFER1;
            let shaAlgorithm = EMPTY_STRING1;
            let certificatePath = [];
            const signerInfo = this.signerInfos[signer];
            if (!signerInfo) {
                throw new SignedDataVerifyError({
                    date: checkDate,
                    code: 1,
                    message: "Unable to get signer by supplied index"
                });
            }
            if (!this.certificates) {
                throw new SignedDataVerifyError({
                    date: checkDate,
                    code: 2,
                    message: "No certificates attached to this signed data"
                });
            }
            if (signerInfo.sid instanceof IssuerAndSerialNumber) {
                for (const certificate of this.certificates){
                    if (!(certificate instanceof Certificate)) continue;
                    if (certificate.issuer.isEqual(signerInfo.sid.issuer) && certificate.serialNumber.isEqual(signerInfo.sid.serialNumber)) {
                        signerCert = certificate;
                        break;
                    }
                }
            } else {
                const sid = signerInfo.sid;
                const keyId = sid.idBlock.isConstructed ? sid.valueBlock.value[0].valueBlock.valueHex : sid.valueBlock.valueHex;
                for (const certificate of this.certificates){
                    if (!(certificate instanceof Certificate)) {
                        continue;
                    }
                    const digest = await crypto.digest({
                        name: "sha-1"
                    }, certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
                    if (isEqualBuffer(digest, keyId)) {
                        signerCert = certificate;
                        break;
                    }
                }
            }
            if (!signerCert) {
                throw new SignedDataVerifyError({
                    date: checkDate,
                    code: 3,
                    message: "Unable to find signer certificate"
                });
            }
            if (this.encapContentInfo.eContentType === id_eContentType_TSTInfo) {
                if (!this.encapContentInfo.eContent) {
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 15,
                        message: "Error during verification: TSTInfo eContent is empty",
                        signatureVerified: null,
                        signerCertificate: signerCert,
                        timestampSerial,
                        signerCertificateVerified: true
                    });
                }
                let tstInfo;
                try {
                    tstInfo = TSTInfo.fromBER(this.encapContentInfo.eContent.valueBlock.valueHexView);
                } catch (ex) {
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 15,
                        message: "Error during verification: TSTInfo wrong ASN.1 schema ",
                        signatureVerified: null,
                        signerCertificate: signerCert,
                        timestampSerial,
                        signerCertificateVerified: true
                    });
                }
                checkDate = tstInfo.genTime;
                timestampSerial = tstInfo.serialNumber.valueBlock.valueHexView.slice();
                if (data.byteLength === 0) {
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 4,
                        message: "Missed detached data input array"
                    });
                }
                if (!await tstInfo.verify({
                    data
                }, crypto)) {
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 15,
                        message: "Error during verification: TSTInfo verification is failed",
                        signatureVerified: false,
                        signerCertificate: signerCert,
                        timestampSerial,
                        signerCertificateVerified: true
                    });
                }
            }
            if (checkChain) {
                const certs = this.certificates.filter((certificate)=>certificate instanceof Certificate && !!checkCA(certificate, signerCert)
                );
                const chainParams = {
                    checkDate,
                    certs,
                    trustedCerts
                };
                if (findIssuer) {
                    chainParams.findIssuer = findIssuer;
                }
                if (findOrigin) {
                    chainParams.findOrigin = findOrigin;
                }
                const chainEngine = new CertificateChainValidationEngine(chainParams);
                chainEngine.certs.push(signerCert);
                if (this.crls) {
                    for (const crl of this.crls){
                        if ("thisUpdate" in crl) chainEngine.crls.push(crl);
                        else {
                            if (crl.otherRevInfoFormat === id_PKIX_OCSP_Basic) chainEngine.ocsps.push(new BasicOCSPResponse({
                                schema: crl.otherRevInfo
                            }));
                        }
                    }
                }
                if (this.ocsps) {
                    chainEngine.ocsps.push(...this.ocsps);
                }
                const verificationResult = await chainEngine.verify({
                    passedWhenNotRevValues
                }, crypto).catch((e2)=>{
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 5,
                        message: `Validation of signer's certificate failed with error: ${e2 instanceof Object ? e2.resultMessage : e2}`,
                        signerCertificate: signerCert,
                        signerCertificateVerified: false
                    });
                });
                if (verificationResult.certificatePath) {
                    certificatePath = verificationResult.certificatePath;
                }
                if (!verificationResult.result) throw new SignedDataVerifyError({
                    date: checkDate,
                    code: 5,
                    message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,
                    signerCertificate: signerCert,
                    signerCertificateVerified: false
                });
            }
            const signerInfoHashAlgorithm = crypto.getAlgorithmByOID(signerInfo.digestAlgorithm.algorithmId);
            if (!("name" in signerInfoHashAlgorithm)) {
                throw new SignedDataVerifyError({
                    date: checkDate,
                    code: 7,
                    message: `Unsupported signature algorithm: ${signerInfo.digestAlgorithm.algorithmId}`,
                    signerCertificate: signerCert,
                    signerCertificateVerified: true
                });
            }
            shaAlgorithm = signerInfoHashAlgorithm.name;
            const eContent = this.encapContentInfo.eContent;
            if (eContent) {
                if (eContent.idBlock.tagClass === 1 && eContent.idBlock.tagNumber === 4) {
                    data = eContent.getValue();
                } else data = eContent.valueBlock.valueBeforeDecodeView;
            } else {
                if (data.byteLength === 0) {
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 8,
                        message: "Missed detached data input array",
                        signerCertificate: signerCert,
                        signerCertificateVerified: true
                    });
                }
            }
            if (signerInfo.signedAttrs) {
                let foundContentType = false;
                let foundMessageDigest = false;
                for (const attribute of signerInfo.signedAttrs.attributes){
                    if (attribute.type === "1.2.840.113549.1.9.3") foundContentType = true;
                    if (attribute.type === "1.2.840.113549.1.9.4") {
                        foundMessageDigest = true;
                        messageDigestValue = attribute.values[0].valueBlock.valueHex;
                    }
                    if (foundContentType && foundMessageDigest) break;
                }
                if (foundContentType === false) {
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 9,
                        message: "Attribute \"content-type\" is a mandatory attribute for \"signed attributes\"",
                        signerCertificate: signerCert,
                        signerCertificateVerified: true
                    });
                }
                if (foundMessageDigest === false) {
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 10,
                        message: "Attribute \"message-digest\" is a mandatory attribute for \"signed attributes\"",
                        signatureVerified: null,
                        signerCertificate: signerCert,
                        signerCertificateVerified: true
                    });
                }
            }
            if (signerInfo.signedAttrs) {
                const messageDigest = await crypto.digest(shaAlgorithm, new Uint8Array(data));
                if (!isEqualBuffer(messageDigest, messageDigestValue)) {
                    throw new SignedDataVerifyError({
                        date: checkDate,
                        code: 15,
                        message: "Error during verification: Message digest doesn't match",
                        signatureVerified: null,
                        signerCertificate: signerCert,
                        timestampSerial,
                        signerCertificateVerified: true
                    });
                }
                data = signerInfo.signedAttrs.encodedValue;
            }
            const verifyResult = await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerCert.signatureAlgorithm, shaAlgorithm);
            if (extendedMode) {
                return {
                    date: checkDate,
                    code: 14,
                    message: EMPTY_STRING1,
                    signatureVerified: verifyResult,
                    signerCertificate: signerCert,
                    timestampSerial,
                    signerCertificateVerified: true,
                    certificatePath
                };
            } else {
                return verifyResult;
            }
        } catch (e3) {
            if (e3 instanceof SignedDataVerifyError) {
                throw e3;
            }
            throw new SignedDataVerifyError({
                date: checkDate,
                code: 15,
                message: `Error during verification: ${e3 instanceof Error ? e3.message : e3}`,
                signatureVerified: null,
                signerCertificate: signerCert,
                timestampSerial,
                signerCertificateVerified: true
            });
        }
    }
    async sign(privateKey, signerIndex, hashAlgorithm = "SHA-1", data = EMPTY_BUFFER1, crypto = getCrypto(true)) {
        if (!privateKey) throw new Error("Need to provide a private key for signing");
        const hashAlgorithmOID = crypto.getOIDByAlgorithm({
            name: hashAlgorithm
        }, true, "hashAlgorithm");
        if (this.digestAlgorithms.filter((algorithm)=>algorithm.algorithmId === hashAlgorithmOID
        ).length === 0) {
            this.digestAlgorithms.push(new AlgorithmIdentifier({
                algorithmId: hashAlgorithmOID,
                algorithmParams: new Null()
            }));
        }
        const signerInfo = this.signerInfos[signerIndex];
        if (!signerInfo) {
            throw new RangeError("SignerInfo index is out of range");
        }
        signerInfo.digestAlgorithm = new AlgorithmIdentifier({
            algorithmId: hashAlgorithmOID,
            algorithmParams: new Null()
        });
        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);
        const parameters = signatureParams.parameters;
        signerInfo.signatureAlgorithm = signatureParams.signatureAlgorithm;
        if (signerInfo.signedAttrs) {
            if (signerInfo.signedAttrs.encodedValue.byteLength !== 0) data = signerInfo.signedAttrs.encodedValue;
            else {
                data = signerInfo.signedAttrs.toSchema().toBER();
                const view = BufferSourceConverter.toUint8Array(data);
                view[0] = 49;
            }
        } else {
            const eContent = this.encapContentInfo.eContent;
            if (eContent) {
                if (eContent.idBlock.tagClass === 1 && eContent.idBlock.tagNumber === 4) {
                    data = eContent.getValue();
                } else data = eContent.valueBlock.valueBeforeDecodeView;
            } else {
                if (data.byteLength === 0) throw new Error("Missed detached data input array");
            }
        }
        const signature = await crypto.signWithPrivateKey(data, privateKey, parameters);
        signerInfo.signature = new OctetString({
            valueHex: signature
        });
    }
}
SignedData.CLASS_NAME = "SignedData";
SignedData.ID_DATA = id_ContentType_Data;
const VERSION$1 = "version";
const AUTH_SAFE = "authSafe";
const MAC_DATA = "macData";
const PARSED_VALUE = "parsedValue";
const CLERA_PROPS = [
    VERSION$1,
    AUTH_SAFE,
    MAC_DATA
];
class PFX extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION$1, PFX.defaultValues(VERSION$1));
        this.authSafe = getParametersValue(parameters, AUTH_SAFE, PFX.defaultValues(AUTH_SAFE));
        if (MAC_DATA in parameters) {
            this.macData = getParametersValue(parameters, MAC_DATA, PFX.defaultValues(MAC_DATA));
        }
        if (PARSED_VALUE in parameters) {
            this.parsedValue = getParametersValue(parameters, PARSED_VALUE, PFX.defaultValues(PARSED_VALUE));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION$1:
                return 3;
            case AUTH_SAFE:
                return new ContentInfo();
            case MAC_DATA:
                return new MacData();
            case PARSED_VALUE:
                return {};
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION$1:
                return memberValue === PFX.defaultValues(memberName);
            case AUTH_SAFE:
                return ContentInfo.compareWithDefault("contentType", memberValue.contentType) && ContentInfo.compareWithDefault("content", memberValue.content);
            case MAC_DATA:
                return MacData.compareWithDefault("mac", memberValue.mac) && MacData.compareWithDefault("macSalt", memberValue.macSalt) && MacData.compareWithDefault("iterations", memberValue.iterations);
            case PARSED_VALUE:
                return memberValue instanceof Object && Object.keys(memberValue).length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.version || VERSION$1
                }),
                ContentInfo.schema(names.authSafe || {
                    names: {
                        blockName: AUTH_SAFE
                    }
                }),
                MacData.schema(names.macData || {
                    names: {
                        blockName: MAC_DATA,
                        optional: true
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLERA_PROPS);
        const asn1 = compareSchema(schema, schema, PFX.schema({
            names: {
                version: VERSION$1,
                authSafe: {
                    names: {
                        blockName: AUTH_SAFE
                    }
                },
                macData: {
                    names: {
                        blockName: MAC_DATA
                    }
                }
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result.version.valueBlock.valueDec;
        this.authSafe = new ContentInfo({
            schema: asn1.result.authSafe
        });
        if (MAC_DATA in asn1.result) this.macData = new MacData({
            schema: asn1.result.macData
        });
    }
    toSchema() {
        const outputArray = [
            new Integer({
                value: this.version
            }),
            this.authSafe.toSchema()
        ];
        if (this.macData) {
            outputArray.push(this.macData.toSchema());
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const output = {
            version: this.version,
            authSafe: this.authSafe.toJSON()
        };
        if (this.macData) {
            output.macData = this.macData.toJSON();
        }
        return output;
    }
    async makeInternalValues(parameters = {}, crypto = getCrypto(true)) {
        ArgumentError.assert(parameters, "parameters", "object");
        if (!this.parsedValue) {
            throw new Error("Please call \"parseValues\" function first in order to make \"parsedValue\" data");
        }
        ParameterError.assertEmpty(this.parsedValue.integrityMode, "integrityMode", "parsedValue");
        ParameterError.assertEmpty(this.parsedValue.authenticatedSafe, "authenticatedSafe", "parsedValue");
        switch(this.parsedValue.integrityMode){
            case 0:
                {
                    if (!("iterations" in parameters)) throw new ParameterError("iterations");
                    ParameterError.assertEmpty(parameters.pbkdf2HashAlgorithm, "pbkdf2HashAlgorithm");
                    ParameterError.assertEmpty(parameters.hmacHashAlgorithm, "hmacHashAlgorithm");
                    ParameterError.assertEmpty(parameters.password, "password");
                    const saltBuffer = new ArrayBuffer(64);
                    const saltView = new Uint8Array(saltBuffer);
                    crypto.getRandomValues(saltView);
                    const data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);
                    this.authSafe = new ContentInfo({
                        contentType: ContentInfo.DATA,
                        content: new OctetString({
                            valueHex: data
                        })
                    });
                    const result = await crypto.stampDataWithPassword({
                        password: parameters.password,
                        hashAlgorithm: parameters.hmacHashAlgorithm,
                        salt: saltBuffer,
                        iterationCount: parameters.iterations,
                        contentToStamp: data
                    });
                    this.macData = new MacData({
                        mac: new DigestInfo({
                            digestAlgorithm: new AlgorithmIdentifier({
                                algorithmId: crypto.getOIDByAlgorithm({
                                    name: parameters.hmacHashAlgorithm
                                }, true, "hmacHashAlgorithm")
                            }),
                            digest: new OctetString({
                                valueHex: result
                            })
                        }),
                        macSalt: new OctetString({
                            valueHex: saltBuffer
                        }),
                        iterations: parameters.iterations
                    });
                }
                break;
            case 1:
                {
                    if (!("signingCertificate" in parameters)) {
                        throw new ParameterError("signingCertificate");
                    }
                    ParameterError.assertEmpty(parameters.privateKey, "privateKey");
                    ParameterError.assertEmpty(parameters.hashAlgorithm, "hashAlgorithm");
                    const toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);
                    const cmsSigned = new SignedData({
                        version: 1,
                        encapContentInfo: new EncapsulatedContentInfo({
                            eContentType: "1.2.840.113549.1.7.1",
                            eContent: new OctetString({
                                valueHex: toBeSigned
                            })
                        }),
                        certificates: [
                            parameters.signingCertificate
                        ]
                    });
                    const result = await crypto.digest({
                        name: parameters.hashAlgorithm
                    }, new Uint8Array(toBeSigned));
                    const signedAttr = [];
                    signedAttr.push(new Attribute({
                        type: "1.2.840.113549.1.9.3",
                        values: [
                            new ObjectIdentifier({
                                value: "1.2.840.113549.1.7.1"
                            })
                        ]
                    }));
                    signedAttr.push(new Attribute({
                        type: "1.2.840.113549.1.9.5",
                        values: [
                            new UTCTime({
                                valueDate: new Date()
                            })
                        ]
                    }));
                    signedAttr.push(new Attribute({
                        type: "1.2.840.113549.1.9.4",
                        values: [
                            new OctetString({
                                valueHex: result
                            })
                        ]
                    }));
                    cmsSigned.signerInfos.push(new SignerInfo({
                        version: 1,
                        sid: new IssuerAndSerialNumber({
                            issuer: parameters.signingCertificate.issuer,
                            serialNumber: parameters.signingCertificate.serialNumber
                        }),
                        signedAttrs: new SignedAndUnsignedAttributes({
                            type: 0,
                            attributes: signedAttr
                        })
                    }));
                    await cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm, undefined, crypto);
                    this.authSafe = new ContentInfo({
                        contentType: "1.2.840.113549.1.7.2",
                        content: cmsSigned.toSchema(true)
                    });
                }
                break;
            default:
                throw new Error(`Parameter "integrityMode" has unknown value: ${this.parsedValue.integrityMode}`);
        }
    }
    async parseInternalValues(parameters, crypto = getCrypto(true)) {
        ArgumentError.assert(parameters, "parameters", "object");
        if (parameters.checkIntegrity === undefined) {
            parameters.checkIntegrity = true;
        }
        this.parsedValue = {};
        switch(this.authSafe.contentType){
            case ContentInfo.DATA:
                {
                    ParameterError.assertEmpty(parameters.password, "password");
                    this.parsedValue.integrityMode = 0;
                    ArgumentError.assert(this.authSafe.content, "authSafe.content", OctetString);
                    const authSafeContent = this.authSafe.content.getValue();
                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(authSafeContent);
                    if (parameters.checkIntegrity) {
                        if (!this.macData) {
                            throw new Error("Absent \"macData\" value, can not check PKCS#12 data integrity");
                        }
                        const hashAlgorithm = crypto.getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId, true, "digestAlgorithm");
                        const result = await crypto.verifyDataStampedWithPassword({
                            password: parameters.password,
                            hashAlgorithm: hashAlgorithm.name,
                            salt: BufferSourceConverter.toArrayBuffer(this.macData.macSalt.valueBlock.valueHexView),
                            iterationCount: this.macData.iterations || 0,
                            contentToVerify: authSafeContent,
                            signatureToVerify: BufferSourceConverter.toArrayBuffer(this.macData.mac.digest.valueBlock.valueHexView)
                        });
                        if (!result) {
                            throw new Error("Integrity for the PKCS#12 data is broken!");
                        }
                    }
                }
                break;
            case ContentInfo.SIGNED_DATA:
                {
                    this.parsedValue.integrityMode = 1;
                    const cmsSigned = new SignedData({
                        schema: this.authSafe.content
                    });
                    const eContent = cmsSigned.encapContentInfo.eContent;
                    ParameterError.assert(eContent, "eContent", "cmsSigned.encapContentInfo");
                    ArgumentError.assert(eContent, "eContent", OctetString);
                    const data = eContent.getValue();
                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(data);
                    const ok = await cmsSigned.verify({
                        signer: 0,
                        checkChain: false
                    }, crypto);
                    if (!ok) {
                        throw new Error("Integrity for the PKCS#12 data is broken!");
                    }
                }
                break;
            default:
                throw new Error(`Incorrect value for "this.authSafe.contentType": ${this.authSafe.contentType}`);
        }
    }
}
PFX.CLASS_NAME = "PFX";
const STATUS$1 = "status";
const STATUS_STRINGS = "statusStrings";
const FAIL_INFO = "failInfo";
const CLEAR_PROPS$2 = [
    STATUS$1,
    STATUS_STRINGS,
    FAIL_INFO
];
var PKIStatus;
(function(PKIStatus1) {
    PKIStatus1[PKIStatus1["granted"] = 0] = "granted";
    PKIStatus1[PKIStatus1["grantedWithMods"] = 1] = "grantedWithMods";
    PKIStatus1[PKIStatus1["rejection"] = 2] = "rejection";
    PKIStatus1[PKIStatus1["waiting"] = 3] = "waiting";
    PKIStatus1[PKIStatus1["revocationWarning"] = 4] = "revocationWarning";
    PKIStatus1[PKIStatus1["revocationNotification"] = 5] = "revocationNotification";
})(PKIStatus || (PKIStatus = {}));
class PKIStatusInfo extends PkiObject {
    constructor(parameters = {}){
        super();
        this.status = getParametersValue(parameters, STATUS$1, PKIStatusInfo.defaultValues(STATUS$1));
        if (STATUS_STRINGS in parameters) {
            this.statusStrings = getParametersValue(parameters, STATUS_STRINGS, PKIStatusInfo.defaultValues(STATUS_STRINGS));
        }
        if (FAIL_INFO in parameters) {
            this.failInfo = getParametersValue(parameters, FAIL_INFO, PKIStatusInfo.defaultValues(FAIL_INFO));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case STATUS$1:
                return 2;
            case STATUS_STRINGS:
                return [];
            case FAIL_INFO:
                return new BitString();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case STATUS$1:
                return memberValue === PKIStatusInfo.defaultValues(memberName);
            case STATUS_STRINGS:
                return memberValue.length === 0;
            case FAIL_INFO:
                return memberValue.isEqual(PKIStatusInfo.defaultValues(memberName));
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || EMPTY_STRING1,
            value: [
                new Integer({
                    name: names.status || EMPTY_STRING1
                }),
                new Sequence({
                    optional: true,
                    value: [
                        new Repeated({
                            name: names.statusStrings || EMPTY_STRING1,
                            value: new Utf8String()
                        })
                    ]
                }),
                new BitString({
                    name: names.failInfo || EMPTY_STRING1,
                    optional: true
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$2);
        const asn1 = compareSchema(schema, schema, PKIStatusInfo.schema({
            names: {
                status: STATUS$1,
                statusStrings: STATUS_STRINGS,
                failInfo: FAIL_INFO
            }
        }));
        AsnError.assertSchema(asn1, this.className);
        const _status = asn1.result.status;
        if (_status.valueBlock.isHexOnly === true || _status.valueBlock.valueDec < 0 || _status.valueBlock.valueDec > 5) throw new Error("PKIStatusInfo \"status\" has invalid value");
        this.status = _status.valueBlock.valueDec;
        if (STATUS_STRINGS in asn1.result) this.statusStrings = asn1.result.statusStrings;
        if (FAIL_INFO in asn1.result) this.failInfo = asn1.result.failInfo;
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.status
        }));
        if (this.statusStrings) {
            outputArray.push(new Sequence({
                optional: true,
                value: this.statusStrings
            }));
        }
        if (this.failInfo) {
            outputArray.push(this.failInfo);
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            status: this.status
        };
        if (this.statusStrings) {
            res.statusStrings = Array.from(this.statusStrings, (o100)=>o100.toJSON()
            );
        }
        if (this.failInfo) {
            res.failInfo = this.failInfo.toJSON();
        }
        return res;
    }
}
PKIStatusInfo.CLASS_NAME = "PKIStatusInfo";
const VERSION = "version";
const MESSAGE_IMPRINT = "messageImprint";
const REQ_POLICY = "reqPolicy";
const NONCE = "nonce";
const CERT_REQ = "certReq";
const EXTENSIONS = "extensions";
const TIME_STAMP_REQ = "TimeStampReq";
const TIME_STAMP_REQ_VERSION = `${TIME_STAMP_REQ}.${VERSION}`;
const TIME_STAMP_REQ_MESSAGE_IMPRINT = `${TIME_STAMP_REQ}.${MESSAGE_IMPRINT}`;
const TIME_STAMP_REQ_POLICY = `${TIME_STAMP_REQ}.${REQ_POLICY}`;
const TIME_STAMP_REQ_NONCE = `${TIME_STAMP_REQ}.${NONCE}`;
const TIME_STAMP_REQ_CERT_REQ = `${TIME_STAMP_REQ}.${CERT_REQ}`;
const TIME_STAMP_REQ_EXTENSIONS = `${TIME_STAMP_REQ}.${EXTENSIONS}`;
const CLEAR_PROPS$1 = [
    TIME_STAMP_REQ_VERSION,
    TIME_STAMP_REQ_MESSAGE_IMPRINT,
    TIME_STAMP_REQ_POLICY,
    TIME_STAMP_REQ_NONCE,
    TIME_STAMP_REQ_CERT_REQ,
    TIME_STAMP_REQ_EXTENSIONS
];
class TimeStampReq extends PkiObject {
    constructor(parameters = {}){
        super();
        this.version = getParametersValue(parameters, VERSION, TimeStampReq.defaultValues(VERSION));
        this.messageImprint = getParametersValue(parameters, MESSAGE_IMPRINT, TimeStampReq.defaultValues(MESSAGE_IMPRINT));
        if (REQ_POLICY in parameters) {
            this.reqPolicy = getParametersValue(parameters, REQ_POLICY, TimeStampReq.defaultValues(REQ_POLICY));
        }
        if (NONCE in parameters) {
            this.nonce = getParametersValue(parameters, NONCE, TimeStampReq.defaultValues(NONCE));
        }
        if (CERT_REQ in parameters) {
            this.certReq = getParametersValue(parameters, CERT_REQ, TimeStampReq.defaultValues(CERT_REQ));
        }
        if (EXTENSIONS in parameters) {
            this.extensions = getParametersValue(parameters, EXTENSIONS, TimeStampReq.defaultValues(EXTENSIONS));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case VERSION:
                return 0;
            case MESSAGE_IMPRINT:
                return new MessageImprint();
            case REQ_POLICY:
                return EMPTY_STRING1;
            case NONCE:
                return new Integer();
            case CERT_REQ:
                return false;
            case EXTENSIONS:
                return [];
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case VERSION:
            case REQ_POLICY:
            case CERT_REQ:
                return memberValue === TimeStampReq.defaultValues(memberName);
            case MESSAGE_IMPRINT:
                return MessageImprint.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && MessageImprint.compareWithDefault("hashedMessage", memberValue.hashedMessage);
            case NONCE:
                return memberValue.isEqual(TimeStampReq.defaultValues(memberName));
            case EXTENSIONS:
                return memberValue.length === 0;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || TIME_STAMP_REQ,
            value: [
                new Integer({
                    name: names.version || TIME_STAMP_REQ_VERSION
                }),
                MessageImprint.schema(names.messageImprint || {
                    names: {
                        blockName: TIME_STAMP_REQ_MESSAGE_IMPRINT
                    }
                }),
                new ObjectIdentifier({
                    name: names.reqPolicy || TIME_STAMP_REQ_POLICY,
                    optional: true
                }),
                new Integer({
                    name: names.nonce || TIME_STAMP_REQ_NONCE,
                    optional: true
                }),
                new Boolean1({
                    name: names.certReq || TIME_STAMP_REQ_CERT_REQ,
                    optional: true
                }),
                new Constructed({
                    optional: true,
                    idBlock: {
                        tagClass: 3,
                        tagNumber: 0
                    },
                    value: [
                        new Repeated({
                            name: names.extensions || TIME_STAMP_REQ_EXTENSIONS,
                            value: Extension.schema()
                        })
                    ]
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS$1);
        const asn1 = compareSchema(schema, schema, TimeStampReq.schema());
        AsnError.assertSchema(asn1, this.className);
        this.version = asn1.result[TIME_STAMP_REQ_VERSION].valueBlock.valueDec;
        this.messageImprint = new MessageImprint({
            schema: asn1.result[TIME_STAMP_REQ_MESSAGE_IMPRINT]
        });
        if (TIME_STAMP_REQ_POLICY in asn1.result) this.reqPolicy = asn1.result[TIME_STAMP_REQ_POLICY].valueBlock.toString();
        if (TIME_STAMP_REQ_NONCE in asn1.result) this.nonce = asn1.result[TIME_STAMP_REQ_NONCE];
        if (TIME_STAMP_REQ_CERT_REQ in asn1.result) this.certReq = asn1.result[TIME_STAMP_REQ_CERT_REQ].valueBlock.value;
        if (TIME_STAMP_REQ_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TIME_STAMP_REQ_EXTENSIONS], (element)=>new Extension({
                schema: element
            })
        );
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(new Integer({
            value: this.version
        }));
        outputArray.push(this.messageImprint.toSchema());
        if (this.reqPolicy) outputArray.push(new ObjectIdentifier({
            value: this.reqPolicy
        }));
        if (this.nonce) outputArray.push(this.nonce);
        if (CERT_REQ in this && TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false) outputArray.push(new Boolean1({
            value: this.certReq
        }));
        if (this.extensions) {
            outputArray.push(new Constructed({
                idBlock: {
                    tagClass: 3,
                    tagNumber: 0
                },
                value: Array.from(this.extensions, (o101)=>o101.toSchema()
                )
            }));
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            version: this.version,
            messageImprint: this.messageImprint.toJSON()
        };
        if (this.reqPolicy !== undefined) res.reqPolicy = this.reqPolicy;
        if (this.nonce !== undefined) res.nonce = this.nonce.toJSON();
        if (this.certReq !== undefined && TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false) res.certReq = this.certReq;
        if (this.extensions) {
            res.extensions = Array.from(this.extensions, (o102)=>o102.toJSON()
            );
        }
        return res;
    }
}
TimeStampReq.CLASS_NAME = "TimeStampReq";
const STATUS = "status";
const TIME_STAMP_TOKEN = "timeStampToken";
const TIME_STAMP_RESP = "TimeStampResp";
const TIME_STAMP_RESP_STATUS = `${TIME_STAMP_RESP}.${STATUS}`;
const TIME_STAMP_RESP_TOKEN = `${TIME_STAMP_RESP}.${TIME_STAMP_TOKEN}`;
const CLEAR_PROPS = [
    TIME_STAMP_RESP_STATUS,
    TIME_STAMP_RESP_TOKEN
];
class TimeStampResp extends PkiObject {
    constructor(parameters = {}){
        super();
        this.status = getParametersValue(parameters, STATUS, TimeStampResp.defaultValues(STATUS));
        if (TIME_STAMP_TOKEN in parameters) {
            this.timeStampToken = getParametersValue(parameters, TIME_STAMP_TOKEN, TimeStampResp.defaultValues(TIME_STAMP_TOKEN));
        }
        if (parameters.schema) {
            this.fromSchema(parameters.schema);
        }
    }
    static defaultValues(memberName) {
        switch(memberName){
            case STATUS:
                return new PKIStatusInfo();
            case TIME_STAMP_TOKEN:
                return new ContentInfo();
            default:
                return super.defaultValues(memberName);
        }
    }
    static compareWithDefault(memberName, memberValue) {
        switch(memberName){
            case STATUS:
                return PKIStatusInfo.compareWithDefault(STATUS, memberValue.status) && "statusStrings" in memberValue === false && "failInfo" in memberValue === false;
            case TIME_STAMP_TOKEN:
                return memberValue.contentType === EMPTY_STRING1 && memberValue.content instanceof Any;
            default:
                return super.defaultValues(memberName);
        }
    }
    static schema(parameters = {}) {
        const names = getParametersValue(parameters, "names", {});
        return new Sequence({
            name: names.blockName || TIME_STAMP_RESP,
            value: [
                PKIStatusInfo.schema(names.status || {
                    names: {
                        blockName: TIME_STAMP_RESP_STATUS
                    }
                }),
                ContentInfo.schema(names.timeStampToken || {
                    names: {
                        blockName: TIME_STAMP_RESP_TOKEN,
                        optional: true
                    }
                })
            ]
        });
    }
    fromSchema(schema) {
        clearProps(schema, CLEAR_PROPS);
        const asn1 = compareSchema(schema, schema, TimeStampResp.schema());
        AsnError.assertSchema(asn1, this.className);
        this.status = new PKIStatusInfo({
            schema: asn1.result[TIME_STAMP_RESP_STATUS]
        });
        if (TIME_STAMP_RESP_TOKEN in asn1.result) this.timeStampToken = new ContentInfo({
            schema: asn1.result[TIME_STAMP_RESP_TOKEN]
        });
    }
    toSchema() {
        const outputArray = [];
        outputArray.push(this.status.toSchema());
        if (this.timeStampToken) {
            outputArray.push(this.timeStampToken.toSchema());
        }
        return new Sequence({
            value: outputArray
        });
    }
    toJSON() {
        const res = {
            status: this.status.toJSON()
        };
        if (this.timeStampToken) {
            res.timeStampToken = this.timeStampToken.toJSON();
        }
        return res;
    }
    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {
        this.assertContentType();
        const signed = new SignedData({
            schema: this.timeStampToken.content
        });
        return signed.sign(privateKey, 0, hashAlgorithm, undefined, crypto);
    }
    async verify(verificationParameters = {
        signer: 0,
        trustedCerts: [],
        data: EMPTY_BUFFER1
    }, crypto = getCrypto(true)) {
        this.assertContentType();
        const signed = new SignedData({
            schema: this.timeStampToken.content
        });
        return signed.verify(verificationParameters, crypto);
    }
    assertContentType() {
        if (!this.timeStampToken) {
            throw new Error("timeStampToken is absent in TSP response");
        }
        if (this.timeStampToken.contentType !== id_ContentType_SignedData) {
            throw new Error(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);
        }
    }
}
TimeStampResp.CLASS_NAME = "TimeStampResp";
function initCryptoEngine() {
    if (typeof self !== "undefined") {
        if ("crypto" in self) {
            let engineName = "webcrypto";
            if ("webkitSubtle" in self.crypto) {
                engineName = "safari";
            }
            setEngine(engineName, new CryptoEngine({
                name: engineName,
                crypto: crypto
            }));
        }
    } else if (typeof crypto !== "undefined" && "webcrypto" in crypto) {
        const name = "NodeJS ^15";
        const nodeCrypto = crypto.webcrypto;
        setEngine(name, new CryptoEngine({
            name,
            crypto: nodeCrypto
        }));
    }
}
initCryptoEngine();
let decoder1;
try {
    decoder1 = new TextDecoder();
} catch (error3) {}
let src;
let srcEnd;
let position = 0;
const EMPTY_ARRAY = [];
const LEGACY_RECORD_INLINE_ID = 105;
const PACKED_REFERENCE_TAG_ID = 6;
const STOP_CODE = {};
let strings = EMPTY_ARRAY;
let stringPosition = 0;
let currentDecoder = {};
let currentStructures;
let srcString;
let srcStringStart = 0;
let srcStringEnd = 0;
let bundledStrings;
let referenceMap;
let currentExtensions = [];
let currentExtensionRanges = [];
let packedValues;
let dataView;
let restoreMapsAsObject;
let defaultOptions = {
    useRecords: false,
    mapsAsObjects: true
};
let sequentialMode = false;
class Decoder {
    constructor(options){
        if (options) {
            if ((options.keyMap || options._keyMap) && !options.useRecords) {
                options.useRecords = false;
                options.mapsAsObjects = true;
            }
            if (options.useRecords === false && options.mapsAsObjects === undefined) options.mapsAsObjects = true;
            if (options.getStructures) options.getShared = options.getStructures;
            if (options.getShared && !options.structures) (options.structures = []).uninitialized = true;
            if (options.keyMap) {
                this.mapKey = new Map();
                for (let [k, v] of Object.entries(options.keyMap))this.mapKey.set(v, k);
            }
        }
        Object.assign(this, options);
    }
    decodeKey(key) {
        return this.keyMap ? this.mapKey.get(key) || key : key;
    }
    encodeKey(key) {
        return this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key;
    }
    encodeKeys(rec) {
        if (!this._keyMap) return rec;
        let map1 = new Map();
        for (let [k, v] of Object.entries(rec))map1.set(this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k, v);
        return map1;
    }
    decodeKeys(map2) {
        if (!this._keyMap || map2.constructor.name != 'Map') return map2;
        if (!this._mapKey) {
            this._mapKey = new Map();
            for (let [k, v] of Object.entries(this._keyMap))this._mapKey.set(v, k);
        }
        let res = {};
        map2.forEach((v, k)=>res[this._mapKey.has(k) ? this._mapKey.get(k) : k] = v
        );
        return res;
    }
    mapDecode(source, end) {
        let res = this.decode(source);
        if (this._keyMap) {
            switch(res.constructor.name){
                case 'Array':
                    return res.map((r1)=>this.decodeKeys(r1)
                    );
            }
        }
        return res;
    }
    decode(source, end) {
        if (src) {
            return saveState(()=>{
                clearSource();
                return this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end);
            });
        }
        srcEnd = end > -1 ? end : source.length;
        position = 0;
        stringPosition = 0;
        srcStringEnd = 0;
        srcString = null;
        strings = EMPTY_ARRAY;
        bundledStrings = null;
        src = source;
        try {
            dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));
        } catch (error1) {
            src = null;
            if (source instanceof Uint8Array) throw error1;
            throw new Error('Source must be a Uint8Array or Buffer but was a ' + (source && typeof source == 'object' ? source.constructor.name : typeof source));
        }
        if (this instanceof Decoder) {
            currentDecoder = this;
            packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);
            if (this.structures) {
                currentStructures = this.structures;
                return checkedRead();
            } else if (!currentStructures || currentStructures.length > 0) {
                currentStructures = [];
            }
        } else {
            currentDecoder = defaultOptions;
            if (!currentStructures || currentStructures.length > 0) currentStructures = [];
            packedValues = null;
        }
        return checkedRead();
    }
    decodeMultiple(source, forEach) {
        let values, lastPosition = 0;
        try {
            let size = source.length;
            sequentialMode = true;
            let value = this ? this.decode(source, size) : defaultDecoder.decode(source, size);
            if (forEach) {
                if (forEach(value) === false) {
                    return;
                }
                while(position < size){
                    lastPosition = position;
                    if (forEach(checkedRead()) === false) {
                        return;
                    }
                }
            } else {
                values = [
                    value
                ];
                while(position < size){
                    lastPosition = position;
                    values.push(checkedRead());
                }
                return values;
            }
        } catch (error2) {
            error2.lastPosition = lastPosition;
            error2.values = values;
            throw error2;
        } finally{
            sequentialMode = false;
            clearSource();
        }
    }
}
function checkedRead() {
    try {
        let result = read();
        if (bundledStrings) {
            if (position >= bundledStrings.postBundlePosition) {
                let error3 = new Error('Unexpected bundle position');
                error3.incomplete = true;
                throw error3;
            }
            position = bundledStrings.postBundlePosition;
        }
        if (position == srcEnd) {
            currentStructures = null;
            src = null;
            if (referenceMap) referenceMap = null;
        } else if (position > srcEnd) {
            let error4 = new Error('Unexpected end of CBOR data');
            error4.incomplete = true;
            throw error4;
        } else if (!sequentialMode) {
            throw new Error('Data read, but end of buffer not reached');
        }
        return result;
    } catch (error5) {
        clearSource();
        if (error5 instanceof RangeError || error5.message.startsWith('Unexpected end of buffer')) {
            error5.incomplete = true;
        }
        throw error5;
    }
}
function read() {
    let token = src[position++];
    let majorType = token >> 5;
    token = token & 31;
    if (token > 23) {
        switch(token){
            case 24:
                token = src[position++];
                break;
            case 25:
                if (majorType == 7) {
                    return getFloat16();
                }
                token = dataView.getUint16(position);
                position += 2;
                break;
            case 26:
                if (majorType == 7) {
                    let value = dataView.getFloat32(position);
                    if (currentDecoder.useFloat32 > 2) {
                        let multiplier = mult10[(src[position] & 127) << 1 | src[position + 1] >> 7];
                        position += 4;
                        return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;
                    }
                    position += 4;
                    return value;
                }
                token = dataView.getUint32(position);
                position += 4;
                break;
            case 27:
                if (majorType == 7) {
                    let value = dataView.getFloat64(position);
                    position += 8;
                    return value;
                }
                if (majorType > 1) {
                    if (dataView.getUint32(position) > 0) throw new Error('JavaScript does not support arrays, maps, or strings with length over 4294967295');
                    token = dataView.getUint32(position + 4);
                } else if (currentDecoder.int64AsNumber) {
                    token = dataView.getUint32(position) * 4294967296;
                    token += dataView.getUint32(position + 4);
                } else token = dataView.getBigUint64(position);
                position += 8;
                break;
            case 31:
                switch(majorType){
                    case 2:
                    case 3:
                        throw new Error('Indefinite length not supported for byte or text strings');
                    case 4:
                        let array = [];
                        let value, i2 = 0;
                        while((value = read()) != STOP_CODE){
                            array[i2++] = value;
                        }
                        return majorType == 4 ? array : majorType == 3 ? array.join('') : Buffer.concat(array);
                    case 5:
                        let key;
                        if (currentDecoder.mapsAsObjects) {
                            let object = {};
                            if (currentDecoder.keyMap) while((key = read()) != STOP_CODE)object[currentDecoder.decodeKey(key)] = read();
                            else while((key = read()) != STOP_CODE)object[key] = read();
                            return object;
                        } else {
                            if (restoreMapsAsObject) {
                                currentDecoder.mapsAsObjects = true;
                                restoreMapsAsObject = false;
                            }
                            let map3 = new Map();
                            if (currentDecoder.keyMap) while((key = read()) != STOP_CODE)map3.set(currentDecoder.decodeKey(key), read());
                            else while((key = read()) != STOP_CODE)map3.set(key, read());
                            return map3;
                        }
                    case 7:
                        return STOP_CODE;
                    default:
                        throw new Error('Invalid major type for indefinite length ' + majorType);
                }
            default:
                throw new Error('Unknown token ' + token);
        }
    }
    switch(majorType){
        case 0:
            return token;
        case 1:
            return ~token;
        case 2:
            return readBin(token);
        case 3:
            if (srcStringEnd >= position) {
                return srcString.slice(position - srcStringStart, (position += token) - srcStringStart);
            }
            if (srcStringEnd == 0 && srcEnd < 140 && token < 32) {
                let string = token < 16 ? shortStringInJS(token) : longStringInJS(token);
                if (string != null) return string;
            }
            return readFixedString(token);
        case 4:
            let array = new Array(token);
            for(let i3 = 0; i3 < token; i3++)array[i3] = read();
            return array;
        case 5:
            if (currentDecoder.mapsAsObjects) {
                let object = {};
                if (currentDecoder.keyMap) for(let i5 = 0; i5 < token; i5++)object[currentDecoder.decodeKey(read())] = read();
                else for(let i4 = 0; i4 < token; i4++)object[read()] = read();
                return object;
            } else {
                if (restoreMapsAsObject) {
                    currentDecoder.mapsAsObjects = true;
                    restoreMapsAsObject = false;
                }
                let map4 = new Map();
                if (currentDecoder.keyMap) for(let i7 = 0; i7 < token; i7++)map4.set(currentDecoder.decodeKey(read()), read());
                else for(let i6 = 0; i6 < token; i6++)map4.set(read(), read());
                return map4;
            }
        case 6:
            if (token >= 57337) {
                let structure = currentStructures[token & 8191];
                if (structure) {
                    if (!structure.read) structure.read = createStructureReader(structure);
                    return structure.read();
                }
                if (token < 65536) {
                    if (token == 57343) return recordDefinition(read());
                    else if (token == 57342) {
                        let length = readJustLength();
                        let id = read();
                        for(let i8 = 2; i8 < length; i8++){
                            recordDefinition([
                                id++,
                                read()
                            ]);
                        }
                        return read();
                    } else if (token == 57337) {
                        return readBundleExt();
                    }
                    if (currentDecoder.getShared) {
                        loadShared();
                        structure = currentStructures[token & 8191];
                        if (structure) {
                            if (!structure.read) structure.read = createStructureReader(structure);
                            return structure.read();
                        }
                    }
                }
            }
            let extension = currentExtensions[token];
            if (extension) {
                if (extension.handlesRead) return extension(read);
                else return extension(read());
            } else {
                let input = read();
                for(let i9 = 0; i9 < currentExtensionRanges.length; i9++){
                    let value = currentExtensionRanges[i9](token, input);
                    if (value !== undefined) return value;
                }
                return new Tag(input, token);
            }
        case 7:
            switch(token){
                case 20:
                    return false;
                case 21:
                    return true;
                case 22:
                    return null;
                case 23:
                    return;
                case 31:
                default:
                    let packedValue = (packedValues || getPackedValues())[token];
                    if (packedValue !== undefined) return packedValue;
                    throw new Error('Unknown token ' + token);
            }
        default:
            if (isNaN(token)) {
                let error6 = new Error('Unexpected end of CBOR data');
                error6.incomplete = true;
                throw error6;
            }
            throw new Error('Unknown CBOR token ' + token);
    }
}
const validName = /^[a-zA-Z_$][a-zA-Z\d_$]*$/;
function createStructureReader(structure) {
    function readObject() {
        let length = src[position++];
        length = length & 31;
        if (length > 23) {
            switch(length){
                case 24:
                    length = src[position++];
                    break;
                case 25:
                    length = dataView.getUint16(position);
                    position += 2;
                    break;
                case 26:
                    length = dataView.getUint32(position);
                    position += 4;
                    break;
                default:
                    throw new Error('Expected array header, but got ' + src[position - 1]);
            }
        }
        let compiledReader = this.compiledReader;
        while(compiledReader){
            if (compiledReader.propertyCount === length) return compiledReader(read);
            compiledReader = compiledReader.next;
        }
        if (this.slowReads++ >= 3) {
            let array = this.length == length ? this : this.slice(0, length);
            compiledReader = currentDecoder.keyMap ? new Function('r', 'return {' + array.map((k)=>currentDecoder.decodeKey(k)
            ).map((k)=>validName.test(k) ? k + ':r()' : '[' + JSON.stringify(k) + ']:r()'
            ).join(',') + '}') : new Function('r', 'return {' + array.map((key)=>validName.test(key) ? key + ':r()' : '[' + JSON.stringify(key) + ']:r()'
            ).join(',') + '}');
            if (this.compiledReader) compiledReader.next = this.compiledReader;
            compiledReader.propertyCount = length;
            this.compiledReader = compiledReader;
            return compiledReader(read);
        }
        let object = {};
        if (currentDecoder.keyMap) for(let i11 = 0; i11 < length; i11++)object[currentDecoder.decodeKey(this[i11])] = read();
        else for(let i10 = 0; i10 < length; i10++)object[this[i10]] = read();
        return object;
    }
    structure.slowReads = 0;
    return readObject;
}
let readFixedString = readStringJS;
let isNativeAccelerationEnabled = false;
function readStringJS(length) {
    let result;
    if (length < 16) {
        if (result = shortStringInJS(length)) return result;
    }
    if (length > 64 && decoder1) return decoder1.decode(src.subarray(position, position += length));
    const end = position + length;
    const units = [];
    result = '';
    while(position < end){
        const byte1 = src[position++];
        if ((byte1 & 128) === 0) {
            units.push(byte1);
        } else if ((byte1 & 224) === 192) {
            const byte2 = src[position++] & 63;
            units.push((byte1 & 31) << 6 | byte2);
        } else if ((byte1 & 240) === 224) {
            const byte2 = src[position++] & 63;
            const byte3 = src[position++] & 63;
            units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
        } else if ((byte1 & 248) === 240) {
            const byte2 = src[position++] & 63;
            const byte3 = src[position++] & 63;
            const byte4 = src[position++] & 63;
            let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
            if (unit > 65535) {
                unit -= 65536;
                units.push(unit >>> 10 & 1023 | 55296);
                unit = 56320 | unit & 1023;
            }
            units.push(unit);
        } else {
            units.push(byte1);
        }
        if (units.length >= 4096) {
            result += fromCharCode.apply(String, units);
            units.length = 0;
        }
    }
    if (units.length > 0) {
        result += fromCharCode.apply(String, units);
    }
    return result;
}
let fromCharCode = String.fromCharCode;
function longStringInJS(length) {
    let start = position;
    let bytes = new Array(length);
    for(let i12 = 0; i12 < length; i12++){
        const __byte = src[position++];
        if ((__byte & 128) > 0) {
            position = start;
            return;
        }
        bytes[i12] = __byte;
    }
    return fromCharCode.apply(String, bytes);
}
function shortStringInJS(length) {
    if (length < 4) {
        if (length < 2) {
            if (length === 0) return '';
            else {
                let a4 = src[position++];
                if ((a4 & 128) > 1) {
                    position -= 1;
                    return;
                }
                return fromCharCode(a4);
            }
        } else {
            let a5 = src[position++];
            let b = src[position++];
            if ((a5 & 128) > 0 || (b & 128) > 0) {
                position -= 2;
                return;
            }
            if (length < 3) return fromCharCode(a5, b);
            let c = src[position++];
            if ((c & 128) > 0) {
                position -= 3;
                return;
            }
            return fromCharCode(a5, b, c);
        }
    } else {
        let a6 = src[position++];
        let b = src[position++];
        let c = src[position++];
        let d = src[position++];
        if ((a6 & 128) > 0 || (b & 128) > 0 || (c & 128) > 0 || (d & 128) > 0) {
            position -= 4;
            return;
        }
        if (length < 6) {
            if (length === 4) return fromCharCode(a6, b, c, d);
            else {
                let e4 = src[position++];
                if ((e4 & 128) > 0) {
                    position -= 5;
                    return;
                }
                return fromCharCode(a6, b, c, d, e4);
            }
        } else if (length < 8) {
            let e5 = src[position++];
            let f = src[position++];
            if ((e5 & 128) > 0 || (f & 128) > 0) {
                position -= 6;
                return;
            }
            if (length < 7) return fromCharCode(a6, b, c, d, e5, f);
            let g = src[position++];
            if ((g & 128) > 0) {
                position -= 7;
                return;
            }
            return fromCharCode(a6, b, c, d, e5, f, g);
        } else {
            let e6 = src[position++];
            let f = src[position++];
            let g = src[position++];
            let h = src[position++];
            if ((e6 & 128) > 0 || (f & 128) > 0 || (g & 128) > 0 || (h & 128) > 0) {
                position -= 8;
                return;
            }
            if (length < 10) {
                if (length === 8) return fromCharCode(a6, b, c, d, e6, f, g, h);
                else {
                    let i13 = src[position++];
                    if ((i13 & 128) > 0) {
                        position -= 9;
                        return;
                    }
                    return fromCharCode(a6, b, c, d, e6, f, g, h, i13);
                }
            } else if (length < 12) {
                let i14 = src[position++];
                let j = src[position++];
                if ((i14 & 128) > 0 || (j & 128) > 0) {
                    position -= 10;
                    return;
                }
                if (length < 11) return fromCharCode(a6, b, c, d, e6, f, g, h, i14, j);
                let k = src[position++];
                if ((k & 128) > 0) {
                    position -= 11;
                    return;
                }
                return fromCharCode(a6, b, c, d, e6, f, g, h, i14, j, k);
            } else {
                let i15 = src[position++];
                let j = src[position++];
                let k = src[position++];
                let l = src[position++];
                if ((i15 & 128) > 0 || (j & 128) > 0 || (k & 128) > 0 || (l & 128) > 0) {
                    position -= 12;
                    return;
                }
                if (length < 14) {
                    if (length === 12) return fromCharCode(a6, b, c, d, e6, f, g, h, i15, j, k, l);
                    else {
                        let m = src[position++];
                        if ((m & 128) > 0) {
                            position -= 13;
                            return;
                        }
                        return fromCharCode(a6, b, c, d, e6, f, g, h, i15, j, k, l, m);
                    }
                } else {
                    let m = src[position++];
                    let n5 = src[position++];
                    if ((m & 128) > 0 || (n5 & 128) > 0) {
                        position -= 14;
                        return;
                    }
                    if (length < 15) return fromCharCode(a6, b, c, d, e6, f, g, h, i15, j, k, l, m, n5);
                    let o103 = src[position++];
                    if ((o103 & 128) > 0) {
                        position -= 15;
                        return;
                    }
                    return fromCharCode(a6, b, c, d, e6, f, g, h, i15, j, k, l, m, n5, o103);
                }
            }
        }
    }
}
function readBin(length) {
    return currentDecoder.copyBuffers ? Uint8Array.prototype.slice.call(src, position, position += length) : src.subarray(position, position += length);
}
function getFloat16() {
    let byte0 = src[position++];
    let byte1 = src[position++];
    let half = (byte0 << 8) + byte1;
    let exp = half >> 10 & 31;
    let mant = half & 1023;
    let val;
    if (exp == 0) val = Math.exp(mant, -24);
    else if (exp != 31) val = Math.exp(mant + 1024, exp - 25);
    else val = mant == 0 ? Infinity : NaN;
    return half & 32768 ? -val : val;
}
new Array(4096);
class Tag {
    constructor(value, tag){
        this.value = value;
        this.tag = tag;
    }
}
currentExtensions[0] = (dateString)=>{
    return new Date(dateString);
};
currentExtensions[1] = (epochSec)=>{
    return new Date(Math.round(epochSec * 1000));
};
currentExtensions[2] = (buffer)=>{
    let value = BigInt(0);
    for(let i17 = 0, l = buffer.byteLength; i17 < l; i17++){
        value = BigInt(buffer[i17]) + value << BigInt(8);
    }
    return value;
};
currentExtensions[3] = (buffer)=>{
    return BigInt(-1) - currentExtensions[2](buffer);
};
currentExtensions[4] = (fraction)=>{
    return +(fraction[1] + 'e' + fraction[0]);
};
currentExtensions[5] = (fraction)=>{
    return fraction[1] * Math.exp(fraction[0] * Math.log(2));
};
const recordDefinition = (definition)=>{
    let id = definition[0] - 57344;
    let structure = definition[1];
    let existingStructure = currentStructures[id];
    if (existingStructure && existingStructure.isShared) {
        (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;
    }
    currentStructures[id] = structure;
    structure.read = createStructureReader(structure);
    let object = {};
    if (currentDecoder.keyMap) for(let i19 = 2, l = definition.length; i19 < l; i19++){
        let key = currentDecoder.decodeKey(structure[i19 - 2]);
        object[key] = definition[i19];
    }
    else for(let i18 = 2, l1 = definition.length; i18 < l1; i18++){
        let key = structure[i18 - 2];
        object[key] = definition[i18];
    }
    return object;
};
currentExtensions[LEGACY_RECORD_INLINE_ID] = recordDefinition;
currentExtensions[14] = (value)=>{
    if (bundledStrings) return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value);
    return new Tag(value, 14);
};
currentExtensions[15] = (value)=>{
    if (bundledStrings) return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);
    return new Tag(value, 15);
};
let glbl = {
    Error,
    RegExp
};
currentExtensions[27] = (data)=>{
    return (glbl[data[0]] || Error)(data[1], data[2]);
};
const packedTable = (read1)=>{
    if (src[position++] != 132) throw new Error('Packed values structure must be followed by a 4 element array');
    let newPackedValues = read1();
    packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;
    packedValues.prefixes = read1();
    packedValues.suffixes = read1();
    return read1();
};
packedTable.handlesRead = true;
currentExtensions[51] = packedTable;
currentExtensions[PACKED_REFERENCE_TAG_ID] = (data)=>{
    if (!packedValues) {
        if (currentDecoder.getShared) loadShared();
        else return new Tag(data, PACKED_REFERENCE_TAG_ID);
    }
    if (typeof data == 'number') return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];
    throw new Error('No support for non-integer packed references yet');
};
currentExtensions[25] = (id)=>{
    return stringRefs[id];
};
currentExtensions[256] = (read2)=>{
    stringRefs = [];
    try {
        return read2();
    } finally{
        stringRefs = null;
    }
};
currentExtensions[256].handlesRead = true;
currentExtensions[28] = (read3)=>{
    if (!referenceMap) {
        referenceMap = new Map();
        referenceMap.id = 0;
    }
    let id = referenceMap.id++;
    let token = src[position];
    let target8;
    if (token >> 5 == 4) target8 = [];
    else target8 = {};
    let refEntry = {
        target: target8
    };
    referenceMap.set(id, refEntry);
    let targetProperties = read3();
    if (refEntry.used) return Object.assign(target8, targetProperties);
    refEntry.target = targetProperties;
    return targetProperties;
};
currentExtensions[28].handlesRead = true;
currentExtensions[29] = (id)=>{
    let refEntry = referenceMap.get(id);
    refEntry.used = true;
    return refEntry.target;
};
currentExtensions[258] = (array)=>new Set(array)
;
(currentExtensions[259] = (read4)=>{
    if (currentDecoder.mapsAsObjects) {
        currentDecoder.mapsAsObjects = false;
        restoreMapsAsObject = true;
    }
    return read4();
}).handlesRead = true;
function combine(a7, b) {
    if (typeof a7 === 'string') return a7 + b;
    if (a7 instanceof Array) return a7.concat(b);
    return Object.assign({}, a7, b);
}
function getPackedValues() {
    if (!packedValues) {
        if (currentDecoder.getShared) loadShared();
        else throw new Error('No packed values available');
    }
    return packedValues;
}
currentExtensionRanges.push((tag, input)=>{
    if (tag >= 225 && tag <= 255) return combine(getPackedValues().prefixes[tag - 224], input);
    if (tag >= 28704 && tag <= 32767) return combine(getPackedValues().prefixes[tag - 28672], input);
    if (tag >= 1879052288 && tag <= 2147483647) return combine(getPackedValues().prefixes[tag - 1879048192], input);
    if (tag >= 216 && tag <= 223) return combine(input, getPackedValues().suffixes[tag - 216]);
    if (tag >= 27647 && tag <= 28671) return combine(input, getPackedValues().suffixes[tag - 27639]);
    if (tag >= 1811940352 && tag <= 1879048191) return combine(input, getPackedValues().suffixes[tag - 1811939328]);
    if (tag == 1399353956) {
        return {
            packedValues: packedValues,
            structures: currentStructures.slice(0),
            version: input
        };
    }
    if (tag == 55799) return input;
});
const isLittleEndianMachine = new Uint8Array(new Uint16Array([
    1
]).buffer)[0] == 1;
const typedArrays = [
    Uint8Array,
    Uint8ClampedArray,
    Uint16Array,
    Uint32Array,
    typeof BigUint64Array == 'undefined' ? {
        name: 'BigUint64Array'
    } : BigUint64Array,
    Int8Array,
    Int16Array,
    Int32Array,
    typeof BigInt64Array == 'undefined' ? {
        name: 'BigInt64Array'
    } : BigInt64Array,
    Float32Array,
    Float64Array
];
const typedArrayTags = [
    64,
    68,
    69,
    70,
    71,
    72,
    77,
    78,
    79,
    85,
    86
];
for(let i1 = 0; i1 < typedArrays.length; i1++){
    registerTypedArray(typedArrays[i1], typedArrayTags[i1]);
}
function registerTypedArray(TypedArray, tag) {
    let dvMethod = 'get' + TypedArray.name.slice(0, -5);
    if (typeof TypedArray !== 'function') TypedArray = null;
    let bytesPerElement = TypedArray.BYTES_PER_ELEMENT;
    for(let littleEndian = 0; littleEndian < 2; littleEndian++){
        if (!littleEndian && bytesPerElement == 1) continue;
        let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : 3;
        currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine ? (buffer)=>{
            if (!TypedArray) throw new Error('Could not find typed array for code ' + tag);
            return new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer);
        } : (buffer)=>{
            if (!TypedArray) throw new Error('Could not find typed array for code ' + tag);
            let dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
            let elements = buffer.length >> sizeShift;
            let ta = new TypedArray(elements);
            let method = dv[dvMethod];
            for(let i20 = 0; i20 < elements; i20++){
                ta[i20] = method.call(dv, i20 << sizeShift, littleEndian);
            }
            return ta;
        };
    }
}
function readBundleExt() {
    let length = readJustLength();
    let bundlePosition = position + read();
    for(let i21 = 2; i21 < length; i21++){
        let bundleLength = readJustLength();
        position += bundleLength;
    }
    let dataPosition = position;
    position = bundlePosition;
    bundledStrings = [
        readStringJS(readJustLength()),
        readStringJS(readJustLength())
    ];
    bundledStrings.position0 = 0;
    bundledStrings.position1 = 0;
    bundledStrings.postBundlePosition = position;
    position = dataPosition;
    return read();
}
function readJustLength() {
    let token = src[position++] & 31;
    if (token > 23) {
        switch(token){
            case 24:
                token = src[position++];
                break;
            case 25:
                token = dataView.getUint16(position);
                position += 2;
                break;
            case 26:
                token = dataView.getUint32(position);
                position += 4;
                break;
        }
    }
    return token;
}
function loadShared() {
    if (currentDecoder.getShared) {
        let sharedData = saveState(()=>{
            src = null;
            return currentDecoder.getShared();
        }) || {};
        let updatedStructures = sharedData.structures || [];
        currentDecoder.sharedVersion = sharedData.version;
        packedValues = currentDecoder.sharedValues = sharedData.packedValues;
        if (currentStructures === true) currentDecoder.structures = currentStructures = updatedStructures;
        else currentStructures.splice.apply(currentStructures, [
            0,
            updatedStructures.length
        ].concat(updatedStructures));
    }
}
function saveState(callback) {
    let savedSrcEnd = srcEnd;
    let savedPosition = position;
    let savedStringPosition = stringPosition;
    let savedSrcStringStart = srcStringStart;
    let savedSrcStringEnd = srcStringEnd;
    let savedSrcString = srcString;
    let savedStrings = strings;
    let savedReferenceMap = referenceMap;
    let savedBundledStrings = bundledStrings;
    let savedSrc = new Uint8Array(src.slice(0, srcEnd));
    let savedStructures = currentStructures;
    let savedDecoder = currentDecoder;
    let savedSequentialMode = sequentialMode;
    let value = callback();
    srcEnd = savedSrcEnd;
    position = savedPosition;
    stringPosition = savedStringPosition;
    srcStringStart = savedSrcStringStart;
    srcStringEnd = savedSrcStringEnd;
    srcString = savedSrcString;
    strings = savedStrings;
    referenceMap = savedReferenceMap;
    bundledStrings = savedBundledStrings;
    src = savedSrc;
    sequentialMode = savedSequentialMode;
    currentStructures = savedStructures;
    currentDecoder = savedDecoder;
    dataView = new DataView(src.buffer, src.byteOffset, src.byteLength);
    return value;
}
function clearSource() {
    src = null;
    referenceMap = null;
    currentStructures = null;
}
function addExtension(extension) {
    currentExtensions[extension.tag] = extension.decode;
}
const mult10 = new Array(147);
for(let i118 = 0; i118 < 256; i118++){
    mult10[i118] = +('1e' + Math.floor(45.15 - i118 * 0.30103));
}
let defaultDecoder = new Decoder({
    useRecords: false
});
const decode2 = defaultDecoder.decode;
const decodeMultiple = defaultDecoder.decodeMultiple;
const FLOAT32_OPTIONS = {
    NEVER: 0,
    ALWAYS: 1,
    DECIMAL_ROUND: 3,
    DECIMAL_FIT: 4
};
let f32Array = new Float32Array(1);
let u8Array = new Uint8Array(f32Array.buffer, 0, 4);
function roundFloat32(float32Number) {
    f32Array[0] = float32Number;
    let multiplier = mult10[(u8Array[3] & 127) << 1 | u8Array[2] >> 7];
    return (multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5) >> 0) / multiplier;
}
let textEncoder;
try {
    textEncoder = new TextEncoder();
} catch (error4) {}
let extensions, extensionClasses;
const hasNodeBuffer = typeof Buffer !== 'undefined';
const ByteArrayAllocate = hasNodeBuffer ? Buffer.allocUnsafeSlow : Uint8Array;
const ByteArray = hasNodeBuffer ? Buffer : Uint8Array;
const MAX_BUFFER_SIZE = hasNodeBuffer ? 4294967296 : 2144337920;
let target;
let targetView;
let position1 = 0;
let safeEnd;
let bundledStrings1 = null;
const hasNonLatin = /[\u0080-\uFFFF]/;
const RECORD_SYMBOL = Symbol('record-id');
class Encoder extends Decoder {
    constructor(options1){
        super(options1);
        this.offset = 0;
        let start;
        let sharedStructures;
        let hasSharedUpdate;
        let structures;
        let referenceMap1;
        options1 = options1 || {};
        let encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position11, maxBytes) {
            return target.utf8Write(string, position11, maxBytes);
        } : textEncoder && textEncoder.encodeInto ? function(string, position2) {
            return textEncoder.encodeInto(string, target.subarray(position2)).written;
        } : false;
        let encoder1 = this;
        let hasSharedStructures = options1.structures || options1.saveStructures;
        let maxSharedStructures = options1.maxSharedStructures;
        if (maxSharedStructures == null) maxSharedStructures = hasSharedStructures ? 128 : 0;
        if (maxSharedStructures > 8190) throw new Error('Maximum maxSharedStructure is 8190');
        let isSequential = options1.sequential;
        if (isSequential) {
            maxSharedStructures = 0;
        }
        if (!this.structures) this.structures = [];
        if (this.saveStructures) this.saveShared = this.saveStructures;
        let samplingPackedValues, packedObjectMap, sharedValues1 = options1.sharedValues;
        let sharedPackedObjectMap;
        if (sharedValues1) {
            sharedPackedObjectMap = Object.create(null);
            for(let i119 = 0, l = sharedValues1.length; i119 < l; i119++){
                sharedPackedObjectMap[sharedValues1[i119]] = i119;
            }
        }
        let recordIdsToRemove = [];
        let transitionsCount = 0;
        let serializationsSinceTransitionRebuild = 0;
        this.mapEncode = function(value, encodeOptions) {
            if (this._keyMap && !this._mapped) {
                switch(value.constructor.name){
                    case 'Array':
                        value = value.map((r2)=>this.encodeKeys(r2)
                        );
                        break;
                }
            }
            return this.encode(value, encodeOptions);
        };
        this.encode = function(value, encodeOptions) {
            if (!target) {
                target = new ByteArrayAllocate(8192);
                targetView = new DataView(target.buffer, 0, 8192);
                position1 = 0;
            }
            safeEnd = target.length - 10;
            if (safeEnd - position1 < 2048) {
                target = new ByteArrayAllocate(target.length);
                targetView = new DataView(target.buffer, 0, target.length);
                safeEnd = target.length - 10;
                position1 = 0;
            } else if (encodeOptions === REUSE_BUFFER_MODE) position1 = position1 + 7 & 2147483640;
            start = position1;
            if (encoder1.useSelfDescribedHeader) {
                targetView.setUint32(position1, 3654940416);
                position1 += 3;
            }
            referenceMap1 = encoder1.structuredClone ? new Map() : null;
            if (encoder1.bundleStrings && typeof value !== 'string') {
                bundledStrings1 = [];
                bundledStrings1.size = Infinity;
            } else bundledStrings1 = null;
            sharedStructures = encoder1.structures;
            if (sharedStructures) {
                if (sharedStructures.uninitialized) {
                    let sharedData = encoder1.getShared() || {};
                    encoder1.structures = sharedStructures = sharedData.structures || [];
                    encoder1.sharedVersion = sharedData.version;
                    let sharedValues = encoder1.sharedValues = sharedData.packedValues;
                    if (sharedValues) {
                        sharedPackedObjectMap = {};
                        for(let i120 = 0, l = sharedValues.length; i120 < l; i120++)sharedPackedObjectMap[sharedValues[i120]] = i120;
                    }
                }
                let sharedStructuresLength = sharedStructures.length;
                if (sharedStructuresLength > maxSharedStructures && !isSequential) sharedStructuresLength = maxSharedStructures;
                if (!sharedStructures.transitions) {
                    sharedStructures.transitions = Object.create(null);
                    for(let i121 = 0; i121 < sharedStructuresLength; i121++){
                        let keys = sharedStructures[i121];
                        if (!keys) continue;
                        let nextTransition, transition = sharedStructures.transitions;
                        for(let j = 0, l = keys.length; j < l; j++){
                            if (transition[RECORD_SYMBOL] === undefined) transition[RECORD_SYMBOL] = i121;
                            let key = keys[j];
                            nextTransition = transition[key];
                            if (!nextTransition) {
                                nextTransition = transition[key] = Object.create(null);
                            }
                            transition = nextTransition;
                        }
                        transition[RECORD_SYMBOL] = i121 | 1048576;
                    }
                }
                if (!isSequential) sharedStructures.nextId = sharedStructuresLength;
            }
            if (hasSharedUpdate) hasSharedUpdate = false;
            structures = sharedStructures || [];
            packedObjectMap = sharedPackedObjectMap;
            if (options1.pack) {
                let packedValues1 = new Map();
                packedValues1.values = [];
                packedValues1.encoder = encoder1;
                packedValues1.maxValues = options1.maxPrivatePackedValues || (sharedPackedObjectMap ? 16 : Infinity);
                packedValues1.objectMap = sharedPackedObjectMap || false;
                packedValues1.samplingPackedValues = samplingPackedValues;
                findRepetitiveStrings(value, packedValues1);
                if (packedValues1.values.length > 0) {
                    target[position1++] = 216;
                    target[position1++] = 51;
                    writeArrayHeader(4);
                    let valuesArray = packedValues1.values;
                    encode1(valuesArray);
                    writeArrayHeader(0);
                    writeArrayHeader(0);
                    packedObjectMap = Object.create(sharedPackedObjectMap || null);
                    for(let i122 = 0, l = valuesArray.length; i122 < l; i122++){
                        packedObjectMap[valuesArray[i122]] = i122;
                    }
                }
            }
            try {
                encode1(value);
                if (bundledStrings1) {
                    writeBundles(start, encode1);
                }
                encoder1.offset = position1;
                if (referenceMap1 && referenceMap1.idsToInsert) {
                    position1 += referenceMap1.idsToInsert.length * 2;
                    if (position1 > safeEnd) makeRoom(position1);
                    encoder1.offset = position1;
                    let serialized = insertIds(target.subarray(start, position1), referenceMap1.idsToInsert);
                    referenceMap1 = null;
                    return serialized;
                }
                if (encodeOptions & REUSE_BUFFER_MODE) {
                    target.start = start;
                    target.end = position1;
                    return target;
                }
                return target.subarray(start, position1);
            } finally{
                if (sharedStructures) {
                    if (serializationsSinceTransitionRebuild < 10) serializationsSinceTransitionRebuild++;
                    if (sharedStructures.length > maxSharedStructures) sharedStructures.length = maxSharedStructures;
                    if (transitionsCount > 10000) {
                        sharedStructures.transitions = null;
                        serializationsSinceTransitionRebuild = 0;
                        transitionsCount = 0;
                        if (recordIdsToRemove.length > 0) recordIdsToRemove = [];
                    } else if (recordIdsToRemove.length > 0 && !isSequential) {
                        for(let i123 = 0, l = recordIdsToRemove.length; i123 < l; i123++){
                            recordIdsToRemove[i123][RECORD_SYMBOL] = undefined;
                        }
                        recordIdsToRemove = [];
                    }
                }
                if (hasSharedUpdate && encoder1.saveShared) {
                    if (encoder1.structures.length > maxSharedStructures) {
                        encoder1.structures = encoder1.structures.slice(0, maxSharedStructures);
                    }
                    let returnBuffer = target.subarray(start, position1);
                    if (encoder1.updateSharedData() === false) return encoder1.encode(value);
                    return returnBuffer;
                }
                if (encodeOptions & RESET_BUFFER_MODE) position1 = start;
            }
        };
        this.findCommonStringsToPack = ()=>{
            samplingPackedValues = new Map();
            if (!sharedPackedObjectMap) sharedPackedObjectMap = Object.create(null);
            return (options)=>{
                let threshold = options && options.threshold || 4;
                let position3 = this.pack ? options.maxPrivatePackedValues || 16 : 0;
                if (!sharedValues1) sharedValues1 = this.sharedValues = [];
                for (let [key, status] of samplingPackedValues){
                    if (status.count > threshold) {
                        sharedPackedObjectMap[key] = position3++;
                        sharedValues1.push(key);
                        hasSharedUpdate = true;
                    }
                }
                while(this.saveShared && this.updateSharedData() === false){}
                samplingPackedValues = null;
            };
        };
        const encode1 = (value)=>{
            if (position1 > safeEnd) target = makeRoom(position1);
            var type = typeof value;
            var length;
            if (type === 'string') {
                if (packedObjectMap) {
                    let packedPosition = packedObjectMap[value];
                    if (packedPosition >= 0) {
                        if (packedPosition < 16) target[position1++] = packedPosition + 224;
                        else {
                            target[position1++] = 198;
                            if (packedPosition & 1) encode1(15 - packedPosition >> 1);
                            else encode1(packedPosition - 16 >> 1);
                        }
                        return;
                    } else if (samplingPackedValues && !options1.pack) {
                        let status = samplingPackedValues.get(value);
                        if (status) status.count++;
                        else samplingPackedValues.set(value, {
                            count: 1
                        });
                    }
                }
                let strLength = value.length;
                if (bundledStrings1 && strLength >= 4 && strLength < 1024) {
                    if ((bundledStrings1.size += strLength) > 61440) {
                        let extStart;
                        let maxBytes = (bundledStrings1[0] ? bundledStrings1[0].length * 3 + bundledStrings1[1].length : 0) + 10;
                        if (position1 + maxBytes > safeEnd) target = makeRoom(position1 + maxBytes);
                        target[position1++] = 217;
                        target[position1++] = 223;
                        target[position1++] = 249;
                        target[position1++] = bundledStrings1.position ? 132 : 130;
                        target[position1++] = 26;
                        extStart = position1 - start;
                        position1 += 4;
                        if (bundledStrings1.position) {
                            writeBundles(start, encode1);
                        }
                        bundledStrings1 = [
                            '',
                            ''
                        ];
                        bundledStrings1.size = 0;
                        bundledStrings1.position = extStart;
                    }
                    let twoByte = hasNonLatin.test(value);
                    bundledStrings1[twoByte ? 0 : 1] += value;
                    target[position1++] = twoByte ? 206 : 207;
                    encode1(strLength);
                    return;
                }
                let headerSize;
                if (strLength < 32) {
                    headerSize = 1;
                } else if (strLength < 256) {
                    headerSize = 2;
                } else if (strLength < 65536) {
                    headerSize = 3;
                } else {
                    headerSize = 5;
                }
                let maxBytes = strLength * 3;
                if (position1 + maxBytes > safeEnd) target = makeRoom(position1 + maxBytes);
                if (strLength < 64 || !encodeUtf8) {
                    let i124, c1, c2, strPosition = position1 + headerSize;
                    for(i124 = 0; i124 < strLength; i124++){
                        c1 = value.charCodeAt(i124);
                        if (c1 < 128) {
                            target[strPosition++] = c1;
                        } else if (c1 < 2048) {
                            target[strPosition++] = c1 >> 6 | 192;
                            target[strPosition++] = c1 & 63 | 128;
                        } else if ((c1 & 64512) === 55296 && ((c2 = value.charCodeAt(i124 + 1)) & 64512) === 56320) {
                            c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
                            i124++;
                            target[strPosition++] = c1 >> 18 | 240;
                            target[strPosition++] = c1 >> 12 & 63 | 128;
                            target[strPosition++] = c1 >> 6 & 63 | 128;
                            target[strPosition++] = c1 & 63 | 128;
                        } else {
                            target[strPosition++] = c1 >> 12 | 224;
                            target[strPosition++] = c1 >> 6 & 63 | 128;
                            target[strPosition++] = c1 & 63 | 128;
                        }
                    }
                    length = strPosition - position1 - headerSize;
                } else {
                    length = encodeUtf8(value, position1 + headerSize, maxBytes);
                }
                if (length < 24) {
                    target[position1++] = 96 | length;
                } else if (length < 256) {
                    if (headerSize < 2) {
                        target.copyWithin(position1 + 2, position1 + 1, position1 + 1 + length);
                    }
                    target[position1++] = 120;
                    target[position1++] = length;
                } else if (length < 65536) {
                    if (headerSize < 3) {
                        target.copyWithin(position1 + 3, position1 + 2, position1 + 2 + length);
                    }
                    target[position1++] = 121;
                    target[position1++] = length >> 8;
                    target[position1++] = length & 255;
                } else {
                    if (headerSize < 5) {
                        target.copyWithin(position1 + 5, position1 + 3, position1 + 3 + length);
                    }
                    target[position1++] = 122;
                    targetView.setUint32(position1, length);
                    position1 += 4;
                }
                position1 += length;
            } else if (type === 'number') {
                if (value >>> 0 === value) {
                    if (value < 24) {
                        target[position1++] = value;
                    } else if (value < 256) {
                        target[position1++] = 24;
                        target[position1++] = value;
                    } else if (value < 65536) {
                        target[position1++] = 25;
                        target[position1++] = value >> 8;
                        target[position1++] = value & 255;
                    } else {
                        target[position1++] = 26;
                        targetView.setUint32(position1, value);
                        position1 += 4;
                    }
                } else if (value >> 0 === value) {
                    if (value >= -24) {
                        target[position1++] = 31 - value;
                    } else if (value >= -256) {
                        target[position1++] = 56;
                        target[position1++] = ~value;
                    } else if (value >= -65536) {
                        target[position1++] = 57;
                        targetView.setUint16(position1, ~value);
                        position1 += 2;
                    } else {
                        target[position1++] = 58;
                        targetView.setUint32(position1, ~value);
                        position1 += 4;
                    }
                } else {
                    let useFloat32;
                    if ((useFloat32 = this.useFloat32) > 0 && value < 4294967296 && value >= -2147483648) {
                        target[position1++] = 250;
                        targetView.setFloat32(position1, value);
                        let xShifted;
                        if (useFloat32 < 4 || (xShifted = value * mult10[(target[position1] & 127) << 1 | target[position1 + 1] >> 7]) >> 0 === xShifted) {
                            position1 += 4;
                            return;
                        } else position1--;
                    }
                    target[position1++] = 251;
                    targetView.setFloat64(position1, value);
                    position1 += 8;
                }
            } else if (type === 'object') {
                if (!value) target[position1++] = 246;
                else {
                    if (referenceMap1) {
                        let referee = referenceMap1.get(value);
                        if (referee) {
                            target[position1++] = 216;
                            target[position1++] = 29;
                            target[position1++] = 25;
                            if (!referee.references) {
                                let idsToInsert = referenceMap1.idsToInsert || (referenceMap1.idsToInsert = []);
                                referee.references = [];
                                idsToInsert.push(referee);
                            }
                            referee.references.push(position1 - start);
                            position1 += 2;
                            return;
                        } else referenceMap1.set(value, {
                            offset: position1 - start
                        });
                    }
                    let constructor = value.constructor;
                    if (constructor === Object) {
                        writeObject(value, true);
                    } else if (constructor === Array) {
                        length = value.length;
                        if (length < 24) {
                            target[position1++] = 128 | length;
                        } else {
                            writeArrayHeader(length);
                        }
                        for(let i125 = 0; i125 < length; i125++){
                            encode1(value[i125]);
                        }
                    } else if (constructor === Map) {
                        if (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {
                            target[position1++] = 217;
                            target[position1++] = 1;
                            target[position1++] = 3;
                        }
                        length = value.size;
                        if (length < 24) {
                            target[position1++] = 160 | length;
                        } else if (length < 256) {
                            target[position1++] = 184;
                            target[position1++] = length;
                        } else if (length < 65536) {
                            target[position1++] = 185;
                            target[position1++] = length >> 8;
                            target[position1++] = length & 255;
                        } else {
                            target[position1++] = 186;
                            targetView.setUint32(position1, length);
                            position1 += 4;
                        }
                        if (encoder1.keyMap) {
                            for (let [key, entryValue] of value){
                                encode1(encoder1.encodeKey(key));
                                encode1(entryValue);
                            }
                        } else {
                            for (let [key, entryValue] of value){
                                encode1(key);
                                encode1(entryValue);
                            }
                        }
                    } else {
                        for(let i126 = 0, l = extensions.length; i126 < l; i126++){
                            let extensionClass = extensionClasses[i126];
                            if (value instanceof extensionClass) {
                                let extension = extensions[i126];
                                let tag = extension.tag;
                                if (tag == undefined) tag = extension.getTag && extension.getTag.call(this, value);
                                if (tag < 24) {
                                    target[position1++] = 192 | tag;
                                } else if (tag < 256) {
                                    target[position1++] = 216;
                                    target[position1++] = tag;
                                } else if (tag < 65536) {
                                    target[position1++] = 217;
                                    target[position1++] = tag >> 8;
                                    target[position1++] = tag & 255;
                                } else if (tag > -1) {
                                    target[position1++] = 218;
                                    targetView.setUint32(position1, tag);
                                    position1 += 4;
                                }
                                extension.encode.call(this, value, encode1, makeRoom);
                                return;
                            }
                        }
                        if (value[Symbol.iterator]) {
                            target[position1++] = 159;
                            for (let entry of value){
                                encode1(entry);
                            }
                            target[position1++] = 255;
                            return;
                        }
                        writeObject(value, !value.hasOwnProperty);
                    }
                }
            } else if (type === 'boolean') {
                target[position1++] = value ? 245 : 244;
            } else if (type === 'bigint') {
                if (value < BigInt(1) << BigInt(64) && value >= 0) {
                    target[position1++] = 27;
                    targetView.setBigUint64(position1, value);
                } else if (value > -(BigInt(1) << BigInt(64)) && value < 0) {
                    target[position1++] = 59;
                    targetView.setBigUint64(position1, -value - BigInt(1));
                } else {
                    if (this.largeBigIntToFloat) {
                        target[position1++] = 251;
                        targetView.setFloat64(position1, Number(value));
                    } else {
                        throw new RangeError(value + ' was too large to fit in CBOR 64-bit integer format, set largeBigIntToFloat to convert to float-64');
                    }
                }
                position1 += 8;
            } else if (type === 'undefined') {
                target[position1++] = 247;
            } else {
                throw new Error('Unknown type: ' + type);
            }
        };
        const writeObject = this.useRecords === false ? this.variableMapSize ? (object)=>{
            let keys = Object.keys(object);
            let vals = Object.values(object);
            let length = keys.length;
            if (length < 24) {
                target[position1++] = 160 | length;
            } else if (length < 256) {
                target[position1++] = 184;
                target[position1++] = length;
            } else if (length < 65536) {
                target[position1++] = 185;
                target[position1++] = length >> 8;
                target[position1++] = length & 255;
            } else {
                target[position1++] = 186;
                targetView.setUint32(position1, length);
                position1 += 4;
            }
            if (encoder1.keyMap) {
                for(let i127 = 0; i127 < length; i127++){
                    encode1(encodeKey(keys[i127]));
                    encode1(vals[i127]);
                }
            } else {
                for(let i128 = 0; i128 < length; i128++){
                    encode1(keys[i128]);
                    encode1(vals[i128]);
                }
            }
        } : (object, safePrototype)=>{
            target[position1++] = 185;
            let objectOffset = position1 - start;
            position1 += 2;
            let size = 0;
            if (encoder1.keyMap) {
                for(let key in object)if (safePrototype || object.hasOwnProperty(key)) {
                    encode1(encoder1.encodeKey(key));
                    encode1(object[key]);
                    size++;
                }
            } else {
                for(let key in object)if (safePrototype || object.hasOwnProperty(key)) {
                    encode1(key);
                    encode1(object[key]);
                    size++;
                }
            }
            target[(objectOffset++) + start] = size >> 8;
            target[objectOffset + start] = size & 255;
        } : (object, safePrototype)=>{
            let nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null));
            let newTransitions = 0;
            let length = 0;
            let parentRecordId;
            let keys;
            if (this.keyMap) {
                keys = Object.keys(object).map((k)=>this.encodeKey(k)
                );
                length = keys.length;
                for(let i129 = 0; i129 < length; i129++){
                    let key = keys[i129];
                    nextTransition = transition[key];
                    if (!nextTransition) {
                        nextTransition = transition[key] = Object.create(null);
                        newTransitions++;
                    }
                    transition = nextTransition;
                }
            } else {
                for(let key in object)if (safePrototype || object.hasOwnProperty(key)) {
                    nextTransition = transition[key];
                    if (!nextTransition) {
                        if (transition[RECORD_SYMBOL] & 1048576) {
                            parentRecordId = transition[RECORD_SYMBOL] & 65535;
                        }
                        nextTransition = transition[key] = Object.create(null);
                        newTransitions++;
                    }
                    transition = nextTransition;
                    length++;
                }
            }
            let recordId = transition[RECORD_SYMBOL];
            if (recordId !== undefined) {
                recordId &= 65535;
                target[position1++] = 217;
                target[position1++] = recordId >> 8 | 224;
                target[position1++] = recordId & 255;
            } else {
                if (!keys) keys = transition.__keys__ || (transition.__keys__ = Object.keys(object));
                if (parentRecordId === undefined) {
                    recordId = structures.nextId++;
                    if (!recordId) {
                        recordId = 0;
                        structures.nextId = 1;
                    }
                    if (recordId >= 256) {
                        structures.nextId = (recordId = maxSharedStructures) + 1;
                    }
                } else {
                    recordId = parentRecordId;
                }
                structures[recordId] = keys;
                if (recordId < maxSharedStructures) {
                    target[position1++] = 217;
                    target[position1++] = recordId >> 8 | 224;
                    target[position1++] = recordId & 255;
                    transition = structures.transitions;
                    for(let i130 = 0; i130 < length; i130++){
                        if (transition[RECORD_SYMBOL] === undefined || transition[RECORD_SYMBOL] & 1048576) transition[RECORD_SYMBOL] = recordId;
                        transition = transition[keys[i130]];
                    }
                    transition[RECORD_SYMBOL] = recordId | 1048576;
                    hasSharedUpdate = true;
                } else {
                    transition[RECORD_SYMBOL] = recordId;
                    targetView.setUint32(position1, 3655335680);
                    position1 += 3;
                    if (newTransitions) transitionsCount += serializationsSinceTransitionRebuild * newTransitions;
                    if (recordIdsToRemove.length >= 256 - maxSharedStructures) recordIdsToRemove.shift()[RECORD_SYMBOL] = undefined;
                    recordIdsToRemove.push(transition);
                    writeArrayHeader(length + 2);
                    encode1(57344 + recordId);
                    encode1(keys);
                    for (let v of Object.values(object))encode1(v);
                    return;
                }
            }
            if (length < 24) {
                target[position1++] = 128 | length;
            } else {
                writeArrayHeader(length);
            }
            for(let key in object)if (safePrototype || object.hasOwnProperty(key)) encode1(object[key]);
        };
        const makeRoom = (end)=>{
            let newSize;
            if (end > 16777216) {
                if (end - start > MAX_BUFFER_SIZE) throw new Error('Encoded buffer would be larger than maximum buffer size');
                newSize = Math.min(MAX_BUFFER_SIZE, Math.round(Math.max((end - start) * (end > 67108864 ? 1.25 : 2), 4194304) / 4096) * 4096);
            } else newSize = (Math.max(end - start << 2, target.length - 1) >> 12) + 1 << 12;
            let newBuffer = new ByteArrayAllocate(newSize);
            targetView = new DataView(newBuffer.buffer, 0, newSize);
            if (target.copy) target.copy(newBuffer, 0, start, end);
            else newBuffer.set(target.slice(start, end));
            position1 -= start;
            start = 0;
            safeEnd = newBuffer.length - 10;
            return target = newBuffer;
        };
    }
    useBuffer(buffer) {
        target = buffer;
        targetView = new DataView(target.buffer, target.byteOffset, target.byteLength);
        position1 = 0;
    }
    clearSharedData() {
        if (this.structures) this.structures = [];
        if (this.sharedValues) this.sharedValues = undefined;
    }
    updateSharedData() {
        let lastVersion = this.sharedVersion || 0;
        this.sharedVersion = lastVersion + 1;
        let structuresCopy = this.structures.slice(0);
        let sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion);
        let saveResults = this.saveShared(sharedData, (existingShared)=>(existingShared && existingShared.version || 0) == lastVersion
        );
        if (saveResults === false) {
            sharedData = this.getShared() || {};
            this.structures = sharedData.structures || [];
            this.sharedValues = sharedData.packedValues;
            this.sharedVersion = sharedData.version;
            this.structures.nextId = this.structures.length;
        } else {
            structuresCopy.forEach((structure, i131)=>this.structures[i131] = structure
            );
        }
        return saveResults;
    }
}
class SharedData {
    constructor(structures, values, version){
        this.structures = structures;
        this.packedValues = values;
        this.version = version;
    }
}
function writeArrayHeader(length) {
    if (length < 24) target[position1++] = 128 | length;
    else if (length < 256) {
        target[position1++] = 152;
        target[position1++] = length;
    } else if (length < 65536) {
        target[position1++] = 153;
        target[position1++] = length >> 8;
        target[position1++] = length & 255;
    } else {
        target[position1++] = 154;
        targetView.setUint32(position1, length);
        position1 += 4;
    }
}
function findRepetitiveStrings(value, packedValues2) {
    switch(typeof value){
        case 'string':
            if (value.length > 3) {
                if (packedValues2.objectMap[value] > -1 || packedValues2.values.length >= packedValues2.maxValues) return;
                let packedStatus = packedValues2.get(value);
                if (packedStatus) {
                    if (++packedStatus.count == 2) {
                        packedValues2.values.push(value);
                    }
                } else {
                    packedValues2.set(value, {
                        count: 1
                    });
                    if (packedValues2.samplingPackedValues) {
                        let status = packedValues2.samplingPackedValues.get(value);
                        if (status) status.count++;
                        else packedValues2.samplingPackedValues.set(value, {
                            count: 1
                        });
                    }
                }
            }
            break;
        case 'object':
            if (value) {
                if (value instanceof Array) {
                    for(let i132 = 0, l = value.length; i132 < l; i132++){
                        findRepetitiveStrings(value[i132], packedValues2);
                    }
                } else {
                    let includeKeys = !packedValues2.encoder.useRecords;
                    for(var key in value){
                        if (value.hasOwnProperty(key)) {
                            if (includeKeys) findRepetitiveStrings(key, packedValues2);
                            findRepetitiveStrings(value[key], packedValues2);
                        }
                    }
                }
            }
            break;
        case 'function':
            console.log(value);
    }
}
const isLittleEndianMachine1 = new Uint8Array(new Uint16Array([
    1
]).buffer)[0] == 1;
extensionClasses = [
    Date,
    Set,
    Error,
    RegExp,
    Tag,
    ArrayBuffer,
    Uint8Array,
    Uint8ClampedArray,
    Uint16Array,
    Uint32Array,
    typeof BigUint64Array == 'undefined' ? function() {} : BigUint64Array,
    Int8Array,
    Int16Array,
    Int32Array,
    typeof BigInt64Array == 'undefined' ? function() {} : BigInt64Array,
    Float32Array,
    Float64Array,
    SharedData
];
extensions = [
    {
        tag: 1,
        encode (date, encode) {
            let seconds = date.getTime() / 1000;
            if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 4294967296) {
                target[position1++] = 26;
                targetView.setUint32(position1, seconds);
                position1 += 4;
            } else {
                target[position1++] = 251;
                targetView.setFloat64(position1, seconds);
                position1 += 8;
            }
        }
    },
    {
        tag: 258,
        encode (set, encode2) {
            let array = Array.from(set);
            encode2(array);
        }
    },
    {
        tag: 27,
        encode (error1, encode3) {
            encode3([
                error1.name,
                error1.message
            ]);
        }
    },
    {
        tag: 27,
        encode (regex, encode4) {
            encode4([
                'RegExp',
                regex.source,
                regex.flags
            ]);
        }
    },
    {
        getTag (tag) {
            return tag.tag;
        },
        encode (tag, encode5) {
            encode5(tag.value);
        }
    },
    {
        encode (arrayBuffer, encode, makeRoom) {
            writeBuffer(arrayBuffer, makeRoom);
        }
    },
    {
        getTag (typedArray) {
            if (typedArray.constructor === Uint8Array) {
                if (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false) return 64;
            }
        },
        encode (typedArray, encode, makeRoom) {
            writeBuffer(typedArray, makeRoom);
        }
    },
    typedArrayEncoder(68, 1),
    typedArrayEncoder(69, 2),
    typedArrayEncoder(70, 4),
    typedArrayEncoder(71, 8),
    typedArrayEncoder(72, 1),
    typedArrayEncoder(77, 2),
    typedArrayEncoder(78, 4),
    typedArrayEncoder(79, 8),
    typedArrayEncoder(85, 4),
    typedArrayEncoder(86, 8),
    {
        encode (sharedData, encode6) {
            let packedValues3 = sharedData.packedValues || [];
            let sharedStructures = sharedData.structures || [];
            if (packedValues3.values.length > 0) {
                target[position1++] = 216;
                target[position1++] = 51;
                writeArrayHeader(4);
                let valuesArray = packedValues3.values;
                encode6(valuesArray);
                writeArrayHeader(0);
                writeArrayHeader(0);
                packedObjectMap = Object.create(sharedPackedObjectMap || null);
                for(let i133 = 0, l = valuesArray.length; i133 < l; i133++){
                    packedObjectMap[valuesArray[i133]] = i133;
                }
            }
            if (sharedStructures) {
                targetView.setUint32(position1, 3655335424);
                position1 += 3;
                let definitions = sharedStructures.slice(0);
                definitions.unshift(57344);
                definitions.push(new Tag(sharedData.version, 1399353956));
                encode6(definitions);
            } else encode6(new Tag(sharedData.version, 1399353956));
        }
    }
];
function typedArrayEncoder(tag, size) {
    if (!isLittleEndianMachine1 && size > 1) tag -= 4;
    return {
        tag: tag,
        encode: function writeExtBuffer(typedArray, encode7) {
            let length = typedArray.byteLength;
            let offset = typedArray.byteOffset || 0;
            let buffer = typedArray.buffer || typedArray;
            encode7(hasNodeBuffer ? Buffer.from(buffer, offset, length) : new Uint8Array(buffer, offset, length));
        }
    };
}
function writeBuffer(buffer, makeRoom) {
    let length = buffer.byteLength;
    if (length < 24) {
        target[position1++] = 64 + length;
    } else if (length < 256) {
        target[position1++] = 88;
        target[position1++] = length;
    } else if (length < 65536) {
        target[position1++] = 89;
        target[position1++] = length >> 8;
        target[position1++] = length & 255;
    } else {
        target[position1++] = 90;
        targetView.setUint32(position1, length);
        position1 += 4;
    }
    if (position1 + length >= target.length) {
        makeRoom(position1 + length);
    }
    target.set(buffer.buffer ? buffer : new Uint8Array(buffer), position1);
    position1 += length;
}
function insertIds(serialized, idsToInsert) {
    let nextId;
    let distanceToMove = idsToInsert.length * 2;
    let lastEnd = serialized.length - distanceToMove;
    idsToInsert.sort((a8, b)=>a8.offset > b.offset ? 1 : -1
    );
    for(let id = 0; id < idsToInsert.length; id++){
        let referee = idsToInsert[id];
        referee.id = id;
        for (let position4 of referee.references){
            serialized[position4++] = id >> 8;
            serialized[position4] = id & 255;
        }
    }
    while(nextId = idsToInsert.pop()){
        let offset = nextId.offset;
        serialized.copyWithin(offset + distanceToMove, offset, lastEnd);
        distanceToMove -= 2;
        let position5 = offset + distanceToMove;
        serialized[position5++] = 216;
        serialized[position5++] = 28;
        lastEnd = offset;
    }
    return serialized;
}
function writeBundles(start, encode8) {
    targetView.setUint32(bundledStrings1.position + start, position1 - bundledStrings1.position - start + 1);
    let writeStrings = bundledStrings1;
    bundledStrings1 = null;
    encode8(writeStrings[0]);
    encode8(writeStrings[1]);
}
function addExtension1(extension) {
    if (extension.Class) {
        if (!extension.encode) throw new Error('Extension has no encode function');
        extensionClasses.unshift(extension.Class);
        extensions.unshift(extension);
    }
    addExtension(extension);
}
let defaultEncoder = new Encoder({
    useRecords: false
});
const encode1 = defaultEncoder.encode;
const { NEVER , ALWAYS , DECIMAL_ROUND , DECIMAL_FIT  } = FLOAT32_OPTIONS;
const REUSE_BUFFER_MODE = 512;
const RESET_BUFFER_MODE = 1024;
function encodeIter(objectIterator, options = {}) {
    if (!objectIterator || typeof objectIterator !== 'object') {
        throw new Error('first argument must be an Iterable, Async Iterable, or a Promise for an Async Iterable');
    } else if (typeof objectIterator[Symbol.iterator] === 'function') {
        return encodeIterSync(objectIterator, options);
    } else if (typeof objectIterator.then === 'function' || typeof objectIterator[Symbol.asyncIterator] === 'function') {
        return encodeIterAsync(objectIterator, options);
    } else {
        throw new Error('first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a Promise');
    }
}
function* encodeIterSync(objectIterator, options) {
    const encoder2 = new Encoder(options);
    for (const value of objectIterator){
        yield encoder2.encode(value);
    }
}
async function* encodeIterAsync(objectIterator, options) {
    const encoder3 = new Encoder(options);
    for await (const value of objectIterator){
        yield encoder3.encode(value);
    }
}
function decodeIter(bufferIterator, options = {}) {
    if (!bufferIterator || typeof bufferIterator !== 'object') {
        throw new Error('first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a promise');
    }
    const decoder2 = new Decoder(options);
    let incomplete;
    const parser = (chunk)=>{
        let yields;
        if (incomplete) {
            chunk = Buffer.concat([
                incomplete,
                chunk
            ]);
            incomplete = undefined;
        }
        try {
            yields = decoder2.decodeMultiple(chunk);
        } catch (err) {
            if (err.incomplete) {
                incomplete = chunk.slice(err.lastPosition);
                yields = err.values;
            } else {
                throw err;
            }
        }
        return yields;
    };
    if (typeof bufferIterator[Symbol.iterator] === 'function') {
        return (function* iter() {
            for (const value of bufferIterator){
                yield* parser(value);
            }
        })();
    } else if (typeof bufferIterator[Symbol.asyncIterator] === 'function') {
        return (async function* iter() {
            for await (const value of bufferIterator){
                yield* parser(value);
            }
        })();
    }
}
const mod = function() {
    return {
        Encoder: Encoder,
        addExtension: addExtension1,
        encode: encode1,
        NEVER: NEVER,
        ALWAYS: ALWAYS,
        DECIMAL_ROUND: DECIMAL_ROUND,
        DECIMAL_FIT: DECIMAL_FIT,
        REUSE_BUFFER_MODE: 512,
        Tag: Tag,
        Decoder: Decoder,
        decodeMultiple: decodeMultiple,
        decode: decode2,
        FLOAT32_OPTIONS: FLOAT32_OPTIONS,
        clearSource: clearSource,
        roundFloat32: roundFloat32,
        isNativeAccelerationEnabled: isNativeAccelerationEnabled,
        decodeIter: decodeIter,
        encodeIter: encodeIter
    };
}();
const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", charsUrl = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", genLookup = (target9)=>{
    let lookupTemp = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
    for(let i134 = 0; i134 < chars.length; i134++){
        lookupTemp[target9.charCodeAt(i134)] = i134;
    }
    return lookupTemp;
}, lookup = genLookup(chars), lookupUrl = genLookup(charsUrl);
let base64 = {};
base64.toArrayBuffer = (data, urlMode)=>{
    let bufferLength = data.length * 0.75, len = data.length, i135, p = 0, encoded1, encoded2, encoded3, encoded4;
    if (data[data.length - 1] === "=") {
        bufferLength--;
        if (data[data.length - 2] === "=") {
            bufferLength--;
        }
    }
    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer), target10 = urlMode ? lookupUrl : lookup;
    for(i135 = 0; i135 < len; i135 += 4){
        encoded1 = target10[data.charCodeAt(i135)];
        encoded2 = target10[data.charCodeAt(i135 + 1)];
        encoded3 = target10[data.charCodeAt(i135 + 2)];
        encoded4 = target10[data.charCodeAt(i135 + 3)];
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
};
base64.fromArrayBuffer = (arrBuf, urlMode)=>{
    let bytes = new Uint8Array(arrBuf), i136, len = bytes.length, result = "", target11 = urlMode ? charsUrl : chars;
    for(i136 = 0; i136 < len; i136 += 3){
        result += target11[bytes[i136] >> 2];
        result += target11[(bytes[i136] & 3) << 4 | bytes[i136 + 1] >> 4];
        result += target11[(bytes[i136 + 1] & 15) << 2 | bytes[i136 + 2] >> 6];
        result += target11[bytes[i136 + 2] & 63];
    }
    if (len % 3 === 2) {
        result = result.substring(0, result.length - 1) + (urlMode ? "" : "=");
    } else if (len % 3 === 1) {
        result = result.substring(0, result.length - 2) + (urlMode ? "" : "==");
    }
    return result;
};
base64.toString = (str, urlMode)=>{
    return (new TextDecoder).decode(base64.toArrayBuffer(str, urlMode));
};
base64.fromString = (str, urlMode)=>{
    return base64.fromArrayBuffer((new TextEncoder).encode(str), urlMode);
};
base64.validate = (encoded, urlMode)=>{
    if (!(typeof encoded === "string" || encoded instanceof String)) {
        return false;
    }
    try {
        if (urlMode) {
            return /^[-A-Za-z0-9\-_]*$/.test(encoded);
        } else {
            return /^[-A-Za-z0-9+/]*={0,3}$/.test(encoded);
        }
    } catch (_e) {
        return false;
    }
};
base64.base64 = base64;
const mod1 = {};
function ab2str(buf) {
    let str = "";
    new Uint8Array(buf).forEach((ch)=>{
        str += String.fromCharCode(ch);
    });
    return str;
}
let webcrypto;
function isBase64Url(str) {
    return !!str.match(/^[A-Za-z0-9\-_]+={0,2}$/);
}
function isPem(pem) {
    if (typeof pem !== "string") {
        return false;
    }
    const pemRegex = /^-----BEGIN .+-----$\n([A-Za-z0-9+/=]|\n)*^-----END .+-----$/m;
    return !!pem.match(pemRegex);
}
function isPositiveInteger(n6) {
    return n6 >>> 0 === parseFloat(n6);
}
function abToBuf(ab) {
    return new Uint8Array(ab).buffer;
}
function abToInt(ab) {
    if (!(ab instanceof ArrayBuffer)) {
        throw new Error("abToInt: expected ArrayBuffer");
    }
    const buf = new Uint8Array(ab);
    let cnt = ab.byteLength - 1;
    let ret = 0;
    buf.forEach((__byte)=>{
        ret |= __byte << cnt * 8;
        cnt--;
    });
    return ret;
}
function abToPem(type, ab) {
    if (typeof type !== "string") {
        throw new Error("abToPem expected 'type' to be string like 'CERTIFICATE', got: " + type);
    }
    const str = coerceToBase64(ab, "pem buffer");
    return [
        `-----BEGIN ${type}-----\n`,
        ...str.match(/.{1,64}/g).map((s5)=>s5 + "\n"
        ),
        `-----END ${type}-----\n`, 
    ].join("");
}
const appendBuffer = function(buffer1, buffer2) {
    const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
    tmp.set(new Uint8Array(buffer1), 0);
    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
    return tmp.buffer;
};
function coerceToArrayBuffer(buf, name) {
    if (!name) {
        throw new TypeError("name not specified in coerceToArrayBuffer");
    }
    if (typeof buf === "string" && buf === "") {
        buf = new Uint8Array(0);
    } else if (typeof buf === "string") {
        buf = buf.replace(/\+/g, "-").replace(/\//g, "_").replace("=", "");
        buf = mod2.base64.toArrayBuffer(buf, true);
    }
    if (Array.isArray(buf)) {
        buf = new Uint8Array(buf);
    }
    if (typeof Buffer !== "undefined" && buf instanceof Buffer) {
        buf = new Uint8Array(buf);
        buf = buf.buffer;
    }
    if (buf instanceof Uint8Array) {
        buf = buf.slice(0, buf.byteLength, buf.buffer.byteOffset).buffer;
    }
    if (!(buf instanceof ArrayBuffer)) {
        throw new TypeError(`could not coerce '${name}' to ArrayBuffer`);
    }
    return buf;
}
function coerceToBase64(thing, name) {
    if (!name) {
        throw new TypeError("name not specified in coerceToBase64");
    }
    if (typeof thing !== "string") {
        try {
            thing = mod2.base64.fromArrayBuffer(coerceToArrayBuffer(thing, name));
        } catch (_err) {
            throw new Error(`could not coerce '${name}' to string`);
        }
    }
    return thing;
}
function str2ab(str) {
    const buf = new ArrayBuffer(str.length);
    const bufView = new Uint8Array(buf);
    for(let i137 = 0, strLen = str.length; i137 < strLen; i137++){
        bufView[i137] = str.charCodeAt(i137);
    }
    return buf;
}
function coerceToBase64Url(thing, name) {
    if (!name) {
        throw new TypeError("name not specified in coerceToBase64");
    }
    if (typeof thing === "string") {
        thing = thing.replace(/\+/g, "-").replace(/\//g, "_").replace(/={0,2}$/g, "");
    }
    if (typeof thing !== "string") {
        try {
            thing = mod2.base64.fromArrayBuffer(coerceToArrayBuffer(thing, name), true);
        } catch (_err) {
            throw new Error(`could not coerce '${name}' to string`);
        }
    }
    return thing;
}
function arrayBufferEquals(b1, b2) {
    if (!(b1 instanceof ArrayBuffer) || !(b2 instanceof ArrayBuffer)) {
        return false;
    }
    if (b1.byteLength !== b2.byteLength) {
        return false;
    }
    b1 = new Uint8Array(b1);
    b2 = new Uint8Array(b2);
    for(let i138 = 0; i138 < b1.byteLength; i138++){
        if (b1[i138] !== b2[i138]) return false;
    }
    return true;
}
function abToHex(ab) {
    if (!(ab instanceof ArrayBuffer)) {
        throw new TypeError("Invalid argument passed to abToHex");
    }
    const result = Array.prototype.map.call(new Uint8Array(ab), (x)=>("00" + x.toString(16)).slice(-2)
    ).join("");
    return result;
}
function b64ToJsObject(b64, desc) {
    return JSON.parse(ab2str(coerceToArrayBuffer(b64, desc)));
}
if (typeof self !== "undefined" && "crypto" in self) {
    webcrypto = self.crypto;
} else {
    if (mod1 && mod1.webcrypto) {
        webcrypto = mod1.webcrypto;
    } else {
        webcrypto = new Crypto();
    }
}
const pkijs = {
    setEngine,
    CryptoEngine,
    Certificate: Certificate,
    CertificateRevocationList,
    CertificateChainValidationEngine,
    PublicKeyInfo
};
pkijs.setEngine("newEngine", webcrypto, new pkijs.CryptoEngine({
    name: "",
    crypto: webcrypto,
    subtle: webcrypto.subtle
}));
function extractBigNum(fullArray, start, end, expectedLength) {
    let num = fullArray.slice(start, end);
    if (num.length !== expectedLength) {
        num = Array(expectedLength).fill(0).concat(...num).slice(num.length);
    }
    return num;
}
function derToRaw(signature) {
    const rEnd = 4 + signature[3];
    const sStart = rEnd + 2;
    return new Uint8Array([
        ...extractBigNum(signature, 4, rEnd, 32),
        ...extractBigNum(signature, sStart, signature.length, 32), 
    ]);
}
function checkOrigin(str) {
    const originUrl = new URL(str);
    const origin = originUrl.origin;
    if (origin !== str) {
        throw new Error("origin was malformatted");
    }
    const isLocalhost = originUrl.hostname == "localhost" || originUrl.hostname.endsWith(".localhost");
    if (originUrl.protocol !== "https:" && !isLocalhost) {
        throw new Error("origin should be https");
    }
    if ((!validDomainName(originUrl.hostname) || !validEtldPlusOne(originUrl.hostname)) && !isLocalhost) {
        throw new Error("origin is not a valid eTLD+1");
    }
    return origin;
}
function checkUrl(value, name, rules = {}) {
    if (!name) {
        throw new TypeError("name not specified in checkUrl");
    }
    if (typeof value !== "string") {
        throw new Error(`${name} must be a string`);
    }
    let urlValue = null;
    try {
        urlValue = new URL(value);
    } catch (_err) {
        throw new Error(`${name} is not a valid eTLD+1/url`);
    }
    if (!value.startsWith("http")) {
        throw new Error(`${name} must be http protocol`);
    }
    if (!rules.allowHttp && urlValue.protocol !== "https:") {
        throw new Error(`${name} should be https`);
    }
    if (!rules.allowPath && (value.endsWith("/") || urlValue.pathname !== "/")) {
        throw new Error(`${name} should not include path in url`);
    }
    if (!rules.allowHash && urlValue.hash) {
        throw new Error(`${name} should not include hash in url`);
    }
    if (!rules.allowCred && (urlValue.username || urlValue.password)) {
        throw new Error(`${name} should not include credentials in url`);
    }
    if (!rules.allowQuery && urlValue.search) {
        throw new Error(`${name} should not include query string in url`);
    }
    return value;
}
function validEtldPlusOne(value) {
    const result = u(value, {
        allowPrivateDomains: true
    });
    if (result.publicSuffix === null) {
        return false;
    }
    if (result.domainWithoutSuffix === null) {
        return false;
    }
    return true;
}
function validDomainName(value) {
    const ascii = __default.toASCII(value);
    if (ascii.length < 1) {
        return false;
    }
    if (ascii.length > 255) {
        return false;
    }
    const labels = ascii.split(".");
    let label;
    for(let i139 = 0; i139 < labels.length; ++i139){
        label = labels[i139];
        if (!label.length) {
            return false;
        }
        if (label.length > 63) {
            return false;
        }
        if (label.charAt(0) === "-") {
            return false;
        }
        if (!/^[a-z0-9-]+$/.test(label)) {
            return false;
        }
    }
    return true;
}
function checkDomainOrUrl(value, name, rules = {}) {
    if (!name) {
        throw new TypeError("name not specified in checkDomainOrUrl");
    }
    if (typeof value !== "string") {
        throw new Error(`${name} must be a string`);
    }
    if (validEtldPlusOne(value, name) && validDomainName(value, name)) {
        return value;
    }
    return checkUrl(value, name, rules);
}
function checkRpId(rpId) {
    if (typeof rpId !== "string") {
        throw new Error("rpId must be a string");
    }
    const isLocalhost = rpId === "localhost" || rpId.endsWith(".localhost");
    if (isLocalhost) return rpId;
    return checkDomainOrUrl(rpId, "rpId");
}
async function verifySignature(publicKey, expectedSignature, data, hashName) {
    let publicKeyInst;
    if (publicKey instanceof PublicKey) {
        publicKeyInst = publicKey;
    } else if (publicKey && publicKey.type === "public") {
        publicKeyInst = new PublicKey();
        publicKeyInst.fromCryptoKey(publicKey);
    } else {
        publicKeyInst = new PublicKey();
        await publicKeyInst.fromPem(publicKey);
    }
    const alg = publicKeyInst.getAlgorithm();
    if (typeof alg === "undefined") {
        throw new Error("verifySignature: Algoritm missing.");
    }
    if (hashName) {
        alg.hash = {
            name: hashName
        };
    }
    if (!alg.hash) {
        throw new Error("verifySignature: Hash name missing.");
    }
    publicKeyInst.setAlgorithm(alg);
    try {
        let uSignature = new Uint8Array(expectedSignature);
        if (alg.name === "ECDSA") {
            uSignature = await derToRaw(uSignature);
        }
        return await webcrypto.subtle.verify(publicKeyInst.getAlgorithm(), publicKeyInst.getKey(), uSignature, new Uint8Array(data));
    } catch (_e) {
        console.error(_e);
    }
}
async function hashDigest(o104, alg) {
    if (typeof o104 === "string") {
        o104 = new TextEncoder().encode(o104);
    }
    const result = await webcrypto.subtle.digest(alg || "SHA-256", o104);
    return result;
}
function randomValues(n7) {
    const byteArray = new Uint8Array(n7);
    webcrypto.getRandomValues(byteArray);
    return byteArray;
}
function getHostname(urlIn) {
    return new URL(urlIn).hostname;
}
async function getEmbeddedJwk(jwsHeader, alg) {
    let publicKeyJwk;
    if (jwsHeader.jwk) {
        publicKeyJwk = jwsHeader.jwk;
    } else if (jwsHeader.x5c) {
        const x5c0 = jwsHeader.x5c[0];
        const cert = new Certificate1(x5c0);
        publicKeyJwk = await cert.getPublicKeyJwk();
        publicKeyJwk.kid = publicKeyJwk.kid || cert.getCommonName();
    }
    if (!publicKeyJwk) {
        throw new Error("getEmbeddedJwk: JWK not found in JWS.");
    }
    publicKeyJwk.alg = publicKeyJwk.alg || jwsHeader.alg || alg;
    return publicKeyJwk;
}
const mod2 = {
    base64: base64,
    cbor: mod,
    checkDomainOrUrl: checkDomainOrUrl,
    checkOrigin: checkOrigin,
    checkRpId: checkRpId,
    checkUrl: checkUrl,
    decodeProtectedHeader: decodeProtectedHeader,
    fromBER: fromBER,
    getEmbeddedJwk: getEmbeddedJwk,
    getHostname: getHostname,
    hashDigest: hashDigest,
    importJWK: importJWK,
    jwtVerify: jwtVerify,
    pkijs: pkijs,
    randomValues: randomValues,
    verifySignature: verifySignature,
    webcrypto: webcrypto
};
function jsObjectToB64(obj) {
    return mod2.base64.fromString(JSON.stringify(obj).replace(/[\u{0080}-\u{FFFF}]/gu, ""));
}
function pemToBase64(pem) {
    if (typeof pem === "string" || pem instanceof String) {
        pem = pem.replace(/\r/g, "");
    }
    if (!isPem(pem)) {
        throw new Error("expected PEM string as input");
    }
    pem = pem.replace(/\n$/, "");
    let pemArr = pem.split("\n");
    pemArr = pemArr.slice(1, pemArr.length - 1);
    return pemArr.join("");
}
const mod3 = {
    arrayBufferEquals: arrayBufferEquals,
    abToBuf: abToBuf,
    abToHex: abToHex,
    abToInt: abToInt,
    abToPem: abToPem,
    ab2str: ab2str,
    appendBuffer: appendBuffer,
    b64ToJsObject: b64ToJsObject,
    coerceToArrayBuffer: coerceToArrayBuffer,
    coerceToBase64: coerceToBase64,
    coerceToBase64Url: coerceToBase64Url,
    isBase64Url: isBase64Url,
    isPem: isPem,
    isPositiveInteger: isPositiveInteger,
    jsObjectToB64: jsObjectToB64,
    pemToBase64: pemToBase64,
    str2ab: str2ab,
    tools: mod2
};
class Certificate1 {
    constructor(cert){
        if (typeof cert === "string" || cert instanceof String) {
            cert = cert.replace(/\r/g, "");
        }
        if (isPem(cert)) {
            cert = pemToBase64(cert);
        }
        if (typeof cert === "string" || cert instanceof String) {
            cert = cert.replace(/\n/g, "");
        }
        cert = coerceToArrayBuffer(cert, "certificate");
        if (cert.byteLength === 0) {
            throw new Error("cert was empty (0 bytes)");
        }
        const asn1 = mod2.fromBER(cert);
        if (asn1.offset === -1) {
            throw new Error("error parsing ASN.1");
        }
        this._cert = new mod2.pkijs.Certificate({
            schema: asn1.result
        });
        this.warning = new Map();
        this.info = new Map();
    }
    getCommonName() {
        const X509_COMMON_NAME_KEY = "2.5.4.3";
        let commonName = "";
        const subjectAttributes = this._cert.subject.typesAndValues;
        for(let index = 0; index < subjectAttributes.length; index++){
            const attribute = subjectAttributes[index];
            if (attribute.type === X509_COMMON_NAME_KEY) {
                commonName = attribute.value.valueBlock.value;
                break;
            }
        }
        return commonName;
    }
    verify() {
        const issuerSerial = this.getIssuer();
        const issuerCert = CertManager.getCertBySerial(issuerSerial);
        const _issuerCert = issuerCert ? issuerCert._cert : undefined;
        return this._cert.verify(_issuerCert).catch((err)=>{
            if (typeof err === "string") {
                err = new Error(err);
            }
            return Promise.reject(err);
        });
    }
    async getPublicKey() {
        const k = await this._cert.getPublicKey();
        return k;
    }
    async getPublicKeyJwk() {
        const publicKey = await this.getPublicKey();
        const publicKeyJwk = await mod2.webcrypto.subtle.exportKey("jwk", publicKey);
        return publicKeyJwk;
    }
    getIssuer() {
        return this._cert.issuer.typesAndValues[0].value.valueBlock.value;
    }
    getSerial() {
        return this._cert.subject.typesAndValues[0].value.valueBlock.value;
    }
    getVersion() {
        return this._cert.version + 1;
    }
    getSubject() {
        const ret = new Map();
        const subjectItems = this._cert.subject.typesAndValues;
        for (const subject of subjectItems){
            const kv = resolveOid(subject.type, decodeValue(subject.value.valueBlock));
            ret.set(kv.id, kv.value);
        }
        return ret;
    }
    getExtensions() {
        const ret = new Map();
        if (this._cert.extensions === undefined) return ret;
        for (const ext of this._cert.extensions){
            let kv;
            let v = ext.parsedValue || ext.extnValue;
            if (v.valueBlock) v = decodeValue(v.valueBlock);
            try {
                kv = resolveOid(ext.extnID, v);
            } catch (err) {
                if (ext.critical === false) {
                    this.warning.set("x509-extension-error", ext.extnID + ": " + err.message);
                    continue;
                } else {
                    throw err;
                }
            }
            ret.set(kv.id, kv.value);
        }
        return ret;
    }
}
const coseLabels = {
    1: {
        name: "kty",
        values: {
            1: "OKP",
            2: "EC",
            3: "RSA"
        }
    },
    2: {
        name: "kid",
        values: {}
    },
    3: {
        name: "alg",
        values: {
            "-7": "ECDSA_w_SHA256",
            "-35": "ECDSA_w_SHA384",
            "-36": "ECDSA_w_SHA512",
            "-257": "RSASSA-PKCS1-v1_5_w_SHA256",
            "-258": "RSASSA-PKCS1-v1_5_w_SHA384",
            "-259": "RSASSA-PKCS1-v1_5_w_SHA512",
            "-65535": "RSASSA-PKCS1-v1_5_w_SHA1"
        }
    },
    4: {
        name: "key_ops",
        values: {}
    },
    5: {
        name: "base_iv",
        values: {}
    }
};
function resolveOid(id, value) {
    const ret = {
        id,
        value
    };
    if (value && value.valueHex) value = value.valueHex;
    let retMap;
    switch(id){
        case "1.3.6.1.4.1.45724.2.1.1":
            ret.id = "fido-u2f-transports";
            ret.value = decodeU2FTransportType(value);
            return ret;
        case "1.3.6.1.4.1.45724.1.1.4":
            ret.id = "fido-aaguid";
            return ret;
        case "2.5.4.6":
            ret.id = "country-name";
            return ret;
        case "2.5.4.10":
            ret.id = "organization-name";
            return ret;
        case "2.5.4.11":
            ret.id = "organizational-unit-name";
            return ret;
        case "2.5.4.3":
            ret.id = "common-name";
            return ret;
        case "2.5.29.14":
            ret.id = "subject-key-identifier";
            return ret;
        case "2.5.29.15":
            ret.id = "key-usage";
            ret.value = decodeKeyUsage(value);
            return ret;
        case "2.5.29.19":
            ret.id = "basic-constraints";
            return ret;
        case "2.5.29.35":
            retMap = new Map();
            ret.id = "authority-key-identifier";
            retMap.set("key-identifier", decodeValue(value.keyIdentifier));
            ret.value = retMap;
            return ret;
        case "2.5.29.32":
            ret.id = "certificate-policies";
            ret.value = decodeCertificatePolicies(value);
            return ret;
        case "1.3.6.1.4.1.311.21.31":
            ret.id = "policy-qualifiers";
            ret.value = decodePolicyQualifiers(value);
            return ret;
        case "2.5.29.37":
            ret.id = "ext-key-usage";
            ret.value = decodeExtKeyUsage(value);
            return ret;
        case "2.5.29.17":
            ret.id = "subject-alt-name";
            ret.value = decodeAltNames(value);
            return ret;
        case "1.3.6.1.5.5.7.1.1":
            ret.id = "authority-info-access";
            ret.value = decodeAuthorityInfoAccess(value);
            return ret;
        case "1.3.6.1.5.5.7.48.2":
            ret.id = "cert-authority-issuers";
            if (typeof value !== "object") {
                throw new Error("expect cert-authority-issues to have Object as value");
            }
            ret.value = decodeGeneralName(value.type, value.value);
            return ret;
        case "1.3.6.1.5.5.7.2.2":
            ret.id = "policy-qualifier";
            ret.value = decodeValue(value.valueBlock);
            return ret;
        case "2.23.133.8.3":
            ret.id = "tcg-kp-aik-certificate";
            return ret;
        case "2.23.133.2.1":
            ret.id = "tcg-at-tpm-manufacturer";
            return ret;
        case "2.23.133.2.2":
            ret.id = "tcg-at-tpm-model";
            return ret;
        case "2.23.133.2.3":
            ret.id = "tcg-at-tpm-version";
            return ret;
        case "1.3.6.1.4.1.41482.2":
            ret.id = "yubico-device-id";
            ret.value = resolveOid(ab2str(value)).id;
            return ret;
        case "1.3.6.1.4.1.41482.1.1":
            ret.id = "Security Key by Yubico";
            return ret;
        case "1.3.6.1.4.1.41482.1.2":
            ret.id = "YubiKey NEO/NEO-n";
            return ret;
        case "1.3.6.1.4.1.41482.1.3":
            ret.id = "YubiKey Plus";
            return ret;
        case "1.3.6.1.4.1.41482.1.4":
            ret.id = "YubiKey Edge";
            return ret;
        case "1.3.6.1.4.1.41482.1.5":
            ret.id = "YubiKey 4/YubiKey 4 Nano";
            return ret;
        default:
            return ret;
    }
}
function decodeValue(valueBlock) {
    const blockType = Object.getPrototypeOf(valueBlock).constructor.name;
    switch(blockType){
        case "LocalOctetStringValueBlock":
            return valueBlock.valueHex;
        case "LocalUtf8StringValueBlock":
            return valueBlock.value;
        case "LocalSimpleStringValueBlock":
            return valueBlock.value;
        case "OctetString":
            return valueBlock.valueBlock.valueHex;
        case "LocalBitStringValueBlock":
            return new Uint8Array(valueBlock.valueHex)[0];
        case "LocalBmpStringValueBlock":
            return valueBlock.value;
        case "LocalConstructedValueBlock":
            if (typeof valueBlock === "object" && Array.isArray(valueBlock.value)) {
                return valueBlock.value.map((v)=>decodeValue(v)
                );
            }
            return valueBlock;
        case "Constructed":
            return decodeValue(valueBlock.valueBlock.value[0]);
        case "BmpString":
            return decodeValue(valueBlock.valueBlock);
        case "Utf8String":
            return valueBlock.valueBlock.value;
        default:
            throw new TypeError("unknown value type when decoding certificate: " + blockType);
    }
}
function decodeU2FTransportType(u2fRawTransports) {
    const bitCount = 8 - 3 - 1;
    let type = u2fRawTransports >> 3;
    const ret = new Set();
    for(let i140 = bitCount; i140 >= 0; i140--){
        if (type & 1) switch(i140){
            case 0:
                ret.add("bluetooth-classic");
                break;
            case 1:
                ret.add("bluetooth-low-energy");
                break;
            case 2:
                ret.add("usb");
                break;
            case 3:
                ret.add("nfc");
                break;
            case 4:
                ret.add("usb-internal");
                break;
            default:
                throw new Error("unknown U2F transport type: " + type);
        }
        type >>= 1;
    }
    return ret;
}
function decodeKeyUsage(value) {
    if (typeof value !== "number") {
        throw new Error("certificate: expected 'keyUsage' value to be number");
    }
    const retSet = new Set();
    if (value & 128) retSet.add("digitalSignature");
    if (value & 64) retSet.add("contentCommitment");
    if (value & 32) retSet.add("keyEncipherment");
    if (value & 16) retSet.add("dataEncipherment");
    if (value & 8) retSet.add("keyAgreement");
    if (value & 4) retSet.add("keyCertSign");
    if (value & 2) retSet.add("cRLSign");
    if (value & 1) retSet.add("encipherOnly");
    if (value & 1) retSet.add("decipherOnly");
    return retSet;
}
function decodeExtKeyUsage(value) {
    let keyPurposes = value.keyPurposes;
    if (typeof value !== "object" || !Array.isArray(keyPurposes)) {
        throw new Error("expected extended key purposes to be an Array");
    }
    keyPurposes = keyPurposes.map((oid)=>resolveOid(oid).id
    );
    return keyPurposes;
}
function decodeCertificatePolicies(value) {
    if (value && Array.isArray(value.certificatePolicies)) {
        value = value.certificatePolicies.map((_policy)=>resolveOid(value.certificatePolicies[0].policyIdentifier, value.certificatePolicies[0].policyQualifiers)
        );
    }
    return value;
}
function decodePolicyQualifiers(value) {
    if (value && Array.isArray(value)) {
        value = value.map((qual)=>resolveOid(qual.policyQualifierId, qual.qualifier)
        );
    }
    return value;
}
function decodeAltNames(value) {
    if (typeof value !== "object" || !Array.isArray(value.altNames)) {
        throw new Error("expected alternate names to be an Array");
    }
    let altNames = value.altNames;
    altNames = altNames.map((name)=>{
        if (typeof name !== "object") {
            throw new Error("expected alternate name to be an object");
        }
        if (name.type !== 4) {
            throw new Error("expected all alternate names to be of general type");
        }
        if (typeof name.value !== "object" || !Array.isArray(name.value.typesAndValues)) {
            throw new Error("malformatted alternate name");
        }
        return decodeGeneralName(name.type, name.value.typesAndValues);
    });
    return altNames;
}
function decodeAuthorityInfoAccess(v) {
    if (typeof v !== "object" || !Array.isArray(v.accessDescriptions)) {
        throw new Error("expected authority info access descriptions to be Array");
    }
    const retMap = new Map();
    v.accessDescriptions.forEach((desc)=>{
        const { id , value  } = resolveOid(desc.accessMethod, desc.accessLocation);
        retMap.set(id, value);
    });
    return retMap;
}
function decodeGeneralName(type, v) {
    if (typeof type !== "number") {
        throw new Error("malformed general name in x509 certificate");
    }
    let nameList;
    switch(type){
        case 0:
            throw new Error("general name 'other name' not supported");
        case 1:
            throw new Error("general name 'rfc822Name' not supported");
        case 2:
            throw new Error("general name 'dNSName' not supported");
        case 3:
            throw new Error("general name 'x400Address' not supported");
        case 4:
            if (!Array.isArray(v)) {
                throw new Error("expected general name 'directory name' to be Array");
            }
            nameList = new Map();
            v.forEach((val)=>{
                const { id , value  } = resolveOid(val.type, decodeValue(val.value));
                nameList.set(id, value);
            });
            return {
                directoryName: nameList
            };
        case 5:
            throw new Error("general name 'ediPartyName' not supported");
        case 6:
            return {
                uniformResourceIdentifier: v
            };
        case 7:
            throw new Error("general name 'iPAddress' not supported");
        case 8:
            throw new Error("general name 'registeredID' not supported");
        default:
            throw new Error("unknown general name type: " + type);
    }
}
class CRL {
    constructor(crl){
        if (typeof crl === "string" || crl instanceof String) {
            crl = crl.replace(/\r/g, "");
        }
        if (isPem(crl)) {
            crl = pemToBase64(crl);
        }
        crl = coerceToArrayBuffer(crl, "crl");
        const asn1 = mod2.fromBER(crl);
        this._crl = new mod2.pkijs.CertificateRevocationList({
            schema: asn1.result
        });
    }
}
const certMap = new Map();
class CertManager {
    static addCert(certBuf) {
        const cert = new Certificate1(certBuf);
        const serial = cert.getSerial();
        certMap.set(serial, cert);
        return true;
    }
    static getCerts() {
        return new Map([
            ...certMap
        ]);
    }
    static getCertBySerial(serial) {
        return certMap.get(serial);
    }
    static removeAll() {
        certMap.clear();
    }
    static async verifyCertChain(certs, roots, crls) {
        if (!Array.isArray(certs) || certs.length < 1) {
            throw new Error("expected 'certs' to be non-empty Array, got: " + certs);
        }
        certs = certs.map((cert)=>{
            if (!(cert instanceof Certificate1)) {
                cert = new Certificate1(cert);
            }
            return cert._cert;
        });
        if (!Array.isArray(roots) || roots.length < 1) {
            throw new Error("expected 'roots' to be non-empty Array, got: " + roots);
        }
        roots = roots.map((r3)=>{
            if (!(r3 instanceof Certificate1)) {
                r3 = new Certificate1(r3);
            }
            return r3._cert;
        });
        crls = crls || [];
        if (!Array.isArray(crls)) {
            throw new Error("expected 'crls' to be undefined or Array, got: " + crls);
        }
        crls = crls.map((crl)=>{
            if (!(crl instanceof CRL)) {
                crl = new CRL(crl);
            }
            return crl._crl;
        });
        const chain = new mod2.pkijs.CertificateChainValidationEngine({
            trustedCerts: roots,
            certs,
            crls
        });
        const res = await chain.verify();
        if (!res.result) {
            throw new Error(res.resultMessage);
        } else {
            return res;
        }
    }
}
const helpers = {
    resolveOid
};
const coseKeyParamList = {
    EC: {
        "-1": {
            name: "crv",
            values: {
                1: "P-256",
                2: "P-384",
                3: "P-521"
            }
        },
        "-2": {
            name: "x"
        },
        "-3": {
            name: "y"
        },
        "-4": {
            name: "d"
        }
    },
    OKP: {
        "-1": {
            name: "crv",
            values: {
                4: "X25519",
                5: "X448",
                6: "Ed25519",
                7: "Ed448"
            }
        },
        "-2": {
            name: "x"
        },
        "-4": {
            name: "d"
        }
    },
    RSA: {
        "-1": {
            name: "n"
        },
        "-2": {
            name: "e"
        },
        "-3": {
            name: "d"
        },
        "-4": {
            name: "p"
        },
        "-5": {
            name: "q"
        },
        "-6": {
            name: "dP"
        },
        "-7": {
            name: "dQ"
        },
        "-8": {
            name: "qInv"
        },
        "-9": {
            name: "other"
        },
        "-10": {
            name: "r_i"
        },
        "-11": {
            name: "d_i"
        },
        "-12": {
            name: "t_i"
        }
    }
};
const algToJWKAlg = {
    "RSASSA-PKCS1-v1_5_w_SHA256": "RS256",
    "RSASSA-PKCS1-v1_5_w_SHA384": "RS384",
    "RSASSA-PKCS1-v1_5_w_SHA512": "RS512",
    "RSASSA-PKCS1-v1_5_w_SHA1": "RS256",
    "ECDSA_w_SHA256": "ES256",
    "ECDSA_w_SHA384": "ES384",
    "ECDSA_w_SHA512": "ES512"
};
const algorithmInputMap = {
    "RSASSA-PKCS1-v1_5_w_SHA256": "RSASSA-PKCS1-v1_5",
    "RSASSA-PKCS1-v1_5_w_SHA384": "RSASSA-PKCS1-v1_5",
    "RSASSA-PKCS1-v1_5_w_SHA512": "RSASSA-PKCS1-v1_5",
    "RSASSA-PKCS1-v1_5_w_SHA1": "RSASSA-PKCS1-v1_5",
    "ECDSA_w_SHA256": "ECDSA",
    "ECDSA_w_SHA384": "ECDSA",
    "ECDSA_w_SHA512": "ECDSA",
    "RS256": "RSASSA-PKCS1-v1_5",
    "RS384": "RSASSA-PKCS1-v1_5",
    "RS512": "RSASSA-PKCS1-v1_5",
    "ES384": "ECDSA",
    "ES256": "ECDSA",
    "ES512": "ECDSA"
};
const inputHashMap = {
    "RSASSA-PKCS1-v1_5_w_SHA256": "SHA-256",
    "RSASSA-PKCS1-v1_5_w_SHA384": "SHA-384",
    "RSASSA-PKCS1-v1_5_w_SHA512": "SHA-512",
    "RSASSA-PKCS1-v1_5_w_SHA1": "SHA-1",
    "ECDSA_w_SHA256": "SHA-256",
    "ECDSA_w_SHA384": "SHA-384",
    "ECDSA_w_SHA512": "SHA-512"
};
class PublicKey {
    constructor(){
        this._original_pem = undefined;
        this._original_jwk = undefined;
        this._original_cose = undefined;
        this._alg = undefined;
        this._key = undefined;
    }
    fromCryptoKey(key, alg) {
        if (!key) {
            throw new TypeError("No key passed");
        }
        if (key && (!key.type || key.type !== "public")) {
            throw new TypeError("Invalid argument passed to fromCryptoKey, should be instance of CryptoKey with type public");
        }
        this._key = key;
        this.setAlgorithm(key.algorithm);
        if (alg) {
            this.setAlgorithm(alg);
        }
        return this;
    }
    async fromPem(pem, hashName) {
        let base64ber, ber;
        if (typeof pem === "string" || pem instanceof String) {
            pem = pem.replace(/\r/g, "");
        }
        if (isPem(pem)) {
            base64ber = pemToBase64(pem);
            ber = coerceToArrayBuffer(base64ber, "base64ber");
        } else {
            throw new Error("Supplied key is not in PEM format");
        }
        if (ber.byteLength === 0) {
            throw new Error("Supplied key ber was empty (0 bytes)");
        }
        const asn1 = mod2.fromBER(ber);
        if (asn1.offset === -1) {
            throw new Error("error parsing ASN.1");
        }
        let keyInfo = new mod2.pkijs.PublicKeyInfo({
            schema: asn1.result
        });
        const algorithm = {};
        if (keyInfo.algorithm.algorithmId === "1.2.840.10045.2.1") {
            algorithm.name = "ECDSA";
            const parsedKey = keyInfo.parsedKey;
            if (parsedKey && parsedKey.namedCurve === "1.2.840.10045.3.1.7") {
                algorithm.namedCurve = "P-256";
            } else if (parsedKey && parsedKey.namedCurve === "1.3.132.0.34") {
                algorithm.namedCurve = "P-384";
            } else if (parsedKey && parsedKey.namedCurve === "1.3.132.0.35") {
                algorithm.namedCurve = "P-512";
            } else {
                algorithm.namedCurve = "P-256";
            }
        } else if (keyInfo.algorithm.algorithmId === "1.2.840.113549.1.1.1") {
            algorithm.name = "RSASSA-PKCS1-v1_5";
            algorithm.hash = hashName || "SHA-256";
        }
        this.setAlgorithm(algorithm);
        let importSPKIResult;
        try {
            importSPKIResult = await mod2.webcrypto.subtle.importKey("spki", ber, algorithm, true, [
                "verify"
            ]);
        } catch (_e1) {
            throw new Error("Unsupported key format", _e1);
        }
        this._original_pem = pem;
        this._key = importSPKIResult;
        return this;
    }
    async fromJWK(jwk, extractable) {
        const jwkCopy = JSON.parse(JSON.stringify(jwk));
        if (typeof extractable !== "undefined" && typeof extractable === "boolean") {
            jwkCopy.ext = extractable;
        }
        this.setAlgorithm(jwkCopy);
        this._original_jwk = jwk;
        const generatedKey = await mod2.webcrypto.subtle.importKey("jwk", jwkCopy, this.getAlgorithm(), true, [
            "verify"
        ]);
        this._key = generatedKey;
        return this;
    }
    async fromCose(cose) {
        if (typeof cose !== "object") {
            throw new TypeError("'cose' argument must be an object, probably an Buffer conatining valid COSE");
        }
        this._cose = coerceToArrayBuffer(cose, "coseToJwk");
        let parsedCose;
        try {
            mod2.cbor.decodeMultiple(new Uint8Array(cose), (cborObject)=>{
                parsedCose = cborObject;
                return false;
            });
        } catch (err) {
            throw new Error("couldn't parse authenticator.authData.attestationData CBOR: " + err);
        }
        if (typeof parsedCose !== "object") {
            throw new Error("invalid parsing of authenticator.authData.attestationData CBOR");
        }
        const coseMap = new Map(Object.entries(parsedCose));
        const extraMap = new Map();
        const retKey = {};
        for (const kv of coseMap){
            const key = kv[0].toString();
            let value = kv[1].toString();
            if (!coseLabels[key]) {
                extraMap.set(kv[0], kv[1]);
                continue;
            }
            const name = coseLabels[key].name;
            if (coseLabels[key].values[value]) {
                value = coseLabels[key].values[value];
            }
            retKey[name] = value;
        }
        const keyParams = coseKeyParamList[retKey.kty];
        for (const kv1 of extraMap){
            const key = kv1[0].toString();
            let value = kv1[1];
            if (!keyParams[key]) {
                throw new Error("unknown COSE key label: " + retKey.kty + " " + key);
            }
            const name = keyParams[key].name;
            if (keyParams[key].values) {
                value = keyParams[key].values[value.toString()];
            }
            value = coerceToBase64Url(value, "coseToJwk");
            retKey[name] = value;
        }
        this._original_cose = cose;
        this.setAlgorithm(retKey);
        retKey.alg = algToJWKAlg[retKey.alg];
        await this.fromJWK(retKey, true);
        return this;
    }
    async toPem(forcedExport) {
        if (this._original_pem && !forcedExport) {
            return this._original_pem;
        } else if (this.getKey()) {
            let pemResult = abToPem("PUBLIC KEY", await mod2.webcrypto.subtle.exportKey("spki", this.getKey()));
            return pemResult;
        } else {
            throw new Error("No key information available");
        }
    }
    toJwk() {
        if (this._original_jwk) {
            return this._original_jwk;
        } else {
            throw new Error("No usable key information available");
        }
    }
    toCose() {
        if (this._original_cose) {
            return this._original_cose;
        } else {
            throw new Error("No usable key information available");
        }
    }
    getKey() {
        if (this._key) {
            return this._key;
        } else {
            throw new Error("Key data not available");
        }
    }
    getAlgorithm() {
        return this._alg;
    }
    setAlgorithm(algorithmInput) {
        let algorithmOutput = this._alg || {};
        if (algorithmInput.name) {
            algorithmOutput.name = algorithmInput.name;
        } else if (algorithmInput.alg) {
            const algMapResult = algorithmInputMap[algorithmInput.alg];
            if (algMapResult) {
                algorithmOutput.name = algMapResult;
            }
        }
        if (algorithmInput.hash) {
            if (algorithmInput.hash.name) {
                algorithmOutput.hash = algorithmInput.hash;
            } else {
                algorithmOutput.hash = {
                    name: algorithmInput.hash
                };
            }
        } else if (algorithmInput.alg) {
            let hashMapResult = inputHashMap[algorithmInput.alg];
            if (hashMapResult) {
                algorithmOutput.hash = {
                    name: hashMapResult
                };
            }
        }
        if (algorithmInput.namedCurve) {
            algorithmOutput.namedCurve = algorithmInput.namedCurve;
        } else if (algorithmInput.crv) {
            algorithmOutput.namedCurve = algorithmInput.crv;
        }
        if (Object.keys(algorithmOutput).length > 0) {
            this._alg = algorithmOutput;
            if (this._alg.hash && this._key) {
                this._key.algorithm.hash = this._alg.hash;
            }
        }
    }
}
function coseAlgToStr(alg) {
    if (typeof alg !== "number") {
        throw new TypeError("expected 'alg' to be a number, got: " + alg);
    }
    const algValues = coseLabels["3"].values;
    const mapResult = algValues[alg];
    if (!mapResult) {
        throw new Error("'alg' is not a valid COSE algorithm number");
    }
    return algValues[alg];
}
function coseAlgToHashStr(alg) {
    if (typeof alg === "number") alg = coseAlgToStr(alg);
    if (typeof alg !== "string") {
        throw new Error("'alg' is not a string or a valid COSE algorithm number");
    }
    const mapResult = inputHashMap[alg];
    if (!mapResult) {
        throw new Error("'alg' is not a valid COSE algorithm");
    }
    return inputHashMap[alg];
}
const fidoMdsRootCert = "-----BEGIN CERTIFICATE-----\n" + "MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G\n" + "A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp\n" + "Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4\n" + "MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG\n" + "A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI\n" + "hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8\n" + "RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT\n" + "gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm\n" + "KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd\n" + "QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ\n" + "XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw\n" + "DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o\n" + "LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU\n" + "RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp\n" + "jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK\n" + "6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX\n" + "mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs\n" + "Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH\n" + "WD9f\n" + "-----END CERTIFICATE-----\n";
class MdsEntry {
    constructor(mdsEntry, tocEntry){
        for (const key2 of Object.keys(tocEntry)){
            this[key2] = tocEntry[key2];
        }
        for (const key1 of Object.keys(mdsEntry)){
            this[key1] = mdsEntry[key1];
        }
        if (this.metadataStatement) {
            delete this.metadataStatement;
        }
        this.attachmentHint = this.attachmentHint instanceof Array ? this.attachmentHint : attachmentHintToArr(this.attachmentHint);
        function attachmentHintToArr(hint) {
            const ret = [];
            if (hint & 1) ret.push("internal");
            if (hint & 2) ret.push("external");
            if (hint & 4) ret.push("wired");
            if (hint & 8) ret.push("wireless");
            if (hint & 16) ret.push("nfc");
            if (hint & 32) ret.push("bluetooth");
            if (hint & 64) ret.push("network");
            if (hint & 128) ret.push("ready");
            if (hint & 65280) throw new Error("unknown attachment hint flags: " + hint & 65280);
            return ret;
        }
        if (!Array.isArray(this.attestationTypes)) throw new Error("expected attestationTypes to be Array, got: " + this.attestationTypes);
        this.attestationTypes = this.attestationTypes.map((att)=>typeof att === "string" ? att : attestationTypeToStr(att)
        );
        function attestationTypeToStr(att) {
            switch(att){
                case 15879:
                    return "basic-full";
                case 15880:
                    return "basic-surrogate";
                case 15881:
                    return "ecdaa";
                default:
                    throw new Error("uknown attestation type: " + att);
            }
        }
        if (this.authenticationAlgorithms) {
            this.authenticationAlgorithm = this.authenticationAlgorithms[0];
        }
        this.authenticationAlgorithm = typeof this.authenticationAlgorithm === "string" ? this.authenticationAlgorithm : algToStr(this.authenticationAlgorithm);
        function algToStr(alg) {
            switch(alg){
                case 1:
                    return "ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW";
                case 2:
                    return "ALG_SIGN_SECP256R1_ECDSA_SHA256_DER";
                case 3:
                    return "ALG_SIGN_RSASSA_PSS_SHA256_RAW";
                case 4:
                    return "ALG_SIGN_RSASSA_PSS_SHA256_DER";
                case 5:
                    return "ALG_SIGN_SECP256K1_ECDSA_SHA256_RAW";
                case 6:
                    return "ALG_SIGN_SECP256K1_ECDSA_SHA256_DER";
                case 7:
                    return "ALG_SIGN_SM2_SM3_RAW";
                case 8:
                    return "ALG_SIGN_RSA_EMSA_PKCS1_SHA256_RAW";
                case 9:
                    return "ALG_SIGN_RSA_EMSA_PKCS1_SHA256_DER";
                default:
                    throw new Error("unknown authentication algorithm: " + alg);
            }
        }
        if (this.attestationRootCertificates) {
            for (const certificate of this.attestationRootCertificates){
                CertManager.addCert(certificate);
            }
        }
        this.keyProtection = this.keyProtection instanceof Array ? this.keyProtection : keyProtToArr(this.keyProtection);
        function keyProtToArr(kp) {
            const ret = [];
            if (kp & 1) ret.push("software");
            if (kp & 2) ret.push("hardware");
            if (kp & 4) ret.push("tee");
            if (kp & 8) ret.push("secure-element");
            if (kp & 16) ret.push("remote-handle");
            if (kp & 65504) throw new Error("unknown key protection flags: " + kp & 65504);
            return ret;
        }
        this.matcherProtection = this.matcherProtection instanceof Array ? this.matcherProtection : matcherProtToArr(this.matcherProtection);
        function matcherProtToArr(mp) {
            const ret = [];
            if (mp & 1) ret.push("software");
            if (mp & 2) ret.push("hardware");
            if (mp & 4) ret.push("tee");
            if (mp & 65528) throw new Error("unknown key protection flags: " + mp & 65528);
            return ret;
        }
        if (this.publicKeyAlgAndEncodings) this.publicKeyAlgAndEncoding = `ALG_KEY_${this.publicKeyAlgAndEncodings[0].toUpperCase()}`;
        this.publicKeyAlgAndEncoding = typeof this.publicKeyAlgAndEncoding === "string" ? this.publicKeyAlgAndEncoding : pkAlgAndEncodingToStr(this.publicKeyAlgAndEncoding);
        function pkAlgAndEncodingToStr(pkalg) {
            switch(pkalg){
                case 256:
                    return "ALG_KEY_ECC_X962_RAW";
                case 257:
                    return "ALG_KEY_ECC_X962_DER";
                case 258:
                    return "ALG_KEY_RSA_2048_RAW";
                case 259:
                    return "ALG_KEY_RSA_2048_DER";
                case 260:
                    return "ALG_KEY_COSE";
                default:
                    throw new Error("unknown public key algorithm and encoding: " + pkalg);
            }
        }
        this.tcDisplay = this.tcDisplay instanceof Array ? this.tcDisplay : tcDisplayToArr(this.tcDisplay);
        function tcDisplayToArr(tcd) {
            const ret = [];
            if (tcd & 1) ret.push("any");
            if (tcd & 2) ret.push("priviledged-software");
            if (tcd & 4) ret.push("tee");
            if (tcd & 8) ret.push("hardware");
            if (tcd & 16) ret.push("remote");
            if (tcd & 65504) throw new Error("unknown transaction confirmation display flags: " + tcd & 65504);
            return ret;
        }
        this.userVerificationDetails = uvDetailsToSet(this.userVerificationDetails);
        function uvDetailsToSet(uvList) {
            const ret = [];
            if (!Array.isArray(uvList)) throw new Error("expected userVerificationDetails to be an Array, got: " + uvList);
            uvList.forEach((uv)=>{
                if (!Array.isArray(uv)) throw new Error("expected userVerification to be Array, got " + uv);
                const d = uv.map((desc)=>{
                    const newDesc = {};
                    let descKey;
                    if ("caDesc" in desc) {
                        newDesc.type = "code";
                        descKey = "caDesc";
                    }
                    if ("baDesc" in desc) {
                        newDesc.type = "biometric";
                        descKey = "baDesc";
                    }
                    if ("paDesc" in desc) {
                        newDesc.type = "pattern";
                        descKey = "paDesc";
                    }
                    newDesc.userVerification = uvToArr(desc.userVerification);
                    if (desc.userVerificationMethod) newDesc.userVerification = (desc.userVerificationMethod.match(/(\w+)_internal/) || [
                        "none",
                        "none"
                    ])[1];
                    if (descKey) for (const key of Object.keys(desc[descKey])){
                        newDesc[key] = desc[descKey][key];
                    }
                    return newDesc;
                });
                ret.push(d);
            });
            return ret;
        }
        function uvToArr(uv) {
            const ret = [];
            if (uv & 1) ret.push("presence");
            if (uv & 2) ret.push("fingerprint");
            if (uv & 4) ret.push("passcode");
            if (uv & 8) ret.push("voiceprint");
            if (uv & 16) ret.push("faceprint");
            if (uv & 32) ret.push("location");
            if (uv & 64) ret.push("eyeprint");
            if (uv & 128) ret.push("pattern");
            if (uv & 256) ret.push("handprint");
            if (uv & 512) ret.push("none");
            if (uv & 1024) ret.push("all");
            return ret;
        }
        if (this.protocolFamily === undefined) this.protocolFamily = "uaf";
        realBoolean(this, "isSecondFactorOnly");
        realBoolean(this, "isKeyRestricted");
        realBoolean(this, "isFreshUserVerificationRequired");
    }
}
class MdsCollection {
    constructor(collectionName){
        if (typeof collectionName !== "string" || collectionName.length < 1) {
            throw new Error("expected 'collectionName' to be non-empty string, got: " + collectionName);
        }
        this.toc = null;
        this.unvalidatedEntryList = new Map();
        this.entryList = new Map();
        this.validated = false;
        this.name = collectionName;
    }
    async addToc(tocStr, rootCert, crls) {
        if (typeof tocStr !== "string" || tocStr.length < 1) {
            throw new Error("expected MDS TOC to be non-empty string");
        }
        let parsedJws;
        try {
            const protectedHeader = await mod2.decodeProtectedHeader(tocStr);
            const publicKey = await mod2.getEmbeddedJwk(protectedHeader);
            parsedJws = await mod2.jwtVerify(tocStr, await mod2.importJWK(publicKey));
            parsedJws.header = protectedHeader;
            parsedJws.key = publicKey;
            this.toc = parsedJws.payload;
        } catch (e7) {
            e7.message = "could not parse and validate MDS TOC: " + e7.message;
            throw e7;
        }
        if (rootCert === undefined) {
            if (parsedJws.kid === "Metadata TOC Signer 3" || parsedJws.key && parsedJws.key.kid === "Metadata TOC Signer 3") {
                rootCert = "-----BEGIN CERTIFICATE-----\n" + "MIICQzCCAcigAwIBAgIORqmxkzowRM99NQZJurcwCgYIKoZIzj0EAwMwUzELMAkG\n" + "A1UEBhMCVVMxFjAUBgNVBAoTDUZJRE8gQWxsaWFuY2UxHTAbBgNVBAsTFE1ldGFk\n" + "YXRhIFRPQyBTaWduaW5nMQ0wCwYDVQQDEwRSb290MB4XDTE1MDYxNzAwMDAwMFoX\n" + "DTQ1MDYxNzAwMDAwMFowUzELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUZJRE8gQWxs\n" + "aWFuY2UxHTAbBgNVBAsTFE1ldGFkYXRhIFRPQyBTaWduaW5nMQ0wCwYDVQQDEwRS\n" + "b290MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEFEoo+6jdxg6oUuOloqPjK/nVGyY+\n" + "AXCFz1i5JR4OPeFJs+my143ai0p34EX4R1Xxm9xGi9n8F+RxLjLNPHtlkB3X4ims\n" + "rfIx7QcEImx1cMTgu5zUiwxLX1ookVhIRSoso2MwYTAOBgNVHQ8BAf8EBAMCAQYw\n" + "DwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU0qUfC6f2YshA1Ni9udeO0VS7vEYw\n" + "HwYDVR0jBBgwFoAU0qUfC6f2YshA1Ni9udeO0VS7vEYwCgYIKoZIzj0EAwMDaQAw\n" + "ZgIxAKulGbSFkDSZusGjbNkAhAkqTkLWo3GrN5nRBNNk2Q4BlG+AvM5q9wa5WciW\n" + "DcMdeQIxAMOEzOFsxX9Bo0h4LOFE5y5H8bdPFYW+l5gy1tQiJv+5NUyM2IBB55XU\n" + "YjdBz56jSA==\n" + "-----END CERTIFICATE-----\n";
            } else {
                rootCert = fidoMdsRootCert;
            }
        }
        let rootCerts;
        if (Array.isArray(rootCert)) rootCerts = rootCert;
        else rootCerts = [
            rootCert
        ];
        const certHeader = parsedJws.header ? parsedJws.header : parsedJws.protectedHeader;
        await CertManager.verifyCertChain(certHeader.x5c, rootCerts, crls);
        this.toc.raw = tocStr;
        if (this.toc.entries.some((entry)=>!entry.metadataStatement
        )) console.warn("[DEPRECATION WARNING] FIDO MDS v2 will be removed in October 2022. Please update to MDS v3!");
        return this.toc;
    }
    getToc() {
        return this.toc;
    }
    addEntry(entryStr) {
        if (typeof entryStr !== "string" || entryStr.length < 1) {
            throw new Error("expected MDS entry to be non-empty string");
        }
        let newEntry = b64ToJsObject(entryStr, "MDS entry");
        if (newEntry.metadataStatement) {
            newEntry = newEntry.metadataStatement;
            entryStr = jsObjectToB64(newEntry);
        }
        newEntry.raw = entryStr;
        const newEntryId = getMdsEntryId(newEntry);
        if (Array.isArray(newEntryId)) {
            newEntryId.forEach((id)=>{
                this.unvalidatedEntryList.set(id, newEntry);
            });
        } else {
            this.unvalidatedEntryList.set(newEntryId, newEntry);
        }
    }
    async validate() {
        if (typeof this.toc !== "object" || this.toc === null) {
            throw new Error("add MDS TOC before attempting to validate MDS collection");
        }
        if (this.unvalidatedEntryList.size < 1) {
            throw new Error("add MDS entries before attempting to validate MDS collection");
        }
        let mapEntry;
        for (mapEntry of this.unvalidatedEntryList){
            const entry = mapEntry[1];
            const entryId = getMdsEntryId(entry);
            let tocEntry = this.toc.entries.filter((te)=>{
                const teId = getMdsEntryId(te);
                const eq = idEquals(teId, entryId);
                return eq;
            });
            if (tocEntry.length !== 1) {
                throw new Error(`found the wrong number of TOC entries for '${entryId}': ${tocEntry.length}`);
            }
            tocEntry = tocEntry[0];
            const entryHash = await mod2.hashDigest(entry.raw);
            let tocEntryHash;
            if (tocEntry.hash) {
                tocEntryHash = tocEntry.hash;
            } else {
                tocEntryHash = await mod2.hashDigest(jsObjectToB64(tocEntry.metadataStatement));
            }
            tocEntryHash = coerceToArrayBuffer(tocEntryHash, "MDS TOC entry hash");
            if (!arrayBufferEquals(entryHash, tocEntryHash)) {
                throw new Error("MDS entry hash did not match corresponding hash in MDS TOC");
            }
            const newEntry = new MdsEntry(entry, tocEntry);
            newEntry.collection = this;
            if (Array.isArray(entryId)) {
                entryId.forEach((id)=>{
                    this.entryList.set(tocEntry.metadataStatement ? id.replace(/-/g, "") : id, newEntry);
                });
            } else {
                this.entryList.set(tocEntry.metadataStatement ? entryId.replace(/-/g, "") : entryId, newEntry);
            }
        }
    }
    findEntry(id) {
        if (id instanceof ArrayBuffer) {
            id = coerceToBase64Url(id, "MDS entry id");
        }
        if (typeof id !== "string") {
            throw new Error("expected 'id' to be String, got: " + id);
        }
        return this.entryList.get(id.replace(/-/g, "")) || this.entryList.get(abToHex(mod2.base64.toArrayBuffer(id, true)).replace(/-/g, "")) || null;
    }
}
function getMdsEntryId(obj) {
    if (typeof obj !== "object") {
        throw new Error("getMdsEntryId expected 'obj' to be object, got: " + obj);
    }
    if (typeof obj.aaid === "string") {
        return obj.aaid;
    }
    if (typeof obj.aaguid === "string") {
        return obj.aaguid;
    }
    if (Array.isArray(obj.attestationCertificateKeyIdentifiers)) {
        return obj.attestationCertificateKeyIdentifiers;
    }
    throw new Error("MDS entry didn't have a valid ID");
}
function idEquals(id1, id2) {
    if (id1 instanceof ArrayBuffer) {
        id1 = coerceToBase64Url(id1);
    }
    if (id2 instanceof ArrayBuffer) {
        id2 = coerceToBase64Url(id2);
    }
    if (typeof id1 === "string" && typeof id2 === "string") {
        return id1 === id2;
    }
    if (Array.isArray(id1) && Array.isArray(id2)) {
        if (id1.length !== id2.length) return false;
        const allSame = id1.reduce((acc, val)=>acc && id2.includes(val)
        , true);
        if (!allSame) return false;
        return true;
    }
    return false;
}
function realBoolean(obj, prop) {
    if (obj[prop] === "true") obj[prop] = true;
    if (obj[prop] === "false") obj[prop] = false;
}
function noneParseFn(attStmt) {
    if (Object.keys(attStmt).length !== 0) {
        throw new Error("'none' attestation format: attStmt had fields");
    }
    return new Map();
}
function noneValidateFn() {
    this.audit.journal.add("fmt");
    return true;
}
const noneAttestation = {
    name: "none",
    parseFn: noneParseFn,
    validateFn: noneValidateFn
};
const u2fRootCerts = [
    "MIIDHjCCAgagAwIBAgIEG0BT9zANBgkqhkiG9w0BAQsFADAuMSwwKgYDVQQDEyNZ\n" + "dWJpY28gVTJGIFJvb3QgQ0EgU2VyaWFsIDQ1NzIwMDYzMTAgFw0xNDA4MDEwMDAw\n" + "MDBaGA8yMDUwMDkwNDAwMDAwMFowLjEsMCoGA1UEAxMjWXViaWNvIFUyRiBSb290\n" + "IENBIFNlcmlhbCA0NTcyMDA2MzEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\n" + "AoIBAQC/jwYuhBVlqaiYWEMsrWFisgJ+PtM91eSrpI4TK7U53mwCIawSDHy8vUmk\n" + "5N2KAj9abvT9NP5SMS1hQi3usxoYGonXQgfO6ZXyUA9a+KAkqdFnBnlyugSeCOep\n" + "8EdZFfsaRFtMjkwz5Gcz2Py4vIYvCdMHPtwaz0bVuzneueIEz6TnQjE63Rdt2zbw\n" + "nebwTG5ZybeWSwbzy+BJ34ZHcUhPAY89yJQXuE0IzMZFcEBbPNRbWECRKgjq//qT\n" + "9nmDOFVlSRCt2wiqPSzluwn+v+suQEBsUjTGMEd25tKXXTkNW21wIWbxeSyUoTXw\n" + "LvGS6xlwQSgNpk2qXYwf8iXg7VWZAgMBAAGjQjBAMB0GA1UdDgQWBBQgIvz0bNGJ\n" + "hjgpToksyKpP9xv9oDAPBgNVHRMECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIBBjAN\n" + "BgkqhkiG9w0BAQsFAAOCAQEAjvjuOMDSa+JXFCLyBKsycXtBVZsJ4Ue3LbaEsPY4\n" + "MYN/hIQ5ZM5p7EjfcnMG4CtYkNsfNHc0AhBLdq45rnT87q/6O3vUEtNMafbhU6kt\n" + "hX7Y+9XFN9NpmYxr+ekVY5xOxi8h9JDIgoMP4VB1uS0aunL1IGqrNooL9mmFnL2k\n" + "LVVee6/VR6C5+KSTCMCWppMuJIZII2v9o4dkoZ8Y7QRjQlLfYzd3qGtKbw7xaF1U\n" + "sG/5xUb/Btwb2X2g4InpiB/yt/3CpQXpiWX/K4mBvUKiGn05ZsqeY1gx4g0xLBqc\n" + "U9psmyPzK+Vsgw2jeRQ5JlKDyqE0hebfC1tvFu0CCrJFcw==", 
];
const algMap = new Map([
    [
        -7,
        {
            algName: "ECDSA_w_SHA256",
            hashAlg: "SHA-256"
        }
    ],
    [
        -35,
        {
            algName: "ECDSA_w_SHA384",
            hashAlg: "SHA-384"
        }
    ],
    [
        -36,
        {
            algName: "ECDSA_w_SHA512",
            hashAlg: "SHA-512"
        }
    ],
    [
        -257,
        {
            algName: "RSASSA-PKCS1-v1_5_w_SHA256",
            hashAlg: "SHA-256"
        }
    ], 
]);
function packedParseFn(attStmt) {
    const ret = new Map();
    const algEntry = algMap.get(attStmt.alg);
    if (algEntry === undefined) {
        throw new Error("packed attestation: unknown algorithm: " + attStmt.alg);
    }
    ret.set("alg", algEntry);
    const x5c = attStmt.x5c;
    const newX5c = [];
    if (Array.isArray(x5c)) {
        for (let cert of x5c){
            cert = coerceToArrayBuffer(cert, "packed x5c cert");
            newX5c.push(cert);
        }
        ret.set("attCert", newX5c.shift());
        ret.set("x5c", newX5c);
    } else {
        ret.set("x5c", x5c);
    }
    let ecdaaKeyId = attStmt.ecdaaKeyId;
    if (ecdaaKeyId !== undefined) {
        ecdaaKeyId = coerceToArrayBuffer(ecdaaKeyId, "ecdaaKeyId");
        ret.set("ecdaaKeyId", ecdaaKeyId);
    }
    let sig = attStmt.sig;
    sig = coerceToArrayBuffer(sig, "packed signature");
    ret.set("sig", sig);
    return ret;
}
async function packedValidateFn() {
    const x5c = this.authnrData.get("x5c");
    const ecdaaKeyId = this.authnrData.get("ecdaaKeyId");
    if (x5c !== undefined && ecdaaKeyId !== undefined) {
        throw new Error("packed attestation: should be 'basic' or 'ecdaa', got both");
    }
    if (x5c) return await packedValidateBasic.call(this);
    if (ecdaaKeyId) return await packedValidateEcdaa.call(this);
    return await packedValidateSurrogate.call(this);
}
async function packedValidateBasic() {
    const { algName , hashAlg ,  } = this.authnrData.get("alg");
    if (algName === undefined) {
        throw new Error("packed attestation: unknown algorithm " + algName);
    }
    const res = await validateSignature(this.clientData.get("rawClientDataJson"), this.authnrData.get("rawAuthnrData"), this.authnrData.get("sig"), hashAlg, this.authnrData.get("attCert"));
    if (!res) {
        throw new Error("packed attestation signature verification failed");
    }
    this.audit.journal.add("sig");
    this.audit.journal.add("alg");
    await validateCerts(this.authnrData.get("attCert"), this.authnrData.get("aaguid"), this.authnrData.get("x5c"), this.audit);
    this.audit.info.set("attestation-type", "basic");
    this.audit.journal.add("fmt");
    return true;
}
async function validateSignature(rawClientData, authenticatorData, sig, hashAlg, parsedAttCert) {
    const hash = await mod2.hashDigest(rawClientData);
    const clientDataHash = new Uint8Array(hash).buffer;
    const attCertPem = abToPem("CERTIFICATE", parsedAttCert);
    const cert = new Certificate1(attCertPem);
    const publicKey = await cert.getPublicKey();
    const verify1 = await mod2.verifySignature(publicKey, sig, appendBuffer(authenticatorData, clientDataHash), hashAlg);
    return verify1;
}
async function validateCerts(parsedAttCert, aaguid, _x5c, audit) {
    if (CertManager.getCerts().size === 0) {
        u2fRootCerts.forEach((cert)=>CertManager.addCert(cert)
        );
    }
    const attCert = new Certificate1(coerceToBase64(parsedAttCert, "parsedAttCert"));
    try {
        await attCert.verify();
    } catch (e8) {
        const err = e8;
        if (err.message === "Please provide issuer certificate as a parameter") {
            audit.warning.set("attesation-not-validated", "could not validate attestation because the root attestation certification could not be found");
        } else {
            throw err;
        }
    }
    audit.journal.add("x5c");
    if (attCert.getVersion() !== 3) {
        throw new Error("expected packed attestation certificate to be x.509v3");
    }
    const exts = attCert.getExtensions();
    exts.forEach((v, k)=>audit.info.set(k, v)
    );
    attCert.info.forEach((v, k)=>audit.info.set(k, v)
    );
    attCert.warning.forEach((v, k)=>audit.warning.set(k, v)
    );
    audit.journal.add("attCert");
    if (attCert.getVersion() !== 3) {
        throw new Error("expected packed attestation certificate to be x.509v3");
    }
    const subject = attCert.getSubject();
    if (typeof subject.get("country-name") !== "string") {
        throw new Error("packed attestation: attestation certificate missing 'country name'");
    }
    if (typeof subject.get("organization-name") !== "string") {
        throw new Error("packed attestation: attestation certificate missing 'organization name'");
    }
    if (subject.get("organizational-unit-name") !== "Authenticator Attestation") {
        throw new Error("packed attestation: attestation certificate 'organizational unit name' must be 'Authenticator Attestation'");
    }
    if (typeof subject.get("common-name") !== "string") {
        throw new Error("packed attestation: attestation certificate missing 'common name'");
    }
    const basicConstraints = exts.get("basic-constraints");
    if (basicConstraints.cA !== false) {
        throw new Error("packed attestation: basic constraints 'cA' must be 'false'");
    }
    const certAaguid = exts.get("fido-aaguid");
    if (certAaguid !== undefined && !arrayBufferEquals(aaguid, certAaguid)) {
        throw new Error("packed attestation: authnrData AAGUID did not match AAGUID in attestation certificate");
    }
}
async function validateSelfSignature(rawClientData, authenticatorData, sig, hashAlg, publicKeyPem) {
    const clientDataHash = await mod2.hashDigest(rawClientData, hashAlg);
    const verify2 = await mod2.verifySignature(publicKeyPem, sig, appendBuffer(authenticatorData, clientDataHash), hashAlg);
    return verify2;
}
async function packedValidateSurrogate() {
    const { algName , hashAlg ,  } = this.authnrData.get("alg");
    if (algName === undefined) {
        throw new Error("packed attestation: unknown algorithm " + algName);
    }
    const res = await validateSelfSignature(this.clientData.get("rawClientDataJson"), this.authnrData.get("rawAuthnrData"), this.authnrData.get("sig"), hashAlg, this.authnrData.get("credentialPublicKeyPem"));
    if (!res || typeof res !== "boolean") {
        throw new Error("packed attestation signature verification failed");
    }
    this.audit.journal.add("sig");
    this.audit.journal.add("alg");
    this.audit.journal.add("x5c");
    this.audit.info.set("attestation-type", "self");
    this.audit.journal.add("fmt");
    return true;
}
function packedValidateEcdaa() {
    throw new Error("packed attestation: ECDAA not implemented, please open a GitHub issue.");
}
const packedAttestation = {
    name: "packed",
    parseFn: packedParseFn,
    validateFn: packedValidateFn
};
function fidoU2fParseFn(attStmt) {
    const ret = new Map();
    const x5c = attStmt.x5c;
    let sig = attStmt.sig;
    if (!Array.isArray(x5c)) {
        throw new TypeError("expected U2F attestation x5c field to be of type Array");
    }
    if (x5c.length < 1) {
        throw new TypeError("no certificates in U2F x5c field");
    }
    const newX5c = [];
    for (let cert of x5c){
        cert = coerceToArrayBuffer(cert, "U2F x5c cert");
        newX5c.push(cert);
    }
    ret.set("attCert", newX5c.shift());
    ret.set("x5c", newX5c);
    sig = coerceToArrayBuffer(sig, "U2F signature");
    ret.set("sig", sig);
    return ret;
}
async function fidoU2fValidateFn() {
    const x5c = this.authnrData.get("x5c");
    const parsedAttCert = this.authnrData.get("attCert");
    if (x5c.length > 0) {
        throw new Error("cert chain not validated");
    }
    this.audit.journal.add("x5c");
    if (CertManager.getCerts().size === 0) {
        u2fRootCerts.forEach((cert)=>CertManager.addCert(cert)
        );
    }
    const attCert = new Certificate1(coerceToBase64(parsedAttCert, "parsedAttCert"));
    try {
        await attCert.verify();
    } catch (err) {
        if (err.message === "Please provide issuer certificate as a parameter") {
            this.audit.warning.set("attesation-not-validated", "could not validate attestation because the root attestation certification could not be found");
        } else {
            throw err;
        }
    }
    if (attCert.getVersion() !== 3) {
        throw new Error("expected U2F attestation certificate to be x.509v3");
    }
    attCert.getExtensions().forEach((v, k)=>this.audit.info.set(k, v)
    );
    attCert.info.forEach((v, k)=>this.audit.info.set(k, v)
    );
    attCert.warning.forEach((v, k)=>this.audit.warning.set(k, v)
    );
    this.audit.journal.add("attCert");
    const jwk = this.authnrData.get("credentialPublicKeyJwk");
    if (jwk.kty !== "EC" || jwk.crv !== "P-256") {
        throw new Error("bad U2F key type");
    }
    const rpIdHash = this.authnrData.get("rpIdHash");
    const credId = this.authnrData.get("credId");
    const rawClientData = this.clientData.get("rawClientDataJson");
    const clientDataHash = abToBuf(await mod2.hashDigest(abToBuf(rawClientData)));
    const x = coerceToArrayBuffer(jwk.x, "U2F public key x component");
    if (x.byteLength !== 32) {
        throw new Error("U2F public key x component was wrong size");
    }
    const y = coerceToArrayBuffer(jwk.y, "U2F public key y component");
    if (y.byteLength !== 32) {
        throw new Error("U2F public key y component was wrong size");
    }
    const verificationData = new Uint8Array([
        0,
        ...new Uint8Array(rpIdHash),
        ...new Uint8Array(clientDataHash),
        ...new Uint8Array(credId),
        4,
        ...new Uint8Array(x),
        ...new Uint8Array(y), 
    ]);
    const sig = this.authnrData.get("sig");
    const attCertPem = abToPem("CERTIFICATE", parsedAttCert);
    const cert1 = new Certificate1(attCertPem);
    const publicKey = await cert1.getPublicKey();
    const res = await mod2.verifySignature(publicKey, abToBuf(sig), abToBuf(verificationData), "SHA-256");
    if (!res) {
        throw new Error("U2F attestation signature verification failed");
    }
    this.audit.journal.add("sig");
    this.audit.info.set("attestation-type", "basic");
    this.audit.journal.add("fmt");
    return true;
}
const fidoU2fAttestation = {
    name: "fido-u2f",
    parseFn: fidoU2fParseFn,
    validateFn: fidoU2fValidateFn
};
function androidSafetyNetParseFn(attStmt) {
    const ret = new Map();
    ret.set("ver", attStmt.ver);
    const response = ab2str(attStmt.response);
    ret.set("response", response);
    return ret;
}
async function androidSafetyNetValidateFn() {
    const response = this.authnrData.get("response");
    const protectedHeader = await mod2.decodeProtectedHeader(response);
    const publicKey = await mod2.getEmbeddedJwk(protectedHeader);
    const parsedJws = await mod2.jwtVerify(response, await mod2.importJWK(publicKey));
    parsedJws.header = protectedHeader;
    this.authnrData.set("payload", parsedJws.payload);
    if (!parsedJws.payload.ctsProfileMatch) {
        throw new Error("android-safetynet attestation: ctsProfileMatch: the device is not compatible");
    }
    const rawClientData = this.clientData.get("rawClientDataJson");
    const rawAuthnrData = this.authnrData.get("rawAuthnrData");
    const clientDataHash = await mod2.hashDigest(rawClientData);
    const rawAuthnrDataBuf = new Uint8Array(rawAuthnrData);
    const clientDataHashBuf = new Uint8Array(clientDataHash);
    const concatenated = appendBuffer(rawAuthnrDataBuf, clientDataHashBuf);
    const hash = await mod2.hashDigest(concatenated);
    const nonce = mod2.base64.fromArrayBuffer(hash);
    if (nonce !== parsedJws.payload.nonce) {
        throw new Error("android-safetynet attestation: nonce check hash failed");
    }
    if (parsedJws.payload.error) {
        throw new Error("android-safetynet: " + parsedJws.payload.error + "advice: " + parsedJws.payload.advice);
    }
    this.audit.journal.add("payload");
    this.audit.journal.add("ver");
    this.audit.journal.add("response");
    this.authnrData.set("attCert", parsedJws.header.x5c.shift());
    this.authnrData.set("x5c", parsedJws.header.x5c);
    this.audit.journal.add("attCert");
    this.audit.journal.add("x5c");
    const attCert = new Certificate1(coerceToBase64(parsedJws.header.x5c.shift(), "parsedAttCert"));
    this.audit.info.set("organization-name", attCert.getSubject().get("organization-name"));
    this.audit.info.set("attestation-type", "basic");
    this.audit.journal.add("fmt");
    return true;
}
const androidSafetyNetAttestation = {
    name: "android-safetynet",
    parseFn: androidSafetyNetParseFn,
    validateFn: androidSafetyNetValidateFn
};
function tpmParseFn(attStmt) {
    const ret = new Map();
    if (attStmt.ecdaaKeyId !== undefined) {
        throw new Error("TPM ECDAA attesation is not currently supported.");
    }
    const x5c = attStmt.x5c;
    if (!Array.isArray(x5c)) {
        throw new TypeError("expected TPM attestation x5c field to be of type Array");
    }
    if (x5c.length < 1) {
        throw new TypeError("no certificates in TPM x5c field");
    }
    const newX5c = [];
    for (let cert of x5c){
        cert = coerceToArrayBuffer(cert, "TPM x5c cert");
        newX5c.push(cert);
    }
    ret.set("attCert", newX5c.shift());
    ret.set("x5c", newX5c);
    if (attStmt.ecdaaKeyId) ret.set("ecdaaKeyId", attStmt.ecdaaKeyId);
    ret.set("sig", coerceToArrayBuffer(attStmt.sig, "tpm signature"));
    ret.set("ver", attStmt.ver);
    const alg = {
        algName: coseAlgToStr(attStmt.alg),
        hashAlg: coseAlgToHashStr(attStmt.alg)
    };
    ret.set("alg", alg);
    const certInfo = parseCertInfo(coerceToArrayBuffer(attStmt.certInfo, "certInfo"));
    ret.set("certInfo", certInfo);
    const pubArea = parsePubArea(coerceToArrayBuffer(attStmt.pubArea, "pubArea"));
    ret.set("pubArea", pubArea);
    return ret;
}
function parseCertInfo(certInfo) {
    if (!(certInfo instanceof ArrayBuffer)) {
        throw new Error("tpm attestation: expected certInfo to be ArrayBuffer");
    }
    const dv = new DataView(certInfo);
    let offset = 0;
    let ret;
    const ci = new Map();
    ci.set("rawCertInfo", certInfo);
    const magic = dv.getUint32(offset);
    if (magic !== 4283712327) {
        throw new Error("tpm attestation: certInfo had bad magic number: " + magic.toString(16));
    }
    ci.set("magic", magic);
    offset += 4;
    const type = decodeStructureTag(dv.getUint16(offset));
    if (type !== "TPM_ST_ATTEST_CERTIFY") {
        throw new Error("tpm attestation: got wrong type. expected 'TPM_ST_ATTEST_CERTIFY' got: " + type);
    }
    ci.set("type", type);
    offset += 2;
    ret = getTpm2bName(dv, offset);
    ci.set("qualifiedSignerHashType", ret.hashType);
    ci.set("qualifiedSigner", ret.nameHash);
    offset = ret.offset;
    ret = getSizedElement(dv, offset);
    ci.set("extraData", ret.buf);
    offset = ret.offset;
    ci.set("clock", dv.buffer.slice(offset, offset + 8));
    offset += 8;
    ci.set("resetCount", dv.getUint32(offset));
    offset += 4;
    ci.set("restartCount", dv.getUint32(offset));
    offset += 4;
    ci.set("safe", !!dv.getUint8(offset));
    offset++;
    ci.set("firmwareVersion", dv.buffer.slice(offset, offset + 8));
    offset += 8;
    ret = getTpm2bName(dv, offset);
    ci.set("nameHashType", ret.hashType);
    ci.set("name", ret.nameHash);
    offset = ret.offset;
    ret = getTpm2bName(dv, offset);
    ci.set("qualifiedNameHashType", ret.hashType);
    ci.set("qualifiedName", ret.nameHash);
    offset = ret.offset;
    if (offset !== certInfo.byteLength) {
        throw new Error("tpm attestation: left over bytes when parsing cert info");
    }
    return ci;
}
function parsePubArea(pubArea) {
    if (!(pubArea instanceof ArrayBuffer)) {
        throw new Error("tpm attestation: expected pubArea to be ArrayBuffer");
    }
    const dv = new DataView(pubArea);
    let offset = 0;
    let ret;
    const pa = new Map();
    pa.set("rawPubArea", pubArea);
    const type = algIdToStr(dv.getUint16(offset));
    pa.set("type", type);
    offset += 2;
    pa.set("nameAlg", algIdToStr(dv.getUint16(offset)));
    offset += 2;
    pa.set("objectAttributes", decodeObjectAttributes(dv.getUint32(offset)));
    offset += 4;
    ret = getSizedElement(dv, offset);
    pa.set("authPolicy", ret.buf);
    offset = ret.offset;
    if (type !== "TPM_ALG_RSA") {
        throw new Error("tpm attestation: only TPM_ALG_RSA supported");
    }
    pa.set("symmetric", algIdToStr(dv.getUint16(offset)));
    offset += 2;
    pa.set("scheme", algIdToStr(dv.getUint16(offset)));
    offset += 2;
    pa.set("keyBits", dv.getUint16(offset));
    offset += 2;
    let exponent = dv.getUint32(offset);
    if (exponent === 0) exponent = 65537;
    pa.set("exponent", exponent);
    offset += 4;
    ret = getSizedElement(dv, offset);
    pa.set("unique", ret.buf);
    offset = ret.offset;
    if (offset !== pubArea.byteLength) {
        throw new Error("tpm attestation: left over bytes when parsing public area");
    }
    return pa;
}
function decodeStructureTag(t3) {
    switch(t3){
        case 196:
            return "TPM_ST_RSP_COMMAND";
        case 32768:
            return "TPM_ST_NULL";
        case 32769:
            return "TPM_ST_NO_SESSIONS";
        case 32770:
            return "TPM_ST_SESSIONS";
        case 32771:
            return "TPM_RESERVED_0x8003";
        case 32772:
            return "TPM_RESERVED_0x8004";
        case 32788:
            return "TPM_ST_ATTEST_NV";
        case 32789:
            return "TPM_ST_ATTEST_COMMAND_AUDIT";
        case 32790:
            return "TPM_ST_ATTEST_SESSION_AUDIT";
        case 32791:
            return "TPM_ST_ATTEST_CERTIFY";
        case 32792:
            return "TPM_ST_ATTEST_QUOTE";
        case 32793:
            return "TPM_ST_ATTEST_TIME";
        case 32794:
            return "TPM_ST_ATTEST_CREATION";
        case 32795:
            return "TPM_RESERVED_0x801B";
        case 32801:
            return "TPM_ST_CREATION";
        case 32802:
            return "TPM_ST_VERIFIED";
        case 32803:
            return "TPM_ST_AUTH_SECRET";
        case 32804:
            return "TPM_ST_HASHCHECK";
        case 32805:
            return "TPM_ST_AUTH_SIGNED";
        case 32809:
            return "TPM_ST_FU_MANIFEST";
        default:
            throw new Error("tpm attestation: unknown structure tag: " + t3.toString(16));
    }
}
function decodeObjectAttributes(oa) {
    const attrList = [
        "RESERVED_0",
        "FIXED_TPM",
        "ST_CLEAR",
        "RESERVED_3",
        "FIXED_PARENT",
        "SENSITIVE_DATA_ORIGIN",
        "USER_WITH_AUTH",
        "ADMIN_WITH_POLICY",
        "RESERVED_8",
        "RESERVED_9",
        "NO_DA",
        "ENCRYPTED_DUPLICATION",
        "RESERVED_12",
        "RESERVED_13",
        "RESERVED_14",
        "RESERVED_15",
        "RESTRICTED",
        "DECRYPT",
        "SIGN_ENCRYPT",
        "RESERVED_19",
        "RESERVED_20",
        "RESERVED_21",
        "RESERVED_22",
        "RESERVED_23",
        "RESERVED_24",
        "RESERVED_25",
        "RESERVED_26",
        "RESERVED_27",
        "RESERVED_28",
        "RESERVED_29",
        "RESERVED_30",
        "RESERVED_31", 
    ];
    const ret = new Set();
    for(let i141 = 0; i141 < 32; i141++){
        const bit = 1 << i141;
        if (oa & bit) {
            ret.add(attrList[i141]);
        }
    }
    return ret;
}
function getSizedElement(dv, offset) {
    const size = dv.getUint16(offset);
    offset += 2;
    const buf = dv.buffer.slice(offset, offset + size);
    dv = new DataView(buf);
    offset += size;
    return {
        size,
        dv,
        buf,
        offset
    };
}
function getTpm2bName(dvIn, oIn) {
    const { offset , dv ,  } = getSizedElement(dvIn, oIn);
    const hashType = algIdToStr(dv.getUint16(0));
    const nameHash = dv.buffer.slice(2);
    return {
        hashType,
        nameHash,
        offset
    };
}
function algIdToStr(hashType) {
    const hashList = [
        "TPM_ALG_ERROR",
        "TPM_ALG_RSA",
        null,
        null,
        "TPM_ALG_SHA1",
        "TPM_ALG_HMAC",
        "TPM_ALG_AES",
        "TPM_ALG_MGF1",
        null,
        "TPM_ALG_KEYEDHASH",
        "TPM_ALG_XOR",
        "TPM_ALG_SHA256",
        "TPM_ALG_SHA384",
        "TPM_ALG_SHA512",
        null,
        null,
        "TPM_ALG_NULL",
        null,
        "TPM_ALG_SM3_256",
        "TPM_ALG_SM4",
        "TPM_ALG_RSASSA",
        "TPM_ALG_RSAES",
        "TPM_ALG_RSAPSS",
        "TPM_ALG_OAEP",
        "TPM_ALG_ECDSA"
    ];
    return hashList[hashType];
}
async function tpmValidateFn() {
    const parsedAttCert = this.authnrData.get("attCert");
    const certInfo = this.authnrData.get("certInfo");
    const pubArea = this.authnrData.get("pubArea");
    const ver = this.authnrData.get("ver");
    if (ver != "2.0") {
        throw new Error("tpm attestation: expected TPM version 2.0");
    }
    this.audit.journal.add("ver");
    const pubAreaPkN = pubArea.get("unique");
    const pubAreaPkExp = pubArea.get("exponent");
    const credentialPublicKeyJwk = this.authnrData.get("credentialPublicKeyJwk");
    const credentialPublicKeyJwkN = coerceToArrayBuffer(credentialPublicKeyJwk.n, "credentialPublicKeyJwk.n");
    const credentialPublicKeyJwkExpBuf = coerceToArrayBuffer(credentialPublicKeyJwk.e, "credentialPublicKeyJwk.e");
    const credentialPublicKeyJwkExp = abToInt(credentialPublicKeyJwkExpBuf);
    if (credentialPublicKeyJwk.kty !== "RSA" || pubArea.get("type") !== "TPM_ALG_RSA") {
        throw new Error("tpm attestation: only RSA keys are currently supported");
    }
    if (pubAreaPkExp !== credentialPublicKeyJwkExp) {
        throw new Error("tpm attestation: RSA exponents of WebAuthn credentialPublicKey and TPM publicArea did not match");
    }
    if (!arrayBufferEquals(credentialPublicKeyJwkN, pubAreaPkN)) {
        throw new Error("tpm attestation: RSA 'n' of WebAuthn credentialPublicKey and TPM publicArea did not match");
    }
    const magic = certInfo.get("magic");
    if (magic !== 4283712327) {
        throw new Error("tpm attestation: certInfo had bad magic number: " + magic.toString(16));
    }
    const type = certInfo.get("type");
    if (type !== "TPM_ST_ATTEST_CERTIFY") {
        throw new Error("tpm attestation: got wrong type. expected 'TPM_ST_ATTEST_CERTIFY' got: " + type);
    }
    const rawAuthnrData = this.authnrData.get("rawAuthnrData");
    const rawClientData = this.clientData.get("rawClientDataJson");
    const clientDataHashBuf = await mod2.hashDigest(abToBuf(rawClientData));
    const alg = this.authnrData.get("alg");
    if (alg.hashAlg === undefined) {
        throw new Error("tpm attestation: unknown algorithm: " + alg);
    }
    this.audit.journal.add("alg");
    const extraDataHashBuf = await mod2.hashDigest(appendBuffer(abToBuf(rawAuthnrData), clientDataHashBuf), alg.hashAlg);
    const generatedExtraDataHash = new Uint8Array(extraDataHashBuf).buffer;
    const extraData = certInfo.get("extraData");
    if (!arrayBufferEquals(generatedExtraDataHash, extraData)) {
        throw new Error("extraData hash did not match authnrData + clientDataHash hashed");
    }
    const pubAreaName = certInfo.get("name");
    const pubAreaNameHashAlg = tpmHashToNpmHash(certInfo.get("nameHashType"));
    const pubAreaNameHashBuf = await mod2.hashDigest(abToBuf(pubArea.get("rawPubArea")), pubAreaNameHashAlg);
    const generatedPubAreaNameHash = new Uint8Array(pubAreaNameHashBuf).buffer;
    if (!arrayBufferEquals(generatedPubAreaNameHash, pubAreaName)) {
        throw new Error("pubAreaName hash did not match hash of publicArea");
    }
    this.audit.journal.add("pubArea");
    const sig = this.authnrData.get("sig");
    const rawCertInfo = certInfo.get("rawCertInfo");
    const attCertPem = abToPem("CERTIFICATE", parsedAttCert);
    const cert = new Certificate1(attCertPem);
    const publicKey = await cert.getPublicKey();
    const res = await mod2.verifySignature(publicKey, sig, abToBuf(rawCertInfo), alg.hashAlg);
    if (!res) {
        throw new Error("TPM attestation signature verification failed");
    }
    this.audit.journal.add("sig");
    this.audit.journal.add("certInfo");
    const attCert = new Certificate1(coerceToBase64(parsedAttCert, "parsedAttCert"));
    try {
        await attCert.verify();
    } catch (e9) {
        const err = e9;
        if (err.message === "Please provide issuer certificate as a parameter") {
            this.audit.warning.set("attesation-not-validated", "could not validate attestation because the root attestation certification could not be found");
        } else {
            throw err;
        }
    }
    if (attCert.getVersion() !== 3) {
        throw new Error("expected TPM attestation certificate to be x.509v3");
    }
    const attCertSubject = attCert.getSubject();
    if (attCertSubject.size !== 0) {
        throw new Error("tpm attestation: attestation certificate MUST have empty subject");
    }
    const attCertExt = attCert.getExtensions();
    attCertExt.forEach((v, k)=>this.audit.info.set(k, v)
    );
    attCert.info.forEach((v, k)=>this.audit.info.set(k, v)
    );
    attCert.warning.forEach((v, k)=>this.audit.warning.set(k, v)
    );
    const altName = attCertExt.get("subject-alt-name");
    if (altName === undefined || !Array.isArray(altName) || altName.length < 1) {
        throw new Error("tpm attestation: Subject Alternative Name extension MUST be set as defined in [TPMv2-EK-Profile] section 3.2.9");
    }
    let directoryName;
    altName.forEach((name)=>{
        if (name.directoryName !== undefined) {
            directoryName = name.directoryName;
        }
    });
    if (directoryName === undefined) {
        throw new Error("tpm attestation: subject alternative name did not contain directory name");
    }
    if (!directoryName.has("tcg-at-tpm-manufacturer")) {
        throw new Error("tpm attestation: subject alternative name did not list manufacturer");
    }
    if (!directoryName.has("tcg-at-tpm-model")) {
        throw new Error("tpm attestation: subject alternative name did not list model number");
    }
    if (!directoryName.has("tcg-at-tpm-version")) {
        throw new Error("tpm attestation: subject alternative name did not list firmware version");
    }
    const extKeyUsage = attCertExt.get("ext-key-usage");
    if (!Array.isArray(extKeyUsage) || !extKeyUsage.includes("tcg-kp-aik-certificate")) {
        throw new Error("tpm attestation: the Extended Key Usage extension MUST contain 'tcg-kp-aik-certificate'");
    }
    const basicConstraints = attCertExt.get("basic-constraints");
    if (typeof basicConstraints !== "object" || basicConstraints.cA !== false) {
        throw new Error("tpm attestation: the Basic Constraints extension MUST have the CA component set to false");
    }
    const certAaguid = attCertExt.get("fido-aaguid");
    const aaguid = this.authnrData.get("aaguid");
    if (certAaguid !== undefined && !arrayBufferEquals(aaguid, certAaguid)) {
        throw new Error("tpm attestation: authnrData AAGUID did not match AAGUID in attestation certificate");
    }
    this.audit.journal.add("x5c");
    this.audit.journal.add("attCert");
    this.audit.info.set("attestation-type", "AttCA");
    this.audit.journal.add("fmt");
    return true;
}
function tpmHashToNpmHash(tpmHash) {
    switch(tpmHash){
        case "TPM_ALG_SHA1":
            return "SHA-1";
        case "TPM_ALG_SHA256":
            return "SHA-256";
        case "TPM_ALG_SHA384":
            return "SHA-384";
        case "TPM_ALG_SHA512":
            return "SHA-512";
        default:
            throw new TypeError("Unsupported hash type: " + tpmHash);
    }
}
const tpmAttestation = {
    name: "tpm",
    parseFn: tpmParseFn,
    validateFn: tpmValidateFn
};
function appleParseFn(attStmt) {
    const ret = new Map();
    const x5c = attStmt.x5c;
    if (!Array.isArray(x5c)) {
        throw new TypeError("expected apple attestation x5c field to be of type Array");
    }
    if (x5c.length < 1) {
        throw new TypeError("expected apple attestation x5c field to contain at least 1 entry");
    }
    const abX5c = [];
    for (let cert of x5c){
        cert = coerceToArrayBuffer(cert, "apple x5c cert");
        abX5c.push(cert);
    }
    ret.set("credCert", abX5c.shift());
    ret.set("x5c", abX5c);
    return ret;
}
async function appleValidateFn() {
    const parsedCredCert = this.authnrData.get("credCert");
    const rawClientData = this.clientData.get("rawClientDataJson");
    const rawAuthnrData = this.authnrData.get("rawAuthnrData");
    const clientDataHash = await mod2.hashDigest(rawClientData);
    const rawAuthnrDataBuf = new Uint8Array(rawAuthnrData);
    const clientDataHashBuf = new Uint8Array(clientDataHash);
    const nonceToHash = appendBuffer(rawAuthnrDataBuf, clientDataHashBuf);
    const nonce = await mod2.hashDigest(nonceToHash);
    const credCert = new Certificate1(coerceToBase64(parsedCredCert, "parsedCredCert"));
    this.audit.journal.add("credCert");
    const extensions2 = credCert.getExtensions();
    let expectedNonce;
    for (const ext of extensions2){
        if (Array.isArray(ext) && ext.length > 1) {
            if (ext[0] === "1.2.840.113635.100.8.2") {
                if (Array.isArray(ext[1]) && ext[1].length) {
                    expectedNonce = ext[1][0];
                }
            }
        }
    }
    if (!expectedNonce) {
        throw new Error("extension with key '1.2.840.113635.100.8.2' (apple) was not found");
    }
    if (!arrayBufferEquals(expectedNonce, nonce)) {
        throw new Error("nonce did not match expectedNonce");
    }
    const credentialPublicKey = new PublicKey();
    await credentialPublicKey.fromPem(this.authnrData.get("credentialPublicKeyPem"));
    const certificatePublicKey = new PublicKey();
    certificatePublicKey.fromCryptoKey(await credCert.getPublicKey());
    const credentialPublicKeyReexportedPem = await credentialPublicKey.toPem(true);
    const certificatePublicKeyReexportedPem = await certificatePublicKey.toPem(true);
    this.audit.journal.add("credentialPublicKeyPem");
    if (credentialPublicKeyReexportedPem !== certificatePublicKeyReexportedPem) {
        throw new Error("certificatePublicKey did not match credentialPublicKey");
    }
    this.audit.journal.add("x5c");
    this.audit.info.set("attestation-type", "anonca");
    this.audit.journal.add("fmt");
    return true;
}
const appleAttestation = {
    name: "apple",
    parseFn: appleParseFn,
    validateFn: appleValidateFn
};
const { coerceToArrayBuffer: coerceToArrayBuffer1 , abToBuf: abToBuf1 , tools , appendBuffer: appendBuffer1 ,  } = mod3;
const lockSym = Symbol();
async function validateExpectations() {
    let req = this.requiredExpectations;
    let opt = this.optionalExpectations;
    let exp = this.expectations;
    if (!(exp instanceof Map)) {
        throw new Error("expectations should be of type Map");
    }
    if (Array.isArray(req)) {
        req = new Set([
            req
        ]);
    }
    if (!(req instanceof Set)) {
        throw new Error("requiredExpectaions should be of type Set");
    }
    if (Array.isArray(opt)) {
        opt = new Set([
            opt
        ]);
    }
    if (!(opt instanceof Set)) {
        throw new Error("optionalExpectations should be of type Set");
    }
    for (let field of req){
        if (!exp.has(field)) {
            throw new Error(`expectation did not contain value for '${field}'`);
        }
    }
    let optCount = 0;
    for (const [field1] of exp){
        if (opt.has(field1)) {
            optCount++;
        }
    }
    if (req.size !== exp.size - optCount) {
        throw new Error(`wrong number of expectations: should have ${req.size} but got ${exp.size - optCount}`);
    }
    if (req.has("origin")) {
        let expectedOrigin = exp.get("origin");
        mod2.checkOrigin(expectedOrigin);
    }
    if (exp.has("rpId")) {
        let expectedRpId = exp.get("rpId");
        mod2.checkRpId(expectedRpId);
    }
    if (exp.has("challenge")) {
        let challenge = exp.get("challenge");
        if (typeof challenge !== "string") {
            throw new Error("expected challenge should be of type String, got: " + typeof challenge);
        }
        if (!isBase64Url(challenge)) {
            throw new Error("expected challenge should be properly encoded base64url String");
        }
    }
    if (req.has("flags")) {
        let validFlags = new Set([
            "UP",
            "UV",
            "UP-or-UV",
            "AT",
            "ED"
        ]);
        let flags = exp.get("flags");
        for (let flag of flags){
            if (!validFlags.has(flag)) {
                throw new Error(`expected flag unknown: ${flag}`);
            }
        }
    }
    if (req.has("prevCounter")) {
        let prevCounter = exp.get("prevCounter");
        if (!isPositiveInteger(prevCounter)) {
            throw new Error("expected counter to be positive integer");
        }
    }
    if (req.has("publicKey")) {
        let publicKey = exp.get("publicKey");
        if (!isPem(publicKey)) {
            throw new Error("expected publicKey to be in PEM format");
        }
    }
    if (req.has("userHandle")) {
        let userHandle = exp.get("userHandle");
        if (userHandle !== null && typeof userHandle !== "string") {
            throw new Error("expected userHandle to be null or string");
        }
    }
    if (exp.has("allowCredentials")) {
        let allowCredentials = exp.get("allowCredentials");
        if (allowCredentials != null) {
            if (!Array.isArray(allowCredentials)) {
                throw new Error("expected allowCredentials to be null or array");
            } else {
                for(const index in allowCredentials){
                    if (typeof allowCredentials[index] == "function") 
					{
						continue; //expected allowCredentials[<Array.Prototype.Methods>] are skipped; 
					}
                    if (typeof allowCredentials[index].id === "string") {
                        allowCredentials[index].id = coerceToArrayBuffer(allowCredentials[index].id, "allowCredentials[" + index + "].id");
                    }
                    if (allowCredentials[index].id == null || !(allowCredentials[index].id instanceof ArrayBuffer)) {
                        throw new Error("expected id of allowCredentials[" + index + "] to be ArrayBuffer");
                    }
                    if (allowCredentials[index].type == null || allowCredentials[index].type !== "public-key") {
                        throw new Error("expected type of allowCredentials[" + index + "] to be string with value 'public-key'");
                    }
                    if (allowCredentials[index].transports != null && !Array.isArray(allowCredentials[index].transports)) {
                        throw new Error("expected transports of allowCredentials[" + index + "] to be array or null");
                    } else if (allowCredentials[index].transports != null && !allowCredentials[index].transports.every((el)=>[
                            "usb",
                            "nfc",
                            "ble",
                            "cable",
                            "internal"
                        ].includes(el)
                    )) {
                        throw new Error("expected transports of allowCredentials[" + index + "] to be string with value 'usb', 'nfc', 'ble', 'cable', 'internal' or null");
                    }
                }
            }
        }
    }
    this.audit.validExpectations = true;
    return true;
}
function parseExpectations(exp) {
    if (typeof exp !== "object") {
        throw new TypeError("expected 'expectations' to be of type object, got " + typeof exp);
    }
    const ret = new Map();
    if (exp.origin) {
        if (typeof exp.origin !== "string") {
            throw new TypeError("expected 'origin' should be string, got " + typeof exp.origin);
        }
        const origin = mod2.checkOrigin(exp.origin);
        ret.set("origin", origin);
    }
    if (exp.rpId) {
        if (typeof exp.rpId !== "string") {
            throw new TypeError("expected 'rpId' should be string, got " + typeof exp.rpId);
        }
        const rpId = mod2.checkRpId(exp.rpId);
        ret.set("rpId", rpId);
    }
    if (exp.challenge) {
        let challenge = exp.challenge;
        challenge = coerceToBase64Url(challenge, "expected challenge");
        ret.set("challenge", challenge);
    }
    if (exp.flags) {
        let flags = exp.flags;
        if (Array.isArray(flags)) {
            flags = new Set(flags);
        }
        if (!(flags instanceof Set)) {
            throw new TypeError("expected flags to be an Array or a Set, got: " + typeof flags);
        }
        ret.set("flags", flags);
    }
    if (exp.prevCounter !== undefined) {
        if (typeof exp.prevCounter !== "number") {
            throw new TypeError("expected 'prevCounter' should be Number, got " + typeof exp.prevCounter);
        }
        ret.set("prevCounter", exp.prevCounter);
    }
    if (exp.publicKey) {
        if (typeof exp.publicKey !== "string") {
            throw new TypeError("expected 'publicKey' should be String, got " + typeof exp.publicKey);
        }
        ret.set("publicKey", exp.publicKey);
    }
    if (exp.userHandle !== undefined) {
        let userHandle = exp.userHandle;
        if (userHandle !== null && userHandle !== "") {
            userHandle = coerceToBase64Url(userHandle, "userHandle");
        }
        ret.set("userHandle", userHandle);
    }
    if (exp.allowCredentials !== undefined) {
        const allowCredentials = exp.allowCredentials;
        if (allowCredentials !== null && !Array.isArray(allowCredentials)) {
            throw new TypeError("expected 'allowCredentials' to be null or array, got " + typeof allowCredentials);
        }
        for(const index in allowCredentials){
            if (typeof allowCredentials[index] == "function") {
				continue; //expected allowCredentials[<Array.Prototype.Methods>] are skipped; 
			}
            if (allowCredentials[index].id != null) {
                allowCredentials[index].id = coerceToArrayBuffer(allowCredentials[index].id, "allowCredentials[" + index + "].id");
            }
        }
        ret.set("allowCredentials", allowCredentials);
    }
    return ret;
}
const globalAttestationMap = new Map();
const globalExtensionMap = new Map();
const globalMdsCollection = new Map();
class Fido2Lib {
    constructor(opts){
        opts = opts || {};
        this.config = {};
        this.config.timeout = opts.timeout === undefined ? 60000 : opts.timeout;
        checkOptType(this.config, "timeout", "number");
        if (!(this.config.timeout >>> 0 === parseFloat(this.config.timeout))) {
            throw new RangeError("timeout should be zero or positive integer");
        }
        this.config.challengeSize = opts.challengeSize || 64;
        checkOptType(this.config, "challengeSize", "number");
        if (this.config.challengeSize < 32) {
            throw new RangeError("challenge size too small, must be 32 or greater");
        }
        this.config.rpId = opts.rpId;
        checkOptType(this.config, "rpId", "string");
        this.config.rpName = opts.rpName || "Anonymous Service";
        checkOptType(this.config, "rpName", "string");
        this.config.rpIcon = opts.rpIcon;
        checkOptType(this.config, "rpIcon", "string");
        this.config.authenticatorRequireResidentKey = opts.authenticatorRequireResidentKey;
        checkOptType(this.config, "authenticatorRequireResidentKey", "boolean");
        this.config.authenticatorAttachment = opts.authenticatorAttachment;
        if (this.config.authenticatorAttachment !== undefined && this.config.authenticatorAttachment !== "platform" && this.config.authenticatorAttachment !== "cross-platform") {
            throw new TypeError("expected authenticatorAttachment to be 'platform', or 'cross-platform', got: " + this.config.authenticatorAttachment);
        }
        this.config.authenticatorUserVerification = opts.authenticatorUserVerification;
        if (this.config.authenticatorUserVerification !== undefined && this.config.authenticatorUserVerification !== "required" && this.config.authenticatorUserVerification !== "preferred" && this.config.authenticatorUserVerification !== "discouraged") {
            throw new TypeError("expected authenticatorUserVerification to be 'required', 'preferred', or 'discouraged', got: " + this.config.authenticatorUserVerification);
        }
        this.config.attestation = opts.attestation || "direct";
        if (this.config.attestation !== "direct" && this.config.attestation !== "indirect" && this.config.attestation !== "none") {
            throw new TypeError("expected attestation to be 'direct', 'indirect', or 'none', got: " + this.config.attestation);
        }
        this.config.cryptoParams = opts.cryptoParams || [
            -7,
            -257
        ];
        checkOptType(this.config, "cryptoParams", Array);
        if (this.config.cryptoParams.length < 1) {
            throw new TypeError("cryptoParams must have at least one element");
        }
        this.config.cryptoParams.forEach((param)=>{
            checkOptType({
                cryptoParam: param
            }, "cryptoParam", "number");
        });
        this.attestationMap = globalAttestationMap;
        this.extSet = new Set();
        this.extOptMap = new Map();
    }
    static createMdsCollection(collectionName) {
        return new MdsCollection(collectionName);
    }
    static async addMdsCollection(mdsCollection) {
        if (!(mdsCollection instanceof MdsCollection)) {
            throw new Error("expected 'mdsCollection' to be instance of MdsCollection, got: " + mdsCollection);
        }
        await mdsCollection.validate();
        globalMdsCollection.set(mdsCollection.name, mdsCollection);
    }
    static clearMdsCollections() {
        globalMdsCollection.clear();
    }
    static findMdsEntry(id) {
        if (globalMdsCollection.size < 1) {
            throw new Error("must set MDS collection before attempting to find an MDS entry");
        }
        const ret = [];
        for (const collection of globalMdsCollection.values()){
            const entry = collection.findEntry(id);
            if (entry) ret.push(entry);
        }
        return ret;
    }
    static addExtension(extName, optionGeneratorFn, resultParserFn, resultValidatorFn) {
        if (typeof extName !== "string") {
            throw new Error("expected 'extName' to be String, got: " + extName);
        }
        if (globalExtensionMap.has(extName)) {
            throw new Error(`the extension '${extName}' has already been added`);
        }
        if (typeof optionGeneratorFn !== "function") {
            throw new Error("expected 'optionGeneratorFn' to be a Function, got: " + optionGeneratorFn);
        }
        if (typeof resultParserFn !== "function") {
            throw new Error("expected 'resultParserFn' to be a Function, got: " + resultParserFn);
        }
        if (typeof resultValidatorFn !== "function") {
            throw new Error("expected 'resultValidatorFn' to be a Function, got: " + resultValidatorFn);
        }
        globalExtensionMap.set(extName, {
            optionGeneratorFn,
            resultParserFn,
            resultValidatorFn
        });
    }
    static deleteAllExtensions() {
        globalExtensionMap.clear();
    }
    generateExtensionOptions(extName, type, options) {
        if (typeof extName !== "string") {
            throw new Error("expected 'extName' to be String, got: " + extName);
        }
        if (type !== "attestation" && type !== "assertion") {
            throw new Error("expected 'type' to be 'attestation' or 'assertion', got: " + type);
        }
        const ext = globalExtensionMap.get(extName);
        if (typeof ext !== "object" || typeof ext.optionGeneratorFn !== "function") {
            throw new Error(`valid extension for '${extName}' not found`);
        }
        const ret = ext.optionGeneratorFn(extName, type, options);
        return ret;
    }
    static parseExtensionResult(extName, clientThing, authnrThing) {
        if (typeof extName !== "string") {
            throw new Error("expected 'extName' to be String, got: " + extName);
        }
        const ext = globalExtensionMap.get(extName);
        if (typeof ext !== "object" || typeof ext.parseFn !== "function") {
            throw new Error(`valid extension for '${extName}' not found`);
        }
        const ret = ext.parseFn(extName, clientThing, authnrThing);
        return ret;
    }
    static validateExtensionResult(extName) {
        const ext = globalExtensionMap.get(extName);
        if (typeof ext !== "object" || typeof ext.validateFn !== "function") {
            throw new Error(`valid extension for '${extName}' not found`);
        }
        const ret = ext.validateFn.call(this);
        return ret;
    }
    enableExtension(extName) {
        if (typeof extName !== "string") {
            throw new Error("expected 'extName' to be String, got: " + extName);
        }
        if (!globalExtensionMap.has(extName)) {
            throw new Error(`valid extension for '${extName}' not found`);
        }
        this.extSet.add(extName);
    }
    disableExtension(extName) {
        if (typeof extName !== "string") {
            throw new Error("expected 'extName' to be String, got: " + extName);
        }
        if (!globalExtensionMap.has(extName)) {
            throw new Error(`valid extension for '${extName}' not found`);
        }
        this.extSet.delete(extName);
    }
    setExtensionOptions(extName, options) {
        if (typeof extName !== "string") {
            throw new Error("expected 'extName' to be String, got: " + extName);
        }
        if (!globalExtensionMap.has(extName)) {
            throw new Error(`valid extension for '${extName}' not found`);
        }
        this.extOptMap.set(extName, options);
    }
    static async validateAttestation() {
        const fmt = this.authnrData.get("fmt");
        if (typeof fmt !== "string") {
            throw new TypeError("expected 'fmt' to be string, got: " + typeof fmt);
        }
        const fmtObj = globalAttestationMap.get(fmt);
        if (typeof fmtObj !== "object" || typeof fmtObj.parseFn !== "function" || typeof fmtObj.validateFn !== "function") {
            throw new Error(`no support for attestation format: ${fmt}`);
        }
        const ret = await fmtObj.validateFn.call(this);
        if (ret !== true) {
            throw new Error(`${fmt} validateFn did not return 'true'`);
        }
        return ret;
    }
    static addAttestationFormat(fmt, parseFn, validateFn) {
        if (typeof fmt !== "string") {
            throw new TypeError("expected 'fmt' to be string, got: " + typeof fmt);
        }
        if (typeof parseFn !== "function") {
            throw new TypeError("expected 'parseFn' to be string, got: " + typeof parseFn);
        }
        if (typeof validateFn !== "function") {
            throw new TypeError("expected 'validateFn' to be string, got: " + typeof validateFn);
        }
        if (globalAttestationMap.has(fmt)) {
            throw new Error(`can't add format: '${fmt}' already exists`);
        }
        globalAttestationMap.set(fmt, {
            parseFn,
            validateFn
        });
        return true;
    }
    static deleteAllAttestationFormats() {
        globalAttestationMap.clear();
    }
    static parseAttestation(fmt, attStmt) {
        if (typeof fmt !== "string") {
            throw new TypeError("expected 'fmt' to be string, got: " + typeof fmt);
        }
        if (typeof attStmt !== "object") {
            throw new TypeError("expected 'attStmt' to be object, got: " + typeof attStmt);
        }
        const fmtObj = globalAttestationMap.get(fmt);
        if (typeof fmtObj !== "object" || typeof fmtObj.parseFn !== "function" || typeof fmtObj.validateFn !== "function") {
            throw new Error(`no support for attestation format: ${fmt}`);
        }
        const ret = fmtObj.parseFn.call(this, attStmt);
        if (!(ret instanceof Map)) {
            throw new Error(`${fmt} parseFn did not return a Map`);
        }
        return new Map([
            [
                "fmt",
                fmt
            ],
            ...ret, 
        ]);
    }
    async attestationResult(res, expected) {
        expected.flags = factorToFlags(expected.factor, [
            "AT"
        ]);
        delete expected.factor;
        return await Fido2AttestationResult.create(res, expected);
    }
    async assertionResult(res, expected) {
        expected.flags = factorToFlags(expected.factor, []);
        delete expected.factor;
        return Fido2AssertionResult.create(res, expected);
    }
    async attestationOptions(opts) {
        opts = opts || {};
        let challenge = tools.randomValues(this.config.challengeSize);
        challenge = coerceToArrayBuffer1(challenge, "challenge");
        const pubKeyCredParams = [];
        this.config.cryptoParams.forEach((coseId)=>{
            pubKeyCredParams.push({
                type: "public-key",
                alg: coseId
            });
        });
        let rawChallenge;
        if (opts.extraData) {
            rawChallenge = challenge;
            const extraData = coerceToArrayBuffer1(opts.extraData, "extraData");
            const hash = await tools.hashDigest(appendBuffer1(challenge, extraData));
            challenge = new Uint8Array(hash).buffer;
        }
        const options = {
            rp: {},
            user: {}
        };
        const extensions3 = createExtensions.call(this, "attestation", opts.extensionOptions);
        setOpt(options.rp, "name", this.config.rpName);
        setOpt(options.rp, "id", this.config.rpId);
        setOpt(options.rp, "icon", this.config.rpIcon);
        setOpt(options, "challenge", challenge);
        setOpt(options, "pubKeyCredParams", pubKeyCredParams);
        setOpt(options, "timeout", this.config.timeout);
        setOpt(options, "attestation", this.config.attestation);
        if (this.config.authenticatorAttachment !== undefined || this.config.authenticatorRequireResidentKey !== undefined || this.config.authenticatorUserVerification !== undefined) {
            options.authenticatorSelection = {};
            setOpt(options.authenticatorSelection, "authenticatorAttachment", this.config.authenticatorAttachment);
            setOpt(options.authenticatorSelection, "requireResidentKey", this.config.authenticatorRequireResidentKey);
            setOpt(options.authenticatorSelection, "userVerification", this.config.authenticatorUserVerification);
        }
        setOpt(options, "rawChallenge", rawChallenge);
        if (Object.keys(extensions3).length > 0) {
            options.extensions = extensions3;
        }
        return options;
    }
    async assertionOptions(opts) {
        opts = opts || {};
        let challenge = tools.randomValues(this.config.challengeSize);
        challenge = coerceToArrayBuffer1(challenge, "challenge");
        const options = {};
        let rawChallenge;
        if (opts.extraData) {
            rawChallenge = challenge;
            const extraData = coerceToArrayBuffer1(opts.extraData, "extraData");
            challenge = abToBuf1(await tools.hashDigest(appendBuffer1(challenge, extraData)));
        }
        const extensions4 = createExtensions.call(this, "assertion", opts.extensionOptions);
        setOpt(options, "challenge", challenge);
        setOpt(options, "timeout", this.config.timeout);
        setOpt(options, "rpId", this.config.rpId);
        setOpt(options, "userVerification", this.config.authenticatorUserVerification);
        setOpt(options, "rawChallenge", rawChallenge);
        if (Object.keys(extensions4).length > 0) {
            options.extensions = extensions4;
        }
        return options;
    }
}
function checkOptType(opts, prop, type) {
    if (typeof opts !== "object") return;
    if (opts[prop] === undefined) return;
    if (typeof type === "string") {
        if (typeof opts[prop] !== type) {
            throw new TypeError(`expected ${prop} to be ${type}, got: ${opts[prop]}`);
        }
    }
    if (typeof type === "function") {
        if (!(opts[prop] instanceof type)) {
            throw new TypeError(`expected ${prop} to be ${type.name}, got: ${opts[prop]}`);
        }
    }
}
function setOpt(obj, prop, val) {
    if (val !== undefined) {
        obj[prop] = val;
    }
}
function factorToFlags(expectedFactor, flags) {
    flags = flags || [];
    switch(expectedFactor){
        case "first":
            flags.push("UP");
            flags.push("UV");
            break;
        case "second":
            flags.push("UP");
            break;
        case "either":
            flags.push("UP-or-UV");
            break;
        default:
            throw new TypeError("expectedFactor should be 'first', 'second' or 'either'");
    }
    return flags;
}
function createExtensions(type, extObj) {
    const extensions5 = {};
    let enabledExtensions = this.extSet;
    let extensionsOptions = this.extOptMap;
    if (typeof extObj === "object") {
        enabledExtensions = new Set(Object.keys(extObj));
        extensionsOptions = new Map();
        for (const key of Object.keys(extObj)){
            extensionsOptions.set(key, extObj[key]);
        }
    }
    for (const extension of enabledExtensions){
        const extVal = this.generateExtensionOptions(extension, type, extensionsOptions.get(extension));
        if (extVal !== undefined) extensions5[extension] = extVal;
    }
    return extensions5;
}
Fido2Lib.addAttestationFormat(noneAttestation.name, noneAttestation.parseFn, noneAttestation.validateFn);
Fido2Lib.addAttestationFormat(packedAttestation.name, packedAttestation.parseFn, packedAttestation.validateFn);
Fido2Lib.addAttestationFormat(fidoU2fAttestation.name, fidoU2fAttestation.parseFn, fidoU2fAttestation.validateFn);
Fido2Lib.addAttestationFormat(androidSafetyNetAttestation.name, androidSafetyNetAttestation.parseFn, androidSafetyNetAttestation.validateFn);
Fido2Lib.addAttestationFormat(tpmAttestation.name, tpmAttestation.parseFn, tpmAttestation.validateFn);
Fido2Lib.addAttestationFormat(appleAttestation.name, appleAttestation.parseFn, appleAttestation.validateFn);
export { Fido2Lib as Fido2Lib };
export { arrayBufferEquals as arrayBufferEquals, abToBuf as abToBuf, abToHex as abToHex, appendBuffer as appendBuffer, coerceToArrayBuffer as coerceToArrayBuffer, coerceToBase64 as coerceToBase64, coerceToBase64Url as coerceToBase64Url, isBase64Url as isBase64Url, isPem as isPem, jsObjectToB64 as jsObjectToB64, pemToBase64 as pemToBase64, str2ab as str2ab, mod2 as tools };
function parseClientResponse(msg) {
    if (typeof msg !== "object") {
        throw new TypeError("expected msg to be Object");
    }
    if (msg.id && !msg.rawId) {
        msg.rawId = msg.id;
    }
    const rawId = coerceToArrayBuffer(msg.rawId, "rawId");
    if (typeof msg.response !== "object") {
        throw new TypeError("expected response to be Object");
    }
    const clientDataJSON = coerceToArrayBuffer(msg.response.clientDataJSON, "clientDataJSON");
    if (!(clientDataJSON instanceof ArrayBuffer)) {
        throw new TypeError("expected 'clientDataJSON' to be ArrayBuffer");
    }
    const clientDataJson = ab2str(clientDataJSON);
    let parsed;
    try {
        parsed = JSON.parse(clientDataJson);
    } catch (err) {
        throw new Error("couldn't parse clientDataJson: " + err);
    }
    const ret = new Map([
        [
            "challenge",
            parsed.challenge
        ],
        [
            "origin",
            parsed.origin
        ],
        [
            "type",
            parsed.type
        ],
        [
            "tokenBinding",
            parsed.tokenBinding
        ],
        [
            "rawClientDataJson",
            clientDataJSON
        ],
        [
            "rawId",
            rawId
        ], 
    ]);
    return ret;
}
async function parseAttestationObject(attestationObject) {
    attestationObject = coerceToArrayBuffer(attestationObject, "attestationObject");
    let parsed;
    try {
        parsed = mod2.cbor.decode(new Uint8Array(attestationObject));
    } catch (_err) {
        throw new TypeError("couldn't parse attestationObject CBOR");
    }
    if (typeof parsed !== "object") {
        throw new TypeError("invalid parsing of attestationObject cbor");
    }
    if (typeof parsed.fmt !== "string") {
        throw new Error("expected attestation CBOR to contain a 'fmt' string");
    }
    if (typeof parsed.attStmt !== "object") {
        throw new Error("expected attestation CBOR to contain a 'attStmt' object");
    }
    if (!(parsed.authData instanceof Uint8Array)) {
        throw new Error("expected attestation CBOR to contain a 'authData' byte sequence");
    }
    const ret = new Map([
        ...Fido2Lib.parseAttestation(parsed.fmt, parsed.attStmt),
        [
            "rawAuthnrData",
            coerceToArrayBuffer(parsed.authData, "authData")
        ],
        [
            "transports",
            undefined
        ],
        ...await parseAuthenticatorData(parsed.authData), 
    ]);
    return ret;
}
async function parseAuthnrAttestationResponse(msg) {
    if (typeof msg !== "object") {
        throw new TypeError("expected msg to be Object");
    }
    if (typeof msg.response !== "object") {
        throw new TypeError("expected response to be Object");
    }
    let attestationObject = msg.response.attestationObject;
    attestationObject = coerceToArrayBuffer(attestationObject, "attestationObject");
    let parsed;
    try {
        parsed = mod2.cbor.decode(new Uint8Array(attestationObject));
    } catch (_err) {
        throw new TypeError("couldn't parse attestationObject CBOR");
    }
    if (typeof parsed !== "object") {
        throw new TypeError("invalid parsing of attestationObject CBOR");
    }
    if (typeof parsed.fmt !== "string") {
        throw new Error("expected attestation CBOR to contain a 'fmt' string");
    }
    if (typeof parsed.attStmt !== "object") {
        throw new Error("expected attestation CBOR to contain a 'attStmt' object");
    }
    if (!(parsed.authData instanceof Uint8Array)) {
        throw new Error("expected attestation CBOR to contain a 'authData' byte sequence");
    }
    if (msg.transports != undefined && !Array.isArray(msg.transports)) {
        throw new Error("expected transports to be 'null' or 'array<string>'");
    }
    const ret = new Map([
        ...Fido2Lib.parseAttestation(parsed.fmt, parsed.attStmt),
        [
            "rawAuthnrData",
            coerceToArrayBuffer(parsed.authData, "authData")
        ],
        [
            "transports",
            msg.transports
        ],
        ...await parseAuthenticatorData(parsed.authData), 
    ]);
    return ret;
}
async function parseAuthenticatorData(authnrDataArrayBuffer) {
    authnrDataArrayBuffer = coerceToArrayBuffer(authnrDataArrayBuffer, "authnrDataArrayBuffer");
    const ret = new Map();
    const authnrDataBuf = new DataView(authnrDataArrayBuffer);
    let offset = 0;
    ret.set("rpIdHash", authnrDataBuf.buffer.slice(offset, offset + 32));
    offset += 32;
    const flags = authnrDataBuf.getUint8(offset);
    const flagsSet = new Set();
    ret.set("flags", flagsSet);
    if (flags & 1) flagsSet.add("UP");
    if (flags & 2) flagsSet.add("RFU1");
    if (flags & 4) flagsSet.add("UV");
    if (flags & 8) flagsSet.add("RFU3");
    if (flags & 16) flagsSet.add("RFU4");
    if (flags & 32) flagsSet.add("RFU5");
    if (flags & 64) flagsSet.add("AT");
    if (flags & 128) flagsSet.add("ED");
    offset++;
    ret.set("counter", authnrDataBuf.getUint32(offset, false));
    offset += 4;
    const attestation = flagsSet.has("AT");
    const extensions6 = flagsSet.has("ED");
    if (attestation) {
        ret.set("aaguid", authnrDataBuf.buffer.slice(offset, offset + 16));
        offset += 16;
        const credIdLen = authnrDataBuf.getUint16(offset, false);
        ret.set("credIdLen", credIdLen);
        offset += 2;
        ret.set("credId", authnrDataBuf.buffer.slice(offset, offset + credIdLen));
        offset += credIdLen;
        const publicKey = new PublicKey();
        await publicKey.fromCose(authnrDataBuf.buffer.slice(offset, authnrDataBuf.buffer.byteLength));
        ret.set("credentialPublicKeyCose", await publicKey.toCose());
        ret.set("credentialPublicKeyJwk", await publicKey.toJwk());
        ret.set("credentialPublicKeyPem", await publicKey.toPem());
    }
    if (extensions6) {
        const cborObjects = mod2.cbor.decodeMultiple(new Uint8Array(authnrDataBuf.buffer.slice(offset, authnrDataBuf.buffer.byteLength)));
        if (attestation) {
            cborObjects.shift();
        }
        if (cborObjects.length === 0) {
            throw new Error("extensions missing");
        }
        ret.set("webAuthnExtensions", cborObjects);
    }
    return ret;
}
async function parseAuthnrAssertionResponse(msg) {
    if (typeof msg !== "object") {
        throw new TypeError("expected msg to be Object");
    }
    if (typeof msg.response !== "object") {
        throw new TypeError("expected response to be Object");
    }
    let userHandle;
    if (msg.response.userHandle !== undefined && msg.response.userHandle !== null) {
        userHandle = coerceToArrayBuffer(msg.response.userHandle, "response.userHandle");
        if (userHandle.byteLength === 0) {
            userHandle = undefined;
        }
    }
    const sigAb = coerceToArrayBuffer(msg.response.signature, "response.signature");
    const ret = new Map([
        [
            "sig",
            sigAb
        ],
        [
            "userHandle",
            userHandle
        ],
        [
            "rawAuthnrData",
            coerceToArrayBuffer(msg.response.authenticatorData, "response.authenticatorData")
        ],
        ...await parseAuthenticatorData(msg.response.authenticatorData), 
    ]);
    return ret;
}
export { parseAttestationObject as parseAttestationObject, parseAuthenticatorData as parseAuthenticatorData, parseAuthnrAssertionResponse as parseAuthnrAssertionResponse, parseAuthnrAttestationResponse as parseAuthnrAttestationResponse, parseClientResponse as parseClientResponse, parseExpectations as parseExpectations };
export { Certificate1 as Certificate, CertManager as CertManager, CRL as CRL, helpers as helpers };
export { PublicKey as PublicKey, coseAlgToHashStr as coseAlgToHashStr, coseAlgToStr as coseAlgToStr };
class Fido2Result {
    constructor(sym){
        if (sym !== lockSym) {
            throw new Error("Do not create with 'new' operator. Call 'Fido2AttestationResult.create()' or 'Fido2AssertionResult.create()' instead.");
        }
        attach(this);
    }
    parse() {
        this.clientData = parseClientResponse(this.request);
    }
    async validate() {
        await this.validateRawClientDataJson();
        await this.validateOrigin();
        await this.validateChallenge();
        await this.validateTokenBinding();
        await this.validateId();
        await this.validateRawAuthnrData();
        await this.validateRpIdHash();
        await this.validateFlags();
        await this.validateExtensions();
    }
    async create(req, exp) {
        if (typeof req !== "object") {
            throw new TypeError("expected 'request' to be object, got: " + typeof req);
        }
        if (typeof exp !== "object") {
            throw new TypeError("expected 'expectations' to be object, got: " + typeof exp);
        }
        this.expectations = parseExpectations(exp);
        this.request = req;
        await this.validateExpectations();
        await this.parse();
        await this.validate();
        await this.validateAudit();
        return this;
    }
}
class Fido2AttestationResult extends Fido2Result {
    constructor(sym){
        super(sym);
        this.requiredExpectations = new Set([
            "origin",
            "challenge",
            "flags", 
        ]);
        this.optionalExpectations = new Set([
            "rpId", 
        ]);
    }
    async parse() {
        this.validateCreateRequest();
        await super.parse();
        this.authnrData = await parseAuthnrAttestationResponse(this.request);
    }
    async validate() {
        await this.validateCreateType();
        await this.validateAaguid();
        await this.validatePublicKey();
        await super.validate();
        await this.validateAttestation();
        await this.validateInitialCounter();
        await this.validateCredId();
        await this.validateTransports();
    }
    static async create(req, exp) {
        return await new Fido2AttestationResult(lockSym).create(req, exp);
    }
}
class Fido2AssertionResult extends Fido2Result {
    constructor(sym){
        super(sym);
        this.requiredExpectations = new Set([
            "origin",
            "challenge",
            "flags",
            "prevCounter",
            "publicKey",
            "userHandle", 
        ]);
        this.optionalExpectations = new Set([
            "rpId",
            "allowCredentials", 
        ]);
    }
    async parse() {
        this.validateAssertionResponse();
        await super.parse();
        this.authnrData = await parseAuthnrAssertionResponse(this.request);
    }
    async validate() {
        await this.validateGetType();
        await super.validate();
        await this.validateAssertionSignature();
        await this.validateUserHandle();
        await this.validateCounter();
    }
    static create(req, exp) {
        return new Fido2AssertionResult(lockSym).create(req, exp);
    }
}
export { Fido2AssertionResult as Fido2AssertionResult, Fido2AttestationResult as Fido2AttestationResult, Fido2Result as Fido2Result };
function validateCreateRequest() {
    let req = this.request;
    if (typeof req !== "object") {
        throw new TypeError("expected request to be Object, got " + typeof req);
    }
    if (!(req.rawId instanceof ArrayBuffer) && !(req.id instanceof ArrayBuffer)) {
        throw new TypeError("expected 'id' or 'rawId' field of request to be ArrayBuffer, got rawId " + typeof req.rawId + " and id " + typeof req.id);
    }
    if (typeof req.response !== "object") {
        throw new TypeError("expected 'response' field of request to be Object, got " + typeof req.response);
    }
    if (typeof req.response.attestationObject !== "string" && !(req.response.attestationObject instanceof ArrayBuffer)) {
        throw new TypeError("expected 'response.attestationObject' to be base64 String or ArrayBuffer");
    }
    if (typeof req.response.clientDataJSON !== "string" && !(req.response.clientDataJSON instanceof ArrayBuffer)) {
        throw new TypeError("expected 'response.clientDataJSON' to be base64 String or ArrayBuffer");
    }
    this.audit.validRequest = true;
    return true;
}
function validateAssertionResponse() {
    let req = this.request;
    if (typeof req !== "object") {
        throw new TypeError("expected request to be Object, got " + typeof req);
    }
    if (!(req.rawId instanceof ArrayBuffer) && !(req.id instanceof ArrayBuffer)) {
        throw new TypeError("expected 'id' or 'rawId' field of request to be ArrayBuffer, got rawId " + typeof req.rawId + " and id " + typeof req.id);
    }
    if (typeof req.response !== "object") {
        throw new TypeError("expected 'response' field of request to be Object, got " + typeof req.response);
    }
    if (typeof req.response.clientDataJSON !== "string" && !(req.response.clientDataJSON instanceof ArrayBuffer)) {
        throw new TypeError("expected 'response.clientDataJSON' to be base64 String or ArrayBuffer");
    }
    if (typeof req.response.authenticatorData !== "string" && !(req.response.authenticatorData instanceof ArrayBuffer)) {
        throw new TypeError("expected 'response.authenticatorData' to be base64 String or ArrayBuffer");
    }
    if (typeof req.response.signature !== "string" && !(req.response.signature instanceof ArrayBuffer)) {
        throw new TypeError("expected 'response.signature' to be base64 String or ArrayBuffer");
    }
    if (typeof req.response.userHandle !== "string" && !(req.response.userHandle instanceof ArrayBuffer) && req.response.userHandle !== undefined && req.response.userHandle !== null) {
        throw new TypeError("expected 'response.userHandle' to be base64 String, ArrayBuffer, or undefined");
    }
    this.audit.validRequest = true;
    return true;
}
async function validateRawClientDataJson() {
    let rawClientDataJson = this.clientData.get("rawClientDataJson");
    if (!(rawClientDataJson instanceof ArrayBuffer)) {
        throw new Error("clientData clientDataJson should be ArrayBuffer");
    }
    this.audit.journal.add("rawClientDataJson");
    return true;
}
async function validateTransports() {
    let transports = this.authnrData.get("transports");
    if (transports != null && !Array.isArray(transports)) {
        throw new Error("expected transports to be 'null' or 'array<string>'");
    }
    for(const index in transports){
        if (typeof transports[index] == "function") {
			continue; //expected transports[<Array.Prototype.Methods>] are skipped; 
		}
        if (typeof transports[index] !== "string") {
            throw new Error("expected transports[" + index + "] to be 'string'");
        }
    }
    this.audit.journal.add("transports");
    return true;
}
async function validateId() {
    let rawId = this.clientData.get("rawId");
    if (!(rawId instanceof ArrayBuffer)) {
        throw new Error("expected id to be of type ArrayBuffer");
    }
    let credId = this.authnrData.get("credId");
    if (credId !== undefined && !arrayBufferEquals(rawId, credId)) {
        throw new Error("id and credId were not the same");
    }
    let allowCredentials = this.expectations.get("allowCredentials");
    if (allowCredentials != undefined) {
        if (!allowCredentials.some((cred)=>{
            let result = arrayBufferEquals(rawId, cred.id);
            return result;
        })) {
            throw new Error("Credential ID does not match any value in allowCredentials");
        }
    }
    this.audit.journal.add("rawId");
    return true;
}
async function validateOrigin() {
    let expectedOrigin = this.expectations.get("origin");
    let clientDataOrigin = this.clientData.get("origin");
    let origin = mod2.checkOrigin(clientDataOrigin);
    if (origin !== expectedOrigin) {
        throw new Error("clientData origin did not match expected origin");
    }
    this.audit.journal.add("origin");
    return true;
}
async function validateCreateType() {
    let type = this.clientData.get("type");
    if (type !== "webauthn.create") {
        throw new Error("clientData type should be 'webauthn.create', got: " + type);
    }
    this.audit.journal.add("type");
    return true;
}
async function validateGetType() {
    let type = this.clientData.get("type");
    if (type !== "webauthn.get") {
        throw new Error("clientData type should be 'webauthn.get'");
    }
    this.audit.journal.add("type");
    return true;
}
async function validateChallenge() {
    let expectedChallenge = this.expectations.get("challenge");
    let challenge = this.clientData.get("challenge");
    if (typeof challenge !== "string") {
        throw new Error("clientData challenge was not a string");
    }
    if (!isBase64Url(challenge)) {
        throw new TypeError("clientData challenge was not properly encoded base64url");
    }
    challenge = challenge.replace(/={1,2}$/, "");
    if (challenge !== expectedChallenge) {
        throw new Error("clientData challenge mismatch");
    }
    this.audit.journal.add("challenge");
    return true;
}
async function validateTokenBinding() {
    let tokenBinding = this.clientData.get("tokenBinding");
    if (typeof tokenBinding === "object") {
        if (tokenBinding.status !== "not-supported" && tokenBinding.status !== "supported") {
            throw new Error("tokenBinding status should be 'not-supported' or 'supported', got: " + tokenBinding.status);
        }
        if (Object.keys(tokenBinding).length != 1) {
            throw new Error("tokenBinding had too many keys");
        }
    } else if (tokenBinding !== undefined) {
        throw new Error("Token binding field malformed: " + tokenBinding);
    }
    this.audit.journal.add("tokenBinding");
    return true;
}
async function validateRawAuthnrData() {
    let rawAuthnrData = this.authnrData.get("rawAuthnrData");
    if (!(rawAuthnrData instanceof ArrayBuffer)) {
        throw new Error("authnrData rawAuthnrData should be ArrayBuffer");
    }
    this.audit.journal.add("rawAuthnrData");
    return true;
}
async function validateAttestation() {
    return Fido2Lib.validateAttestation.call(this);
}
async function validateAssertionSignature() {
    let expectedSignature = this.authnrData.get("sig");
    let publicKey = this.expectations.get("publicKey");
    let rawAuthnrData = this.authnrData.get("rawAuthnrData");
    let rawClientData = this.clientData.get("rawClientDataJson");
    let clientDataHashBuf = await mod2.hashDigest(rawClientData);
    let clientDataHash = new Uint8Array(clientDataHashBuf).buffer;
    let res = await mod2.verifySignature(publicKey, expectedSignature, appendBuffer(rawAuthnrData, clientDataHash), "SHA-256");
    if (!res) {
        throw new Error("signature validation failed");
    }
    this.audit.journal.add("sig");
    return true;
}
async function validateRpIdHash() {
    let rpIdHash = this.authnrData.get("rpIdHash");
    if (typeof Buffer !== "undefined" && rpIdHash instanceof Buffer) {
        rpIdHash = new Uint8Array(rpIdHash).buffer;
    }
    if (!(rpIdHash instanceof ArrayBuffer)) {
        throw new Error("couldn't coerce clientData rpIdHash to ArrayBuffer");
    }
    let domain = this.expectations.has("rpId") ? this.expectations.get("rpId") : mod2.getHostname(this.expectations.get("origin"));
    let createdHash = new Uint8Array(await mod2.hashDigest(domain)).buffer;
    if (rpIdHash.byteLength !== createdHash.byteLength) {
        throw new Error("authnrData rpIdHash length mismatch");
    }
    rpIdHash = new Uint8Array(rpIdHash);
    createdHash = new Uint8Array(createdHash);
    for(let i142 = 0; i142 < rpIdHash.byteLength; i142++){
        if (rpIdHash[i142] !== createdHash[i142]) {
            throw new TypeError("authnrData rpIdHash mismatch");
        }
    }
    this.audit.journal.add("rpIdHash");
    return true;
}
async function validateFlags() {
    let expectedFlags = this.expectations.get("flags");
    let flags = this.authnrData.get("flags");
    for (let expFlag of expectedFlags){
        if (expFlag === "UP-or-UV") {
            if (flags.has("UV")) {
                if (flags.has("UP")) {
                    continue;
                } else {
                    throw new Error("expected User Presence (UP) flag to be set if User Verification (UV) is set");
                }
            } else if (flags.has("UP")) {
                continue;
            } else {
                throw new Error("expected User Presence (UP) or User Verification (UV) flag to be set and neither was");
            }
        }
        if (expFlag === "UV") {
            if (flags.has("UV")) {
                if (flags.has("UP")) {
                    continue;
                } else {
                    throw new Error("expected User Presence (UP) flag to be set if User Verification (UV) is set");
                }
            } else {
                throw new Error(`expected flag was not set: ${expFlag}`);
            }
        }
        if (!flags.has(expFlag)) {
            throw new Error(`expected flag was not set: ${expFlag}`);
        }
    }
    this.audit.journal.add("flags");
    return true;
}
async function validateInitialCounter() {
    let counter = this.authnrData.get("counter");
    if (typeof counter !== "number") {
        throw new Error("authnrData counter wasn't a number");
    }
    this.audit.journal.add("counter");
    return true;
}
async function validateAaguid() {
    let aaguid = this.authnrData.get("aaguid");
    if (!(aaguid instanceof ArrayBuffer)) {
        throw new Error("authnrData AAGUID is not ArrayBuffer");
    }
    if (aaguid.byteLength !== 16) {
        throw new Error("authnrData AAGUID was wrong length");
    }
    this.audit.journal.add("aaguid");
    return true;
}
async function validateCredId() {
    let credId = this.authnrData.get("credId");
    let credIdLen = this.authnrData.get("credIdLen");
    if (!(credId instanceof ArrayBuffer)) {
        throw new Error("authnrData credId should be ArrayBuffer");
    }
    if (typeof credIdLen !== "number") {
        throw new Error("authnrData credIdLen should be number, got " + typeof credIdLen);
    }
    if (credId.byteLength !== credIdLen) {
        throw new Error("authnrData credId was wrong length");
    }
    this.audit.journal.add("credId");
    this.audit.journal.add("credIdLen");
    return true;
}
async function validatePublicKey() {
    let cbor = this.authnrData.get("credentialPublicKeyCose");
    let jwk = this.authnrData.get("credentialPublicKeyJwk");
    let pem = this.authnrData.get("credentialPublicKeyPem");
    if (!(cbor instanceof ArrayBuffer)) {
        throw new Error("authnrData credentialPublicKeyCose isn't of type ArrayBuffer");
    }
    this.audit.journal.add("credentialPublicKeyCose");
    if (typeof jwk !== "object") {
        throw new Error("authnrData credentialPublicKeyJwk isn't of type Object");
    }
    if (typeof jwk.kty !== "string") {
        throw new Error("authnrData credentialPublicKeyJwk.kty isn't of type String");
    }
    if (typeof jwk.alg !== "string") {
        throw new Error("authnrData credentialPublicKeyJwk.alg isn't of type String");
    }
    switch(jwk.kty){
        case "EC":
            if (typeof jwk.crv !== "string") {
                throw new Error("authnrData credentialPublicKeyJwk.crv isn't of type String");
            }
            break;
        case "RSA":
            if (typeof jwk.n !== "string") {
                throw new Error("authnrData credentialPublicKeyJwk.n isn't of type String");
            }
            if (typeof jwk.e !== "string") {
                throw new Error("authnrData credentialPublicKeyJwk.e isn't of type String");
            }
            break;
        default:
            throw new Error("authnrData unknown JWK key type: " + jwk.kty);
    }
    this.audit.journal.add("credentialPublicKeyJwk");
    if (typeof pem !== "string") {
        throw new Error("authnrData credentialPublicKeyPem isn't of type String");
    }
    if (!isPem(pem)) {
        throw new Error("authnrData credentialPublicKeyPem was malformatted");
    }
    this.audit.journal.add("credentialPublicKeyPem");
    return true;
}
function validateExtensions() {
    const extensions7 = this.authnrData.get("webAuthnExtensions");
    const shouldHaveExtensions = this.authnrData.get("flags").has("ED");
    if (shouldHaveExtensions) {
        if (Array.isArray(extensions7) && extensions7.every((item)=>typeof item === "object"
        )) {
            this.audit.journal.add("webAuthnExtensions");
        } else {
            throw new Error("webAuthnExtensions aren't valid");
        }
    } else {
        if (extensions7 !== undefined) {
            throw new Error("unexpected webAuthnExtensions found");
        }
    }
    return true;
}
async function validateUserHandle() {
    let userHandle = this.authnrData.get("userHandle");
    if (userHandle === undefined || userHandle === null || userHandle === "") {
        this.audit.journal.add("userHandle");
        return true;
    }
    userHandle = coerceToBase64Url(userHandle, "userHandle");
    let expUserHandle = this.expectations.get("userHandle");
    if (typeof userHandle === "string" && userHandle === expUserHandle) {
        this.audit.journal.add("userHandle");
        return true;
    }
    throw new Error("unable to validate userHandle");
}
async function validateCounter() {
    let prevCounter = this.expectations.get("prevCounter");
    let counter = this.authnrData.get("counter");
    let counterSupported = !(counter === 0 && prevCounter === 0);
    if (counter <= prevCounter && counterSupported) {
        throw new Error("counter rollback detected");
    }
    this.audit.journal.add("counter");
    this.audit.info.set("counter-supported", "" + counterSupported);
    return true;
}
async function validateAudit() {
    let journal = this.audit.journal;
    let clientData = this.clientData;
    let authnrData = this.authnrData;
    for (let kv of clientData){
        let val = kv[0];
        if (!journal.has(val)) {
            throw new Error(`internal audit failed: ${val} was not validated`);
        }
    }
    for (let kv1 of authnrData){
        let val = kv1[0];
        if (!journal.has(val)) {
            throw new Error(`internal audit failed: ${val} was not validated`);
        }
    }
    if (journal.size !== clientData.size + authnrData.size) {
        throw new Error(`internal audit failed: ${journal.size} fields checked; expected ${clientData.size + authnrData.size}`);
    }
    if (!this.audit.validExpectations) {
        throw new Error("internal audit failed: expectations not validated");
    }
    if (!this.audit.validRequest) {
        throw new Error("internal audit failed: request not validated");
    }
    this.audit.complete = true;
    return true;
}
function attach(o105) {
    let mixins = {
        validateExpectations,
        validateCreateRequest,
        validateRawClientDataJson,
        validateOrigin,
        validateId,
        validateCreateType,
        validateGetType,
        validateChallenge,
        validateTokenBinding,
        validateTransports,
        validateRawAuthnrData,
        validateAttestation,
        validateAssertionSignature,
        validateRpIdHash,
        validateAaguid,
        validateCredId,
        validatePublicKey,
        validateExtensions,
        validateFlags,
        validateUserHandle,
        validateCounter,
        validateInitialCounter,
        validateAssertionResponse,
        audit: {
            validExpectations: false,
            validRequest: false,
            complete: false,
            journal: new Set(),
            warning: new Map(),
            info: new Map()
        },
        validateAudit
    };
    for (let key of Object.keys(mixins)){
        o105[key] = mixins[key];
    }
}
export { attach as attach };
export { MdsCollection as MdsCollection, MdsEntry as MdsEntry };
export { androidSafetyNetAttestation as androidSafetyNetAttestation, fidoU2fAttestation as fidoU2fAttestation, noneAttestation as noneAttestation, packedAttestation as packedAttestation, tpmAttestation as tpmAttestation, appleAttestation as appleAttestation };
