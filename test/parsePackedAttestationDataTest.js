// Testing lib
import * as chai from "chai";
import * as chaiAsPromised from "chai-as-promised";

// Helpers
import * as h from "./helpers/fido2-helpers.js";

import { arrayBufferEquals } from "../lib/main.js";

// Test subject
import { parseAttestationObject, parseAuthnrAttestationResponse } from "../lib/main.js";

chai.use(chaiAsPromised.default);
const { assert } = chai;

const parser = {
	parseAuthnrAttestationResponse,
	parseAttestationObject,
};

const runs = [
	{ functionName: "parseAuthnrAttestationResponse" },
	{ functionName: "parseAttestationObject" },
];

runs.forEach(function(run) {
	describe(run.functionName + " (packed)", async function() {
		it("parser is object", function() {
			assert.equal(typeof parser, "object");
		});

		it("has correct helper", function() {
			assert.isObject(h.lib.makeCredentialAttestationPackedResponse);
		});

		const ret = run.functionName == "parseAuthnrAttestationResponse"
			? await parser[run.functionName](
				h.lib.makeCredentialAttestationPackedResponse,
			)
			: await parser[run.functionName](
				h.lib.makeCredentialAttestationPackedResponse.response
					.attestationObject,
			);
		it("parser returns Map with correct size", function() {
			assert.instanceOf(ret, Map);
			assert.strictEqual(ret.size, 16);
		});

		it("is 'packed' fmt", function() {
			assert.strictEqual(ret.get("fmt"), "packed");
		});

		it("has correct alg", function() {
			const alg = ret.get("alg");
			assert.isObject(alg);
			assert.strictEqual(Object.keys(alg).length, 2);
			assert.strictEqual(alg.algName, "ECDSA_w_SHA256");
			assert.strictEqual(alg.hashAlg, "SHA-256");
		});

		it("has x5c", function() {
			const x5c = ret.get("x5c");
			assert.isArray(x5c);
			assert.strictEqual(x5c.length, 2);
			assert.instanceOf(x5c[0], ArrayBuffer);
			assert.strictEqual(x5c[0].byteLength, 511);
			assert.instanceOf(x5c[1], ArrayBuffer);
			assert.strictEqual(x5c[1].byteLength, 476);

			const expectedX5c0 = new Uint8Array([
				0x30, 0x82, 0x01, 0xFB, 0x30, 0x82, 0x01, 0xA0, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x15,
				0x9F, 0x7B, 0xC2, 0xCD, 0x89, 0x18, 0xF1, 0x28, 0x6B, 0x93, 0x48, 0xFA, 0x9F, 0x33, 0xE1, 0x30,
				0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x30, 0x4B, 0x31, 0x0B, 0x30,
				0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03,
				0x55, 0x04, 0x0A, 0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x54, 0x65, 0x63,
				0x68, 0x6E, 0x6F, 0x6C, 0x6F, 0x67, 0x69, 0x65, 0x73, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03, 0x55,
				0x04, 0x03, 0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x46, 0x49, 0x44, 0x4F,
				0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x30, 0x20, 0x17, 0x0D, 0x31, 0x38, 0x30, 0x34,
				0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x18, 0x0F, 0x32, 0x30, 0x33, 0x38, 0x30,
				0x34, 0x30, 0x39, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x49, 0x31, 0x0B, 0x30, 0x09,
				0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03, 0x55,
				0x04, 0x0A, 0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x54, 0x65, 0x63, 0x68,
				0x6E, 0x6F, 0x6C, 0x6F, 0x67, 0x69, 0x65, 0x73, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04,
				0x03, 0x0C, 0x12, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x46, 0x49, 0x44, 0x4F, 0x32,
				0x20, 0x43, 0x41, 0x2D, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D,
				0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,
				0x8E, 0x7E, 0x60, 0x09, 0xEC, 0xC1, 0x16, 0x65, 0xCC, 0xA0, 0xFA, 0xC3, 0xE9, 0x6F, 0xE5, 0x08,
				0x3B, 0x95, 0x6D, 0x57, 0x25, 0x11, 0xEB, 0x5B, 0x32, 0xF4, 0xD6, 0x67, 0x39, 0x57, 0xDD, 0x67,
				0xD8, 0xB6, 0x17, 0x35, 0x1D, 0xFF, 0x4B, 0xB9, 0x80, 0xE6, 0x0B, 0xA9, 0xB9, 0x33, 0xB9, 0x9A,
				0x34, 0x30, 0xF3, 0x17, 0xEA, 0x21, 0x13, 0x07, 0x56, 0xBD, 0x6A, 0x07, 0x74, 0xDE, 0x75, 0x8F,
				0xA3, 0x66, 0x30, 0x64, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x4D,
				0x3B, 0xD8, 0xC4, 0x67, 0x15, 0x1B, 0xBB, 0x13, 0xE8, 0xF3, 0x84, 0xD8, 0x30, 0x4F, 0x9D, 0x69,
				0x15, 0xC0, 0x83, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
				0xD1, 0xA1, 0x98, 0x4D, 0x81, 0x7F, 0xC3, 0xB9, 0x6B, 0xF6, 0x07, 0x67, 0xBD, 0x50, 0x12, 0xFE,
				0x90, 0x45, 0xF1, 0x54, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x08,
				0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01,
				0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE,
				0x3D, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xFB, 0x7F, 0xA3, 0xD2,
				0x40, 0x47, 0xA1, 0x11, 0x50, 0xC2, 0x78, 0x56, 0x6D, 0x21, 0xCC, 0x90, 0x16, 0x98, 0xEC, 0xA1,
				0x7F, 0x4F, 0x3B, 0x48, 0x34, 0x53, 0x79, 0xCA, 0x60, 0xE4, 0xC2, 0x65, 0x02, 0x21, 0x00, 0xEB,
				0x0A, 0x43, 0xC1, 0x88, 0xC1, 0xD7, 0xBD, 0x88, 0x3E, 0x91, 0x24, 0x60, 0x56, 0xC2, 0xB0, 0xB9,
				0x5B, 0x58, 0xA2, 0x74, 0x6F, 0x0B, 0x9F, 0x3C, 0xA9, 0x1C, 0x29, 0x2D, 0x2B, 0x59, 0xEC,
			]).buffer;

			const expectedX5c1 = new Uint8Array([
				0x30, 0x82, 0x01, 0xD8, 0x30, 0x82, 0x01, 0x7E, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x15,
				0x9F, 0x7B, 0xC2, 0xCD, 0x89, 0x18, 0xF1, 0x28, 0x6B, 0x93, 0x48, 0xFA, 0x9F, 0x33, 0xD6, 0x30,
				0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x30, 0x4B, 0x31, 0x0B, 0x30,
				0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03,
				0x55, 0x04, 0x0A, 0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x54, 0x65, 0x63,
				0x68, 0x6E, 0x6F, 0x6C, 0x6F, 0x67, 0x69, 0x65, 0x73, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03, 0x55,
				0x04, 0x03, 0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x46, 0x49, 0x44, 0x4F,
				0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x30, 0x20, 0x17, 0x0D, 0x31, 0x38, 0x30, 0x34,
				0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x18, 0x0F, 0x32, 0x30, 0x34, 0x38, 0x30,
				0x33, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x4B, 0x31, 0x0B, 0x30, 0x09,
				0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03, 0x55,
				0x04, 0x0A, 0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x54, 0x65, 0x63, 0x68,
				0x6E, 0x6F, 0x6C, 0x6F, 0x67, 0x69, 0x65, 0x73, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03, 0x55, 0x04,
				0x03, 0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x46, 0x49, 0x44, 0x4F, 0x20,
				0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48,
				0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 0x42,
				0x00, 0x04, 0x9D, 0xF0, 0x0A, 0x6E, 0x3B, 0xCC, 0x5F, 0x51, 0x32, 0xD5, 0xBE, 0xA4, 0xF9, 0x64,
				0x10, 0x74, 0xD5, 0x4C, 0xB7, 0xD2, 0x60, 0x19, 0x6C, 0x89, 0xDC, 0xFB, 0xCC, 0xE0, 0x14, 0x8A,
				0xE5, 0x7A, 0x93, 0x7E, 0x8F, 0xBE, 0xD2, 0x80, 0x23, 0xFF, 0x8B, 0x67, 0xC3, 0x22, 0x0B, 0xD0,
				0x71, 0x41, 0x47, 0xD4, 0xAD, 0xFA, 0x4B, 0x63, 0xA9, 0x25, 0xC3, 0x7E, 0x38, 0x97, 0x02, 0xEA,
				0xEC, 0xF3, 0xA3, 0x42, 0x30, 0x40, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04,
				0x14, 0xD1, 0xA1, 0x98, 0x4D, 0x81, 0x7F, 0xC3, 0xB9, 0x6B, 0xF6, 0x07, 0x67, 0xBD, 0x50, 0x12,
				0xFE, 0x90, 0x45, 0xF1, 0x54, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04,
				0x05, 0x30, 0x03, 0x01, 0x01, 0xFF, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF,
				0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04,
				0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xB7, 0xB1, 0x3D, 0x65, 0x06, 0x31,
				0x9E, 0x17, 0xEC, 0x4A, 0x4E, 0x9C, 0xD5, 0xD4, 0xA6, 0x14, 0xD9, 0xC9, 0x1A, 0x85, 0x37, 0x78,
				0x98, 0xB2, 0x72, 0xCD, 0x83, 0xA1, 0x68, 0x7B, 0xF8, 0x8A, 0x02, 0x20, 0x0F, 0x62, 0x58, 0x91,
				0xFC, 0x87, 0xE5, 0x0E, 0x01, 0xA6, 0x8F, 0x2B, 0xAE, 0x83, 0xB4, 0x22, 0xDE, 0xE8, 0x62, 0x31,
				0x76, 0x92, 0x0C, 0xBF, 0x79, 0x26, 0x77, 0x53, 0xD1, 0xA5, 0x6A, 0xAC,
			]).buffer;

			assert.isTrue(arrayBufferEquals(x5c[0], expectedX5c0), "x5c[0] has correct value");
			assert.isTrue(arrayBufferEquals(x5c[1], expectedX5c1), "x5c[1] has correct value");
		});

		it("has attCert", function() {
			const attCert = ret.get("attCert");
			assert.instanceOf(attCert, ArrayBuffer);

			const expectedAttCert = new Uint8Array([
				0x30, 0x82, 0x02, 0x41, 0x30, 0x82, 0x01, 0xE8, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x15,
				0x9F, 0x7B, 0xC2, 0xCD, 0x89, 0x18, 0xF1, 0x28, 0x6B, 0x93, 0x48, 0xFA, 0x9F, 0x33, 0xE2, 0x30,
				0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x30, 0x49, 0x31, 0x0B, 0x30,
				0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03,
				0x55, 0x04, 0x0A, 0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x54, 0x65, 0x63,
				0x68, 0x6E, 0x6F, 0x6C, 0x6F, 0x67, 0x69, 0x65, 0x73, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55,
				0x04, 0x03, 0x0C, 0x12, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x46, 0x49, 0x44, 0x4F,
				0x32, 0x20, 0x43, 0x41, 0x2D, 0x31, 0x30, 0x20, 0x17, 0x0D, 0x31, 0x38, 0x30, 0x34, 0x31, 0x31,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x18, 0x0F, 0x32, 0x30, 0x33, 0x33, 0x30, 0x34, 0x31,
				0x30, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x6F, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03,
				0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03, 0x55, 0x04, 0x0A,
				0x0C, 0x14, 0x46, 0x65, 0x69, 0x74, 0x69, 0x61, 0x6E, 0x20, 0x54, 0x65, 0x63, 0x68, 0x6E, 0x6F,
				0x6C, 0x6F, 0x67, 0x69, 0x65, 0x73, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C,
				0x19, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6F, 0x72, 0x20, 0x41,
				0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x31, 0x1D, 0x30, 0x1B, 0x06, 0x03,
				0x55, 0x04, 0x03, 0x0C, 0x14, 0x46, 0x54, 0x20, 0x42, 0x69, 0x6F, 0x50, 0x61, 0x73, 0x73, 0x20,
				0x46, 0x49, 0x44, 0x4F, 0x32, 0x20, 0x55, 0x53, 0x42, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A,
				0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07,
				0x03, 0x42, 0x00, 0x04, 0x80, 0x06, 0x75, 0x5C, 0x59, 0xFB, 0xC9, 0x49, 0xB0, 0x15, 0xA8, 0xD2,
				0x0A, 0x92, 0x58, 0x97, 0xBE, 0x83, 0x0A, 0xB2, 0xEF, 0xE8, 0x2C, 0xF8, 0x8F, 0xED, 0xA0, 0x90,
				0x96, 0x63, 0xE5, 0x48, 0xC7, 0x1F, 0x11, 0x27, 0x05, 0x33, 0xB4, 0x24, 0x46, 0x78, 0x9D, 0x4C,
				0xFE, 0xE1, 0x01, 0x43, 0x8A, 0x94, 0xE9, 0x83, 0x3D, 0xE2, 0x00, 0x2C, 0x2F, 0x2A, 0x1D, 0xD7,
				0x6F, 0x4D, 0xDB, 0x5D, 0xA3, 0x81, 0x89, 0x30, 0x81, 0x86, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D,
				0x0E, 0x04, 0x16, 0x04, 0x14, 0x7A, 0x54, 0x82, 0x42, 0x80, 0x62, 0xD8, 0x8A, 0xE7, 0xAF, 0x84,
				0x98, 0x25, 0xC4, 0xAF, 0x91, 0xA9, 0x34, 0x98, 0xF2, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23,
				0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x4D, 0x3B, 0xD8, 0xC4, 0x67, 0x15, 0x1B, 0xBB, 0x13, 0xE8,
				0xF3, 0x84, 0xD8, 0x30, 0x4F, 0x9D, 0x69, 0x15, 0xC0, 0x83, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D,
				0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x13, 0x06, 0x0B, 0x2B, 0x06, 0x01, 0x04,
				0x01, 0x82, 0xE5, 0x1C, 0x02, 0x01, 0x01, 0x04, 0x04, 0x03, 0x02, 0x05, 0x20, 0x30, 0x21, 0x06,
				0x0B, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0xE5, 0x1C, 0x01, 0x01, 0x04, 0x04, 0x12, 0x04, 0x10,
				0x42, 0x38, 0x32, 0x45, 0x44, 0x37, 0x33, 0x43, 0x38, 0x46, 0x42, 0x34, 0x45, 0x35, 0x41, 0x32,
				0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30,
				0x44, 0x02, 0x20, 0x24, 0x4B, 0x45, 0xA3, 0xBE, 0x88, 0xDC, 0xB7, 0xE0, 0x25, 0xA2, 0xC6, 0xA3,
				0x12, 0xCF, 0xFB, 0x86, 0xED, 0xBC, 0x27, 0x4A, 0x22, 0xC1, 0x05, 0x2E, 0x31, 0x48, 0x51, 0xF0,
				0xE8, 0xB0, 0x87, 0x02, 0x20, 0x34, 0x1A, 0xBF, 0x4E, 0x1C, 0x24, 0xF2, 0x0B, 0x1A, 0x73, 0xD5,
				0x3D, 0xAC, 0xC2, 0xA9, 0xF9, 0x15, 0xB4, 0x1B, 0xB2, 0x3A, 0x6B, 0x01, 0x6F, 0x1F, 0xEF, 0xF8,
				0xE0, 0xE7, 0xF8, 0x90, 0xC0,
			]).buffer;

			assert.isTrue(arrayBufferEquals(attCert, expectedAttCert), "attCert has correct value");
		});

		it("has sig", function() {
			const sig = ret.get("sig");
			assert.instanceOf(sig, ArrayBuffer);

			const expectedSig = new Uint8Array([
				0x30, 0x46, 0x02, 0x21, 0x00, 0x8B, 0x0A, 0xD1, 0x6A, 0xFD, 0xB6, 0x6B, 0x9D, 0xFB, 0x06, 0x88,
				0x62, 0x84, 0x30, 0xDB, 0x45, 0x16, 0x8B, 0xB0, 0xCB, 0xFE, 0x00, 0xF1, 0xFC, 0xF3, 0x46, 0xDC,
				0xF0, 0x79, 0xED, 0xE1, 0xCB, 0x02, 0x21, 0x00, 0xB5, 0x1C, 0x9D, 0xFB, 0x82, 0x48, 0xDA, 0x90,
				0x95, 0x5F, 0xE7, 0x43, 0xCF, 0x89, 0x9B, 0x1D, 0xCF, 0xC0, 0x92, 0xF0, 0xB7, 0x77, 0xFE, 0x2A,
				0x9C, 0x10, 0x5A, 0xDE, 0x7D, 0x88, 0xFE, 0x15,
			]).buffer;

			assert.isTrue(arrayBufferEquals(sig, expectedSig), "sig has correct value");
		});

		it("has correct raw authnrData", function() {
			const rawAuthnrData = ret.get("rawAuthnrData");
			assert.instanceOf(rawAuthnrData, ArrayBuffer);
			assert.strictEqual(rawAuthnrData.byteLength, 228);

			const expectedRawAuthnrData = new Uint8Array([
				0x95, 0x69, 0x08, 0x8F, 0x1E, 0xCE, 0xE3, 0x23, 0x29, 0x54, 0x03, 0x5D, 0xBD, 0x10, 0xD7, 0xCA,
				0xE3, 0x91, 0x30, 0x5A, 0x27, 0x51, 0xB5, 0x59, 0xBB, 0x8F, 0xD7, 0xCB, 0xB2, 0x29, 0xBD, 0xD4,
				0x41, 0x00, 0x00, 0x00, 0x01, 0x42, 0x38, 0x32, 0x45, 0x44, 0x37, 0x33, 0x43, 0x38, 0x46, 0x42,
				0x34, 0x45, 0x35, 0x41, 0x32, 0x00, 0x60, 0xB0, 0xBD, 0xFD, 0x00, 0xFC, 0x93, 0x9A, 0x2B, 0x2B,
				0x8E, 0x1D, 0x75, 0xBE, 0x08, 0x5A, 0xA8, 0xD7, 0xEE, 0xAE, 0xE2, 0xD0, 0x98, 0x27, 0xD1, 0xD1,
				0xCD, 0x6B, 0xC8, 0xAB, 0x5A, 0x43, 0xCD, 0x63, 0x90, 0x48, 0x4D, 0x6B, 0x9B, 0xBD, 0xC4, 0xB4,
				0xE7, 0x92, 0x26, 0xEF, 0x5C, 0x2F, 0x58, 0xA7, 0x30, 0x4B, 0x17, 0x05, 0x84, 0x67, 0x79, 0x3D,
				0x09, 0x1F, 0xEC, 0xC7, 0x39, 0xBF, 0xA5, 0x66, 0x1B, 0x04, 0xEB, 0x4A, 0xC5, 0xE6, 0x6E, 0xF7,
				0x3D, 0x86, 0x4F, 0xC6, 0xFA, 0x41, 0x6E, 0x22, 0x42, 0xF4, 0x65, 0xCA, 0xE9, 0x82, 0x4F, 0x7A,
				0x04, 0x37, 0x1F, 0xFC, 0xE3, 0x4D, 0x6B, 0xA5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21, 0x58,
				0x20, 0x59, 0x1D, 0xC1, 0xE1, 0x04, 0xEA, 0x65, 0xA2, 0x20, 0x06, 0x0F, 0x0E, 0x82, 0xB3, 0xDF,
				0xCF, 0x35, 0x02, 0x86, 0xB8, 0xB2, 0x7F, 0x33, 0x91, 0x39, 0xB4, 0x68, 0xF2, 0x8A, 0x60, 0x1B,
				0xDD, 0x22, 0x58, 0x20, 0xB6, 0x51, 0xB7, 0xDA, 0x5C, 0x6B, 0x6A, 0x78, 0x3C, 0x33, 0x4B, 0x68,
				0x8D, 0x82, 0x77, 0xE8, 0x22, 0xF5, 0x54, 0xCB, 0xF6, 0xA5, 0x94, 0xB3, 0xA9, 0x1F, 0xCD, 0x7E,
				0xF1, 0xBC, 0xF1, 0xB0,
			]).buffer;
			assert.isTrue(arrayBufferEquals(rawAuthnrData, expectedRawAuthnrData), "rawAuthnrData has correct value");
		});

		it("has correct rpIdHash", function() {
			const rpIdHash = ret.get("rpIdHash");
			assert.instanceOf(rpIdHash, ArrayBuffer);
			assert.strictEqual(rpIdHash.byteLength, 32);

			let expectedRpIdHash = new Uint8Array([
				0x95, 0x69, 0x08, 0x8F, 0x1E, 0xCE, 0xE3, 0x23, 0x29, 0x54, 0x03, 0x5D, 0xBD, 0x10, 0xD7, 0xCA,
				0xE3, 0x91, 0x30, 0x5A, 0x27, 0x51, 0xB5, 0x59, 0xBB, 0x8F, 0xD7, 0xCB, 0xB2, 0x29, 0xBD, 0xD4,
			]).buffer;
			assert.isTrue(arrayBufferEquals(rpIdHash, expectedRpIdHash), "rpIdHash has correct value");
		});

		it("has correct flags", function() {
			const flags = ret.get("flags");
			assert.instanceOf(flags, Set);
			assert.strictEqual(flags.size, 2);
			assert.isTrue(flags.has("AT"));
			assert.isTrue(flags.has("UP"));
		});

		it("has correct counter", function() {
			const counter = ret.get("counter");
			assert.isNumber(counter);
			assert.strictEqual(counter, 1);
		});

		it("has correct aaguid", function() {
			const aaguid = ret.get("aaguid");
			assert.instanceOf(aaguid, ArrayBuffer);
			assert.strictEqual(aaguid.byteLength, 16);

			let expectedAaguid = new Uint8Array([
				0x42, 0x38, 0x32, 0x45, 0x44, 0x37, 0x33, 0x43, 0x38, 0x46, 0x42, 0x34, 0x45, 0x35, 0x41, 0x32,
			]).buffer;
			assert.isTrue(arrayBufferEquals(aaguid, expectedAaguid), "aaguid has correct value");
		});

		it("has correct credIdLen", function() {
			const credIdLen = ret.get("credIdLen");
			assert.isNumber(credIdLen);
			assert.strictEqual(credIdLen, 96);
		});

		it("has correct credentialPublicKeyCose", function() {
			const credentialPublicKeyCose = ret.get("credentialPublicKeyCose");
			assert.instanceOf(credentialPublicKeyCose, ArrayBuffer);
			assert.strictEqual(credentialPublicKeyCose.byteLength, 77);

			let expectedCredentialPublicKeyCose = new Uint8Array([
				0xA5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21, 0x58, 0x20, 0x59, 0x1D, 0xC1, 0xE1, 0x04, 0xEA,
				0x65, 0xA2, 0x20, 0x06, 0x0F, 0x0E, 0x82, 0xB3, 0xDF, 0xCF, 0x35, 0x02, 0x86, 0xB8, 0xB2, 0x7F,
				0x33, 0x91, 0x39, 0xB4, 0x68, 0xF2, 0x8A, 0x60, 0x1B, 0xDD, 0x22, 0x58, 0x20, 0xB6, 0x51, 0xB7,
				0xDA, 0x5C, 0x6B, 0x6A, 0x78, 0x3C, 0x33, 0x4B, 0x68, 0x8D, 0x82, 0x77, 0xE8, 0x22, 0xF5, 0x54,
				0xCB, 0xF6, 0xA5, 0x94, 0xB3, 0xA9, 0x1F, 0xCD, 0x7E, 0xF1, 0xBC, 0xF1, 0xB0,
			]).buffer;
			assert.isTrue(arrayBufferEquals(credentialPublicKeyCose, expectedCredentialPublicKeyCose), "credentialPublicKeyCose has correct value");
		});
	});
});
